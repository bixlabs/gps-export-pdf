/*
 * Crypto-JS v2.5.3
 * http://code.google.com/p/crypto-js/
 * (c) 2009-2012 by Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */

(typeof Crypto=="undefined"||!Crypto.util)&&function(){var e=window.Crypto={},k=e.util={rotl:function(b,c){return b<<c|b>>>32-c},rotr:function(b,c){return b<<32-c|b>>>c},endian:function(b){if(b.constructor==Number)return k.rotl(b,8)&16711935|k.rotl(b,24)&4278255360;for(var c=0;c<b.length;c++)b[c]=k.endian(b[c]);return b},randomBytes:function(b){for(var c=[];b>0;b--)c.push(Math.floor(Math.random()*256));return c},bytesToWords:function(b){for(var c=[],a=0,i=0;a<b.length;a++,i+=8)c[i>>>5]|=(b[a]&255)<<
24-i%32;return c},wordsToBytes:function(b){for(var c=[],a=0;a<b.length*32;a+=8)c.push(b[a>>>5]>>>24-a%32&255);return c},bytesToHex:function(b){for(var c=[],a=0;a<b.length;a++)c.push((b[a]>>>4).toString(16)),c.push((b[a]&15).toString(16));return c.join("")},hexToBytes:function(b){for(var c=[],a=0;a<b.length;a+=2)c.push(parseInt(b.substr(a,2),16));return c},bytesToBase64:function(b){if(typeof btoa=="function")return btoa(d.bytesToString(b));for(var c=[],a=0;a<b.length;a+=3)for(var i=b[a]<<16|b[a+1]<<
8|b[a+2],l=0;l<4;l++)a*8+l*6<=b.length*8?c.push("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(i>>>6*(3-l)&63)):c.push("=");return c.join("")},base64ToBytes:function(b){if(typeof atob=="function")return d.stringToBytes(atob(b));for(var b=b.replace(/[^A-Z0-9+\/]/ig,""),c=[],a=0,i=0;a<b.length;i=++a%4)i!=0&&c.push(("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(b.charAt(a-1))&Math.pow(2,-2*i+8)-1)<<i*2|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(b.charAt(a))>>>
6-i*2);return c}},e=e.charenc={};e.UTF8={stringToBytes:function(b){return d.stringToBytes(unescape(encodeURIComponent(b)))},bytesToString:function(b){return decodeURIComponent(escape(d.bytesToString(b)))}};var d=e.Binary={stringToBytes:function(b){for(var c=[],a=0;a<b.length;a++)c.push(b.charCodeAt(a)&255);return c},bytesToString:function(b){for(var c=[],a=0;a<b.length;a++)c.push(String.fromCharCode(b[a]));return c.join("")}}}();
(function(){var e=Crypto,k=e.util,d=e.charenc,b=d.UTF8,c=d.Binary,a=e.SHA1=function(b,l){var f=k.wordsToBytes(a._sha1(b));return l&&l.asBytes?f:l&&l.asString?c.bytesToString(f):k.bytesToHex(f)};a._sha1=function(a){a.constructor==String&&(a=b.stringToBytes(a));var c=k.bytesToWords(a),f=a.length*8,a=[],e=1732584193,g=-271733879,d=-1732584194,j=271733878,m=-1009589776;c[f>>5]|=128<<24-f%32;c[(f+64>>>9<<4)+15]=f;for(f=0;f<c.length;f+=16){for(var p=e,q=g,r=d,s=j,t=m,h=0;h<80;h++){if(h<16)a[h]=c[f+h];else{var n=
a[h-3]^a[h-8]^a[h-14]^a[h-16];a[h]=n<<1|n>>>31}n=(e<<5|e>>>27)+m+(a[h]>>>0)+(h<20?(g&d|~g&j)+1518500249:h<40?(g^d^j)+1859775393:h<60?(g&d|g&j|d&j)-1894007588:(g^d^j)-899497514);m=j;j=d;d=g<<30|g>>>2;g=e;e=n}e+=p;g+=q;d+=r;j+=s;m+=t}return[e,g,d,j,m]};a._blocksize=16;a._digestsize=20})();
(function(){var e=Crypto,k=e.util,d=e.charenc,b=d.UTF8,c=d.Binary;e.HMAC=function(a,e,d,f){e.constructor==String&&(e=b.stringToBytes(e));d.constructor==String&&(d=b.stringToBytes(d));d.length>a._blocksize*4&&(d=a(d,{asBytes:!0}));for(var o=d.slice(0),d=d.slice(0),g=0;g<a._blocksize*4;g++)o[g]^=92,d[g]^=54;a=a(o.concat(a(d.concat(e),{asBytes:!0})),{asBytes:!0});return f&&f.asBytes?a:f&&f.asString?c.bytesToString(a):k.bytesToHex(a)}})();
var JSON;if(!JSON){JSON={};}
(function(){"use strict";function f(n){return n<10?'0'+n:n;}
if(typeof Date.prototype.toJSON!=='function'){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+'-'+
f(this.getUTCMonth()+1)+'-'+
f(this.getUTCDate())+'T'+
f(this.getUTCHours())+':'+
f(this.getUTCMinutes())+':'+
f(this.getUTCSeconds())+'Z':null;};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};}
var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:'\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4);})+'"':'"'+string+'"';}
function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==='object'&&typeof value.toJSON==='function'){value=value.toJSON(key);}
if(typeof rep==='function'){value=rep.call(holder,key,value);}
switch(typeof value){case'string':return quote(value);case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null';}
gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==='[object Array]'){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||'null';}
v=partial.length===0?'[]':gap?'[\n'+gap+partial.join(',\n'+gap)+'\n'+mind+']':'['+partial.join(',')+']';gap=mind;return v;}
if(rep&&typeof rep==='object'){length=rep.length;for(i=0;i<length;i+=1){if(typeof rep[i]==='string'){k=rep[i];v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}else{for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}
v=partial.length===0?'{}':gap?'{\n'+gap+partial.join(',\n'+gap)+'\n'+mind+'}':'{'+partial.join(',')+'}';gap=mind;return v;}}
if(typeof JSON.stringify!=='function'){JSON.stringify=function(value,replacer,space){var i;gap='';indent='';if(typeof space==='number'){for(i=0;i<space;i+=1){indent+=' ';}}else if(typeof space==='string'){indent=space;}
rep=replacer;if(replacer&&typeof replacer!=='function'&&(typeof replacer!=='object'||typeof replacer.length!=='number')){throw new Error('JSON.stringify');}
return str('',{'':value});};}
if(typeof JSON.parse!=='function'){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value==='object'){for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}}
return reviver.call(holder,key,value);}
text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return'\\u'+
('0000'+a.charCodeAt(0).toString(16)).slice(-4);});}
if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,''))){j=eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j;}
throw new SyntaxError('JSON.parse');};}}());
// Platform: ios

// commit f50d20a87431c79a54572263729461883f611a53

// File generated at :: Tue Feb 26 2013 14:26:19 GMT-0800 (PST)

/*
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
*/


;(function() {

// file: lib/scripts/require.js

var require,
    define;

(function () {
    var modules = {};
    // Stack of moduleIds currently being built.
    var requireStack = [];
    // Map of module ID -> index into requireStack of modules currently being built.
    var inProgressModules = {};

    function build(module) {
        var factory = module.factory;
        module.exports = {};
        delete module.factory;
        factory(require, module.exports, module);
        return module.exports;
    }

    require = function (id) {
        if (!modules[id]) {
            throw "module " + id + " not found";
        } else if (id in inProgressModules) {
            var cycle = requireStack.slice(inProgressModules[id]).join('->') + '->' + id;
            throw "Cycle in require graph: " + cycle;
        }
        if (modules[id].factory) {
            try {
                inProgressModules[id] = requireStack.length;
                requireStack.push(id);
                return build(modules[id]);
            } finally {
                delete inProgressModules[id];
                requireStack.pop();
            }
        }
        return modules[id].exports;
    };

    define = function (id, factory) {
        if (modules[id]) {
            throw "module " + id + " already defined";
        }

        modules[id] = {
            id: id,
            factory: factory
        };
    };

    define.remove = function (id) {
        delete modules[id];
    };

    define.moduleMap = modules;
})();

//Export for use in node
if (typeof module === "object" && typeof require === "function") {
    module.exports.require = require;
    module.exports.define = define;
}

// file: lib/cordova.js
define("cordova", function(require, exports, module) {


var channel = require('cordova/channel');

/**
 * Listen for DOMContentLoaded and notify our channel subscribers.
 */
document.addEventListener('DOMContentLoaded', function() {
    channel.onDOMContentLoaded.fire();
}, false);
if (document.readyState == 'complete' || document.readyState == 'interactive') {
    channel.onDOMContentLoaded.fire();
}

/**
 * Intercept calls to addEventListener + removeEventListener and handle deviceready,
 * resume, and pause events.
 */
var m_document_addEventListener = document.addEventListener;
var m_document_removeEventListener = document.removeEventListener;
var m_window_addEventListener = window.addEventListener;
var m_window_removeEventListener = window.removeEventListener;

/**
 * Houses custom event handlers to intercept on document + window event listeners.
 */
var documentEventHandlers = {},
    windowEventHandlers = {};

document.addEventListener = function(evt, handler, capture) {
    var e = evt.toLowerCase();
    if (typeof documentEventHandlers[e] != 'undefined') {
        documentEventHandlers[e].subscribe(handler);
    } else {
        m_document_addEventListener.call(document, evt, handler, capture);
    }
};

window.addEventListener = function(evt, handler, capture) {
    var e = evt.toLowerCase();
    if (typeof windowEventHandlers[e] != 'undefined') {
        windowEventHandlers[e].subscribe(handler);
    } else {
        m_window_addEventListener.call(window, evt, handler, capture);
    }
};

document.removeEventListener = function(evt, handler, capture) {
    var e = evt.toLowerCase();
    // If unsubscribing from an event that is handled by a plugin
    if (typeof documentEventHandlers[e] != "undefined") {
        documentEventHandlers[e].unsubscribe(handler);
    } else {
        m_document_removeEventListener.call(document, evt, handler, capture);
    }
};

window.removeEventListener = function(evt, handler, capture) {
    var e = evt.toLowerCase();
    // If unsubscribing from an event that is handled by a plugin
    if (typeof windowEventHandlers[e] != "undefined") {
        windowEventHandlers[e].unsubscribe(handler);
    } else {
        m_window_removeEventListener.call(window, evt, handler, capture);
    }
};

function createEvent(type, data) {
    var event = document.createEvent('Events');
    event.initEvent(type, false, false);
    if (data) {
        for (var i in data) {
            if (data.hasOwnProperty(i)) {
                event[i] = data[i];
            }
        }
    }
    return event;
}

if(typeof window.console === "undefined") {
    window.console = {
        log:function(){}
    };
}

var cordova = {
    define:define,
    require:require,
    /**
     * Methods to add/remove your own addEventListener hijacking on document + window.
     */
    addWindowEventHandler:function(event) {
        return (windowEventHandlers[event] = channel.create(event));
    },
    addStickyDocumentEventHandler:function(event) {
        return (documentEventHandlers[event] = channel.createSticky(event));
    },
    addDocumentEventHandler:function(event) {
        return (documentEventHandlers[event] = channel.create(event));
    },
    removeWindowEventHandler:function(event) {
        delete windowEventHandlers[event];
    },
    removeDocumentEventHandler:function(event) {
        delete documentEventHandlers[event];
    },
    /**
     * Retrieve original event handlers that were replaced by Cordova
     *
     * @return object
     */
    getOriginalHandlers: function() {
        return {'document': {'addEventListener': m_document_addEventListener, 'removeEventListener': m_document_removeEventListener},
        'window': {'addEventListener': m_window_addEventListener, 'removeEventListener': m_window_removeEventListener}};
    },
    /**
     * Method to fire event from native code
     * bNoDetach is required for events which cause an exception which needs to be caught in native code
     */
    fireDocumentEvent: function(type, data, bNoDetach) {
        var evt = createEvent(type, data);
        if (typeof documentEventHandlers[type] != 'undefined') {
            if( bNoDetach ) {
              documentEventHandlers[type].fire(evt);
            }
            else {
              setTimeout(function() {
                  documentEventHandlers[type].fire(evt);
              }, 0);
            }
        } else {
            document.dispatchEvent(evt);
        }
    },
    fireWindowEvent: function(type, data) {
        var evt = createEvent(type,data);
        if (typeof windowEventHandlers[type] != 'undefined') {
            setTimeout(function() {
                windowEventHandlers[type].fire(evt);
            }, 0);
        } else {
            window.dispatchEvent(evt);
        }
    },

    /**
     * Plugin callback mechanism.
     */
    // Randomize the starting callbackId to avoid collisions after refreshing or navigating.
    // This way, it's very unlikely that any new callback would get the same callbackId as an old callback.
    callbackId: Math.floor(Math.random() * 2000000000),
    callbacks:  {},
    callbackStatus: {
        NO_RESULT: 0,
        OK: 1,
        CLASS_NOT_FOUND_EXCEPTION: 2,
        ILLEGAL_ACCESS_EXCEPTION: 3,
        INSTANTIATION_EXCEPTION: 4,
        MALFORMED_URL_EXCEPTION: 5,
        IO_EXCEPTION: 6,
        INVALID_ACTION: 7,
        JSON_EXCEPTION: 8,
        ERROR: 9
    },

    /**
     * Called by native code when returning successful result from an action.
     */
    callbackSuccess: function(callbackId, args) {
        try {
            cordova.callbackFromNative(callbackId, true, args.status, args.message, args.keepCallback);
        } catch (e) {
            console.log("Error in error callback: " + callbackId + " = "+e);
        }
    },

    /**
     * Called by native code when returning error result from an action.
     */
    callbackError: function(callbackId, args) {
        // TODO: Deprecate callbackSuccess and callbackError in favour of callbackFromNative.
        // Derive success from status.
        try {
            cordova.callbackFromNative(callbackId, false, args.status, args.message, args.keepCallback);
        } catch (e) {
            console.log("Error in error callback: " + callbackId + " = "+e);
        }
    },

    /**
     * Called by native code when returning the result from an action.
     */
    callbackFromNative: function(callbackId, success, status, message, keepCallback) {
        var callback = cordova.callbacks[callbackId];
        if (callback) {
            if (success && status == cordova.callbackStatus.OK) {
                callback.success && callback.success(message);
            } else if (!success) {
                callback.fail && callback.fail(message);
            }

            // Clear callback if not expecting any more results
            if (!keepCallback) {
                delete cordova.callbacks[callbackId];
            }
        }
    },
    addConstructor: function(func) {
        channel.onCordovaReady.subscribe(function() {
            try {
                func();
            } catch(e) {
                console.log("Failed to run constructor: " + e);
            }
        });
    }
};

// Register pause, resume and deviceready channels as events on document.
channel.onPause = cordova.addDocumentEventHandler('pause');
channel.onResume = cordova.addDocumentEventHandler('resume');
channel.onDeviceReady = cordova.addStickyDocumentEventHandler('deviceready');

module.exports = cordova;

});

// file: lib/common/argscheck.js
define("cordova/argscheck", function(require, exports, module) {

var exec = require('cordova/exec');
var utils = require('cordova/utils');

var moduleExports = module.exports;

var typeMap = {
    'A': 'Array',
    'D': 'Date',
    'N': 'Number',
    'S': 'String',
    'F': 'Function',
    'O': 'Object'
};

function extractParamName(callee, argIndex) {
  return (/.*?\((.*?)\)/).exec(callee)[1].split(', ')[argIndex];
}

function checkArgs(spec, functionName, args, opt_callee) {
    if (!moduleExports.enableChecks) {
        return;
    }
    var errMsg = null;
    var typeName;
    for (var i = 0; i < spec.length; ++i) {
        var c = spec.charAt(i),
            cUpper = c.toUpperCase(),
            arg = args[i];
        // Asterix means allow anything.
        if (c == '*') {
            continue;
        }
        typeName = utils.typeName(arg);
        if ((arg === null || arg === undefined) && c == cUpper) {
            continue;
        }
        if (typeName != typeMap[cUpper]) {
            errMsg = 'Expected ' + typeMap[cUpper];
            break;
        }
    }
    if (errMsg) {
        errMsg += ', but got ' + typeName + '.';
        errMsg = 'Wrong type for parameter "' + extractParamName(opt_callee || args.callee, i) + '" of ' + functionName + ': ' + errMsg;
        // Don't log when running jake test.
        if (typeof jasmine == 'undefined') {
            console.error(errMsg);
        }
        throw TypeError(errMsg);
    }
}

function getValue(value, defaultValue) {
    return value === undefined ? defaultValue : value;
}

moduleExports.checkArgs = checkArgs;
moduleExports.getValue = getValue;
moduleExports.enableChecks = true;


});

// file: lib/common/builder.js
define("cordova/builder", function(require, exports, module) {

var utils = require('cordova/utils');

function each(objects, func, context) {
    for (var prop in objects) {
        if (objects.hasOwnProperty(prop)) {
            func.apply(context, [objects[prop], prop]);
        }
    }
}

function clobber(obj, key, value) {
    exports.replaceHookForTesting(obj, key);
    obj[key] = value;
    // Getters can only be overridden by getters.
    if (obj[key] !== value) {
        utils.defineGetter(obj, key, function() {
            return value;
        });
    }
}

function assignOrWrapInDeprecateGetter(obj, key, value, message) {
    if (message) {
        utils.defineGetter(obj, key, function() {
            console.log(message);
            delete obj[key];
            clobber(obj, key, value);
            return value;
        });
    } else {
        clobber(obj, key, value);
    }
}

function include(parent, objects, clobber, merge) {
    each(objects, function (obj, key) {
        try {
          var result = obj.path ? require(obj.path) : {};

          if (clobber) {
              // Clobber if it doesn't exist.
              if (typeof parent[key] === 'undefined') {
                  assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);
              } else if (typeof obj.path !== 'undefined') {
                  // If merging, merge properties onto parent, otherwise, clobber.
                  if (merge) {
                      recursiveMerge(parent[key], result);
                  } else {
                      assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);
                  }
              }
              result = parent[key];
          } else {
            // Overwrite if not currently defined.
            if (typeof parent[key] == 'undefined') {
              assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);
            } else {
              // Set result to what already exists, so we can build children into it if they exist.
              result = parent[key];
            }
          }

          if (obj.children) {
            include(result, obj.children, clobber, merge);
          }
        } catch(e) {
          utils.alert('Exception building cordova JS globals: ' + e + ' for key "' + key + '"');
        }
    });
}

/**
 * Merge properties from one object onto another recursively.  Properties from
 * the src object will overwrite existing target property.
 *
 * @param target Object to merge properties into.
 * @param src Object to merge properties from.
 */
function recursiveMerge(target, src) {
    for (var prop in src) {
        if (src.hasOwnProperty(prop)) {
            if (target.prototype && target.prototype.constructor === target) {
                // If the target object is a constructor override off prototype.
                clobber(target.prototype, prop, src[prop]);
            } else {
                if (typeof src[prop] === 'object' && typeof target[prop] === 'object') {
                    recursiveMerge(target[prop], src[prop]);
                } else {
                    clobber(target, prop, src[prop]);
                }
            }
        }
    }
}

exports.buildIntoButDoNotClobber = function(objects, target) {
    include(target, objects, false, false);
};
exports.buildIntoAndClobber = function(objects, target) {
    include(target, objects, true, false);
};
exports.buildIntoAndMerge = function(objects, target) {
    include(target, objects, true, true);
};
exports.recursiveMerge = recursiveMerge;
exports.assignOrWrapInDeprecateGetter = assignOrWrapInDeprecateGetter;
exports.replaceHookForTesting = function() {};

});

// file: lib/common/channel.js
define("cordova/channel", function(require, exports, module) {

var utils = require('cordova/utils'),
    nextGuid = 1;

/**
 * Custom pub-sub "channel" that can have functions subscribed to it
 * This object is used to define and control firing of events for
 * cordova initialization, as well as for custom events thereafter.
 *
 * The order of events during page load and Cordova startup is as follows:
 *
 * onDOMContentLoaded*         Internal event that is received when the web page is loaded and parsed.
 * onNativeReady*              Internal event that indicates the Cordova native side is ready.
 * onCordovaReady*             Internal event fired when all Cordova JavaScript objects have been created.
 * onCordovaInfoReady*         Internal event fired when device properties are available.
 * onCordovaConnectionReady*   Internal event fired when the connection property has been set.
 * onDeviceReady*              User event fired to indicate that Cordova is ready
 * onResume                    User event fired to indicate a start/resume lifecycle event
 * onPause                     User event fired to indicate a pause lifecycle event
 * onDestroy*                  Internal event fired when app is being destroyed (User should use window.onunload event, not this one).
 *
 * The events marked with an * are sticky. Once they have fired, they will stay in the fired state.
 * All listeners that subscribe after the event is fired will be executed right away.
 *
 * The only Cordova events that user code should register for are:
 *      deviceready           Cordova native code is initialized and Cordova APIs can be called from JavaScript
 *      pause                 App has moved to background
 *      resume                App has returned to foreground
 *
 * Listeners can be registered as:
 *      document.addEventListener("deviceready", myDeviceReadyListener, false);
 *      document.addEventListener("resume", myResumeListener, false);
 *      document.addEventListener("pause", myPauseListener, false);
 *
 * The DOM lifecycle events should be used for saving and restoring state
 *      window.onload
 *      window.onunload
 *
 */

/**
 * Channel
 * @constructor
 * @param type  String the channel name
 */
var Channel = function(type, sticky) {
    this.type = type;
    // Map of guid -> function.
    this.handlers = {};
    // 0 = Non-sticky, 1 = Sticky non-fired, 2 = Sticky fired.
    this.state = sticky ? 1 : 0;
    // Used in sticky mode to remember args passed to fire().
    this.fireArgs = null;
    // Used by onHasSubscribersChange to know if there are any listeners.
    this.numHandlers = 0;
    // Function that is called when the first listener is subscribed, or when
    // the last listener is unsubscribed.
    this.onHasSubscribersChange = null;
},
    channel = {
        /**
         * Calls the provided function only after all of the channels specified
         * have been fired. All channels must be sticky channels.
         */
        join: function(h, c) {
            var len = c.length,
                i = len,
                f = function() {
                    if (!(--i)) h();
                };
            for (var j=0; j<len; j++) {
                if (c[j].state === 0) {
                    throw Error('Can only use join with sticky channels.');
                }
                c[j].subscribe(f);
            }
            if (!len) h();
        },
        create: function(type) {
            return channel[type] = new Channel(type, false);
        },
        createSticky: function(type) {
            return channel[type] = new Channel(type, true);
        },

        /**
         * cordova Channels that must fire before "deviceready" is fired.
         */
        deviceReadyChannelsArray: [],
        deviceReadyChannelsMap: {},

        /**
         * Indicate that a feature needs to be initialized before it is ready to be used.
         * This holds up Cordova's "deviceready" event until the feature has been initialized
         * and Cordova.initComplete(feature) is called.
         *
         * @param feature {String}     The unique feature name
         */
        waitForInitialization: function(feature) {
            if (feature) {
                var c = channel[feature] || this.createSticky(feature);
                this.deviceReadyChannelsMap[feature] = c;
                this.deviceReadyChannelsArray.push(c);
            }
        },

        /**
         * Indicate that initialization code has completed and the feature is ready to be used.
         *
         * @param feature {String}     The unique feature name
         */
        initializationComplete: function(feature) {
            var c = this.deviceReadyChannelsMap[feature];
            if (c) {
                c.fire();
            }
        }
    };

function forceFunction(f) {
    if (typeof f != 'function') throw "Function required as first argument!";
}

/**
 * Subscribes the given function to the channel. Any time that
 * Channel.fire is called so too will the function.
 * Optionally specify an execution context for the function
 * and a guid that can be used to stop subscribing to the channel.
 * Returns the guid.
 */
Channel.prototype.subscribe = function(f, c) {
    // need a function to call
    forceFunction(f);
    if (this.state == 2) {
        f.apply(c || this, this.fireArgs);
        return;
    }

    var func = f,
        guid = f.observer_guid;
    if (typeof c == "object") { func = utils.close(c, f); }

    if (!guid) {
        // first time any channel has seen this subscriber
        guid = '' + nextGuid++;
    }
    func.observer_guid = guid;
    f.observer_guid = guid;

    // Don't add the same handler more than once.
    if (!this.handlers[guid]) {
        this.handlers[guid] = func;
        this.numHandlers++;
        if (this.numHandlers == 1) {
            this.onHasSubscribersChange && this.onHasSubscribersChange();
        }
    }
};

/**
 * Unsubscribes the function with the given guid from the channel.
 */
Channel.prototype.unsubscribe = function(f) {
    // need a function to unsubscribe
    forceFunction(f);

    var guid = f.observer_guid,
        handler = this.handlers[guid];
    if (handler) {
        delete this.handlers[guid];
        this.numHandlers--;
        if (this.numHandlers === 0) {
            this.onHasSubscribersChange && this.onHasSubscribersChange();
        }
    }
};

/**
 * Calls all functions subscribed to this channel.
 */
Channel.prototype.fire = function(e) {
    var fail = false,
        fireArgs = Array.prototype.slice.call(arguments);
    // Apply stickiness.
    if (this.state == 1) {
        this.state = 2;
        this.fireArgs = fireArgs;
    }
    if (this.numHandlers) {
        // Copy the values first so that it is safe to modify it from within
        // callbacks.
        var toCall = [];
        for (var item in this.handlers) {
            toCall.push(this.handlers[item]);
        }
        for (var i = 0; i < toCall.length; ++i) {
            toCall[i].apply(this, fireArgs);
        }
        if (this.state == 2 && this.numHandlers) {
            this.numHandlers = 0;
            this.handlers = {};
            this.onHasSubscribersChange && this.onHasSubscribersChange();
        }
    }
};


// defining them here so they are ready super fast!
// DOM event that is received when the web page is loaded and parsed.
channel.createSticky('onDOMContentLoaded');

// Event to indicate the Cordova native side is ready.
channel.createSticky('onNativeReady');

// Event to indicate that all Cordova JavaScript objects have been created
// and it's time to run plugin constructors.
channel.createSticky('onCordovaReady');

// Event to indicate that device properties are available
channel.createSticky('onCordovaInfoReady');

// Event to indicate that the connection property has been set.
channel.createSticky('onCordovaConnectionReady');

// Event to indicate that Cordova is ready
channel.createSticky('onDeviceReady');

// Event to indicate a resume lifecycle event
channel.create('onResume');

// Event to indicate a pause lifecycle event
channel.create('onPause');

// Event to indicate a destroy lifecycle event
channel.createSticky('onDestroy');

// Channels that must fire before "deviceready" is fired.
channel.waitForInitialization('onCordovaReady');
channel.waitForInitialization('onCordovaConnectionReady');

module.exports = channel;

});

// file: lib/common/commandProxy.js
define("cordova/commandProxy", function(require, exports, module) {


// internal map of proxy function
var CommandProxyMap = {};

module.exports = {

    // example: cordova.commandProxy.add("Accelerometer",{getCurrentAcceleration: function(successCallback, errorCallback, options) {...},...);
    add:function(id,proxyObj) {
        console.log("adding proxy for " + id);
        CommandProxyMap[id] = proxyObj;
        return proxyObj;
    },

    // cordova.commandProxy.remove("Accelerometer");
    remove:function(id) {
        var proxy = CommandProxyMap[id];
        delete CommandProxyMap[id];
        CommandProxyMap[id] = null;
        return proxy;
    },

    get:function(service,action) {
        return ( CommandProxyMap[service] ? CommandProxyMap[service][action] : null );
    }
};
});

// file: lib/ios/exec.js
define("cordova/exec", function(require, exports, module) {

/**
 * Creates a gap bridge iframe used to notify the native code about queued
 * commands.
 *
 * @private
 */
var cordova = require('cordova'),
    channel = require('cordova/channel'),
    utils = require('cordova/utils'),
    jsToNativeModes = {
        IFRAME_NAV: 0,
        XHR_NO_PAYLOAD: 1,
        XHR_WITH_PAYLOAD: 2,
        XHR_OPTIONAL_PAYLOAD: 3
    },
    bridgeMode,
    execIframe,
    execXhr,
    requestCount = 0,
    vcHeaderValue = null,
    commandQueue = [], // Contains pending JS->Native messages.
    isInContextOfEvalJs = 0;

function createExecIframe() {
    var iframe = document.createElement("iframe");
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    return iframe;
}

function shouldBundleCommandJson() {
    if (bridgeMode == jsToNativeModes.XHR_WITH_PAYLOAD) {
        return true;
    }
    if (bridgeMode == jsToNativeModes.XHR_OPTIONAL_PAYLOAD) {
        var payloadLength = 0;
        for (var i = 0; i < commandQueue.length; ++i) {
            payloadLength += commandQueue[i].length;
        }
        // The value here was determined using the benchmark within CordovaLibApp on an iPad 3.
        return payloadLength < 4500;
    }
    return false;
}

function massageArgsJsToNative(args) {
    if (!args || utils.typeName(args) != 'Array') {
       return args;
    }
    var encodeArrayBufferAs8bitString = function(ab) {
        return String.fromCharCode.apply(null, new Uint8Array(ab));
    };
    var encodeArrayBufferAsBase64 = function(ab) {
        return window.btoa(encodeArrayBufferAs8bitString(ab));
    };
    args.forEach(function(arg, i) {
        if (utils.typeName(arg) == 'ArrayBuffer') {
            args[i] = {
                'CDVType': 'ArrayBuffer',
                'data': encodeArrayBufferAsBase64(arg)
            };
        }
    });
    return args;
}

function massagePayloadNativeToJs(payload) {
    if (payload && payload.hasOwnProperty('CDVType') && payload.CDVType == 'ArrayBuffer') {
        var stringToArrayBuffer = function(str) {
            var ret = new Uint8Array(str.length);
            for (var i = 0; i < str.length; i++) {
                ret[i] = str.charCodeAt(i);
            }
            return ret.buffer;
        };
        var base64ToArrayBuffer = function(b64) {
            return stringToArrayBuffer(atob(b64));
        };
        payload = base64ToArrayBuffer(payload.data);
    }
    return payload;
}

function iOSExec() {
    // XHR mode does not work on iOS 4.2, so default to IFRAME_NAV for such devices.
    // XHR mode's main advantage is working around a bug in -webkit-scroll, which
    // doesn't exist in 4.X devices anyways.
    if (bridgeMode === undefined) {
        bridgeMode = navigator.userAgent.indexOf(' 4_') == -1 ? jsToNativeModes.XHR_NO_PAYLOAD : jsToNativeModes.IFRAME_NAV;
    }

    var successCallback, failCallback, service, action, actionArgs, splitCommand;
    var callbackId = null;
    if (typeof arguments[0] !== "string") {
        // FORMAT ONE
        successCallback = arguments[0];
        failCallback = arguments[1];
        service = arguments[2];
        action = arguments[3];
        actionArgs = arguments[4];

        // Since we need to maintain backwards compatibility, we have to pass
        // an invalid callbackId even if no callback was provided since plugins
        // will be expecting it. The Cordova.exec() implementation allocates
        // an invalid callbackId and passes it even if no callbacks were given.
        callbackId = 'INVALID';
    } else {
        // FORMAT TWO
        splitCommand = arguments[0].split(".");
        action = splitCommand.pop();
        service = splitCommand.join(".");
        actionArgs = Array.prototype.splice.call(arguments, 1);
    }

    // Register the callbacks and add the callbackId to the positional
    // arguments if given.
    if (successCallback || failCallback) {
        callbackId = service + cordova.callbackId++;
        cordova.callbacks[callbackId] =
            {success:successCallback, fail:failCallback};
    }

    actionArgs = massageArgsJsToNative(actionArgs);

    var command = [callbackId, service, action, actionArgs];

    // Stringify and queue the command. We stringify to command now to
    // effectively clone the command arguments in case they are mutated before
    // the command is executed.
    commandQueue.push(JSON.stringify(command));

    // If we're in the context of a stringByEvaluatingJavaScriptFromString call,
    // then the queue will be flushed when it returns; no need for a poke.
    // Also, if there is already a command in the queue, then we've already
    // poked the native side, so there is no reason to do so again.
    if (!isInContextOfEvalJs && commandQueue.length == 1) {
        if (bridgeMode != jsToNativeModes.IFRAME_NAV) {
            // This prevents sending an XHR when there is already one being sent.
            // This should happen only in rare circumstances (refer to unit tests).
            if (execXhr && execXhr.readyState != 4) {
                execXhr = null;
            }
            // Re-using the XHR improves exec() performance by about 10%.
            execXhr = execXhr || new XMLHttpRequest();
            // Changing this to a GET will make the XHR reach the URIProtocol on 4.2.
            // For some reason it still doesn't work though...
            // Add a timestamp to the query param to prevent caching.
            execXhr.open('HEAD', "/!gap_exec?" + (+new Date()), true);
            if (!vcHeaderValue) {
                vcHeaderValue = /.*\((.*)\)/.exec(navigator.userAgent)[1];
            }
            execXhr.setRequestHeader('vc', vcHeaderValue);
            execXhr.setRequestHeader('rc', ++requestCount);
            if (shouldBundleCommandJson()) {
                execXhr.setRequestHeader('cmds', iOSExec.nativeFetchMessages());
            }
            execXhr.send(null);
        } else {
            execIframe = execIframe || createExecIframe();
            execIframe.src = "gap://ready";
        }
    }
}

iOSExec.jsToNativeModes = jsToNativeModes;

iOSExec.setJsToNativeBridgeMode = function(mode) {
    // Remove the iFrame since it may be no longer required, and its existence
    // can trigger browser bugs.
    // https://issues.apache.org/jira/browse/CB-593
    if (execIframe) {
        execIframe.parentNode.removeChild(execIframe);
        execIframe = null;
    }
    bridgeMode = mode;
};

iOSExec.nativeFetchMessages = function() {
    // Each entry in commandQueue is a JSON string already.
    if (!commandQueue.length) {
        return '';
    }
    var json = '[' + commandQueue.join(',') + ']';
    commandQueue.length = 0;
    return json;
};

iOSExec.nativeCallback = function(callbackId, status, payload, keepCallback) {
    return iOSExec.nativeEvalAndFetch(function() {
        var success = status === 0 || status === 1;
        payload = massagePayloadNativeToJs(payload);
        cordova.callbackFromNative(callbackId, success, status, payload, keepCallback);
    });
};

iOSExec.nativeEvalAndFetch = function(func) {
    // This shouldn't be nested, but better to be safe.
    isInContextOfEvalJs++;
    try {
        func();
        return iOSExec.nativeFetchMessages();
    } finally {
        isInContextOfEvalJs--;
    }
};

module.exports = iOSExec;

});

// file: lib/common/modulemapper.js
define("cordova/modulemapper", function(require, exports, module) {

var builder = require('cordova/builder'),
    moduleMap = define.moduleMap,
    symbolList,
    deprecationMap;

exports.reset = function() {
    symbolList = [];
    deprecationMap = {};
};

function addEntry(strategy, moduleName, symbolPath, opt_deprecationMessage) {
    if (!(moduleName in moduleMap)) {
        throw new Error('Module ' + moduleName + ' does not exist.');
    }
    symbolList.push(strategy, moduleName, symbolPath);
    if (opt_deprecationMessage) {
        deprecationMap[symbolPath] = opt_deprecationMessage;
    }
}

// Note: Android 2.3 does have Function.bind().
exports.clobbers = function(moduleName, symbolPath, opt_deprecationMessage) {
    addEntry('c', moduleName, symbolPath, opt_deprecationMessage);
};

exports.merges = function(moduleName, symbolPath, opt_deprecationMessage) {
    addEntry('m', moduleName, symbolPath, opt_deprecationMessage);
};

exports.defaults = function(moduleName, symbolPath, opt_deprecationMessage) {
    addEntry('d', moduleName, symbolPath, opt_deprecationMessage);
};

function prepareNamespace(symbolPath, context) {
    if (!symbolPath) {
        return context;
    }
    var parts = symbolPath.split('.');
    var cur = context;
    for (var i = 0, part; part = parts[i]; ++i) {
        cur = cur[part] = cur[part] || {};
    }
    return cur;
}

exports.mapModules = function(context) {
    var origSymbols = {};
    context.CDV_origSymbols = origSymbols;
    for (var i = 0, len = symbolList.length; i < len; i += 3) {
        var strategy = symbolList[i];
        var moduleName = symbolList[i + 1];
        var symbolPath = symbolList[i + 2];
        var lastDot = symbolPath.lastIndexOf('.');
        var namespace = symbolPath.substr(0, lastDot);
        var lastName = symbolPath.substr(lastDot + 1);

        var module = require(moduleName);
        var deprecationMsg = symbolPath in deprecationMap ? 'Access made to deprecated symbol: ' + symbolPath + '. ' + deprecationMsg : null;
        var parentObj = prepareNamespace(namespace, context);
        var target = parentObj[lastName];

        if (strategy == 'm' && target) {
            builder.recursiveMerge(target, module);
        } else if ((strategy == 'd' && !target) || (strategy != 'd')) {
            if (!(symbolPath in origSymbols)) {
                origSymbols[symbolPath] = target;
            }
            builder.assignOrWrapInDeprecateGetter(parentObj, lastName, module, deprecationMsg);
        }
    }
};

exports.getOriginalSymbol = function(context, symbolPath) {
    var origSymbols = context.CDV_origSymbols;
    if (origSymbols && (symbolPath in origSymbols)) {
        return origSymbols[symbolPath];
    }
    var parts = symbolPath.split('.');
    var obj = context;
    for (var i = 0; i < parts.length; ++i) {
        obj = obj && obj[parts[i]];
    }
    return obj;
};

exports.loadMatchingModules = function(matchingRegExp) {
    for (var k in moduleMap) {
        if (matchingRegExp.exec(k)) {
            require(k);
        }
    }
};

exports.reset();


});

// file: lib/ios/platform.js
define("cordova/platform", function(require, exports, module) {

module.exports = {
    id: "ios",
    initialize:function() {
        var modulemapper = require('cordova/modulemapper');

        modulemapper.loadMatchingModules(/cordova.*\/plugininit$/);

        modulemapper.loadMatchingModules(/cordova.*\/symbols$/);
        modulemapper.mapModules(window);
    }
};


});

// file: lib/common/plugin/Acceleration.js
define("cordova/plugin/Acceleration", function(require, exports, module) {

var Acceleration = function(x, y, z, timestamp) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.timestamp = timestamp || (new Date()).getTime();
};

module.exports = Acceleration;

});

// file: lib/common/plugin/Camera.js
define("cordova/plugin/Camera", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    exec = require('cordova/exec'),
    Camera = require('cordova/plugin/CameraConstants'),
    CameraPopoverHandle = require('cordova/plugin/CameraPopoverHandle');

var cameraExport = {};

// Tack on the Camera Constants to the base camera plugin.
for (var key in Camera) {
    cameraExport[key] = Camera[key];
}

/**
 * Gets a picture from source defined by "options.sourceType", and returns the
 * image as defined by the "options.destinationType" option.

 * The defaults are sourceType=CAMERA and destinationType=FILE_URI.
 *
 * @param {Function} successCallback
 * @param {Function} errorCallback
 * @param {Object} options
 */
cameraExport.getPicture = function(successCallback, errorCallback, options) {
    argscheck.checkArgs('fFO', 'Camera.getPicture', arguments);
    options = options || {};
    var getValue = argscheck.getValue;

    var quality = getValue(options.quality, 50);
    var destinationType = getValue(options.destinationType, Camera.DestinationType.FILE_URI);
    var sourceType = getValue(options.sourceType, Camera.PictureSourceType.CAMERA);
    var targetWidth = getValue(options.targetWidth, -1);
    var targetHeight = getValue(options.targetHeight, -1);
    var encodingType = getValue(options.encodingType, Camera.EncodingType.JPEG);
    var mediaType = getValue(options.mediaType, Camera.MediaType.PICTURE);
    var allowEdit = !!options.allowEdit;
    var correctOrientation = !!options.correctOrientation;
    var saveToPhotoAlbum = !!options.saveToPhotoAlbum;
    var popoverOptions = getValue(options.popoverOptions, null);

    var args = [quality, destinationType, sourceType, targetWidth, targetHeight, encodingType,
                mediaType, allowEdit, correctOrientation, saveToPhotoAlbum, popoverOptions];

    exec(successCallback, errorCallback, "Camera", "takePicture", args);
    return new CameraPopoverHandle();
};

cameraExport.cleanup = function(successCallback, errorCallback) {
    exec(successCallback, errorCallback, "Camera", "cleanup", []);
};

module.exports = cameraExport;

});

// file: lib/common/plugin/CameraConstants.js
define("cordova/plugin/CameraConstants", function(require, exports, module) {

module.exports = {
  DestinationType:{
    DATA_URL: 0,         // Return base64 encoded string
    FILE_URI: 1,         // Return file uri (content://media/external/images/media/2 for Android)
    NATIVE_URI: 2        // Return native uri (eg. asset-library://... for iOS)
  },
  EncodingType:{
    JPEG: 0,             // Return JPEG encoded image
    PNG: 1               // Return PNG encoded image
  },
  MediaType:{
    PICTURE: 0,          // allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType
    VIDEO: 1,            // allow selection of video only, ONLY RETURNS URL
    ALLMEDIA : 2         // allow selection from all media types
  },
  PictureSourceType:{
    PHOTOLIBRARY : 0,    // Choose image from picture library (same as SAVEDPHOTOALBUM for Android)
    CAMERA : 1,          // Take picture from camera
    SAVEDPHOTOALBUM : 2  // Choose image from picture library (same as PHOTOLIBRARY for Android)
  },
  PopoverArrowDirection:{
      ARROW_UP : 1,        // matches iOS UIPopoverArrowDirection constants to specify arrow location on popover
      ARROW_DOWN : 2,
      ARROW_LEFT : 4,
      ARROW_RIGHT : 8,
      ARROW_ANY : 15
  }
};

});

// file: lib/ios/plugin/CameraPopoverHandle.js
define("cordova/plugin/CameraPopoverHandle", function(require, exports, module) {

var exec = require('cordova/exec');

/**
 * A handle to an image picker popover.
 */
var CameraPopoverHandle = function() {
    this.setPosition = function(popoverOptions) {
        var args = [ popoverOptions ];
        exec(null, null, "Camera", "repositionPopover", args);
    };
};

module.exports = CameraPopoverHandle;

});

// file: lib/common/plugin/CameraPopoverOptions.js
define("cordova/plugin/CameraPopoverOptions", function(require, exports, module) {

var Camera = require('cordova/plugin/CameraConstants');

/**
 * Encapsulates options for iOS Popover image picker
 */
var CameraPopoverOptions = function(x,y,width,height,arrowDir){
    // information of rectangle that popover should be anchored to
    this.x = x || 0;
    this.y = y || 32;
    this.width = width || 320;
    this.height = height || 480;
    // The direction of the popover arrow
    this.arrowDir = arrowDir || Camera.PopoverArrowDirection.ARROW_ANY;
};

module.exports = CameraPopoverOptions;

});

// file: lib/common/plugin/CaptureAudioOptions.js
define("cordova/plugin/CaptureAudioOptions", function(require, exports, module) {

/**
 * Encapsulates all audio capture operation configuration options.
 */
var CaptureAudioOptions = function(){
    // Upper limit of sound clips user can record. Value must be equal or greater than 1.
    this.limit = 1;
    // Maximum duration of a single sound clip in seconds.
    this.duration = 0;
    // The selected audio mode. Must match with one of the elements in supportedAudioModes array.
    this.mode = null;
};

module.exports = CaptureAudioOptions;

});

// file: lib/common/plugin/CaptureError.js
define("cordova/plugin/CaptureError", function(require, exports, module) {

/**
 * The CaptureError interface encapsulates all errors in the Capture API.
 */
var CaptureError = function(c) {
   this.code = c || null;
};

// Camera or microphone failed to capture image or sound.
CaptureError.CAPTURE_INTERNAL_ERR = 0;
// Camera application or audio capture application is currently serving other capture request.
CaptureError.CAPTURE_APPLICATION_BUSY = 1;
// Invalid use of the API (e.g. limit parameter has value less than one).
CaptureError.CAPTURE_INVALID_ARGUMENT = 2;
// User exited camera application or audio capture application before capturing anything.
CaptureError.CAPTURE_NO_MEDIA_FILES = 3;
// The requested capture operation is not supported.
CaptureError.CAPTURE_NOT_SUPPORTED = 20;

module.exports = CaptureError;

});

// file: lib/common/plugin/CaptureImageOptions.js
define("cordova/plugin/CaptureImageOptions", function(require, exports, module) {

/**
 * Encapsulates all image capture operation configuration options.
 */
var CaptureImageOptions = function(){
    // Upper limit of images user can take. Value must be equal or greater than 1.
    this.limit = 1;
    // The selected image mode. Must match with one of the elements in supportedImageModes array.
    this.mode = null;
};

module.exports = CaptureImageOptions;

});

// file: lib/common/plugin/CaptureVideoOptions.js
define("cordova/plugin/CaptureVideoOptions", function(require, exports, module) {

/**
 * Encapsulates all video capture operation configuration options.
 */
var CaptureVideoOptions = function(){
    // Upper limit of videos user can record. Value must be equal or greater than 1.
    this.limit = 1;
    // Maximum duration of a single video clip in seconds.
    this.duration = 0;
    // The selected video mode. Must match with one of the elements in supportedVideoModes array.
    this.mode = null;
};

module.exports = CaptureVideoOptions;

});

// file: lib/common/plugin/CompassError.js
define("cordova/plugin/CompassError", function(require, exports, module) {

/**
 *  CompassError.
 *  An error code assigned by an implementation when an error has occurred
 * @constructor
 */
var CompassError = function(err) {
    this.code = (err !== undefined ? err : null);
};

CompassError.COMPASS_INTERNAL_ERR = 0;
CompassError.COMPASS_NOT_SUPPORTED = 20;

module.exports = CompassError;

});

// file: lib/common/plugin/CompassHeading.js
define("cordova/plugin/CompassHeading", function(require, exports, module) {

var CompassHeading = function(magneticHeading, trueHeading, headingAccuracy, timestamp) {
  this.magneticHeading = magneticHeading;
  this.trueHeading = trueHeading;
  this.headingAccuracy = headingAccuracy;
  this.timestamp = timestamp || new Date().getTime();
};

module.exports = CompassHeading;

});

// file: lib/common/plugin/ConfigurationData.js
define("cordova/plugin/ConfigurationData", function(require, exports, module) {

/**
 * Encapsulates a set of parameters that the capture device supports.
 */
function ConfigurationData() {
    // The ASCII-encoded string in lower case representing the media type.
    this.type = null;
    // The height attribute represents height of the image or video in pixels.
    // In the case of a sound clip this attribute has value 0.
    this.height = 0;
    // The width attribute represents width of the image or video in pixels.
    // In the case of a sound clip this attribute has value 0
    this.width = 0;
}

module.exports = ConfigurationData;

});

// file: lib/common/plugin/Connection.js
define("cordova/plugin/Connection", function(require, exports, module) {

/**
 * Network status
 */
module.exports = {
        UNKNOWN: "unknown",
        ETHERNET: "ethernet",
        WIFI: "wifi",
        CELL_2G: "2g",
        CELL_3G: "3g",
        CELL_4G: "4g",
        CELL:"cellular",
        NONE: "none"
};

});

// file: lib/common/plugin/Contact.js
define("cordova/plugin/Contact", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    exec = require('cordova/exec'),
    ContactError = require('cordova/plugin/ContactError'),
    utils = require('cordova/utils');

/**
* Converts primitives into Complex Object
* Currently only used for Date fields
*/
function convertIn(contact) {
    var value = contact.birthday;
    try {
      contact.birthday = new Date(parseFloat(value));
    } catch (exception){
      console.log("Cordova Contact convertIn error: exception creating date.");
    }
    return contact;
}

/**
* Converts Complex objects into primitives
* Only conversion at present is for Dates.
**/

function convertOut(contact) {
    var value = contact.birthday;
    if (value !== null) {
        // try to make it a Date object if it is not already
        if (!utils.isDate(value)){
            try {
                value = new Date(value);
            } catch(exception){
                value = null;
            }
        }
        if (utils.isDate(value)){
            value = value.valueOf(); // convert to milliseconds
        }
        contact.birthday = value;
    }
    return contact;
}

/**
* Contains information about a single contact.
* @constructor
* @param {DOMString} id unique identifier
* @param {DOMString} displayName
* @param {ContactName} name
* @param {DOMString} nickname
* @param {Array.<ContactField>} phoneNumbers array of phone numbers
* @param {Array.<ContactField>} emails array of email addresses
* @param {Array.<ContactAddress>} addresses array of addresses
* @param {Array.<ContactField>} ims instant messaging user ids
* @param {Array.<ContactOrganization>} organizations
* @param {DOMString} birthday contact's birthday
* @param {DOMString} note user notes about contact
* @param {Array.<ContactField>} photos
* @param {Array.<ContactField>} categories
* @param {Array.<ContactField>} urls contact's web sites
*/
var Contact = function (id, displayName, name, nickname, phoneNumbers, emails, addresses,
    ims, organizations, birthday, note, photos, categories, urls) {
    this.id = id || null;
    this.rawId = null;
    this.displayName = displayName || null;
    this.name = name || null; // ContactName
    this.nickname = nickname || null;
    this.phoneNumbers = phoneNumbers || null; // ContactField[]
    this.emails = emails || null; // ContactField[]
    this.addresses = addresses || null; // ContactAddress[]
    this.ims = ims || null; // ContactField[]
    this.organizations = organizations || null; // ContactOrganization[]
    this.birthday = birthday || null;
    this.note = note || null;
    this.photos = photos || null; // ContactField[]
    this.categories = categories || null; // ContactField[]
    this.urls = urls || null; // ContactField[]
};

/**
* Removes contact from device storage.
* @param successCB success callback
* @param errorCB error callback
*/
Contact.prototype.remove = function(successCB, errorCB) {
    argscheck.checkArgs('FF', 'Contact.remove', arguments);
    var fail = errorCB && function(code) {
        errorCB(new ContactError(code));
    };
    if (this.id === null) {
        fail(ContactError.UNKNOWN_ERROR);
    }
    else {
        exec(successCB, fail, "Contacts", "remove", [this.id]);
    }
};

/**
* Creates a deep copy of this Contact.
* With the contact ID set to null.
* @return copy of this Contact
*/
Contact.prototype.clone = function() {
    var clonedContact = utils.clone(this);
    clonedContact.id = null;
    clonedContact.rawId = null;

    function nullIds(arr) {
        if (arr) {
            for (var i = 0; i < arr.length; ++i) {
                arr[i].id = null;
            }
        }
    }

    // Loop through and clear out any id's in phones, emails, etc.
    nullIds(clonedContact.phoneNumbers);
    nullIds(clonedContact.emails);
    nullIds(clonedContact.addresses);
    nullIds(clonedContact.ims);
    nullIds(clonedContact.organizations);
    nullIds(clonedContact.categories);
    nullIds(clonedContact.photos);
    nullIds(clonedContact.urls);
    return clonedContact;
};

/**
* Persists contact to device storage.
* @param successCB success callback
* @param errorCB error callback
*/
Contact.prototype.save = function(successCB, errorCB) {
    argscheck.checkArgs('FFO', 'Contact.save', arguments);
    var fail = errorCB && function(code) {
        errorCB(new ContactError(code));
    };
    var success = function(result) {
        if (result) {
            if (successCB) {
                var fullContact = require('cordova/plugin/contacts').create(result);
                successCB(convertIn(fullContact));
            }
        }
        else {
            // no Entry object returned
            fail(ContactError.UNKNOWN_ERROR);
        }
    };
    var dupContact = convertOut(utils.clone(this));
    exec(success, fail, "Contacts", "save", [dupContact]);
};


module.exports = Contact;

});

// file: lib/common/plugin/ContactAddress.js
define("cordova/plugin/ContactAddress", function(require, exports, module) {

/**
* Contact address.
* @constructor
* @param {DOMString} id unique identifier, should only be set by native code
* @param formatted // NOTE: not a W3C standard
* @param streetAddress
* @param locality
* @param region
* @param postalCode
* @param country
*/

var ContactAddress = function(pref, type, formatted, streetAddress, locality, region, postalCode, country) {
    this.id = null;
    this.pref = (typeof pref != 'undefined' ? pref : false);
    this.type = type || null;
    this.formatted = formatted || null;
    this.streetAddress = streetAddress || null;
    this.locality = locality || null;
    this.region = region || null;
    this.postalCode = postalCode || null;
    this.country = country || null;
};

module.exports = ContactAddress;

});

// file: lib/common/plugin/ContactError.js
define("cordova/plugin/ContactError", function(require, exports, module) {

/**
 *  ContactError.
 *  An error code assigned by an implementation when an error has occurred
 * @constructor
 */
var ContactError = function(err) {
    this.code = (typeof err != 'undefined' ? err : null);
};

/**
 * Error codes
 */
ContactError.UNKNOWN_ERROR = 0;
ContactError.INVALID_ARGUMENT_ERROR = 1;
ContactError.TIMEOUT_ERROR = 2;
ContactError.PENDING_OPERATION_ERROR = 3;
ContactError.IO_ERROR = 4;
ContactError.NOT_SUPPORTED_ERROR = 5;
ContactError.PERMISSION_DENIED_ERROR = 20;

module.exports = ContactError;

});

// file: lib/common/plugin/ContactField.js
define("cordova/plugin/ContactField", function(require, exports, module) {

/**
* Generic contact field.
* @constructor
* @param {DOMString} id unique identifier, should only be set by native code // NOTE: not a W3C standard
* @param type
* @param value
* @param pref
*/
var ContactField = function(type, value, pref) {
    this.id = null;
    this.type = (type && type.toString()) || null;
    this.value = (value && value.toString()) || null;
    this.pref = (typeof pref != 'undefined' ? pref : false);
};

module.exports = ContactField;

});

// file: lib/common/plugin/ContactFindOptions.js
define("cordova/plugin/ContactFindOptions", function(require, exports, module) {

/**
 * ContactFindOptions.
 * @constructor
 * @param filter used to match contacts against
 * @param multiple boolean used to determine if more than one contact should be returned
 */

var ContactFindOptions = function(filter, multiple) {
    this.filter = filter || '';
    this.multiple = (typeof multiple != 'undefined' ? multiple : false);
};

module.exports = ContactFindOptions;

});

// file: lib/common/plugin/ContactName.js
define("cordova/plugin/ContactName", function(require, exports, module) {

/**
* Contact name.
* @constructor
* @param formatted // NOTE: not part of W3C standard
* @param familyName
* @param givenName
* @param middle
* @param prefix
* @param suffix
*/
var ContactName = function(formatted, familyName, givenName, middle, prefix, suffix) {
    this.formatted = formatted || null;
    this.familyName = familyName || null;
    this.givenName = givenName || null;
    this.middleName = middle || null;
    this.honorificPrefix = prefix || null;
    this.honorificSuffix = suffix || null;
};

module.exports = ContactName;

});

// file: lib/common/plugin/ContactOrganization.js
define("cordova/plugin/ContactOrganization", function(require, exports, module) {

/**
* Contact organization.
* @constructor
* @param {DOMString} id unique identifier, should only be set by native code // NOTE: not a W3C standard
* @param name
* @param dept
* @param title
* @param startDate
* @param endDate
* @param location
* @param desc
*/

var ContactOrganization = function(pref, type, name, dept, title) {
    this.id = null;
    this.pref = (typeof pref != 'undefined' ? pref : false);
    this.type = type || null;
    this.name = name || null;
    this.department = dept || null;
    this.title = title || null;
};

module.exports = ContactOrganization;

});

// file: lib/common/plugin/Coordinates.js
define("cordova/plugin/Coordinates", function(require, exports, module) {

/**
 * This class contains position information.
 * @param {Object} lat
 * @param {Object} lng
 * @param {Object} alt
 * @param {Object} acc
 * @param {Object} head
 * @param {Object} vel
 * @param {Object} altacc
 * @constructor
 */
var Coordinates = function(lat, lng, alt, acc, head, vel, altacc) {
    /**
     * The latitude of the position.
     */
    this.latitude = lat;
    /**
     * The longitude of the position,
     */
    this.longitude = lng;
    /**
     * The accuracy of the position.
     */
    this.accuracy = acc;
    /**
     * The altitude of the position.
     */
    this.altitude = (alt !== undefined ? alt : null);
    /**
     * The direction the device is moving at the position.
     */
    this.heading = (head !== undefined ? head : null);
    /**
     * The velocity with which the device is moving at the position.
     */
    this.speed = (vel !== undefined ? vel : null);

    if (this.speed === 0 || this.speed === null) {
        this.heading = NaN;
    }

    /**
     * The altitude accuracy of the position.
     */
    this.altitudeAccuracy = (altacc !== undefined) ? altacc : null;
};

module.exports = Coordinates;

});

// file: lib/common/plugin/DirectoryEntry.js
define("cordova/plugin/DirectoryEntry", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    utils = require('cordova/utils'),
    exec = require('cordova/exec'),
    Entry = require('cordova/plugin/Entry'),
    FileError = require('cordova/plugin/FileError'),
    DirectoryReader = require('cordova/plugin/DirectoryReader');

/**
 * An interface representing a directory on the file system.
 *
 * {boolean} isFile always false (readonly)
 * {boolean} isDirectory always true (readonly)
 * {DOMString} name of the directory, excluding the path leading to it (readonly)
 * {DOMString} fullPath the absolute full path to the directory (readonly)
 * TODO: implement this!!! {FileSystem} filesystem on which the directory resides (readonly)
 */
var DirectoryEntry = function(name, fullPath) {
     DirectoryEntry.__super__.constructor.call(this, false, true, name, fullPath);
};

utils.extend(DirectoryEntry, Entry);

/**
 * Creates a new DirectoryReader to read entries from this directory
 */
DirectoryEntry.prototype.createReader = function() {
    return new DirectoryReader(this.fullPath);
};

/**
 * Creates or looks up a directory
 *
 * @param {DOMString} path either a relative or absolute path from this directory in which to look up or create a directory
 * @param {Flags} options to create or exclusively create the directory
 * @param {Function} successCallback is called with the new entry
 * @param {Function} errorCallback is called with a FileError
 */
DirectoryEntry.prototype.getDirectory = function(path, options, successCallback, errorCallback) {
    argscheck.checkArgs('sOFF', 'DirectoryEntry.getDirectory', arguments);
    var win = successCallback && function(result) {
        var entry = new DirectoryEntry(result.name, result.fullPath);
        successCallback(entry);
    };
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };
    exec(win, fail, "File", "getDirectory", [this.fullPath, path, options]);
};

/**
 * Deletes a directory and all of it's contents
 *
 * @param {Function} successCallback is called with no parameters
 * @param {Function} errorCallback is called with a FileError
 */
DirectoryEntry.prototype.removeRecursively = function(successCallback, errorCallback) {
    argscheck.checkArgs('FF', 'DirectoryEntry.removeRecursively', arguments);
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };
    exec(successCallback, fail, "File", "removeRecursively", [this.fullPath]);
};

/**
 * Creates or looks up a file
 *
 * @param {DOMString} path either a relative or absolute path from this directory in which to look up or create a file
 * @param {Flags} options to create or exclusively create the file
 * @param {Function} successCallback is called with the new entry
 * @param {Function} errorCallback is called with a FileError
 */
DirectoryEntry.prototype.getFile = function(path, options, successCallback, errorCallback) {
    argscheck.checkArgs('sOFF', 'DirectoryEntry.getFile', arguments);
    var win = successCallback && function(result) {
        var FileEntry = require('cordova/plugin/FileEntry');
        var entry = new FileEntry(result.name, result.fullPath);
        successCallback(entry);
    };
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };
    exec(win, fail, "File", "getFile", [this.fullPath, path, options]);
};

module.exports = DirectoryEntry;

});

// file: lib/common/plugin/DirectoryReader.js
define("cordova/plugin/DirectoryReader", function(require, exports, module) {

var exec = require('cordova/exec'),
    FileError = require('cordova/plugin/FileError') ;

/**
 * An interface that lists the files and directories in a directory.
 */
function DirectoryReader(path) {
    this.path = path || null;
}

/**
 * Returns a list of entries from a directory.
 *
 * @param {Function} successCallback is called with a list of entries
 * @param {Function} errorCallback is called with a FileError
 */
DirectoryReader.prototype.readEntries = function(successCallback, errorCallback) {
    var win = typeof successCallback !== 'function' ? null : function(result) {
        var retVal = [];
        for (var i=0; i<result.length; i++) {
            var entry = null;
            if (result[i].isDirectory) {
                entry = new (require('cordova/plugin/DirectoryEntry'))();
            }
            else if (result[i].isFile) {
                entry = new (require('cordova/plugin/FileEntry'))();
            }
            entry.isDirectory = result[i].isDirectory;
            entry.isFile = result[i].isFile;
            entry.name = result[i].name;
            entry.fullPath = result[i].fullPath;
            retVal.push(entry);
        }
        successCallback(retVal);
    };
    var fail = typeof errorCallback !== 'function' ? null : function(code) {
        errorCallback(new FileError(code));
    };
    exec(win, fail, "File", "readEntries", [this.path]);
};

module.exports = DirectoryReader;

});

// file: lib/common/plugin/Entry.js
define("cordova/plugin/Entry", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    exec = require('cordova/exec'),
    FileError = require('cordova/plugin/FileError'),
    Metadata = require('cordova/plugin/Metadata');

/**
 * Represents a file or directory on the local file system.
 *
 * @param isFile
 *            {boolean} true if Entry is a file (readonly)
 * @param isDirectory
 *            {boolean} true if Entry is a directory (readonly)
 * @param name
 *            {DOMString} name of the file or directory, excluding the path
 *            leading to it (readonly)
 * @param fullPath
 *            {DOMString} the absolute full path to the file or directory
 *            (readonly)
 */
function Entry(isFile, isDirectory, name, fullPath, fileSystem) {
    this.isFile = !!isFile;
    this.isDirectory = !!isDirectory;
    this.name = name || '';
    this.fullPath = fullPath || '';
    this.filesystem = fileSystem || null;
}

/**
 * Look up the metadata of the entry.
 *
 * @param successCallback
 *            {Function} is called with a Metadata object
 * @param errorCallback
 *            {Function} is called with a FileError
 */
Entry.prototype.getMetadata = function(successCallback, errorCallback) {
    argscheck.checkArgs('FF', 'Entry.getMetadata', arguments);
    var success = successCallback && function(lastModified) {
        var metadata = new Metadata(lastModified);
        successCallback(metadata);
    };
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };

    exec(success, fail, "File", "getMetadata", [this.fullPath]);
};

/**
 * Set the metadata of the entry.
 *
 * @param successCallback
 *            {Function} is called with a Metadata object
 * @param errorCallback
 *            {Function} is called with a FileError
 * @param metadataObject
 *            {Object} keys and values to set
 */
Entry.prototype.setMetadata = function(successCallback, errorCallback, metadataObject) {
    argscheck.checkArgs('FFO', 'Entry.setMetadata', arguments);
    exec(successCallback, errorCallback, "File", "setMetadata", [this.fullPath, metadataObject]);
};

/**
 * Move a file or directory to a new location.
 *
 * @param parent
 *            {DirectoryEntry} the directory to which to move this entry
 * @param newName
 *            {DOMString} new name of the entry, defaults to the current name
 * @param successCallback
 *            {Function} called with the new DirectoryEntry object
 * @param errorCallback
 *            {Function} called with a FileError
 */
Entry.prototype.moveTo = function(parent, newName, successCallback, errorCallback) {
    argscheck.checkArgs('oSFF', 'Entry.moveTo', arguments);
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };
    // source path
    var srcPath = this.fullPath,
        // entry name
        name = newName || this.name,
        success = function(entry) {
            if (entry) {
                if (successCallback) {
                    // create appropriate Entry object
                    var result = (entry.isDirectory) ? new (require('cordova/plugin/DirectoryEntry'))(entry.name, entry.fullPath) : new (require('cordova/plugin/FileEntry'))(entry.name, entry.fullPath);
                    successCallback(result);
                }
            }
            else {
                // no Entry object returned
                fail && fail(FileError.NOT_FOUND_ERR);
            }
        };

    // copy
    exec(success, fail, "File", "moveTo", [srcPath, parent.fullPath, name]);
};

/**
 * Copy a directory to a different location.
 *
 * @param parent
 *            {DirectoryEntry} the directory to which to copy the entry
 * @param newName
 *            {DOMString} new name of the entry, defaults to the current name
 * @param successCallback
 *            {Function} called with the new Entry object
 * @param errorCallback
 *            {Function} called with a FileError
 */
Entry.prototype.copyTo = function(parent, newName, successCallback, errorCallback) {
    argscheck.checkArgs('oSFF', 'Entry.copyTo', arguments);
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };

        // source path
    var srcPath = this.fullPath,
        // entry name
        name = newName || this.name,
        // success callback
        success = function(entry) {
            if (entry) {
                if (successCallback) {
                    // create appropriate Entry object
                    var result = (entry.isDirectory) ? new (require('cordova/plugin/DirectoryEntry'))(entry.name, entry.fullPath) : new (require('cordova/plugin/FileEntry'))(entry.name, entry.fullPath);
                    successCallback(result);
                }
            }
            else {
                // no Entry object returned
                fail && fail(FileError.NOT_FOUND_ERR);
            }
        };

    // copy
    exec(success, fail, "File", "copyTo", [srcPath, parent.fullPath, name]);
};

/**
 * Return a URL that can be used to identify this entry.
 */
Entry.prototype.toURL = function() {
    // fullPath attribute contains the full URL
    return this.fullPath;
};

/**
 * Returns a URI that can be used to identify this entry.
 *
 * @param {DOMString} mimeType for a FileEntry, the mime type to be used to interpret the file, when loaded through this URI.
 * @return uri
 */
Entry.prototype.toURI = function(mimeType) {
    console.log("DEPRECATED: Update your code to use 'toURL'");
    // fullPath attribute contains the full URI
    return this.toURL();
};

/**
 * Remove a file or directory. It is an error to attempt to delete a
 * directory that is not empty. It is an error to attempt to delete a
 * root directory of a file system.
 *
 * @param successCallback {Function} called with no parameters
 * @param errorCallback {Function} called with a FileError
 */
Entry.prototype.remove = function(successCallback, errorCallback) {
    argscheck.checkArgs('FF', 'Entry.remove', arguments);
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };
    exec(successCallback, fail, "File", "remove", [this.fullPath]);
};

/**
 * Look up the parent DirectoryEntry of this entry.
 *
 * @param successCallback {Function} called with the parent DirectoryEntry object
 * @param errorCallback {Function} called with a FileError
 */
Entry.prototype.getParent = function(successCallback, errorCallback) {
    argscheck.checkArgs('FF', 'Entry.getParent', arguments);
    var win = successCallback && function(result) {
        var DirectoryEntry = require('cordova/plugin/DirectoryEntry');
        var entry = new DirectoryEntry(result.name, result.fullPath);
        successCallback(entry);
    };
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };
    exec(win, fail, "File", "getParent", [this.fullPath]);
};

module.exports = Entry;

});

// file: lib/common/plugin/File.js
define("cordova/plugin/File", function(require, exports, module) {

/**
 * Constructor.
 * name {DOMString} name of the file, without path information
 * fullPath {DOMString} the full path of the file, including the name
 * type {DOMString} mime type
 * lastModifiedDate {Date} last modified date
 * size {Number} size of the file in bytes
 */

var File = function(name, fullPath, type, lastModifiedDate, size){
    this.name = name || '';
    this.fullPath = fullPath || null;
    this.type = type || null;
    this.lastModifiedDate = lastModifiedDate || null;
    this.size = size || 0;

    // These store the absolute start and end for slicing the file.
    this.start = 0;
    this.end = this.size;
};

/**
 * Returns a "slice" of the file. Since Cordova Files don't contain the actual
 * content, this really returns a File with adjusted start and end.
 * Slices of slices are supported.
 * start {Number} The index at which to start the slice (inclusive).
 * end {Number} The index at which to end the slice (exclusive).
 */
File.prototype.slice = function(start, end) {
    var size = this.end - this.start;
    var newStart = 0;
    var newEnd = size;
    if (arguments.length) {
        if (start < 0) {
            newStart = Math.max(size + start, 0);
        } else {
            newStart = Math.min(size, start);
        }
    }

    if (arguments.length >= 2) {
        if (end < 0) {
            newEnd = Math.max(size + end, 0);
        } else {
            newEnd = Math.min(end, size);
        }
    }

    var newFile = new File(this.name, this.fullPath, this.type, this.lastModifiedData, this.size);
    newFile.start = this.start + newStart;
    newFile.end = this.start + newEnd;
    return newFile;
};


module.exports = File;

});

// file: lib/common/plugin/FileEntry.js
define("cordova/plugin/FileEntry", function(require, exports, module) {

var utils = require('cordova/utils'),
    exec = require('cordova/exec'),
    Entry = require('cordova/plugin/Entry'),
    FileWriter = require('cordova/plugin/FileWriter'),
    File = require('cordova/plugin/File'),
    FileError = require('cordova/plugin/FileError');

/**
 * An interface representing a file on the file system.
 *
 * {boolean} isFile always true (readonly)
 * {boolean} isDirectory always false (readonly)
 * {DOMString} name of the file, excluding the path leading to it (readonly)
 * {DOMString} fullPath the absolute full path to the file (readonly)
 * {FileSystem} filesystem on which the file resides (readonly)
 */
var FileEntry = function(name, fullPath) {
     FileEntry.__super__.constructor.apply(this, [true, false, name, fullPath]);
};

utils.extend(FileEntry, Entry);

/**
 * Creates a new FileWriter associated with the file that this FileEntry represents.
 *
 * @param {Function} successCallback is called with the new FileWriter
 * @param {Function} errorCallback is called with a FileError
 */
FileEntry.prototype.createWriter = function(successCallback, errorCallback) {
    this.file(function(filePointer) {
        var writer = new FileWriter(filePointer);

        if (writer.fileName === null || writer.fileName === "") {
            errorCallback && errorCallback(new FileError(FileError.INVALID_STATE_ERR));
        } else {
            successCallback && successCallback(writer);
        }
    }, errorCallback);
};

/**
 * Returns a File that represents the current state of the file that this FileEntry represents.
 *
 * @param {Function} successCallback is called with the new File object
 * @param {Function} errorCallback is called with a FileError
 */
FileEntry.prototype.file = function(successCallback, errorCallback) {
    var win = successCallback && function(f) {
        var file = new File(f.name, f.fullPath, f.type, f.lastModifiedDate, f.size);
        successCallback(file);
    };
    var fail = errorCallback && function(code) {
        errorCallback(new FileError(code));
    };
    exec(win, fail, "File", "getFileMetadata", [this.fullPath]);
};


module.exports = FileEntry;

});

// file: lib/common/plugin/FileError.js
define("cordova/plugin/FileError", function(require, exports, module) {

/**
 * FileError
 */
function FileError(error) {
  this.code = error || null;
}

// File error codes
// Found in DOMException
FileError.NOT_FOUND_ERR = 1;
FileError.SECURITY_ERR = 2;
FileError.ABORT_ERR = 3;

// Added by File API specification
FileError.NOT_READABLE_ERR = 4;
FileError.ENCODING_ERR = 5;
FileError.NO_MODIFICATION_ALLOWED_ERR = 6;
FileError.INVALID_STATE_ERR = 7;
FileError.SYNTAX_ERR = 8;
FileError.INVALID_MODIFICATION_ERR = 9;
FileError.QUOTA_EXCEEDED_ERR = 10;
FileError.TYPE_MISMATCH_ERR = 11;
FileError.PATH_EXISTS_ERR = 12;

module.exports = FileError;

});

// file: lib/common/plugin/FileReader.js
define("cordova/plugin/FileReader", function(require, exports, module) {

var exec = require('cordova/exec'),
    modulemapper = require('cordova/modulemapper'),
    utils = require('cordova/utils'),
    File = require('cordova/plugin/File'),
    FileError = require('cordova/plugin/FileError'),
    ProgressEvent = require('cordova/plugin/ProgressEvent'),
    origFileReader = modulemapper.getOriginalSymbol(this, 'FileReader');

/**
 * This class reads the mobile device file system.
 *
 * For Android:
 *      The root directory is the root of the file system.
 *      To read from the SD card, the file name is "sdcard/my_file.txt"
 * @constructor
 */
var FileReader = function() {
    this._readyState = 0;
    this._error = null;
    this._result = null;
    this._fileName = '';
    this._realReader = origFileReader ? new origFileReader() : {};
};

// States
FileReader.EMPTY = 0;
FileReader.LOADING = 1;
FileReader.DONE = 2;

utils.defineGetter(FileReader.prototype, 'readyState', function() {
    return this._fileName ? this._readyState : this._realReader.readyState;
});

utils.defineGetter(FileReader.prototype, 'error', function() {
    return this._fileName ? this._error: this._realReader.error;
});

utils.defineGetter(FileReader.prototype, 'result', function() {
    return this._fileName ? this._result: this._realReader.result;
});

function defineEvent(eventName) {
    utils.defineGetterSetter(FileReader.prototype, eventName, function() {
        return this._realReader[eventName] || null;
    }, function(value) {
        this._realReader[eventName] = value;
    });
}
defineEvent('onloadstart');    // When the read starts.
defineEvent('onprogress');     // While reading (and decoding) file or fileBlob data, and reporting partial file data (progress.loaded/progress.total)
defineEvent('onload');         // When the read has successfully completed.
defineEvent('onerror');        // When the read has failed (see errors).
defineEvent('onloadend');      // When the request has completed (either in success or failure).
defineEvent('onabort');        // When the read has been aborted. For instance, by invoking the abort() method.

function initRead(reader, file) {
    // Already loading something
    if (reader.readyState == FileReader.LOADING) {
      throw new FileError(FileError.INVALID_STATE_ERR);
    }

    reader._result = null;
    reader._error = null;
    reader._readyState = FileReader.LOADING;

    if (typeof file == 'string') {
        // Deprecated in Cordova 2.4.
        console.warning('Using a string argument with FileReader.readAs functions is deprecated.');
        reader._fileName = file;
    } else if (typeof file.fullPath == 'string') {
        reader._fileName = file.fullPath;
    } else {
        reader._fileName = '';
        return true;
    }

    reader.onloadstart && reader.onloadstart(new ProgressEvent("loadstart", {target:reader}));
}

/**
 * Abort reading file.
 */
FileReader.prototype.abort = function() {
    if (origFileReader && !this._fileName) {
        return this._realReader.abort();
    }
    this._result = null;

    if (this._readyState == FileReader.DONE || this._readyState == FileReader.EMPTY) {
      return;
    }

    this._readyState = FileReader.DONE;

    // If abort callback
    if (typeof this.onabort === 'function') {
        this.onabort(new ProgressEvent('abort', {target:this}));
    }
    // If load end callback
    if (typeof this.onloadend === 'function') {
        this.onloadend(new ProgressEvent('loadend', {target:this}));
    }
};

/**
 * Read text file.
 *
 * @param file          {File} File object containing file properties
 * @param encoding      [Optional] (see http://www.iana.org/assignments/character-sets)
 */
FileReader.prototype.readAsText = function(file, encoding) {
    if (initRead(this, file)) {
        return this._realReader.readAsText(file, encoding);
    }

    // Default encoding is UTF-8
    var enc = encoding ? encoding : "UTF-8";
    var me = this;
    var execArgs = [this._fileName, enc];

    // Maybe add slice parameters.
    if (file.end < file.size) {
        execArgs.push(file.start, file.end);
    } else if (file.start > 0) {
        execArgs.push(file.start);
    }

    // Read file
    exec(
        // Success callback
        function(r) {
            // If DONE (cancelled), then don't do anything
            if (me._readyState === FileReader.DONE) {
                return;
            }

            // Save result
            me._result = r;

            // If onload callback
            if (typeof me.onload === "function") {
                me.onload(new ProgressEvent("load", {target:me}));
            }

            // DONE state
            me._readyState = FileReader.DONE;

            // If onloadend callback
            if (typeof me.onloadend === "function") {
                me.onloadend(new ProgressEvent("loadend", {target:me}));
            }
        },
        // Error callback
        function(e) {
            // If DONE (cancelled), then don't do anything
            if (me._readyState === FileReader.DONE) {
                return;
            }

            // DONE state
            me._readyState = FileReader.DONE;

            // null result
            me._result = null;

            // Save error
            me._error = new FileError(e);

            // If onerror callback
            if (typeof me.onerror === "function") {
                me.onerror(new ProgressEvent("error", {target:me}));
            }

            // If onloadend callback
            if (typeof me.onloadend === "function") {
                me.onloadend(new ProgressEvent("loadend", {target:me}));
            }
        }, "File", "readAsText", execArgs);
};


/**
 * Read file and return data as a base64 encoded data url.
 * A data url is of the form:
 *      data:[<mediatype>][;base64],<data>
 *
 * @param file          {File} File object containing file properties
 */
FileReader.prototype.readAsDataURL = function(file) {
    if (initRead(this, file)) {
        return this._realReader.readAsDataURL(file);
    }

    var me = this;
    var execArgs = [this._fileName];

    // Maybe add slice parameters.
    if (file.end < file.size) {
        execArgs.push(file.start, file.end);
    } else if (file.start > 0) {
        execArgs.push(file.start);
    }

    // Read file
    exec(
        // Success callback
        function(r) {
            // If DONE (cancelled), then don't do anything
            if (me._readyState === FileReader.DONE) {
                return;
            }

            // DONE state
            me._readyState = FileReader.DONE;

            // Save result
            me._result = r;

            // If onload callback
            if (typeof me.onload === "function") {
                me.onload(new ProgressEvent("load", {target:me}));
            }

            // If onloadend callback
            if (typeof me.onloadend === "function") {
                me.onloadend(new ProgressEvent("loadend", {target:me}));
            }
        },
        // Error callback
        function(e) {
            // If DONE (cancelled), then don't do anything
            if (me._readyState === FileReader.DONE) {
                return;
            }

            // DONE state
            me._readyState = FileReader.DONE;

            me._result = null;

            // Save error
            me._error = new FileError(e);

            // If onerror callback
            if (typeof me.onerror === "function") {
                me.onerror(new ProgressEvent("error", {target:me}));
            }

            // If onloadend callback
            if (typeof me.onloadend === "function") {
                me.onloadend(new ProgressEvent("loadend", {target:me}));
            }
        }, "File", "readAsDataURL", execArgs);
};

/**
 * Read file and return data as a binary data.
 *
 * @param file          {File} File object containing file properties
 */
FileReader.prototype.readAsBinaryString = function(file) {
    if (initRead(this, file)) {
        return this._realReader.readAsBinaryString(file);
    }
    // TODO - Can't return binary data to browser.
    console.log('method "readAsBinaryString" is not supported at this time.');
    this.abort();
};

/**
 * Read file and return data as a binary data.
 *
 * @param file          {File} File object containing file properties
 */
FileReader.prototype.readAsArrayBuffer = function(file) {
    if (initRead(this, file)) {
        return this._realReader.readAsArrayBuffer(file);
    }
    // TODO - Can't return binary data to browser.
    console.log('This method is not supported at this time.');
    this.abort();
};

module.exports = FileReader;

});

// file: lib/common/plugin/FileSystem.js
define("cordova/plugin/FileSystem", function(require, exports, module) {

var DirectoryEntry = require('cordova/plugin/DirectoryEntry');

/**
 * An interface representing a file system
 *
 * @constructor
 * {DOMString} name the unique name of the file system (readonly)
 * {DirectoryEntry} root directory of the file system (readonly)
 */
var FileSystem = function(name, root) {
    this.name = name || null;
    if (root) {
        this.root = new DirectoryEntry(root.name, root.fullPath);
    }
};

module.exports = FileSystem;

});

// file: lib/common/plugin/FileTransfer.js
define("cordova/plugin/FileTransfer", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    exec = require('cordova/exec'),
    FileTransferError = require('cordova/plugin/FileTransferError'),
    ProgressEvent = require('cordova/plugin/ProgressEvent');

function newProgressEvent(result) {
    var pe = new ProgressEvent();
    pe.lengthComputable = result.lengthComputable;
    pe.loaded = result.loaded;
    pe.total = result.total;
    return pe;
}

var idCounter = 0;

/**
 * FileTransfer uploads a file to a remote server.
 * @constructor
 */
var FileTransfer = function() {
    this._id = ++idCounter;
    this.onprogress = null; // optional callback
};

/**
* Given an absolute file path, uploads a file on the device to a remote server
* using a multipart HTTP request.
* @param filePath {String}           Full path of the file on the device
* @param server {String}             URL of the server to receive the file
* @param successCallback (Function}  Callback to be invoked when upload has completed
* @param errorCallback {Function}    Callback to be invoked upon error
* @param options {FileUploadOptions} Optional parameters such as file name and mimetype
* @param trustAllHosts {Boolean} Optional trust all hosts (e.g. for self-signed certs), defaults to false
*/
FileTransfer.prototype.upload = function(filePath, server, successCallback, errorCallback, options, trustAllHosts) {
    argscheck.checkArgs('ssFFO*', 'FileTransfer.upload', arguments);
    // check for options
    var fileKey = null;
    var fileName = null;
    var mimeType = null;
    var params = null;
    var chunkedMode = true;
    var headers = null;
    if (options) {
        fileKey = options.fileKey;
        fileName = options.fileName;
        mimeType = options.mimeType;
        headers = options.headers;
        if (options.chunkedMode !== null || typeof options.chunkedMode != "undefined") {
            chunkedMode = options.chunkedMode;
        }
        if (options.params) {
            params = options.params;
        }
        else {
            params = {};
        }
    }

    var fail = errorCallback && function(e) {
        var error = new FileTransferError(e.code, e.source, e.target, e.http_status);
        errorCallback(error);
    };

    var self = this;
    var win = function(result) {
        if (typeof result.lengthComputable != "undefined") {
            if (self.onprogress) {
                self.onprogress(newProgressEvent(result));
            }
        } else {
            successCallback && successCallback(result);
        }
    };
    exec(win, fail, 'FileTransfer', 'upload', [filePath, server, fileKey, fileName, mimeType, params, trustAllHosts, chunkedMode, headers, this._id]);
};

/**
 * Downloads a file form a given URL and saves it to the specified directory.
 * @param source {String}          URL of the server to receive the file
 * @param target {String}         Full path of the file on the device
 * @param successCallback (Function}  Callback to be invoked when upload has completed
 * @param errorCallback {Function}    Callback to be invoked upon error
 * @param trustAllHosts {Boolean} Optional trust all hosts (e.g. for self-signed certs), defaults to false
 */
FileTransfer.prototype.download = function(source, target, successCallback, errorCallback, trustAllHosts) {
    argscheck.checkArgs('ssFF*', 'FileTransfer.download', arguments);
    var self = this;
    var win = function(result) {
        if (typeof result.lengthComputable != "undefined") {
            if (self.onprogress) {
                return self.onprogress(newProgressEvent(result));
            }
        } else if (successCallback) {
            var entry = null;
            if (result.isDirectory) {
                entry = new (require('cordova/plugin/DirectoryEntry'))();
            }
            else if (result.isFile) {
                entry = new (require('cordova/plugin/FileEntry'))();
            }
            entry.isDirectory = result.isDirectory;
            entry.isFile = result.isFile;
            entry.name = result.name;
            entry.fullPath = result.fullPath;
            successCallback(entry);
        }
    };

    var fail = errorCallback && function(e) {
        var error = new FileTransferError(e.code, e.source, e.target, e.http_status);
        errorCallback(error);
    };

    exec(win, fail, 'FileTransfer', 'download', [source, target, trustAllHosts, this._id]);
};

/**
 * Aborts the ongoing file transfer on this object
 * @param successCallback {Function}  Callback to be invoked upon success
 * @param errorCallback {Function}    Callback to be invoked upon error
 */
FileTransfer.prototype.abort = function(successCallback, errorCallback) {
    exec(successCallback, errorCallback, 'FileTransfer', 'abort', [this._id]);
};

module.exports = FileTransfer;

});

// file: lib/common/plugin/FileTransferError.js
define("cordova/plugin/FileTransferError", function(require, exports, module) {

/**
 * FileTransferError
 * @constructor
 */
var FileTransferError = function(code, source, target, status, body) {
    this.code = code || null;
    this.source = source || null;
    this.target = target || null;
    this.http_status = status || null;
    this.body = body || null;
};

FileTransferError.FILE_NOT_FOUND_ERR = 1;
FileTransferError.INVALID_URL_ERR = 2;
FileTransferError.CONNECTION_ERR = 3;
FileTransferError.ABORT_ERR = 4;

module.exports = FileTransferError;

});

// file: lib/common/plugin/FileUploadOptions.js
define("cordova/plugin/FileUploadOptions", function(require, exports, module) {

/**
 * Options to customize the HTTP request used to upload files.
 * @constructor
 * @param fileKey {String}   Name of file request parameter.
 * @param fileName {String}  Filename to be used by the server. Defaults to image.jpg.
 * @param mimeType {String}  Mimetype of the uploaded file. Defaults to image/jpeg.
 * @param params {Object}    Object with key: value params to send to the server.
 * @param headers {Object}   Keys are header names, values are header values. Multiple
 *                           headers of the same name are not supported.
 */
var FileUploadOptions = function(fileKey, fileName, mimeType, params, headers) {
    this.fileKey = fileKey || null;
    this.fileName = fileName || null;
    this.mimeType = mimeType || null;
    this.params = params || null;
    this.headers = headers || null;
};

module.exports = FileUploadOptions;

});

// file: lib/common/plugin/FileUploadResult.js
define("cordova/plugin/FileUploadResult", function(require, exports, module) {

/**
 * FileUploadResult
 * @constructor
 */
var FileUploadResult = function() {
    this.bytesSent = 0;
    this.responseCode = null;
    this.response = null;
};

module.exports = FileUploadResult;

});

// file: lib/common/plugin/FileWriter.js
define("cordova/plugin/FileWriter", function(require, exports, module) {

var exec = require('cordova/exec'),
    FileError = require('cordova/plugin/FileError'),
    ProgressEvent = require('cordova/plugin/ProgressEvent');

/**
 * This class writes to the mobile device file system.
 *
 * For Android:
 *      The root directory is the root of the file system.
 *      To write to the SD card, the file name is "sdcard/my_file.txt"
 *
 * @constructor
 * @param file {File} File object containing file properties
 * @param append if true write to the end of the file, otherwise overwrite the file
 */
var FileWriter = function(file) {
    this.fileName = "";
    this.length = 0;
    if (file) {
        this.fileName = file.fullPath || file;
        this.length = file.size || 0;
    }
    // default is to write at the beginning of the file
    this.position = 0;

    this.readyState = 0; // EMPTY

    this.result = null;

    // Error
    this.error = null;

    // Event handlers
    this.onwritestart = null;   // When writing starts
    this.onprogress = null;     // While writing the file, and reporting partial file data
    this.onwrite = null;        // When the write has successfully completed.
    this.onwriteend = null;     // When the request has completed (either in success or failure).
    this.onabort = null;        // When the write has been aborted. For instance, by invoking the abort() method.
    this.onerror = null;        // When the write has failed (see errors).
};

// States
FileWriter.INIT = 0;
FileWriter.WRITING = 1;
FileWriter.DONE = 2;

/**
 * Abort writing file.
 */
FileWriter.prototype.abort = function() {
    // check for invalid state
    if (this.readyState === FileWriter.DONE || this.readyState === FileWriter.INIT) {
        throw new FileError(FileError.INVALID_STATE_ERR);
    }

    // set error
    this.error = new FileError(FileError.ABORT_ERR);

    this.readyState = FileWriter.DONE;

    // If abort callback
    if (typeof this.onabort === "function") {
        this.onabort(new ProgressEvent("abort", {"target":this}));
    }

    // If write end callback
    if (typeof this.onwriteend === "function") {
        this.onwriteend(new ProgressEvent("writeend", {"target":this}));
    }
};

/**
 * Writes data to the file
 *
 * @param text to be written
 */
FileWriter.prototype.write = function(text) {
    // Throw an exception if we are already writing a file
    if (this.readyState === FileWriter.WRITING) {
        throw new FileError(FileError.INVALID_STATE_ERR);
    }

    // WRITING state
    this.readyState = FileWriter.WRITING;

    var me = this;

    // If onwritestart callback
    if (typeof me.onwritestart === "function") {
        me.onwritestart(new ProgressEvent("writestart", {"target":me}));
    }

    // Write file
    exec(
        // Success callback
        function(r) {
            // If DONE (cancelled), then don't do anything
            if (me.readyState === FileWriter.DONE) {
                return;
            }

            // position always increases by bytes written because file would be extended
            me.position += r;
            // The length of the file is now where we are done writing.

            me.length = me.position;

            // DONE state
            me.readyState = FileWriter.DONE;

            // If onwrite callback
            if (typeof me.onwrite === "function") {
                me.onwrite(new ProgressEvent("write", {"target":me}));
            }

            // If onwriteend callback
            if (typeof me.onwriteend === "function") {
                me.onwriteend(new ProgressEvent("writeend", {"target":me}));
            }
        },
        // Error callback
        function(e) {
            // If DONE (cancelled), then don't do anything
            if (me.readyState === FileWriter.DONE) {
                return;
            }

            // DONE state
            me.readyState = FileWriter.DONE;

            // Save error
            me.error = new FileError(e);

            // If onerror callback
            if (typeof me.onerror === "function") {
                me.onerror(new ProgressEvent("error", {"target":me}));
            }

            // If onwriteend callback
            if (typeof me.onwriteend === "function") {
                me.onwriteend(new ProgressEvent("writeend", {"target":me}));
            }
        }, "File", "write", [this.fileName, text, this.position]);
};

/**
 * Moves the file pointer to the location specified.
 *
 * If the offset is a negative number the position of the file
 * pointer is rewound.  If the offset is greater than the file
 * size the position is set to the end of the file.
 *
 * @param offset is the location to move the file pointer to.
 */
FileWriter.prototype.seek = function(offset) {
    // Throw an exception if we are already writing a file
    if (this.readyState === FileWriter.WRITING) {
        throw new FileError(FileError.INVALID_STATE_ERR);
    }

    if (!offset && offset !== 0) {
        return;
    }

    // See back from end of file.
    if (offset < 0) {
        this.position = Math.max(offset + this.length, 0);
    }
    // Offset is bigger than file size so set position
    // to the end of the file.
    else if (offset > this.length) {
        this.position = this.length;
    }
    // Offset is between 0 and file size so set the position
    // to start writing.
    else {
        this.position = offset;
    }
};

/**
 * Truncates the file to the size specified.
 *
 * @param size to chop the file at.
 */
FileWriter.prototype.truncate = function(size) {
    // Throw an exception if we are already writing a file
    if (this.readyState === FileWriter.WRITING) {
        throw new FileError(FileError.INVALID_STATE_ERR);
    }

    // WRITING state
    this.readyState = FileWriter.WRITING;

    var me = this;

    // If onwritestart callback
    if (typeof me.onwritestart === "function") {
        me.onwritestart(new ProgressEvent("writestart", {"target":this}));
    }

    // Write file
    exec(
        // Success callback
        function(r) {
            // If DONE (cancelled), then don't do anything
            if (me.readyState === FileWriter.DONE) {
                return;
            }

            // DONE state
            me.readyState = FileWriter.DONE;

            // Update the length of the file
            me.length = r;
            me.position = Math.min(me.position, r);

            // If onwrite callback
            if (typeof me.onwrite === "function") {
                me.onwrite(new ProgressEvent("write", {"target":me}));
            }

            // If onwriteend callback
            if (typeof me.onwriteend === "function") {
                me.onwriteend(new ProgressEvent("writeend", {"target":me}));
            }
        },
        // Error callback
        function(e) {
            // If DONE (cancelled), then don't do anything
            if (me.readyState === FileWriter.DONE) {
                return;
            }

            // DONE state
            me.readyState = FileWriter.DONE;

            // Save error
            me.error = new FileError(e);

            // If onerror callback
            if (typeof me.onerror === "function") {
                me.onerror(new ProgressEvent("error", {"target":me}));
            }

            // If onwriteend callback
            if (typeof me.onwriteend === "function") {
                me.onwriteend(new ProgressEvent("writeend", {"target":me}));
            }
        }, "File", "truncate", [this.fileName, size]);
};

module.exports = FileWriter;

});

// file: lib/common/plugin/Flags.js
define("cordova/plugin/Flags", function(require, exports, module) {

/**
 * Supplies arguments to methods that lookup or create files and directories.
 *
 * @param create
 *            {boolean} file or directory if it doesn't exist
 * @param exclusive
 *            {boolean} used with create; if true the command will fail if
 *            target path exists
 */
function Flags(create, exclusive) {
    this.create = create || false;
    this.exclusive = exclusive || false;
}

module.exports = Flags;

});

// file: lib/common/plugin/GlobalizationError.js
define("cordova/plugin/GlobalizationError", function(require, exports, module) {


/**
 * Globalization error object
 *
 * @constructor
 * @param code
 * @param message
 */
var GlobalizationError = function(code, message) {
    this.code = code || null;
    this.message = message || '';
};

// Globalization error codes
GlobalizationError.UNKNOWN_ERROR = 0;
GlobalizationError.FORMATTING_ERROR = 1;
GlobalizationError.PARSING_ERROR = 2;
GlobalizationError.PATTERN_ERROR = 3;

module.exports = GlobalizationError;

});

// file: lib/common/plugin/InAppBrowser.js
define("cordova/plugin/InAppBrowser", function(require, exports, module) {

var exec = require('cordova/exec');
var channel = require('cordova/channel');

function InAppBrowser() {
   this.channels = {
        'loadstart': channel.create('loadstart'),
        'loadstop' : channel.create('loadstop'),
        'exit' : channel.create('exit')
   };
}

InAppBrowser.prototype = {
    _eventHandler: function (event) {
        if (event.type in this.channels) {
            this.channels[event.type].fire(event);
        }
    },
    close: function (eventname) {
        exec(null, null, "InAppBrowser", "close", []);
    },
    addEventListener: function (eventname,f) {
        if (eventname in this.channels) {
            this.channels[eventname].subscribe(f);
        }
    },
    removeEventListener: function(eventname, f) {
        if (eventname in this.channels) {
            this.channels[eventname].unsubscribe(f);
        }
    }
};

module.exports = function(strUrl, strWindowName, strWindowFeatures) {
    var iab = new InAppBrowser();
    var cb = function(eventname) {
       iab._eventHandler(eventname);
    };
    exec(cb, null, "InAppBrowser", "open", [strUrl, strWindowName, strWindowFeatures]);
    return iab;
};


});

// file: lib/common/plugin/LocalFileSystem.js
define("cordova/plugin/LocalFileSystem", function(require, exports, module) {

var exec = require('cordova/exec');

/**
 * Represents a local file system.
 */
var LocalFileSystem = function() {

};

LocalFileSystem.TEMPORARY = 0; //temporary, with no guarantee of persistence
LocalFileSystem.PERSISTENT = 1; //persistent

module.exports = LocalFileSystem;

});

// file: lib/common/plugin/Media.js
define("cordova/plugin/Media", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    utils = require('cordova/utils'),
    exec = require('cordova/exec');

var mediaObjects = {};

/**
 * This class provides access to the device media, interfaces to both sound and video
 *
 * @constructor
 * @param src                   The file name or url to play
 * @param successCallback       The callback to be called when the file is done playing or recording.
 *                                  successCallback()
 * @param errorCallback         The callback to be called if there is an error.
 *                                  errorCallback(int errorCode) - OPTIONAL
 * @param statusCallback        The callback to be called when media status has changed.
 *                                  statusCallback(int statusCode) - OPTIONAL
 */
var Media = function(src, successCallback, errorCallback, statusCallback) {
    argscheck.checkArgs('SFFF', 'Media', arguments);
    this.id = utils.createUUID();
    mediaObjects[this.id] = this;
    this.src = src;
    this.successCallback = successCallback;
    this.errorCallback = errorCallback;
    this.statusCallback = statusCallback;
    this._duration = -1;
    this._position = -1;
    exec(null, this.errorCallback, "Media", "create", [this.id, this.src]);
};

// Media messages
Media.MEDIA_STATE = 1;
Media.MEDIA_DURATION = 2;
Media.MEDIA_POSITION = 3;
Media.MEDIA_ERROR = 9;

// Media states
Media.MEDIA_NONE = 0;
Media.MEDIA_STARTING = 1;
Media.MEDIA_RUNNING = 2;
Media.MEDIA_PAUSED = 3;
Media.MEDIA_STOPPED = 4;
Media.MEDIA_MSG = ["None", "Starting", "Running", "Paused", "Stopped"];

// "static" function to return existing objs.
Media.get = function(id) {
    return mediaObjects[id];
};

/**
 * Start or resume playing audio file.
 */
Media.prototype.play = function(options) {
    exec(null, null, "Media", "startPlayingAudio", [this.id, this.src, options]);
};

/**
 * Stop playing audio file.
 */
Media.prototype.stop = function() {
    var me = this;
    exec(function() {
        me._position = 0;
    }, this.errorCallback, "Media", "stopPlayingAudio", [this.id]);
};

/**
 * Seek or jump to a new time in the track..
 */
Media.prototype.seekTo = function(milliseconds) {
    var me = this;
    exec(function(p) {
        me._position = p;
    }, this.errorCallback, "Media", "seekToAudio", [this.id, milliseconds]);
};

/**
 * Pause playing audio file.
 */
Media.prototype.pause = function() {
    exec(null, this.errorCallback, "Media", "pausePlayingAudio", [this.id]);
};

/**
 * Get duration of an audio file.
 * The duration is only set for audio that is playing, paused or stopped.
 *
 * @return      duration or -1 if not known.
 */
Media.prototype.getDuration = function() {
    return this._duration;
};

/**
 * Get position of audio.
 */
Media.prototype.getCurrentPosition = function(success, fail) {
    var me = this;
    exec(function(p) {
        me._position = p;
        success(p);
    }, fail, "Media", "getCurrentPositionAudio", [this.id]);
};

/**
 * Start recording audio file.
 */
Media.prototype.startRecord = function() {
    exec(null, this.errorCallback, "Media", "startRecordingAudio", [this.id, this.src]);
};

/**
 * Stop recording audio file.
 */
Media.prototype.stopRecord = function() {
    exec(null, this.errorCallback, "Media", "stopRecordingAudio", [this.id]);
};

/**
 * Release the resources.
 */
Media.prototype.release = function() {
    exec(null, this.errorCallback, "Media", "release", [this.id]);
};

/**
 * Adjust the volume.
 */
Media.prototype.setVolume = function(volume) {
    exec(null, null, "Media", "setVolume", [this.id, volume]);
};

/**
 * Audio has status update.
 * PRIVATE
 *
 * @param id            The media object id (string)
 * @param msgType       The 'type' of update this is
 * @param value         Use of value is determined by the msgType
 */
Media.onStatus = function(id, msgType, value) {

    var media = mediaObjects[id];

    if(media) {
        switch(msgType) {
            case Media.MEDIA_STATE :
                media.statusCallback && media.statusCallback(value);
                if(value == Media.MEDIA_STOPPED) {
                    media.successCallback && media.successCallback();
                }
                break;
            case Media.MEDIA_DURATION :
                media._duration = value;
                break;
            case Media.MEDIA_ERROR :
                media.errorCallback && media.errorCallback(value);
                break;
            case Media.MEDIA_POSITION :
                media._position = Number(value);
                break;
            default :
                console.error && console.error("Unhandled Media.onStatus :: " + msgType);
                break;
        }
    }
    else {
         console.error && console.error("Received Media.onStatus callback for unknown media :: " + id);
    }

};

module.exports = Media;

});

// file: lib/common/plugin/MediaError.js
define("cordova/plugin/MediaError", function(require, exports, module) {

/**
 * This class contains information about any Media errors.
*/
/*
 According to :: http://dev.w3.org/html5/spec-author-view/video.html#mediaerror
 We should never be creating these objects, we should just implement the interface
 which has 1 property for an instance, 'code'

 instead of doing :
    errorCallbackFunction( new MediaError(3,'msg') );
we should simply use a literal :
    errorCallbackFunction( {'code':3} );
 */

 var _MediaError = window.MediaError;


if(!_MediaError) {
    window.MediaError = _MediaError = function(code, msg) {
        this.code = (typeof code != 'undefined') ? code : null;
        this.message = msg || ""; // message is NON-standard! do not use!
    };
}

_MediaError.MEDIA_ERR_NONE_ACTIVE    = _MediaError.MEDIA_ERR_NONE_ACTIVE    || 0;
_MediaError.MEDIA_ERR_ABORTED        = _MediaError.MEDIA_ERR_ABORTED        || 1;
_MediaError.MEDIA_ERR_NETWORK        = _MediaError.MEDIA_ERR_NETWORK        || 2;
_MediaError.MEDIA_ERR_DECODE         = _MediaError.MEDIA_ERR_DECODE         || 3;
_MediaError.MEDIA_ERR_NONE_SUPPORTED = _MediaError.MEDIA_ERR_NONE_SUPPORTED || 4;
// TODO: MediaError.MEDIA_ERR_NONE_SUPPORTED is legacy, the W3 spec now defines it as below.
// as defined by http://dev.w3.org/html5/spec-author-view/video.html#error-codes
_MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = _MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED || 4;

module.exports = _MediaError;

});

// file: lib/common/plugin/MediaFile.js
define("cordova/plugin/MediaFile", function(require, exports, module) {

var utils = require('cordova/utils'),
    exec = require('cordova/exec'),
    File = require('cordova/plugin/File'),
    CaptureError = require('cordova/plugin/CaptureError');
/**
 * Represents a single file.
 *
 * name {DOMString} name of the file, without path information
 * fullPath {DOMString} the full path of the file, including the name
 * type {DOMString} mime type
 * lastModifiedDate {Date} last modified date
 * size {Number} size of the file in bytes
 */
var MediaFile = function(name, fullPath, type, lastModifiedDate, size){
    MediaFile.__super__.constructor.apply(this, arguments);
};

utils.extend(MediaFile, File);

/**
 * Request capture format data for a specific file and type
 *
 * @param {Function} successCB
 * @param {Function} errorCB
 */
MediaFile.prototype.getFormatData = function(successCallback, errorCallback) {
    if (typeof this.fullPath === "undefined" || this.fullPath === null) {
        errorCallback(new CaptureError(CaptureError.CAPTURE_INVALID_ARGUMENT));
    } else {
        exec(successCallback, errorCallback, "Capture", "getFormatData", [this.fullPath, this.type]);
    }
};

module.exports = MediaFile;

});

// file: lib/common/plugin/MediaFileData.js
define("cordova/plugin/MediaFileData", function(require, exports, module) {

/**
 * MediaFileData encapsulates format information of a media file.
 *
 * @param {DOMString} codecs
 * @param {long} bitrate
 * @param {long} height
 * @param {long} width
 * @param {float} duration
 */
var MediaFileData = function(codecs, bitrate, height, width, duration){
    this.codecs = codecs || null;
    this.bitrate = bitrate || 0;
    this.height = height || 0;
    this.width = width || 0;
    this.duration = duration || 0;
};

module.exports = MediaFileData;

});

// file: lib/common/plugin/Metadata.js
define("cordova/plugin/Metadata", function(require, exports, module) {

/**
 * Information about the state of the file or directory
 *
 * {Date} modificationTime (readonly)
 */
var Metadata = function(time) {
    this.modificationTime = (typeof time != 'undefined'?new Date(time):null);
};

module.exports = Metadata;

});

// file: lib/common/plugin/Position.js
define("cordova/plugin/Position", function(require, exports, module) {

var Coordinates = require('cordova/plugin/Coordinates');

var Position = function(coords, timestamp) {
    if (coords) {
        this.coords = new Coordinates(coords.latitude, coords.longitude, coords.altitude, coords.accuracy, coords.heading, coords.velocity, coords.altitudeAccuracy);
    } else {
        this.coords = new Coordinates();
    }
    this.timestamp = (timestamp !== undefined) ? timestamp : new Date();
};

module.exports = Position;

});

// file: lib/common/plugin/PositionError.js
define("cordova/plugin/PositionError", function(require, exports, module) {

/**
 * Position error object
 *
 * @constructor
 * @param code
 * @param message
 */
var PositionError = function(code, message) {
    this.code = code || null;
    this.message = message || '';
};

PositionError.PERMISSION_DENIED = 1;
PositionError.POSITION_UNAVAILABLE = 2;
PositionError.TIMEOUT = 3;

module.exports = PositionError;

});

// file: lib/common/plugin/ProgressEvent.js
define("cordova/plugin/ProgressEvent", function(require, exports, module) {

// If ProgressEvent exists in global context, use it already, otherwise use our own polyfill
// Feature test: See if we can instantiate a native ProgressEvent;
// if so, use that approach,
// otherwise fill-in with our own implementation.
//
// NOTE: right now we always fill in with our own. Down the road would be nice if we can use whatever is native in the webview.
var ProgressEvent = (function() {
    /*
    var createEvent = function(data) {
        var event = document.createEvent('Events');
        event.initEvent('ProgressEvent', false, false);
        if (data) {
            for (var i in data) {
                if (data.hasOwnProperty(i)) {
                    event[i] = data[i];
                }
            }
            if (data.target) {
                // TODO: cannot call <some_custom_object>.dispatchEvent
                // need to first figure out how to implement EventTarget
            }
        }
        return event;
    };
    try {
        var ev = createEvent({type:"abort",target:document});
        return function ProgressEvent(type, data) {
            data.type = type;
            return createEvent(data);
        };
    } catch(e){
    */
        return function ProgressEvent(type, dict) {
            this.type = type;
            this.bubbles = false;
            this.cancelBubble = false;
            this.cancelable = false;
            this.lengthComputable = false;
            this.loaded = dict && dict.loaded ? dict.loaded : 0;
            this.total = dict && dict.total ? dict.total : 0;
            this.target = dict && dict.target ? dict.target : null;
        };
    //}
})();

module.exports = ProgressEvent;

});

// file: lib/common/plugin/accelerometer.js
define("cordova/plugin/accelerometer", function(require, exports, module) {

/**
 * This class provides access to device accelerometer data.
 * @constructor
 */
var argscheck = require('cordova/argscheck'),
    utils = require("cordova/utils"),
    exec = require("cordova/exec"),
    Acceleration = require('cordova/plugin/Acceleration');

// Is the accel sensor running?
var running = false;

// Keeps reference to watchAcceleration calls.
var timers = {};

// Array of listeners; used to keep track of when we should call start and stop.
var listeners = [];

// Last returned acceleration object from native
var accel = null;

// Tells native to start.
function start() {
    exec(function(a) {
        var tempListeners = listeners.slice(0);
        accel = new Acceleration(a.x, a.y, a.z, a.timestamp);
        for (var i = 0, l = tempListeners.length; i < l; i++) {
            tempListeners[i].win(accel);
        }
    }, function(e) {
        var tempListeners = listeners.slice(0);
        for (var i = 0, l = tempListeners.length; i < l; i++) {
            tempListeners[i].fail(e);
        }
    }, "Accelerometer", "start", []);
    running = true;
}

// Tells native to stop.
function stop() {
    exec(null, null, "Accelerometer", "stop", []);
    running = false;
}

// Adds a callback pair to the listeners array
function createCallbackPair(win, fail) {
    return {win:win, fail:fail};
}

// Removes a win/fail listener pair from the listeners array
function removeListeners(l) {
    var idx = listeners.indexOf(l);
    if (idx > -1) {
        listeners.splice(idx, 1);
        if (listeners.length === 0) {
            stop();
        }
    }
}

var accelerometer = {
    /**
     * Asynchronously acquires the current acceleration.
     *
     * @param {Function} successCallback    The function to call when the acceleration data is available
     * @param {Function} errorCallback      The function to call when there is an error getting the acceleration data. (OPTIONAL)
     * @param {AccelerationOptions} options The options for getting the accelerometer data such as timeout. (OPTIONAL)
     */
    getCurrentAcceleration: function(successCallback, errorCallback, options) {
        argscheck.checkArgs('fFO', 'accelerometer.getCurrentAcceleration', arguments);

        var p;
        var win = function(a) {
            removeListeners(p);
            successCallback(a);
        };
        var fail = function(e) {
            removeListeners(p);
            errorCallback && errorCallback(e);
        };

        p = createCallbackPair(win, fail);
        listeners.push(p);

        if (!running) {
            start();
        }
    },

    /**
     * Asynchronously acquires the acceleration repeatedly at a given interval.
     *
     * @param {Function} successCallback    The function to call each time the acceleration data is available
     * @param {Function} errorCallback      The function to call when there is an error getting the acceleration data. (OPTIONAL)
     * @param {AccelerationOptions} options The options for getting the accelerometer data such as timeout. (OPTIONAL)
     * @return String                       The watch id that must be passed to #clearWatch to stop watching.
     */
    watchAcceleration: function(successCallback, errorCallback, options) {
        argscheck.checkArgs('fFO', 'accelerometer.watchAcceleration', arguments);
        // Default interval (10 sec)
        var frequency = (options && options.frequency && typeof options.frequency == 'number') ? options.frequency : 10000;

        // Keep reference to watch id, and report accel readings as often as defined in frequency
        var id = utils.createUUID();

        var p = createCallbackPair(function(){}, function(e) {
            removeListeners(p);
            errorCallback && errorCallback(e);
        });
        listeners.push(p);

        timers[id] = {
            timer:window.setInterval(function() {
                if (accel) {
                    successCallback(accel);
                }
            }, frequency),
            listeners:p
        };

        if (running) {
            // If we're already running then immediately invoke the success callback
            // but only if we have retrieved a value, sample code does not check for null ...
            if (accel) {
                successCallback(accel);
            }
        } else {
            start();
        }

        return id;
    },

    /**
     * Clears the specified accelerometer watch.
     *
     * @param {String} id       The id of the watch returned from #watchAcceleration.
     */
    clearWatch: function(id) {
        // Stop javascript timer & remove from timer list
        if (id && timers[id]) {
            window.clearInterval(timers[id].timer);
            removeListeners(timers[id].listeners);
            delete timers[id];
        }
    }
};

module.exports = accelerometer;

});

// file: lib/common/plugin/accelerometer/symbols.js
define("cordova/plugin/accelerometer/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.defaults('cordova/plugin/Acceleration', 'Acceleration');
modulemapper.defaults('cordova/plugin/accelerometer', 'navigator.accelerometer');

});

// file: lib/common/plugin/battery.js
define("cordova/plugin/battery", function(require, exports, module) {

/**
 * This class contains information about the current battery status.
 * @constructor
 */
var cordova = require('cordova'),
    exec = require('cordova/exec');

function handlers() {
  return battery.channels.batterystatus.numHandlers +
         battery.channels.batterylow.numHandlers +
         battery.channels.batterycritical.numHandlers;
}

var Battery = function() {
    this._level = null;
    this._isPlugged = null;
    // Create new event handlers on the window (returns a channel instance)
    this.channels = {
      batterystatus:cordova.addWindowEventHandler("batterystatus"),
      batterylow:cordova.addWindowEventHandler("batterylow"),
      batterycritical:cordova.addWindowEventHandler("batterycritical")
    };
    for (var key in this.channels) {
        this.channels[key].onHasSubscribersChange = Battery.onHasSubscribersChange;
    }
};
/**
 * Event handlers for when callbacks get registered for the battery.
 * Keep track of how many handlers we have so we can start and stop the native battery listener
 * appropriately (and hopefully save on battery life!).
 */
Battery.onHasSubscribersChange = function() {
  // If we just registered the first handler, make sure native listener is started.
  if (this.numHandlers === 1 && handlers() === 1) {
      exec(battery._status, battery._error, "Battery", "start", []);
  } else if (handlers() === 0) {
      exec(null, null, "Battery", "stop", []);
  }
};

/**
 * Callback for battery status
 *
 * @param {Object} info            keys: level, isPlugged
 */
Battery.prototype._status = function(info) {
    if (info) {
        var me = battery;
    var level = info.level;
        if (me._level !== level || me._isPlugged !== info.isPlugged) {
            // Fire batterystatus event
            cordova.fireWindowEvent("batterystatus", info);

            // Fire low battery event
            if (level === 20 || level === 5) {
                if (level === 20) {
                    cordova.fireWindowEvent("batterylow", info);
                }
                else {
                    cordova.fireWindowEvent("batterycritical", info);
                }
            }
        }
        me._level = level;
        me._isPlugged = info.isPlugged;
    }
};

/**
 * Error callback for battery start
 */
Battery.prototype._error = function(e) {
    console.log("Error initializing Battery: " + e);
};

var battery = new Battery();

module.exports = battery;

});

// file: lib/common/plugin/battery/symbols.js
define("cordova/plugin/battery/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.defaults('cordova/plugin/battery', 'navigator.battery');

});

// file: lib/common/plugin/camera/symbols.js
define("cordova/plugin/camera/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.defaults('cordova/plugin/Camera', 'navigator.camera');
modulemapper.defaults('cordova/plugin/CameraConstants', 'Camera');
modulemapper.defaults('cordova/plugin/CameraPopoverOptions', 'CameraPopoverOptions');

});

// file: lib/common/plugin/capture.js
define("cordova/plugin/capture", function(require, exports, module) {

var exec = require('cordova/exec'),
    MediaFile = require('cordova/plugin/MediaFile');

/**
 * Launches a capture of different types.
 *
 * @param (DOMString} type
 * @param {Function} successCB
 * @param {Function} errorCB
 * @param {CaptureVideoOptions} options
 */
function _capture(type, successCallback, errorCallback, options) {
    var win = function(pluginResult) {
        var mediaFiles = [];
        var i;
        for (i = 0; i < pluginResult.length; i++) {
            var mediaFile = new MediaFile();
            mediaFile.name = pluginResult[i].name;
            mediaFile.fullPath = pluginResult[i].fullPath;
            mediaFile.type = pluginResult[i].type;
            mediaFile.lastModifiedDate = pluginResult[i].lastModifiedDate;
            mediaFile.size = pluginResult[i].size;
            mediaFiles.push(mediaFile);
        }
        successCallback(mediaFiles);
    };
    exec(win, errorCallback, "Capture", type, [options]);
}
/**
 * The Capture interface exposes an interface to the camera and microphone of the hosting device.
 */
function Capture() {
    this.supportedAudioModes = [];
    this.supportedImageModes = [];
    this.supportedVideoModes = [];
}

/**
 * Launch audio recorder application for recording audio clip(s).
 *
 * @param {Function} successCB
 * @param {Function} errorCB
 * @param {CaptureAudioOptions} options
 */
Capture.prototype.captureAudio = function(successCallback, errorCallback, options){
    _capture("captureAudio", successCallback, errorCallback, options);
};

/**
 * Launch camera application for taking image(s).
 *
 * @param {Function} successCB
 * @param {Function} errorCB
 * @param {CaptureImageOptions} options
 */
Capture.prototype.captureImage = function(successCallback, errorCallback, options){
    _capture("captureImage", successCallback, errorCallback, options);
};

/**
 * Launch device camera application for recording video(s).
 *
 * @param {Function} successCB
 * @param {Function} errorCB
 * @param {CaptureVideoOptions} options
 */
Capture.prototype.captureVideo = function(successCallback, errorCallback, options){
    _capture("captureVideo", successCallback, errorCallback, options);
};


module.exports = new Capture();

});

// file: lib/common/plugin/capture/symbols.js
define("cordova/plugin/capture/symbols", function(require, exports, module) {

var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/CaptureError', 'CaptureError');
modulemapper.clobbers('cordova/plugin/CaptureAudioOptions', 'CaptureAudioOptions');
modulemapper.clobbers('cordova/plugin/CaptureImageOptions', 'CaptureImageOptions');
modulemapper.clobbers('cordova/plugin/CaptureVideoOptions', 'CaptureVideoOptions');
modulemapper.clobbers('cordova/plugin/ConfigurationData', 'ConfigurationData');
modulemapper.clobbers('cordova/plugin/MediaFile', 'MediaFile');
modulemapper.clobbers('cordova/plugin/MediaFileData', 'MediaFileData');
modulemapper.clobbers('cordova/plugin/capture', 'navigator.device.capture');

});

// file: lib/common/plugin/compass.js
define("cordova/plugin/compass", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    exec = require('cordova/exec'),
    utils = require('cordova/utils'),
    CompassHeading = require('cordova/plugin/CompassHeading'),
    CompassError = require('cordova/plugin/CompassError'),
    timers = {},
    compass = {
        /**
         * Asynchronously acquires the current heading.
         * @param {Function} successCallback The function to call when the heading
         * data is available
         * @param {Function} errorCallback The function to call when there is an error
         * getting the heading data.
         * @param {CompassOptions} options The options for getting the heading data (not used).
         */
        getCurrentHeading:function(successCallback, errorCallback, options) {
            argscheck.checkArgs('fFO', 'compass.getCurrentHeading', arguments);

            var win = function(result) {
                var ch = new CompassHeading(result.magneticHeading, result.trueHeading, result.headingAccuracy, result.timestamp);
                successCallback(ch);
            };
            var fail = errorCallback && function(code) {
                var ce = new CompassError(code);
                errorCallback(ce);
            };

            // Get heading
            exec(win, fail, "Compass", "getHeading", [options]);
        },

        /**
         * Asynchronously acquires the heading repeatedly at a given interval.
         * @param {Function} successCallback The function to call each time the heading
         * data is available
         * @param {Function} errorCallback The function to call when there is an error
         * getting the heading data.
         * @param {HeadingOptions} options The options for getting the heading data
         * such as timeout and the frequency of the watch. For iOS, filter parameter
         * specifies to watch via a distance filter rather than time.
         */
        watchHeading:function(successCallback, errorCallback, options) {
            argscheck.checkArgs('fFO', 'compass.watchHeading', arguments);
            // Default interval (100 msec)
            var frequency = (options !== undefined && options.frequency !== undefined) ? options.frequency : 100;
            var filter = (options !== undefined && options.filter !== undefined) ? options.filter : 0;

            var id = utils.createUUID();
            if (filter > 0) {
                // is an iOS request for watch by filter, no timer needed
                timers[id] = "iOS";
                compass.getCurrentHeading(successCallback, errorCallback, options);
            } else {
                // Start watch timer to get headings
                timers[id] = window.setInterval(function() {
                    compass.getCurrentHeading(successCallback, errorCallback);
                }, frequency);
            }

            return id;
        },

        /**
         * Clears the specified heading watch.
         * @param {String} watchId The ID of the watch returned from #watchHeading.
         */
        clearWatch:function(id) {
            // Stop javascript timer & remove from timer list
            if (id && timers[id]) {
                if (timers[id] != "iOS") {
                    clearInterval(timers[id]);
                } else {
                    // is iOS watch by filter so call into device to stop
                    exec(null, null, "Compass", "stopHeading", []);
                }
                delete timers[id];
            }
        }
    };

module.exports = compass;

});

// file: lib/common/plugin/compass/symbols.js
define("cordova/plugin/compass/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/CompassHeading', 'CompassHeading');
modulemapper.clobbers('cordova/plugin/CompassError', 'CompassError');
modulemapper.clobbers('cordova/plugin/compass', 'navigator.compass');

});

// file: lib/common/plugin/console-via-logger.js
define("cordova/plugin/console-via-logger", function(require, exports, module) {

//------------------------------------------------------------------------------

var logger = require("cordova/plugin/logger");
var utils  = require("cordova/utils");

//------------------------------------------------------------------------------
// object that we're exporting
//------------------------------------------------------------------------------
var console = module.exports;

//------------------------------------------------------------------------------
// copy of the original console object
//------------------------------------------------------------------------------
var WinConsole = window.console;

//------------------------------------------------------------------------------
// whether to use the logger
//------------------------------------------------------------------------------
var UseLogger = false;

//------------------------------------------------------------------------------
// Timers
//------------------------------------------------------------------------------
var Timers = {};

//------------------------------------------------------------------------------
// used for unimplemented methods
//------------------------------------------------------------------------------
function noop() {}

//------------------------------------------------------------------------------
// used for unimplemented methods
//------------------------------------------------------------------------------
console.useLogger = function (value) {
    if (arguments.length) UseLogger = !!value;

    if (UseLogger) {
        if (logger.useConsole()) {
            throw new Error("console and logger are too intertwingly");
        }
    }

    return UseLogger;
};

//------------------------------------------------------------------------------
console.log = function() {
    if (logger.useConsole()) return;
    logger.log.apply(logger, [].slice.call(arguments));
};

//------------------------------------------------------------------------------
console.error = function() {
    if (logger.useConsole()) return;
    logger.error.apply(logger, [].slice.call(arguments));
};

//------------------------------------------------------------------------------
console.warn = function() {
    if (logger.useConsole()) return;
    logger.warn.apply(logger, [].slice.call(arguments));
};

//------------------------------------------------------------------------------
console.info = function() {
    if (logger.useConsole()) return;
    logger.info.apply(logger, [].slice.call(arguments));
};

//------------------------------------------------------------------------------
console.debug = function() {
    if (logger.useConsole()) return;
    logger.debug.apply(logger, [].slice.call(arguments));
};

//------------------------------------------------------------------------------
console.assert = function(expression) {
    if (expression) return;

    var message = utils.vformat(arguments[1], [].slice.call(arguments, 2));
    console.log("ASSERT: " + message);
};

//------------------------------------------------------------------------------
console.clear = function() {};

//------------------------------------------------------------------------------
console.dir = function(object) {
    console.log("%o", object);
};

//------------------------------------------------------------------------------
console.dirxml = function(node) {
    console.log(node.innerHTML);
};

//------------------------------------------------------------------------------
console.trace = noop;

//------------------------------------------------------------------------------
console.group = console.log;

//------------------------------------------------------------------------------
console.groupCollapsed = console.log;

//------------------------------------------------------------------------------
console.groupEnd = noop;

//------------------------------------------------------------------------------
console.time = function(name) {
    Timers[name] = new Date().valueOf();
};

//------------------------------------------------------------------------------
console.timeEnd = function(name) {
    var timeStart = Timers[name];
    if (!timeStart) {
        console.warn("unknown timer: " + name);
        return;
    }

    var timeElapsed = new Date().valueOf() - timeStart;
    console.log(name + ": " + timeElapsed + "ms");
};

//------------------------------------------------------------------------------
console.timeStamp = noop;

//------------------------------------------------------------------------------
console.profile = noop;

//------------------------------------------------------------------------------
console.profileEnd = noop;

//------------------------------------------------------------------------------
console.count = noop;

//------------------------------------------------------------------------------
console.exception = console.log;

//------------------------------------------------------------------------------
console.table = function(data, columns) {
    console.log("%o", data);
};

//------------------------------------------------------------------------------
// return a new function that calls both functions passed as args
//------------------------------------------------------------------------------
function wrappedOrigCall(orgFunc, newFunc) {
    return function() {
        var args = [].slice.call(arguments);
        try { orgFunc.apply(WinConsole, args); } catch (e) {}
        try { newFunc.apply(console,    args); } catch (e) {}
    };
}

//------------------------------------------------------------------------------
// For every function that exists in the original console object, that
// also exists in the new console object, wrap the new console method
// with one that calls both
//------------------------------------------------------------------------------
for (var key in console) {
    if (typeof WinConsole[key] == "function") {
        console[key] = wrappedOrigCall(WinConsole[key], console[key]);
    }
}

});

// file: lib/common/plugin/contacts.js
define("cordova/plugin/contacts", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    exec = require('cordova/exec'),
    ContactError = require('cordova/plugin/ContactError'),
    utils = require('cordova/utils'),
    Contact = require('cordova/plugin/Contact');

/**
* Represents a group of Contacts.
* @constructor
*/
var contacts = {
    /**
     * Returns an array of Contacts matching the search criteria.
     * @param fields that should be searched
     * @param successCB success callback
     * @param errorCB error callback
     * @param {ContactFindOptions} options that can be applied to contact searching
     * @return array of Contacts matching search criteria
     */
    find:function(fields, successCB, errorCB, options) {
        argscheck.checkArgs('afFO', 'contacts.find', arguments);
        if (!fields.length) {
            errorCB && errorCB(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
        } else {
            var win = function(result) {
                var cs = [];
                for (var i = 0, l = result.length; i < l; i++) {
                    cs.push(contacts.create(result[i]));
                }
                successCB(cs);
            };
            exec(win, errorCB, "Contacts", "search", [fields, options]);
        }
    },

    /**
     * This function creates a new contact, but it does not persist the contact
     * to device storage. To persist the contact to device storage, invoke
     * contact.save().
     * @param properties an object whose properties will be examined to create a new Contact
     * @returns new Contact object
     */
    create:function(properties) {
        argscheck.checkArgs('O', 'contacts.create', arguments);
        var contact = new Contact();
        for (var i in properties) {
            if (typeof contact[i] !== 'undefined' && properties.hasOwnProperty(i)) {
                contact[i] = properties[i];
            }
        }
        return contact;
    }
};

module.exports = contacts;

});

// file: lib/common/plugin/contacts/symbols.js
define("cordova/plugin/contacts/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/contacts', 'navigator.contacts');
modulemapper.clobbers('cordova/plugin/Contact', 'Contact');
modulemapper.clobbers('cordova/plugin/ContactAddress', 'ContactAddress');
modulemapper.clobbers('cordova/plugin/ContactError', 'ContactError');
modulemapper.clobbers('cordova/plugin/ContactField', 'ContactField');
modulemapper.clobbers('cordova/plugin/ContactFindOptions', 'ContactFindOptions');
modulemapper.clobbers('cordova/plugin/ContactName', 'ContactName');
modulemapper.clobbers('cordova/plugin/ContactOrganization', 'ContactOrganization');

});

// file: lib/common/plugin/device.js
define("cordova/plugin/device", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    channel = require('cordova/channel'),
    utils = require('cordova/utils'),
    exec = require('cordova/exec');

// Tell cordova channel to wait on the CordovaInfoReady event
channel.waitForInitialization('onCordovaInfoReady');

/**
 * This represents the mobile device, and provides properties for inspecting the model, version, UUID of the
 * phone, etc.
 * @constructor
 */
function Device() {
    this.available = false;
    this.platform = null;
    this.version = null;
    this.name = null;
    this.uuid = null;
    this.cordova = null;
    this.model = null;

    var me = this;

    channel.onCordovaReady.subscribe(function() {
        me.getInfo(function(info) {
            me.available = true;
            me.platform = info.platform;
            me.version = info.version;
            me.name = info.name;
            me.uuid = info.uuid;
            me.cordova = info.cordova;
            me.model = info.model;
            channel.onCordovaInfoReady.fire();
        },function(e) {
            me.available = false;
            utils.alert("[ERROR] Error initializing Cordova: " + e);
        });
    });
}

/**
 * Get device info
 *
 * @param {Function} successCallback The function to call when the heading data is available
 * @param {Function} errorCallback The function to call when there is an error getting the heading data. (OPTIONAL)
 */
Device.prototype.getInfo = function(successCallback, errorCallback) {
    argscheck.checkArgs('fF', 'Device.getInfo', arguments);
    exec(successCallback, errorCallback, "Device", "getDeviceInfo", []);
};

module.exports = new Device();

});

// file: lib/common/plugin/device/symbols.js
define("cordova/plugin/device/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/device', 'device');

});

// file: lib/common/plugin/echo.js
define("cordova/plugin/echo", function(require, exports, module) {

var exec = require('cordova/exec');

/**
 * Sends the given message through exec() to the Echo plugin, which sends it back to the successCallback.
 * @param successCallback  invoked with a FileSystem object
 * @param errorCallback  invoked if error occurs retrieving file system
 * @param message  The string to be echoed.
 * @param forceAsync  Whether to force an async return value (for testing native->js bridge).
 */
module.exports = function(successCallback, errorCallback, message, forceAsync) {
    var action = forceAsync ? 'echoAsync' : 'echo';
    if (!forceAsync && message.constructor == ArrayBuffer) {
        action = 'echoArrayBuffer';
    }
    exec(successCallback, errorCallback, "Echo", action, [message]);
};


});

// file: lib/ios/plugin/file/symbols.js
define("cordova/plugin/file/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper'),
    symbolshelper = require('cordova/plugin/file/symbolshelper');

symbolshelper(modulemapper.clobbers);
modulemapper.merges('cordova/plugin/ios/Entry', 'Entry');

});

// file: lib/common/plugin/file/symbolshelper.js
define("cordova/plugin/file/symbolshelper", function(require, exports, module) {

module.exports = function(exportFunc) {
    exportFunc('cordova/plugin/DirectoryEntry', 'DirectoryEntry');
    exportFunc('cordova/plugin/DirectoryReader', 'DirectoryReader');
    exportFunc('cordova/plugin/Entry', 'Entry');
    exportFunc('cordova/plugin/File', 'File');
    exportFunc('cordova/plugin/FileEntry', 'FileEntry');
    exportFunc('cordova/plugin/FileError', 'FileError');
    exportFunc('cordova/plugin/FileReader', 'FileReader');
    exportFunc('cordova/plugin/FileSystem', 'FileSystem');
    exportFunc('cordova/plugin/FileUploadOptions', 'FileUploadOptions');
    exportFunc('cordova/plugin/FileUploadResult', 'FileUploadResult');
    exportFunc('cordova/plugin/FileWriter', 'FileWriter');
    exportFunc('cordova/plugin/Flags', 'Flags');
    exportFunc('cordova/plugin/LocalFileSystem', 'LocalFileSystem');
    exportFunc('cordova/plugin/Metadata', 'Metadata');
    exportFunc('cordova/plugin/ProgressEvent', 'ProgressEvent');
    exportFunc('cordova/plugin/requestFileSystem', 'requestFileSystem');
    exportFunc('cordova/plugin/resolveLocalFileSystemURI', 'resolveLocalFileSystemURI');
};

});

// file: lib/common/plugin/filetransfer/symbols.js
define("cordova/plugin/filetransfer/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/FileTransfer', 'FileTransfer');
modulemapper.clobbers('cordova/plugin/FileTransferError', 'FileTransferError');

});

// file: lib/common/plugin/geolocation.js
define("cordova/plugin/geolocation", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    utils = require('cordova/utils'),
    exec = require('cordova/exec'),
    PositionError = require('cordova/plugin/PositionError'),
    Position = require('cordova/plugin/Position');

var timers = {};   // list of timers in use

// Returns default params, overrides if provided with values
function parseParameters(options) {
    var opt = {
        maximumAge: 0,
        enableHighAccuracy: false,
        timeout: Infinity
    };

    if (options) {
        if (options.maximumAge !== undefined && !isNaN(options.maximumAge) && options.maximumAge > 0) {
            opt.maximumAge = options.maximumAge;
        }
        if (options.enableHighAccuracy !== undefined) {
            opt.enableHighAccuracy = options.enableHighAccuracy;
        }
        if (options.timeout !== undefined && !isNaN(options.timeout)) {
            if (options.timeout < 0) {
                opt.timeout = 0;
            } else {
                opt.timeout = options.timeout;
            }
        }
    }

    return opt;
}

// Returns a timeout failure, closed over a specified timeout value and error callback.
function createTimeout(errorCallback, timeout) {
    var t = setTimeout(function() {
        clearTimeout(t);
        t = null;
        errorCallback({
            code:PositionError.TIMEOUT,
            message:"Position retrieval timed out."
        });
    }, timeout);
    return t;
}

var geolocation = {
    lastPosition:null, // reference to last known (cached) position returned
    /**
   * Asynchronously acquires the current position.
   *
   * @param {Function} successCallback    The function to call when the position data is available
   * @param {Function} errorCallback      The function to call when there is an error getting the heading position. (OPTIONAL)
   * @param {PositionOptions} options     The options for getting the position data. (OPTIONAL)
   */
    getCurrentPosition:function(successCallback, errorCallback, options) {
        argscheck.checkArgs('fFO', 'geolocation.getCurrentPosition', arguments);
        options = parseParameters(options);

        // Timer var that will fire an error callback if no position is retrieved from native
        // before the "timeout" param provided expires
        var timeoutTimer = {timer:null};

        var win = function(p) {
            clearTimeout(timeoutTimer.timer);
            if (!(timeoutTimer.timer)) {
                // Timeout already happened, or native fired error callback for
                // this geo request.
                // Don't continue with success callback.
                return;
            }
            var pos = new Position(
                {
                    latitude:p.latitude,
                    longitude:p.longitude,
                    altitude:p.altitude,
                    accuracy:p.accuracy,
                    heading:p.heading,
                    velocity:p.velocity,
                    altitudeAccuracy:p.altitudeAccuracy
                },
                (p.timestamp === undefined ? new Date() : ((p.timestamp instanceof Date) ? p.timestamp : new Date(p.timestamp)))
            );
            geolocation.lastPosition = pos;
            successCallback(pos);
        };
        var fail = function(e) {
            clearTimeout(timeoutTimer.timer);
            timeoutTimer.timer = null;
            var err = new PositionError(e.code, e.message);
            if (errorCallback) {
                errorCallback(err);
            }
        };

        // Check our cached position, if its timestamp difference with current time is less than the maximumAge, then just
        // fire the success callback with the cached position.
        if (geolocation.lastPosition && options.maximumAge && (((new Date()).getTime() - geolocation.lastPosition.timestamp.getTime()) <= options.maximumAge)) {
            successCallback(geolocation.lastPosition);
        // If the cached position check failed and the timeout was set to 0, error out with a TIMEOUT error object.
        } else if (options.timeout === 0) {
            fail({
                code:PositionError.TIMEOUT,
                message:"timeout value in PositionOptions set to 0 and no cached Position object available, or cached Position object's age exceeds provided PositionOptions' maximumAge parameter."
            });
        // Otherwise we have to call into native to retrieve a position.
        } else {
            if (options.timeout !== Infinity) {
                // If the timeout value was not set to Infinity (default), then
                // set up a timeout function that will fire the error callback
                // if no successful position was retrieved before timeout expired.
                timeoutTimer.timer = createTimeout(fail, options.timeout);
            } else {
                // This is here so the check in the win function doesn't mess stuff up
                // may seem weird but this guarantees timeoutTimer is
                // always truthy before we call into native
                timeoutTimer.timer = true;
            }
            exec(win, fail, "Geolocation", "getLocation", [options.enableHighAccuracy, options.maximumAge]);
        }
        return timeoutTimer;
    },
    /**
     * Asynchronously watches the geolocation for changes to geolocation.  When a change occurs,
     * the successCallback is called with the new location.
     *
     * @param {Function} successCallback    The function to call each time the location data is available
     * @param {Function} errorCallback      The function to call when there is an error getting the location data. (OPTIONAL)
     * @param {PositionOptions} options     The options for getting the location data such as frequency. (OPTIONAL)
     * @return String                       The watch id that must be passed to #clearWatch to stop watching.
     */
    watchPosition:function(successCallback, errorCallback, options) {
        argscheck.checkArgs('fFO', 'geolocation.getCurrentPosition', arguments);
        options = parseParameters(options);

        var id = utils.createUUID();

        // Tell device to get a position ASAP, and also retrieve a reference to the timeout timer generated in getCurrentPosition
        timers[id] = geolocation.getCurrentPosition(successCallback, errorCallback, options);

        var fail = function(e) {
            clearTimeout(timers[id].timer);
            var err = new PositionError(e.code, e.message);
            if (errorCallback) {
                errorCallback(err);
            }
        };

        var win = function(p) {
            clearTimeout(timers[id].timer);
            if (options.timeout !== Infinity) {
                timers[id].timer = createTimeout(fail, options.timeout);
            }
            var pos = new Position(
                {
                    latitude:p.latitude,
                    longitude:p.longitude,
                    altitude:p.altitude,
                    accuracy:p.accuracy,
                    heading:p.heading,
                    velocity:p.velocity,
                    altitudeAccuracy:p.altitudeAccuracy
                },
                (p.timestamp === undefined ? new Date() : ((p.timestamp instanceof Date) ? p.timestamp : new Date(p.timestamp)))
            );
            geolocation.lastPosition = pos;
            successCallback(pos);
        };

        exec(win, fail, "Geolocation", "addWatch", [id, options.enableHighAccuracy]);

        return id;
    },
    /**
     * Clears the specified heading watch.
     *
     * @param {String} id       The ID of the watch returned from #watchPosition
     */
    clearWatch:function(id) {
        if (id && timers[id] !== undefined) {
            clearTimeout(timers[id].timer);
            timers[id].timer = false;
            exec(null, null, "Geolocation", "clearWatch", [id]);
        }
    }
};

module.exports = geolocation;

});

// file: lib/common/plugin/geolocation/symbols.js
define("cordova/plugin/geolocation/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.defaults('cordova/plugin/geolocation', 'navigator.geolocation');
modulemapper.clobbers('cordova/plugin/PositionError', 'PositionError');
modulemapper.clobbers('cordova/plugin/Position', 'Position');
modulemapper.clobbers('cordova/plugin/Coordinates', 'Coordinates');

});

// file: lib/common/plugin/globalization.js
define("cordova/plugin/globalization", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    exec = require('cordova/exec'),
    GlobalizationError = require('cordova/plugin/GlobalizationError');

var globalization = {

/**
* Returns the string identifier for the client's current language.
* It returns the language identifier string to the successCB callback with a
* properties object as a parameter. If there is an error getting the language,
* then the errorCB callback is invoked.
*
* @param {Function} successCB
* @param {Function} errorCB
*
* @return Object.value {String}: The language identifier
*
* @error GlobalizationError.UNKNOWN_ERROR
*
* Example
*    globalization.getPreferredLanguage(function (language) {alert('language:' + language.value + '\n');},
*                                function () {});
*/
getPreferredLanguage:function(successCB, failureCB) {
    argscheck.checkArgs('fF', 'Globalization.getPreferredLanguage', arguments);
    exec(successCB, failureCB, "Globalization","getPreferredLanguage", []);
},

/**
* Returns the string identifier for the client's current locale setting.
* It returns the locale identifier string to the successCB callback with a
* properties object as a parameter. If there is an error getting the locale,
* then the errorCB callback is invoked.
*
* @param {Function} successCB
* @param {Function} errorCB
*
* @return Object.value {String}: The locale identifier
*
* @error GlobalizationError.UNKNOWN_ERROR
*
* Example
*    globalization.getLocaleName(function (locale) {alert('locale:' + locale.value + '\n');},
*                                function () {});
*/
getLocaleName:function(successCB, failureCB) {
    argscheck.checkArgs('fF', 'Globalization.getLocaleName', arguments);
    exec(successCB, failureCB, "Globalization","getLocaleName", []);
},


/**
* Returns a date formatted as a string according to the client's user preferences and
* calendar using the time zone of the client. It returns the formatted date string to the
* successCB callback with a properties object as a parameter. If there is an error
* formatting the date, then the errorCB callback is invoked.
*
* The defaults are: formatLenght="short" and selector="date and time"
*
* @param {Date} date
* @param {Function} successCB
* @param {Function} errorCB
* @param {Object} options {optional}
*            formatLength {String}: 'short', 'medium', 'long', or 'full'
*            selector {String}: 'date', 'time', or 'date and time'
*
* @return Object.value {String}: The localized date string
*
* @error GlobalizationError.FORMATTING_ERROR
*
* Example
*    globalization.dateToString(new Date(),
*                function (date) {alert('date:' + date.value + '\n');},
*                function (errorCode) {alert(errorCode);},
*                {formatLength:'short'});
*/
dateToString:function(date, successCB, failureCB, options) {
    argscheck.checkArgs('dfFO', 'Globalization.dateToString', arguments);
    var dateValue = date.valueOf();
    exec(successCB, failureCB, "Globalization", "dateToString", [{"date": dateValue, "options": options}]);
},


/**
* Parses a date formatted as a string according to the client's user
* preferences and calendar using the time zone of the client and returns
* the corresponding date object. It returns the date to the successCB
* callback with a properties object as a parameter. If there is an error
* parsing the date string, then the errorCB callback is invoked.
*
* The defaults are: formatLength="short" and selector="date and time"
*
* @param {String} dateString
* @param {Function} successCB
* @param {Function} errorCB
* @param {Object} options {optional}
*            formatLength {String}: 'short', 'medium', 'long', or 'full'
*            selector {String}: 'date', 'time', or 'date and time'
*
* @return    Object.year {Number}: The four digit year
*            Object.month {Number}: The month from (0 - 11)
*            Object.day {Number}: The day from (1 - 31)
*            Object.hour {Number}: The hour from (0 - 23)
*            Object.minute {Number}: The minute from (0 - 59)
*            Object.second {Number}: The second from (0 - 59)
*            Object.millisecond {Number}: The milliseconds (from 0 - 999),
*                                        not available on all platforms
*
* @error GlobalizationError.PARSING_ERROR
*
* Example
*    globalization.stringToDate('4/11/2011',
*                function (date) { alert('Month:' + date.month + '\n' +
*                    'Day:' + date.day + '\n' +
*                    'Year:' + date.year + '\n');},
*                function (errorCode) {alert(errorCode);},
*                {selector:'date'});
*/
stringToDate:function(dateString, successCB, failureCB, options) {
    argscheck.checkArgs('sfFO', 'Globalization.stringToDate', arguments);
    exec(successCB, failureCB, "Globalization", "stringToDate", [{"dateString": dateString, "options": options}]);
},


/**
* Returns a pattern string for formatting and parsing dates according to the client's
* user preferences. It returns the pattern to the successCB callback with a
* properties object as a parameter. If there is an error obtaining the pattern,
* then the errorCB callback is invoked.
*
* The defaults are: formatLength="short" and selector="date and time"
*
* @param {Function} successCB
* @param {Function} errorCB
* @param {Object} options {optional}
*            formatLength {String}: 'short', 'medium', 'long', or 'full'
*            selector {String}: 'date', 'time', or 'date and time'
*
* @return    Object.pattern {String}: The date and time pattern for formatting and parsing dates.
*                                    The patterns follow Unicode Technical Standard #35
*                                    http://unicode.org/reports/tr35/tr35-4.html
*            Object.timezone {String}: The abbreviated name of the time zone on the client
*            Object.utc_offset {Number}: The current difference in seconds between the client's
*                                        time zone and coordinated universal time.
*            Object.dst_offset {Number}: The current daylight saving time offset in seconds
*                                        between the client's non-daylight saving's time zone
*                                        and the client's daylight saving's time zone.
*
* @error GlobalizationError.PATTERN_ERROR
*
* Example
*    globalization.getDatePattern(
*                function (date) {alert('pattern:' + date.pattern + '\n');},
*                function () {},
*                {formatLength:'short'});
*/
getDatePattern:function(successCB, failureCB, options) {
    argscheck.checkArgs('fFO', 'Globalization.getDatePattern', arguments);
    exec(successCB, failureCB, "Globalization", "getDatePattern", [{"options": options}]);
},


/**
* Returns an array of either the names of the months or days of the week
* according to the client's user preferences and calendar. It returns the array of names to the
* successCB callback with a properties object as a parameter. If there is an error obtaining the
* names, then the errorCB callback is invoked.
*
* The defaults are: type="wide" and item="months"
*
* @param {Function} successCB
* @param {Function} errorCB
* @param {Object} options {optional}
*            type {String}: 'narrow' or 'wide'
*            item {String}: 'months', or 'days'
*
* @return Object.value {Array{String}}: The array of names starting from either
*                                        the first month in the year or the
*                                        first day of the week.
* @error GlobalizationError.UNKNOWN_ERROR
*
* Example
*    globalization.getDateNames(function (names) {
*        for(var i = 0; i < names.value.length; i++) {
*            alert('Month:' + names.value[i] + '\n');}},
*        function () {});
*/
getDateNames:function(successCB, failureCB, options) {
    argscheck.checkArgs('fFO', 'Globalization.getDateNames', arguments);
    exec(successCB, failureCB, "Globalization", "getDateNames", [{"options": options}]);
},

/**
* Returns whether daylight savings time is in effect for a given date using the client's
* time zone and calendar. It returns whether or not daylight savings time is in effect
* to the successCB callback with a properties object as a parameter. If there is an error
* reading the date, then the errorCB callback is invoked.
*
* @param {Date} date
* @param {Function} successCB
* @param {Function} errorCB
*
* @return Object.dst {Boolean}: The value "true" indicates that daylight savings time is
*                                in effect for the given date and "false" indicate that it is not.
*
* @error GlobalizationError.UNKNOWN_ERROR
*
* Example
*    globalization.isDayLightSavingsTime(new Date(),
*                function (date) {alert('dst:' + date.dst + '\n');}
*                function () {});
*/
isDayLightSavingsTime:function(date, successCB, failureCB) {
    argscheck.checkArgs('dfF', 'Globalization.isDayLightSavingsTime', arguments);
    var dateValue = date.valueOf();
    exec(successCB, failureCB, "Globalization", "isDayLightSavingsTime", [{"date": dateValue}]);
},

/**
* Returns the first day of the week according to the client's user preferences and calendar.
* The days of the week are numbered starting from 1 where 1 is considered to be Sunday.
* It returns the day to the successCB callback with a properties object as a parameter.
* If there is an error obtaining the pattern, then the errorCB callback is invoked.
*
* @param {Function} successCB
* @param {Function} errorCB
*
* @return Object.value {Number}: The number of the first day of the week.
*
* @error GlobalizationError.UNKNOWN_ERROR
*
* Example
*    globalization.getFirstDayOfWeek(function (day)
*                { alert('Day:' + day.value + '\n');},
*                function () {});
*/
getFirstDayOfWeek:function(successCB, failureCB) {
    argscheck.checkArgs('fF', 'Globalization.getFirstDayOfWeek', arguments);
    exec(successCB, failureCB, "Globalization", "getFirstDayOfWeek", []);
},


/**
* Returns a number formatted as a string according to the client's user preferences.
* It returns the formatted number string to the successCB callback with a properties object as a
* parameter. If there is an error formatting the number, then the errorCB callback is invoked.
*
* The defaults are: type="decimal"
*
* @param {Number} number
* @param {Function} successCB
* @param {Function} errorCB
* @param {Object} options {optional}
*            type {String}: 'decimal', "percent", or 'currency'
*
* @return Object.value {String}: The formatted number string.
*
* @error GlobalizationError.FORMATTING_ERROR
*
* Example
*    globalization.numberToString(3.25,
*                function (number) {alert('number:' + number.value + '\n');},
*                function () {},
*                {type:'decimal'});
*/
numberToString:function(number, successCB, failureCB, options) {
    argscheck.checkArgs('nfFO', 'Globalization.numberToString', arguments);
    exec(successCB, failureCB, "Globalization", "numberToString", [{"number": number, "options": options}]);
},

/**
* Parses a number formatted as a string according to the client's user preferences and
* returns the corresponding number. It returns the number to the successCB callback with a
* properties object as a parameter. If there is an error parsing the number string, then
* the errorCB callback is invoked.
*
* The defaults are: type="decimal"
*
* @param {String} numberString
* @param {Function} successCB
* @param {Function} errorCB
* @param {Object} options {optional}
*            type {String}: 'decimal', "percent", or 'currency'
*
* @return Object.value {Number}: The parsed number.
*
* @error GlobalizationError.PARSING_ERROR
*
* Example
*    globalization.stringToNumber('1234.56',
*                function (number) {alert('Number:' + number.value + '\n');},
*                function () { alert('Error parsing number');});
*/
stringToNumber:function(numberString, successCB, failureCB, options) {
    argscheck.checkArgs('sfFO', 'Globalization.stringToNumber', arguments);
    exec(successCB, failureCB, "Globalization", "stringToNumber", [{"numberString": numberString, "options": options}]);
},

/**
* Returns a pattern string for formatting and parsing numbers according to the client's user
* preferences. It returns the pattern to the successCB callback with a properties object as a
* parameter. If there is an error obtaining the pattern, then the errorCB callback is invoked.
*
* The defaults are: type="decimal"
*
* @param {Function} successCB
* @param {Function} errorCB
* @param {Object} options {optional}
*            type {String}: 'decimal', "percent", or 'currency'
*
* @return    Object.pattern {String}: The number pattern for formatting and parsing numbers.
*                                    The patterns follow Unicode Technical Standard #35.
*                                    http://unicode.org/reports/tr35/tr35-4.html
*            Object.symbol {String}: The symbol to be used when formatting and parsing
*                                    e.g., percent or currency symbol.
*            Object.fraction {Number}: The number of fractional digits to use when parsing and
*                                    formatting numbers.
*            Object.rounding {Number}: The rounding increment to use when parsing and formatting.
*            Object.positive {String}: The symbol to use for positive numbers when parsing and formatting.
*            Object.negative: {String}: The symbol to use for negative numbers when parsing and formatting.
*            Object.decimal: {String}: The decimal symbol to use for parsing and formatting.
*            Object.grouping: {String}: The grouping symbol to use for parsing and formatting.
*
* @error GlobalizationError.PATTERN_ERROR
*
* Example
*    globalization.getNumberPattern(
*                function (pattern) {alert('Pattern:' + pattern.pattern + '\n');},
*                function () {});
*/
getNumberPattern:function(successCB, failureCB, options) {
    argscheck.checkArgs('fFO', 'Globalization.getNumberPattern', arguments);
    exec(successCB, failureCB, "Globalization", "getNumberPattern", [{"options": options}]);
},

/**
* Returns a pattern string for formatting and parsing currency values according to the client's
* user preferences and ISO 4217 currency code. It returns the pattern to the successCB callback with a
* properties object as a parameter. If there is an error obtaining the pattern, then the errorCB
* callback is invoked.
*
* @param {String} currencyCode
* @param {Function} successCB
* @param {Function} errorCB
*
* @return    Object.pattern {String}: The currency pattern for formatting and parsing currency values.
*                                    The patterns follow Unicode Technical Standard #35
*                                    http://unicode.org/reports/tr35/tr35-4.html
*            Object.code {String}: The ISO 4217 currency code for the pattern.
*            Object.fraction {Number}: The number of fractional digits to use when parsing and
*                                    formatting currency.
*            Object.rounding {Number}: The rounding increment to use when parsing and formatting.
*            Object.decimal: {String}: The decimal symbol to use for parsing and formatting.
*            Object.grouping: {String}: The grouping symbol to use for parsing and formatting.
*
* @error GlobalizationError.FORMATTING_ERROR
*
* Example
*    globalization.getCurrencyPattern('EUR',
*                function (currency) {alert('Pattern:' + currency.pattern + '\n');}
*                function () {});
*/
getCurrencyPattern:function(currencyCode, successCB, failureCB) {
    argscheck.checkArgs('sfF', 'Globalization.getCurrencyPattern', arguments);
    exec(successCB, failureCB, "Globalization", "getCurrencyPattern", [{"currencyCode": currencyCode}]);
}

};

module.exports = globalization;

});

// file: lib/common/plugin/globalization/symbols.js
define("cordova/plugin/globalization/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/globalization', 'navigator.globalization');
modulemapper.clobbers('cordova/plugin/GlobalizationError', 'GlobalizationError');

});

// file: lib/ios/plugin/inappbrowser/symbols.js
define("cordova/plugin/inappbrowser/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/InAppBrowser', 'open');

});

// file: lib/ios/plugin/ios/Contact.js
define("cordova/plugin/ios/Contact", function(require, exports, module) {

var exec = require('cordova/exec'),
    ContactError = require('cordova/plugin/ContactError');

/**
 * Provides iOS Contact.display API.
 */
module.exports = {
    display : function(errorCB, options) {
        /*
         *    Display a contact using the iOS Contact Picker UI
         *    NOT part of W3C spec so no official documentation
         *
         *    @param errorCB error callback
         *    @param options object
         *    allowsEditing: boolean AS STRING
         *        "true" to allow editing the contact
         *        "false" (default) display contact
         */

        if (this.id === null) {
            if (typeof errorCB === "function") {
                var errorObj = new ContactError(ContactError.UNKNOWN_ERROR);
                errorCB(errorObj);
            }
        }
        else {
            exec(null, errorCB, "Contacts","displayContact", [this.id, options]);
        }
    }
};

});

// file: lib/ios/plugin/ios/Entry.js
define("cordova/plugin/ios/Entry", function(require, exports, module) {

module.exports = {
    toURL:function() {
        // TODO: refactor path in a cross-platform way so we can eliminate
        // these kinds of platform-specific hacks.
        return "file://localhost" + this.fullPath;
    },
    toURI: function() {
        console.log("DEPRECATED: Update your code to use 'toURL'");
        return "file://localhost" + this.fullPath;
    }
};

});

// file: lib/ios/plugin/ios/console.js
define("cordova/plugin/ios/console", function(require, exports, module) {

var exec = require('cordova/exec');

/**
 * create a nice string for an object
 */
function stringify(message) {
    try {
        if (typeof message === "object" && JSON && JSON.stringify) {
            try {
                return JSON.stringify(message);
            }
            catch (e) {
                return "error JSON.stringify()ing argument: " + e;
            }
        } else {
            return message.toString();
        }
    } catch (e) {
        return e.toString();
    }
}

/**
 * Wrapper one of the console logging methods, so that
 * the Cordova logging native is called, then the original.
 */
function wrappedMethod(console, method) {
    var origMethod = console[method];

    return function(message) {
        exec(null, null,
            'Debug Console', 'log',
            [ stringify(message), { logLevel: method.toUpperCase() } ]
        );

        if (!origMethod) return;

        origMethod.apply(console, arguments);
    };
}

var console = window.console || {};

// 2012-10-06 pmuellr - marking setLevel() method and logLevel property
// on console as deprecated;
// it didn't do anything useful, since the level constants weren't accessible
// to anyone

console.setLevel = function() {};
console.logLevel = 0;

// wrapper the logging messages

var methods = ["log", "debug", "info", "warn", "error"];

for (var i=0; i<methods.length; i++) {
    var method = methods[i];

    console[method] = wrappedMethod(console, method);
}

module.exports = console;

});

// file: lib/ios/plugin/ios/console/symbols.js
define("cordova/plugin/ios/console/symbols", function(require, exports, module) {

var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/ios/console', 'console');

});

// file: lib/ios/plugin/ios/contacts.js
define("cordova/plugin/ios/contacts", function(require, exports, module) {

var exec = require('cordova/exec');

/**
 * Provides iOS enhanced contacts API.
 */
module.exports = {
    newContactUI : function(successCallback) {
        /*
         *    Create a contact using the iOS Contact Picker UI
         *    NOT part of W3C spec so no official documentation
         *
         * returns:  the id of the created contact as param to successCallback
         */
        exec(successCallback, null, "Contacts","newContact", []);
    },
    chooseContact : function(successCallback, options) {
        /*
         *    Select a contact using the iOS Contact Picker UI
         *    NOT part of W3C spec so no official documentation
         *
         *    @param errorCB error callback
         *    @param options object
         *    allowsEditing: boolean AS STRING
         *        "true" to allow editing the contact
         *        "false" (default) display contact
         *      fields: array of fields to return in contact object (see ContactOptions.fields)
         *
         *    @returns
         *        id of contact selected
         *        ContactObject
         *            if no fields provided contact contains just id information
         *            if fields provided contact object contains information for the specified fields
         *
         */
         var win = function(result) {
             var fullContact = require('cordova/plugin/contacts').create(result);
            successCallback(fullContact.id, fullContact);
       };
        exec(win, null, "Contacts","chooseContact", [options]);
    }
};

});

// file: lib/ios/plugin/ios/contacts/symbols.js
define("cordova/plugin/ios/contacts/symbols", function(require, exports, module) {

require('cordova/plugin/contacts/symbols');

var modulemapper = require('cordova/modulemapper');

modulemapper.merges('cordova/plugin/ios/contacts', 'navigator.contacts');
modulemapper.merges('cordova/plugin/ios/Contact', 'Contact');

});

// file: lib/ios/plugin/ios/geolocation/symbols.js
define("cordova/plugin/ios/geolocation/symbols", function(require, exports, module) {

var modulemapper = require('cordova/modulemapper');

modulemapper.merges('cordova/plugin/geolocation', 'navigator.geolocation');

});

// file: lib/ios/plugin/ios/logger/plugininit.js
define("cordova/plugin/ios/logger/plugininit", function(require, exports, module) {

// use the native logger
var logger = require("cordova/plugin/logger");
logger.useConsole(false);

});

// file: lib/ios/plugin/ios/notification.js
define("cordova/plugin/ios/notification", function(require, exports, module) {

var Media = require('cordova/plugin/Media');

module.exports = {
    beep:function(count) {
        (new Media('beep.wav')).play();
    }
};

});

// file: lib/common/plugin/logger.js
define("cordova/plugin/logger", function(require, exports, module) {

//------------------------------------------------------------------------------
// The logger module exports the following properties/functions:
//
// LOG                          - constant for the level LOG
// ERROR                        - constant for the level ERROR
// WARN                         - constant for the level WARN
// INFO                         - constant for the level INFO
// DEBUG                        - constant for the level DEBUG
// logLevel()                   - returns current log level
// logLevel(value)              - sets and returns a new log level
// useConsole()                 - returns whether logger is using console
// useConsole(value)            - sets and returns whether logger is using console
// log(message,...)             - logs a message at level LOG
// error(message,...)           - logs a message at level ERROR
// warn(message,...)            - logs a message at level WARN
// info(message,...)            - logs a message at level INFO
// debug(message,...)           - logs a message at level DEBUG
// logLevel(level,message,...)  - logs a message specified level
//
//------------------------------------------------------------------------------

var logger = exports;

var exec    = require('cordova/exec');
var utils   = require('cordova/utils');

var UseConsole   = true;
var Queued       = [];
var DeviceReady  = false;
var CurrentLevel;

/**
 * Logging levels
 */

var Levels = [
    "LOG",
    "ERROR",
    "WARN",
    "INFO",
    "DEBUG"
];

/*
 * add the logging levels to the logger object and
 * to a separate levelsMap object for testing
 */

var LevelsMap = {};
for (var i=0; i<Levels.length; i++) {
    var level = Levels[i];
    LevelsMap[level] = i;
    logger[level]    = level;
}

CurrentLevel = LevelsMap.WARN;

/**
 * Getter/Setter for the logging level
 *
 * Returns the current logging level.
 *
 * When a value is passed, sets the logging level to that value.
 * The values should be one of the following constants:
 *    logger.LOG
 *    logger.ERROR
 *    logger.WARN
 *    logger.INFO
 *    logger.DEBUG
 *
 * The value used determines which messages get printed.  The logging
 * values above are in order, and only messages logged at the logging
 * level or above will actually be displayed to the user.  E.g., the
 * default level is WARN, so only messages logged with LOG, ERROR, or
 * WARN will be displayed; INFO and DEBUG messages will be ignored.
 */
logger.level = function (value) {
    if (arguments.length) {
        if (LevelsMap[value] === null) {
            throw new Error("invalid logging level: " + value);
        }
        CurrentLevel = LevelsMap[value];
    }

    return Levels[CurrentLevel];
};

/**
 * Getter/Setter for the useConsole functionality
 *
 * When useConsole is true, the logger will log via the
 * browser 'console' object.  Otherwise, it will use the
 * native Logger plugin.
 */
logger.useConsole = function (value) {
    if (arguments.length) UseConsole = !!value;

    if (UseConsole) {
        if (typeof console == "undefined") {
            throw new Error("global console object is not defined");
        }

        if (typeof console.log != "function") {
            throw new Error("global console object does not have a log function");
        }

        if (typeof console.useLogger == "function") {
            if (console.useLogger()) {
                throw new Error("console and logger are too intertwingly");
            }
        }
    }

    return UseConsole;
};

/**
 * Logs a message at the LOG level.
 *
 * Parameters passed after message are used applied to
 * the message with utils.format()
 */
logger.log   = function(message) { logWithArgs("LOG",   arguments); };

/**
 * Logs a message at the ERROR level.
 *
 * Parameters passed after message are used applied to
 * the message with utils.format()
 */
logger.error = function(message) { logWithArgs("ERROR", arguments); };

/**
 * Logs a message at the WARN level.
 *
 * Parameters passed after message are used applied to
 * the message with utils.format()
 */
logger.warn  = function(message) { logWithArgs("WARN",  arguments); };

/**
 * Logs a message at the INFO level.
 *
 * Parameters passed after message are used applied to
 * the message with utils.format()
 */
logger.info  = function(message) { logWithArgs("INFO",  arguments); };

/**
 * Logs a message at the DEBUG level.
 *
 * Parameters passed after message are used applied to
 * the message with utils.format()
 */
logger.debug = function(message) { logWithArgs("DEBUG", arguments); };

// log at the specified level with args
function logWithArgs(level, args) {
    args = [level].concat([].slice.call(args));
    logger.logLevel.apply(logger, args);
}

/**
 * Logs a message at the specified level.
 *
 * Parameters passed after message are used applied to
 * the message with utils.format()
 */
logger.logLevel = function(level, message /* , ... */) {
    // format the message with the parameters
    var formatArgs = [].slice.call(arguments, 2);
    message    = utils.vformat(message, formatArgs);

    if (LevelsMap[level] === null) {
        throw new Error("invalid logging level: " + level);
    }

    if (LevelsMap[level] > CurrentLevel) return;

    // queue the message if not yet at deviceready
    if (!DeviceReady && !UseConsole) {
        Queued.push([level, message]);
        return;
    }

    // if not using the console, use the native logger
    if (!UseConsole) {
        exec(null, null, "Logger", "logLevel", [level, message]);
        return;
    }

    // make sure console is not using logger
    if (console.__usingCordovaLogger) {
        throw new Error("console and logger are too intertwingly");
    }

    // log to the console
    switch (level) {
        case logger.LOG:   console.log(message); break;
        case logger.ERROR: console.log("ERROR: " + message); break;
        case logger.WARN:  console.log("WARN: "  + message); break;
        case logger.INFO:  console.log("INFO: "  + message); break;
        case logger.DEBUG: console.log("DEBUG: " + message); break;
    }
};

// when deviceready fires, log queued messages
logger.__onDeviceReady = function() {
    if (DeviceReady) return;

    DeviceReady = true;

    for (var i=0; i<Queued.length; i++) {
        var messageArgs = Queued[i];
        logger.logLevel(messageArgs[0], messageArgs[1]);
    }

    Queued = null;
};

// add a deviceready event to log queued messages
document.addEventListener("deviceready", logger.__onDeviceReady, false);

});

// file: lib/common/plugin/logger/symbols.js
define("cordova/plugin/logger/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/logger', 'cordova.logger');

});

// file: lib/ios/plugin/media/symbols.js
define("cordova/plugin/media/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.defaults('cordova/plugin/Media', 'Media');
modulemapper.clobbers('cordova/plugin/MediaError', 'MediaError');

});

// file: lib/common/plugin/network.js
define("cordova/plugin/network", function(require, exports, module) {

var exec = require('cordova/exec'),
    cordova = require('cordova'),
    channel = require('cordova/channel'),
    utils = require('cordova/utils');

// Link the onLine property with the Cordova-supplied network info.
// This works because we clobber the naviagtor object with our own
// object in bootstrap.js.
if (typeof navigator != 'undefined') {
    utils.defineGetter(navigator, 'onLine', function() {
        return this.connection.type != 'none';
    });
}

function NetworkConnection() {
    this.type = 'unknown';
}

/**
 * Get connection info
 *
 * @param {Function} successCallback The function to call when the Connection data is available
 * @param {Function} errorCallback The function to call when there is an error getting the Connection data. (OPTIONAL)
 */
NetworkConnection.prototype.getInfo = function(successCallback, errorCallback) {
    exec(successCallback, errorCallback, "NetworkStatus", "getConnectionInfo", []);
};

var me = new NetworkConnection();
var timerId = null;
var timeout = 500;

channel.onCordovaReady.subscribe(function() {
    me.getInfo(function(info) {
        me.type = info;
        if (info === "none") {
            // set a timer if still offline at the end of timer send the offline event
            timerId = setTimeout(function(){
                cordova.fireDocumentEvent("offline");
                timerId = null;
            }, timeout);
        } else {
            // If there is a current offline event pending clear it
            if (timerId !== null) {
                clearTimeout(timerId);
                timerId = null;
            }
            cordova.fireDocumentEvent("online");
        }

        // should only fire this once
        if (channel.onCordovaConnectionReady.state !== 2) {
            channel.onCordovaConnectionReady.fire();
        }
    },
    function (e) {
        // If we can't get the network info we should still tell Cordova
        // to fire the deviceready event.
        if (channel.onCordovaConnectionReady.state !== 2) {
            channel.onCordovaConnectionReady.fire();
        }
        console.log("Error initializing Network Connection: " + e);
    });
});

module.exports = me;

});

// file: lib/common/plugin/networkstatus/symbols.js
define("cordova/plugin/networkstatus/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/network', 'navigator.network.connection', 'navigator.network.connection is deprecated. Use navigator.connection instead.');
modulemapper.clobbers('cordova/plugin/network', 'navigator.connection');
modulemapper.defaults('cordova/plugin/Connection', 'Connection');

});

// file: lib/common/plugin/notification.js
define("cordova/plugin/notification", function(require, exports, module) {

var exec = require('cordova/exec');

/**
 * Provides access to notifications on the device.
 */

module.exports = {

    /**
     * Open a native alert dialog, with a customizable title and button text.
     *
     * @param {String} message              Message to print in the body of the alert
     * @param {Function} completeCallback   The callback that is called when user clicks on a button.
     * @param {String} title                Title of the alert dialog (default: Alert)
     * @param {String} buttonLabel          Label of the close button (default: OK)
     */
    alert: function(message, completeCallback, title, buttonLabel) {
        var _title = (title || "Alert");
        var _buttonLabel = (buttonLabel || "OK");
        exec(completeCallback, null, "Notification", "alert", [message, _title, _buttonLabel]);
    },

    /**
     * Open a native confirm dialog, with a customizable title and button text.
     * The result that the user selects is returned to the result callback.
     *
     * @param {String} message              Message to print in the body of the alert
     * @param {Function} resultCallback     The callback that is called when user clicks on a button.
     * @param {String} title                Title of the alert dialog (default: Confirm)
     * @param {String} buttonLabels         Comma separated list of the labels of the buttons (default: 'OK,Cancel')
     */
    confirm: function(message, resultCallback, title, buttonLabels) {
        var _title = (title || "Confirm");
        var _buttonLabels = (buttonLabels || "OK,Cancel");
        exec(resultCallback, null, "Notification", "confirm", [message, _title, _buttonLabels]);
    },

    /**
     * Causes the device to vibrate.
     *
     * @param {Integer} mills       The number of milliseconds to vibrate for.
     */
    vibrate: function(mills) {
        exec(null, null, "Notification", "vibrate", [mills]);
    },

    /**
     * Causes the device to beep.
     * On Android, the default notification ringtone is played "count" times.
     *
     * @param {Integer} count       The number of beeps.
     */
    beep: function(count) {
        exec(null, null, "Notification", "beep", [count]);
    }
};

});

// file: lib/ios/plugin/notification/symbols.js
define("cordova/plugin/notification/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/notification', 'navigator.notification');
modulemapper.merges('cordova/plugin/ios/notification', 'navigator.notification');

});

// file: lib/common/plugin/requestFileSystem.js
define("cordova/plugin/requestFileSystem", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    FileError = require('cordova/plugin/FileError'),
    FileSystem = require('cordova/plugin/FileSystem'),
    exec = require('cordova/exec');

/**
 * Request a file system in which to store application data.
 * @param type  local file system type
 * @param size  indicates how much storage space, in bytes, the application expects to need
 * @param successCallback  invoked with a FileSystem object
 * @param errorCallback  invoked if error occurs retrieving file system
 */
var requestFileSystem = function(type, size, successCallback, errorCallback) {
    argscheck.checkArgs('nnFF', 'requestFileSystem', arguments);
    var fail = function(code) {
        errorCallback && errorCallback(new FileError(code));
    };

    if (type < 0 || type > 3) {
        fail(FileError.SYNTAX_ERR);
    } else {
        // if successful, return a FileSystem object
        var success = function(file_system) {
            if (file_system) {
                if (successCallback) {
                    // grab the name and root from the file system object
                    var result = new FileSystem(file_system.name, file_system.root);
                    successCallback(result);
                }
            }
            else {
                // no FileSystem object returned
                fail(FileError.NOT_FOUND_ERR);
            }
        };
        exec(success, fail, "File", "requestFileSystem", [type, size]);
    }
};

module.exports = requestFileSystem;

});

// file: lib/common/plugin/resolveLocalFileSystemURI.js
define("cordova/plugin/resolveLocalFileSystemURI", function(require, exports, module) {

var argscheck = require('cordova/argscheck'),
    DirectoryEntry = require('cordova/plugin/DirectoryEntry'),
    FileEntry = require('cordova/plugin/FileEntry'),
    FileError = require('cordova/plugin/FileError'),
    exec = require('cordova/exec');

/**
 * Look up file system Entry referred to by local URI.
 * @param {DOMString} uri  URI referring to a local file or directory
 * @param successCallback  invoked with Entry object corresponding to URI
 * @param errorCallback    invoked if error occurs retrieving file system entry
 */
module.exports = function(uri, successCallback, errorCallback) {
    argscheck.checkArgs('sFF', 'resolveLocalFileSystemURI', arguments);
    // error callback
    var fail = function(error) {
        errorCallback && errorCallback(new FileError(error));
    };
    // sanity check for 'not:valid:filename'
    if(!uri || uri.split(":").length > 2) {
        setTimeout( function() {
            fail(FileError.ENCODING_ERR);
        },0);
        return;
    }
    // if successful, return either a file or directory entry
    var success = function(entry) {
        var result;
        if (entry) {
            if (successCallback) {
                // create appropriate Entry object
                result = (entry.isDirectory) ? new DirectoryEntry(entry.name, entry.fullPath) : new FileEntry(entry.name, entry.fullPath);
                successCallback(result);
            }
        }
        else {
            // no Entry object returned
            fail(FileError.NOT_FOUND_ERR);
        }
    };

    exec(success, fail, "File", "resolveLocalFileSystemURI", [uri]);
};

});

// file: lib/common/plugin/splashscreen.js
define("cordova/plugin/splashscreen", function(require, exports, module) {

var exec = require('cordova/exec');

var splashscreen = {
    show:function() {
        exec(null, null, "SplashScreen", "show", []);
    },
    hide:function() {
        exec(null, null, "SplashScreen", "hide", []);
    }
};

module.exports = splashscreen;

});

// file: lib/common/plugin/splashscreen/symbols.js
define("cordova/plugin/splashscreen/symbols", function(require, exports, module) {


var modulemapper = require('cordova/modulemapper');

modulemapper.clobbers('cordova/plugin/splashscreen', 'navigator.splashscreen');

});

// file: lib/common/symbols.js
define("cordova/symbols", function(require, exports, module) {

var modulemapper = require('cordova/modulemapper');

// Use merges here in case others symbols files depend on this running first,
// but fail to declare the dependency with a require().
modulemapper.merges('cordova', 'cordova');
modulemapper.clobbers('cordova/exec', 'cordova.exec');
modulemapper.clobbers('cordova/exec', 'Cordova.exec');

});

// file: lib/common/utils.js
define("cordova/utils", function(require, exports, module) {

var utils = exports;

/**
 * Defines a property getter / setter for obj[key].
 */
utils.defineGetterSetter = function(obj, key, getFunc, opt_setFunc) {
    if (Object.defineProperty) {
        var desc = {
            get: getFunc,
            configurable: true
        };
        if (opt_setFunc) {
            desc.set = opt_setFunc;
        }
        Object.defineProperty(obj, key, desc);
    } else {
        obj.__defineGetter__(key, getFunc);
        if (opt_setFunc) {
            obj.__defineSetter__(key, opt_setFunc);
        }
    }
};

/**
 * Defines a property getter for obj[key].
 */
utils.defineGetter = utils.defineGetterSetter;

utils.arrayIndexOf = function(a, item) {
    if (a.indexOf) {
        return a.indexOf(item);
    }
    var len = a.length;
    for (var i = 0; i < len; ++i) {
        if (a[i] == item) {
            return i;
        }
    }
    return -1;
};

/**
 * Returns whether the item was found in the array.
 */
utils.arrayRemove = function(a, item) {
    var index = utils.arrayIndexOf(a, item);
    if (index != -1) {
        a.splice(index, 1);
    }
    return index != -1;
};

utils.typeName = function(val) {
    return Object.prototype.toString.call(val).slice(8, -1);
};

/**
 * Returns an indication of whether the argument is an array or not
 */
utils.isArray = function(a) {
    return utils.typeName(a) == 'Array';
};

/**
 * Returns an indication of whether the argument is a Date or not
 */
utils.isDate = function(d) {
    return utils.typeName(d) == 'Date';
};

/**
 * Does a deep clone of the object.
 */
utils.clone = function(obj) {
    if(!obj || typeof obj == 'function' || utils.isDate(obj) || typeof obj != 'object') {
        return obj;
    }

    var retVal, i;

    if(utils.isArray(obj)){
        retVal = [];
        for(i = 0; i < obj.length; ++i){
            retVal.push(utils.clone(obj[i]));
        }
        return retVal;
    }

    retVal = {};
    for(i in obj){
        if(!(i in retVal) || retVal[i] != obj[i]) {
            retVal[i] = utils.clone(obj[i]);
        }
    }
    return retVal;
};

/**
 * Returns a wrapped version of the function
 */
utils.close = function(context, func, params) {
    if (typeof params == 'undefined') {
        return function() {
            return func.apply(context, arguments);
        };
    } else {
        return function() {
            return func.apply(context, params);
        };
    }
};

/**
 * Create a UUID
 */
utils.createUUID = function() {
    return UUIDcreatePart(4) + '-' +
        UUIDcreatePart(2) + '-' +
        UUIDcreatePart(2) + '-' +
        UUIDcreatePart(2) + '-' +
        UUIDcreatePart(6);
};

/**
 * Extends a child object from a parent object using classical inheritance
 * pattern.
 */
utils.extend = (function() {
    // proxy used to establish prototype chain
    var F = function() {};
    // extend Child from Parent
    return function(Child, Parent) {
        F.prototype = Parent.prototype;
        Child.prototype = new F();
        Child.__super__ = Parent.prototype;
        Child.prototype.constructor = Child;
    };
}());

/**
 * Alerts a message in any available way: alert or console.log.
 */
utils.alert = function(msg) {
    if (window.alert) {
        window.alert(msg);
    } else if (console && console.log) {
        console.log(msg);
    }
};

/**
 * Formats a string and arguments following it ala sprintf()
 *
 * see utils.vformat() for more information
 */
utils.format = function(formatString /* ,... */) {
    var args = [].slice.call(arguments, 1);
    return utils.vformat(formatString, args);
};

/**
 * Formats a string and arguments following it ala vsprintf()
 *
 * format chars:
 *   %j - format arg as JSON
 *   %o - format arg as JSON
 *   %c - format arg as ''
 *   %% - replace with '%'
 * any other char following % will format it's
 * arg via toString().
 *
 * for rationale, see FireBug's Console API:
 *    http://getfirebug.com/wiki/index.php/Console_API
 */
utils.vformat = function(formatString, args) {
    if (formatString === null || formatString === undefined) return "";
    if (arguments.length == 1) return formatString.toString();
    if (typeof formatString != "string") return formatString.toString();

    var pattern = /(.*?)%(.)(.*)/;
    var rest    = formatString;
    var result  = [];

    while (args.length) {
        var arg   = args.shift();
        var match = pattern.exec(rest);

        if (!match) break;

        rest = match[3];

        result.push(match[1]);

        if (match[2] == '%') {
            result.push('%');
            args.unshift(arg);
            continue;
        }

        result.push(formatted(arg, match[2]));
    }

    result.push(rest);

    return result.join('');
};

//------------------------------------------------------------------------------
function UUIDcreatePart(length) {
    var uuidpart = "";
    for (var i=0; i<length; i++) {
        var uuidchar = parseInt((Math.random() * 256), 10).toString(16);
        if (uuidchar.length == 1) {
            uuidchar = "0" + uuidchar;
        }
        uuidpart += uuidchar;
    }
    return uuidpart;
}

//------------------------------------------------------------------------------
function formatted(object, formatChar) {

    try {
        switch(formatChar) {
            case 'j':
            case 'o': return JSON.stringify(object);
            case 'c': return '';
        }
    }
    catch (e) {
        return "error JSON.stringify()ing argument: " + e;
    }

    if ((object === null) || (object === undefined)) {
        return Object.prototype.toString.call(object);
    }

    return object.toString();
}

});


window.cordova = require('cordova');

// file: lib/scripts/bootstrap.js

(function (context) {
    // Replace navigator before any modules are required(), to ensure it happens as soon as possible.
    // We replace it so that properties that can't be clobbered can instead be overridden.
    if (context.navigator) {
        var CordovaNavigator = function() {};
        CordovaNavigator.prototype = context.navigator;
        context.navigator = new CordovaNavigator();
    }

    var channel = require("cordova/channel"),
        _self = {
            boot: function () {
                /**
                 * Create all cordova objects once page has fully loaded and native side is ready.
                 */
                channel.join(function() {
                    var builder = require('cordova/builder'),
                        platform = require('cordova/platform');

                    builder.buildIntoButDoNotClobber(platform.defaults, context);
                    builder.buildIntoAndClobber(platform.clobbers, context);
                    builder.buildIntoAndMerge(platform.merges, context);

                    // Call the platform-specific initialization
                    platform.initialize();

                    // Fire event to notify that all objects are created
                    channel.onCordovaReady.fire();

                    // Fire onDeviceReady event once all constructors have run and
                    // cordova info has been received from native side.
                    channel.join(function() {
                        require('cordova').fireDocumentEvent('deviceready');
                    }, channel.deviceReadyChannelsArray);

                }, [ channel.onDOMContentLoaded, channel.onNativeReady ]);
            }
        };

    // boot up once native side is ready
    channel.onNativeReady.subscribe(_self.boot);

    // _nativeReady is global variable that the native side can set
    // to signify that the native code is ready. It is a global since
    // it may be called before any cordova JS is ready.
    if (window._nativeReady) {
        channel.onNativeReady.fire();
    }

}(window));


})();
//
//  ActionSheet.js
//
// Created by Olivier Louvignes on 2011-11-27.
//
// Copyright 2011-2012 Olivier Louvignes. All rights reserved.
// MIT Licensed

(function(cordova) {

	function ActionSheet() {}

	ActionSheet.prototype.create = function(options, callback) {
		options || (options = {});
		var scope = options.scope || null;

		var config = {
			title : options.title || '',
			items : options.items || ['Cancel'],
			style : options.style || 'default',
			destructiveButtonIndex : options.hasOwnProperty('destructiveButtonIndex') ? options.destructiveButtonIndex : undefined,
			cancelButtonIndex : options.hasOwnProperty('cancelButtonIndex') ? options.cancelButtonIndex : undefined
		};

		var _callback = function(result) {
			var buttonValue = false, // value for cancelButton
				buttonIndex = result.buttonIndex;
			if(!config.cancelButtonIndex || buttonIndex != config.cancelButtonIndex) {
				buttonValue = config.items[buttonIndex];
			}
			if(typeof callback == 'function') callback.apply(scope, [buttonValue, buttonIndex]);
		};

		return cordova.exec(_callback, _callback, 'ActionSheet', 'create', [config]);
	};

	cordova.addConstructor(function() {
		if(!window.plugins) window.plugins = {};
		window.plugins.actionSheet = new ActionSheet();
	});

})(window.cordova || window.Cordova);
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function(){var n=this,t=n._,r={},e=Array.prototype,u=Object.prototype,i=Function.prototype,a=e.push,o=e.slice,c=e.concat,l=u.toString,f=u.hasOwnProperty,s=e.forEach,p=e.map,h=e.reduce,v=e.reduceRight,g=e.filter,d=e.every,m=e.some,y=e.indexOf,b=e.lastIndexOf,x=Array.isArray,w=Object.keys,_=i.bind,j=function(n){return n instanceof j?n:this instanceof j?void(this._wrapped=n):new j(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=j),exports._=j):n._=j,j.VERSION="1.6.0";var A=j.each=j.forEach=function(n,t,e){if(null==n)return n;if(s&&n.forEach===s)n.forEach(t,e);else if(n.length===+n.length){for(var u=0,i=n.length;i>u;u++)if(t.call(e,n[u],u,n)===r)return}else for(var a=j.keys(n),u=0,i=a.length;i>u;u++)if(t.call(e,n[a[u]],a[u],n)===r)return;return n};j.map=j.collect=function(n,t,r){var e=[];return null==n?e:p&&n.map===p?n.map(t,r):(A(n,function(n,u,i){e.push(t.call(r,n,u,i))}),e)};var O="Reduce of empty array with no initial value";j.reduce=j.foldl=j.inject=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),h&&n.reduce===h)return e&&(t=j.bind(t,e)),u?n.reduce(t,r):n.reduce(t);if(A(n,function(n,i,a){u?r=t.call(e,r,n,i,a):(r=n,u=!0)}),!u)throw new TypeError(O);return r},j.reduceRight=j.foldr=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),v&&n.reduceRight===v)return e&&(t=j.bind(t,e)),u?n.reduceRight(t,r):n.reduceRight(t);var i=n.length;if(i!==+i){var a=j.keys(n);i=a.length}if(A(n,function(o,c,l){c=a?a[--i]:--i,u?r=t.call(e,r,n[c],c,l):(r=n[c],u=!0)}),!u)throw new TypeError(O);return r},j.find=j.detect=function(n,t,r){var e;return k(n,function(n,u,i){return t.call(r,n,u,i)?(e=n,!0):void 0}),e},j.filter=j.select=function(n,t,r){var e=[];return null==n?e:g&&n.filter===g?n.filter(t,r):(A(n,function(n,u,i){t.call(r,n,u,i)&&e.push(n)}),e)},j.reject=function(n,t,r){return j.filter(n,function(n,e,u){return!t.call(r,n,e,u)},r)},j.every=j.all=function(n,t,e){t||(t=j.identity);var u=!0;return null==n?u:d&&n.every===d?n.every(t,e):(A(n,function(n,i,a){return(u=u&&t.call(e,n,i,a))?void 0:r}),!!u)};var k=j.some=j.any=function(n,t,e){t||(t=j.identity);var u=!1;return null==n?u:m&&n.some===m?n.some(t,e):(A(n,function(n,i,a){return u||(u=t.call(e,n,i,a))?r:void 0}),!!u)};j.contains=j.include=function(n,t){return null==n?!1:y&&n.indexOf===y?n.indexOf(t)!=-1:k(n,function(n){return n===t})},j.invoke=function(n,t){var r=o.call(arguments,2),e=j.isFunction(t);return j.map(n,function(n){return(e?t:n[t]).apply(n,r)})},j.pluck=function(n,t){return j.map(n,j.property(t))},j.where=function(n,t){return j.filter(n,j.matches(t))},j.findWhere=function(n,t){return j.find(n,j.matches(t))},j.max=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.max.apply(Math,n);var e=-1/0,u=-1/0;return A(n,function(n,i,a){var o=t?t.call(r,n,i,a):n;o>u&&(e=n,u=o)}),e},j.min=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.min.apply(Math,n);var e=1/0,u=1/0;return A(n,function(n,i,a){var o=t?t.call(r,n,i,a):n;u>o&&(e=n,u=o)}),e},j.shuffle=function(n){var t,r=0,e=[];return A(n,function(n){t=j.random(r++),e[r-1]=e[t],e[t]=n}),e},j.sample=function(n,t,r){return null==t||r?(n.length!==+n.length&&(n=j.values(n)),n[j.random(n.length-1)]):j.shuffle(n).slice(0,Math.max(0,t))};var E=function(n){return null==n?j.identity:j.isFunction(n)?n:j.property(n)};j.sortBy=function(n,t,r){return t=E(t),j.pluck(j.map(n,function(n,e,u){return{value:n,index:e,criteria:t.call(r,n,e,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=E(r),A(t,function(i,a){var o=r.call(e,i,a,t);n(u,o,i)}),u}};j.groupBy=F(function(n,t,r){j.has(n,t)?n[t].push(r):n[t]=[r]}),j.indexBy=F(function(n,t,r){n[t]=r}),j.countBy=F(function(n,t){j.has(n,t)?n[t]++:n[t]=1}),j.sortedIndex=function(n,t,r,e){r=E(r);for(var u=r.call(e,t),i=0,a=n.length;a>i;){var o=i+a>>>1;r.call(e,n[o])<u?i=o+1:a=o}return i},j.toArray=function(n){return n?j.isArray(n)?o.call(n):n.length===+n.length?j.map(n,j.identity):j.values(n):[]},j.size=function(n){return null==n?0:n.length===+n.length?n.length:j.keys(n).length},j.first=j.head=j.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:0>t?[]:o.call(n,0,t)},j.initial=function(n,t,r){return o.call(n,0,n.length-(null==t||r?1:t))},j.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:o.call(n,Math.max(n.length-t,0))},j.rest=j.tail=j.drop=function(n,t,r){return o.call(n,null==t||r?1:t)},j.compact=function(n){return j.filter(n,j.identity)};var M=function(n,t,r){return t&&j.every(n,j.isArray)?c.apply(r,n):(A(n,function(n){j.isArray(n)||j.isArguments(n)?t?a.apply(r,n):M(n,t,r):r.push(n)}),r)};j.flatten=function(n,t){return M(n,t,[])},j.without=function(n){return j.difference(n,o.call(arguments,1))},j.partition=function(n,t){var r=[],e=[];return A(n,function(n){(t(n)?r:e).push(n)}),[r,e]},j.uniq=j.unique=function(n,t,r,e){j.isFunction(t)&&(e=r,r=t,t=!1);var u=r?j.map(n,r,e):n,i=[],a=[];return A(u,function(r,e){(t?e&&a[a.length-1]===r:j.contains(a,r))||(a.push(r),i.push(n[e]))}),i},j.union=function(){return j.uniq(j.flatten(arguments,!0))},j.intersection=function(n){var t=o.call(arguments,1);return j.filter(j.uniq(n),function(n){return j.every(t,function(t){return j.contains(t,n)})})},j.difference=function(n){var t=c.apply(e,o.call(arguments,1));return j.filter(n,function(n){return!j.contains(t,n)})},j.zip=function(){for(var n=j.max(j.pluck(arguments,"length").concat(0)),t=new Array(n),r=0;n>r;r++)t[r]=j.pluck(arguments,""+r);return t},j.object=function(n,t){if(null==n)return{};for(var r={},e=0,u=n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},j.indexOf=function(n,t,r){if(null==n)return-1;var e=0,u=n.length;if(r){if("number"!=typeof r)return e=j.sortedIndex(n,t),n[e]===t?e:-1;e=0>r?Math.max(0,u+r):r}if(y&&n.indexOf===y)return n.indexOf(t,r);for(;u>e;e++)if(n[e]===t)return e;return-1},j.lastIndexOf=function(n,t,r){if(null==n)return-1;var e=null!=r;if(b&&n.lastIndexOf===b)return e?n.lastIndexOf(t,r):n.lastIndexOf(t);for(var u=e?r:n.length;u--;)if(n[u]===t)return u;return-1},j.range=function(n,t,r){arguments.length<=1&&(t=n||0,n=0),r=arguments[2]||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=0,i=new Array(e);e>u;)i[u++]=n,n+=r;return i};var R=function(){};j.bind=function(n,t){var r,e;if(_&&n.bind===_)return _.apply(n,o.call(arguments,1));if(!j.isFunction(n))throw new TypeError;return r=o.call(arguments,2),e=function(){if(!(this instanceof e))return n.apply(t,r.concat(o.call(arguments)));R.prototype=n.prototype;var u=new R;R.prototype=null;var i=n.apply(u,r.concat(o.call(arguments)));return Object(i)===i?i:u}},j.partial=function(n){var t=o.call(arguments,1);return function(){for(var r=0,e=t.slice(),u=0,i=e.length;i>u;u++)e[u]===j&&(e[u]=arguments[r++]);for(;r<arguments.length;)e.push(arguments[r++]);return n.apply(this,e)}},j.bindAll=function(n){var t=o.call(arguments,1);if(0===t.length)throw new Error("bindAll must be passed function names");return A(t,function(t){n[t]=j.bind(n[t],n)}),n},j.memoize=function(n,t){var r={};return t||(t=j.identity),function(){var e=t.apply(this,arguments);return j.has(r,e)?r[e]:r[e]=n.apply(this,arguments)}},j.delay=function(n,t){var r=o.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},j.defer=function(n){return j.delay.apply(j,[n,1].concat(o.call(arguments,1)))},j.throttle=function(n,t,r){var e,u,i,a=null,o=0;r||(r={});var c=function(){o=r.leading===!1?0:j.now(),a=null,i=n.apply(e,u),e=u=null};return function(){var l=j.now();o||r.leading!==!1||(o=l);var f=t-(l-o);return e=this,u=arguments,0>=f?(clearTimeout(a),a=null,o=l,i=n.apply(e,u),e=u=null):a||r.trailing===!1||(a=setTimeout(c,f)),i}},j.debounce=function(n,t,r){var e,u,i,a,o,c=function(){var l=j.now()-a;t>l?e=setTimeout(c,t-l):(e=null,r||(o=n.apply(i,u),i=u=null))};return function(){i=this,u=arguments,a=j.now();var l=r&&!e;return e||(e=setTimeout(c,t)),l&&(o=n.apply(i,u),i=u=null),o}},j.once=function(n){var t,r=!1;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}},j.wrap=function(n,t){return j.partial(t,n)},j.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length-1;r>=0;r--)t=[n[r].apply(this,t)];return t[0]}},j.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},j.keys=function(n){if(!j.isObject(n))return[];if(w)return w(n);var t=[];for(var r in n)j.has(n,r)&&t.push(r);return t},j.values=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},j.pairs=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},j.invert=function(n){for(var t={},r=j.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},j.functions=j.methods=function(n){var t=[];for(var r in n)j.isFunction(n[r])&&t.push(r);return t.sort()},j.extend=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]=t[r]}),n},j.pick=function(n){var t={},r=c.apply(e,o.call(arguments,1));return A(r,function(r){r in n&&(t[r]=n[r])}),t},j.omit=function(n){var t={},r=c.apply(e,o.call(arguments,1));for(var u in n)j.contains(r,u)||(t[u]=n[u]);return t},j.defaults=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]===void 0&&(n[r]=t[r])}),n},j.clone=function(n){return j.isObject(n)?j.isArray(n)?n.slice():j.extend({},n):n},j.tap=function(n,t){return t(n),n};var S=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return n===t;n instanceof j&&(n=n._wrapped),t instanceof j&&(t=t._wrapped);var u=l.call(n);if(u!=l.call(t))return!1;switch(u){case"[object String]":return n==String(t);case"[object Number]":return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object RegExp]":return n.source==t.source&&n.global==t.global&&n.multiline==t.multiline&&n.ignoreCase==t.ignoreCase}if("object"!=typeof n||"object"!=typeof t)return!1;for(var i=r.length;i--;)if(r[i]==n)return e[i]==t;var a=n.constructor,o=t.constructor;if(a!==o&&!(j.isFunction(a)&&a instanceof a&&j.isFunction(o)&&o instanceof o)&&"constructor"in n&&"constructor"in t)return!1;r.push(n),e.push(t);var c=0,f=!0;if("[object Array]"==u){if(c=n.length,f=c==t.length)for(;c--&&(f=S(n[c],t[c],r,e)););}else{for(var s in n)if(j.has(n,s)&&(c++,!(f=j.has(t,s)&&S(n[s],t[s],r,e))))break;if(f){for(s in t)if(j.has(t,s)&&!c--)break;f=!c}}return r.pop(),e.pop(),f};j.isEqual=function(n,t){return S(n,t,[],[])},j.isEmpty=function(n){if(null==n)return!0;if(j.isArray(n)||j.isString(n))return 0===n.length;for(var t in n)if(j.has(n,t))return!1;return!0},j.isElement=function(n){return!(!n||1!==n.nodeType)},j.isArray=x||function(n){return"[object Array]"==l.call(n)},j.isObject=function(n){return n===Object(n)},A(["Arguments","Function","String","Number","Date","RegExp"],function(n){j["is"+n]=function(t){return l.call(t)=="[object "+n+"]"}}),j.isArguments(arguments)||(j.isArguments=function(n){return!(!n||!j.has(n,"callee"))}),"function"!=typeof/./&&(j.isFunction=function(n){return"function"==typeof n}),j.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},j.isNaN=function(n){return j.isNumber(n)&&n!=+n},j.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"==l.call(n)},j.isNull=function(n){return null===n},j.isUndefined=function(n){return n===void 0},j.has=function(n,t){return f.call(n,t)},j.noConflict=function(){return n._=t,this},j.identity=function(n){return n},j.constant=function(n){return function(){return n}},j.property=function(n){return function(t){return t[n]}},j.matches=function(n){return function(t){if(t===n)return!0;for(var r in n)if(n[r]!==t[r])return!1;return!0}},j.times=function(n,t,r){for(var e=Array(Math.max(0,n)),u=0;n>u;u++)e[u]=t.call(r,u);return e},j.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},j.now=Date.now||function(){return(new Date).getTime()};var T={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"}};T.unescape=j.invert(T.escape);var I={escape:new RegExp("["+j.keys(T.escape).join("")+"]","g"),unescape:new RegExp("("+j.keys(T.unescape).join("|")+")","g")};j.each(["escape","unescape"],function(n){j[n]=function(t){return null==t?"":(""+t).replace(I[n],function(t){return T[n][t]})}}),j.result=function(n,t){if(null==n)return void 0;var r=n[t];return j.isFunction(r)?r.call(n):r},j.mixin=function(n){A(j.functions(n),function(t){var r=j[t]=n[t];j.prototype[t]=function(){var n=[this._wrapped];return a.apply(n,arguments),z.call(this,r.apply(j,n))}})};var N=0;j.uniqueId=function(n){var t=++N+"";return n?n+t:t},j.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var q=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\t|\u2028|\u2029/g;j.template=function(n,t,r){var e;r=j.defaults({},r,j.templateSettings);var u=new RegExp([(r.escape||q).source,(r.interpolate||q).source,(r.evaluate||q).source].join("|")+"|$","g"),i=0,a="__p+='";n.replace(u,function(t,r,e,u,o){return a+=n.slice(i,o).replace(D,function(n){return"\\"+B[n]}),r&&(a+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'"),e&&(a+="'+\n((__t=("+e+"))==null?'':__t)+\n'"),u&&(a+="';\n"+u+"\n__p+='"),i=o+t.length,t}),a+="';\n",r.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,"+"print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{e=new Function(r.variable||"obj","_",a)}catch(o){throw o.source=a,o}if(t)return e(t,j);var c=function(n){return e.call(this,n,j)};return c.source="function("+(r.variable||"obj")+"){\n"+a+"}",c},j.chain=function(n){return j(n).chain()};var z=function(n){return this._chain?j(n).chain():n};j.mixin(j),A(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=e[n];j.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!=n&&"splice"!=n||0!==r.length||delete r[0],z.call(this,r)}}),A(["concat","join","slice"],function(n){var t=e[n];j.prototype[n]=function(){return z.call(this,t.apply(this._wrapped,arguments))}}),j.extend(j.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),"function"==typeof define&&define.amd&&define("underscore",[],function(){return j})}).call(this);
//# sourceMappingURL=underscore-min.map
;
/*! jQuery v2.0.3 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license
 //@ sourceMappingURL=jquery-2.0.3.min.map
 */

(function(e,undefined){var t,n,r=typeof undefined,i=e.location,o=e.document,s=o.documentElement,a=e.jQuery,u=e.$,l={},c=[],p="2.0.3",f=c.concat,h=c.push,d=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,x=function(e,n){return new x.fn.init(e,n,t)},b=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,w=/\S+/g,T=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,k=/^-ms-/,N=/-([\da-z])/gi,E=function(e,t){return t.toUpperCase()},S=function(){o.removeEventListener("DOMContentLoaded",S,!1),e.removeEventListener("load",S,!1),x.ready()};x.fn=x.prototype={jquery:p,constructor:x,init:function(e,t,n){var r,i;if(!e)return this;if("string"==typeof e){if(r="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),C.test(r[1])&&x.isPlainObject(t))for(r in t)x.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=o.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?n.ready(e):(e.selector!==undefined&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:"",length:0,toArray:function(){return d.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[1]||{},a=2),"object"==typeof s||x.isFunction(s)||(s={}),u===a&&(s=this,--a);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(x.isPlainObject(r)||(i=x.isArray(r)))?(i?(i=!1,o=n&&x.isArray(n)?n:[]):o=n&&x.isPlainObject(n)?n:{},s[t]=x.extend(l,o,r)):r!==undefined&&(s[t]=r));return s},x.extend({expando:"jQuery"+(p+Math.random()).replace(/\D/g,""),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=a),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){(e===!0?--x.readyWait:x.isReady)||(x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(o,[x]),x.fn.trigger&&x(o).trigger("ready").off("ready")))},isFunction:function(e){return"function"===x.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[m.call(e)]||"object":typeof e},isPlainObject:function(e){if("object"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!y.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}return!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:JSON.parse,parseXML:function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(r){t=undefined}return(!t||t.getElementsByTagName("parsererror").length)&&x.error("Invalid XML: "+e),t},noop:function(){},globalEval:function(e){var t,n=eval;e=x.trim(e),e&&(1===e.indexOf("use strict")?(t=o.createElement("script"),t.text=e,o.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(k,"ms-").replace(N,E)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,s=j(e);if(n){if(s){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(s){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?"":v.call(e)},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?x.merge(n,"string"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:g.call(t,e,n)},merge:function(e,t){var n=t.length,r=e.length,i=0;if("number"==typeof n)for(;n>i;i++)e[r++]=t[i];else while(t[i]!==undefined)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){var r,i=[],o=0,s=e.length;for(n=!!n;s>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,s=j(e),a=[];if(s)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(a[a.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(a[a.length]=r);return f.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),x.isFunction(e)?(r=d.call(arguments,2),i=function(){return e.apply(t||this,r.concat(d.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):undefined},access:function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===x.type(n)){i=!0;for(a in n)x.access(e,t,a,n[a],!0,o,s)}else if(r!==undefined&&(i=!0,x.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(x(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},now:Date.now,swap:function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i}}),x.ready.promise=function(t){return n||(n=x.Deferred(),"complete"===o.readyState?setTimeout(x.ready):(o.addEventListener("DOMContentLoaded",S,!1),e.addEventListener("load",S,!1))),n.promise(t)},x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function j(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}t=x(o),function(e,undefined){var t,n,r,i,o,s,a,u,l,c,p,f,h,d,g,m,y,v="sizzle"+-new Date,b=e.document,w=0,T=0,C=st(),k=st(),N=st(),E=!1,S=function(e,t){return e===t?(E=!0,0):0},j=typeof undefined,D=1<<31,A={}.hasOwnProperty,L=[],q=L.pop,H=L.push,O=L.push,F=L.slice,P=L.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",W="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",$=W.replace("w","w#"),B="\\["+M+"*("+W+")"+M+"*(?:([*^$|!~]?=)"+M+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+$+")|)|)"+M+"*\\]",I=":("+W+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+B.replace(3,8)+")*)|.*)\\)|)",z=RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=RegExp("^"+M+"*,"+M+"*"),X=RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=RegExp(M+"*[+~]"),Y=RegExp("="+M+"*([^\\]'\"]*)"+M+"*\\]","g"),V=RegExp(I),G=RegExp("^"+$+"$"),J={ID:RegExp("^#("+W+")"),CLASS:RegExp("^\\.("+W+")"),TAG:RegExp("^("+W.replace("w","w*")+")"),ATTR:RegExp("^"+B),PSEUDO:RegExp("^"+I),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:RegExp("^(?:"+R+")$","i"),needsContext:RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/^(?:input|select|textarea|button)$/i,et=/^h\d$/i,tt=/'|\\/g,nt=RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),rt=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{O.apply(L=F.call(b.childNodes),b.childNodes),L[b.childNodes.length].nodeType}catch(it){O={apply:L.length?function(e,t){H.apply(e,F.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function ot(e,t,r,i){var o,s,a,u,l,f,g,m,x,w;if((t?t.ownerDocument||t:b)!==p&&c(t),t=t||p,r=r||[],!e||"string"!=typeof e)return r;if(1!==(u=t.nodeType)&&9!==u)return[];if(h&&!i){if(o=K.exec(e))if(a=o[1]){if(9===u){if(s=t.getElementById(a),!s||!s.parentNode)return r;if(s.id===a)return r.push(s),r}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(a))&&y(t,s)&&s.id===a)return r.push(s),r}else{if(o[2])return O.apply(r,t.getElementsByTagName(e)),r;if((a=o[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&(!d||!d.test(e))){if(m=g=v,x=t,w=9===u&&e,1===u&&"object"!==t.nodeName.toLowerCase()){f=gt(e),(g=t.getAttribute("id"))?m=g.replace(tt,"\\$&"):t.setAttribute("id",m),m="[id='"+m+"'] ",l=f.length;while(l--)f[l]=m+mt(f[l]);x=U.test(e)&&t.parentNode||t,w=f.join(",")}if(w)try{return O.apply(r,x.querySelectorAll(w)),r}catch(T){}finally{g||t.removeAttribute("id")}}}return kt(e.replace(z,"$1"),t,r,i)}function st(){var e=[];function t(n,r){return e.push(n+=" ")>i.cacheLength&&delete t[e.shift()],t[n]=r}return t}function at(e){return e[v]=!0,e}function ut(e){var t=p.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function lt(e,t){var n=e.split("|"),r=e.length;while(r--)i.attrHandle[n[r]]=t}function ct(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pt(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function ft(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ht(e){return at(function(t){return t=+t,at(function(n,r){var i,o=e([],n.length,t),s=o.length;while(s--)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}s=ot.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},n=ot.support={},c=ot.setDocument=function(e){var t=e?e.ownerDocument||e:b,r=t.defaultView;return t!==p&&9===t.nodeType&&t.documentElement?(p=t,f=t.documentElement,h=!s(t),r&&r.attachEvent&&r!==r.top&&r.attachEvent("onbeforeunload",function(){c()}),n.attributes=ut(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ut(function(e){return e.appendChild(t.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=ut(function(e){return e.innerHTML="<div class='a'></div><div class='a i'></div>",e.firstChild.className="i",2===e.getElementsByClassName("i").length}),n.getById=ut(function(e){return f.appendChild(e).id=v,!t.getElementsByName||!t.getElementsByName(v).length}),n.getById?(i.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){return e.getAttribute("id")===t}}):(delete i.find.ID,i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=n.getElementsByTagName?function(e,t){return typeof t.getElementsByTagName!==j?t.getElementsByTagName(e):undefined}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){return typeof t.getElementsByClassName!==j&&h?t.getElementsByClassName(e):undefined},g=[],d=[],(n.qsa=Q.test(t.querySelectorAll))&&(ut(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||d.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll(":checked").length||d.push(":checked")}),ut(function(e){var n=t.createElement("input");n.setAttribute("type","hidden"),e.appendChild(n).setAttribute("t",""),e.querySelectorAll("[t^='']").length&&d.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll(":enabled").length||d.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),d.push(",.*:")})),(n.matchesSelector=Q.test(m=f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut(function(e){n.disconnectedMatch=m.call(e,"div"),m.call(e,"[s!='']:x"),g.push("!=",I)}),d=d.length&&RegExp(d.join("|")),g=g.length&&RegExp(g.join("|")),y=Q.test(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},S=f.compareDocumentPosition?function(e,r){if(e===r)return E=!0,0;var i=r.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(r);return i?1&i||!n.sortDetached&&r.compareDocumentPosition(e)===i?e===t||y(b,e)?-1:r===t||y(b,r)?1:l?P.call(l,e)-P.call(l,r):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,n){var r,i=0,o=e.parentNode,s=n.parentNode,a=[e],u=[n];if(e===n)return E=!0,0;if(!o||!s)return e===t?-1:n===t?1:o?-1:s?1:l?P.call(l,e)-P.call(l,n):0;if(o===s)return ct(e,n);r=e;while(r=r.parentNode)a.unshift(r);r=n;while(r=r.parentNode)u.unshift(r);while(a[i]===u[i])i++;return i?ct(a[i],u[i]):a[i]===b?-1:u[i]===b?1:0},t):p},ot.matches=function(e,t){return ot(e,null,null,t)},ot.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Y,"='$1']"),!(!n.matchesSelector||!h||g&&g.test(t)||d&&d.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return ot(t,p,null,[e]).length>0},ot.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},ot.attr=function(e,t){(e.ownerDocument||e)!==p&&c(e);var r=i.attrHandle[t.toLowerCase()],o=r&&A.call(i.attrHandle,t.toLowerCase())?r(e,t,!h):undefined;return o===undefined?n.attributes||!h?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null:o},ot.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},ot.uniqueSort=function(e){var t,r=[],i=0,o=0;if(E=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(S),E){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return e},o=ot.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=ot.selectors={cacheLength:50,createPseudo:at,match:J,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(nt,rt),e[3]=(e[4]||e[5]||"").replace(nt,rt),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ot.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ot.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return J.CHILD.test(e[0])?null:(e[3]&&e[4]!==undefined?e[2]=e[4]:n&&V.test(n)&&(t=gt(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(nt,rt).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&C(e,function(e){return t.test("string"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=ot.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,h,d,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),x=!u&&!a;if(m){if(o){while(g){p=t;while(p=p[g])if(a?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;d=g="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?m.firstChild:m.lastChild],s&&x){c=m[v]||(m[v]={}),l=c[e]||[],h=l[0]===w&&l[1],f=l[0]===w&&l[2],p=h&&m.childNodes[h];while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[w,h,f];break}}else if(x&&(l=(t[v]||(t[v]={}))[e])&&l[0]===w)f=l[1];else while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if((a?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(x&&((p[v]||(p[v]={}))[e]=[w,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ot.error("unsupported pseudo: "+e);return r[v]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?at(function(e,n){var i,o=r(e,t),s=o.length;while(s--)i=P.call(e,o[s]),e[i]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:at(function(e){var t=[],n=[],r=a(e.replace(z,"$1"));return r[v]?at(function(e,t,n,i){var o,s=r(e,null,i,[]),a=e.length;while(a--)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:at(function(e){return function(t){return ot(e,t).length>0}}),contains:at(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:at(function(e){return G.test(e||"")||ot.error("unsupported lang: "+e),e=e.replace(nt,rt).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return et.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:ht(function(){return[0]}),last:ht(function(e,t){return[t-1]}),eq:ht(function(e,t,n){return[0>n?n+t:n]}),even:ht(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:ht(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:ht(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:ht(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}},i.pseudos.nth=i.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pt(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=ft(t);function dt(){}dt.prototype=i.filters=i.pseudos,i.setFilters=new dt;function gt(e,t){var n,r,o,s,a,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);a=e,u=[],l=i.preFilter;while(a){(!n||(r=_.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=X.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(z," ")}),a=a.slice(n.length));for(s in i.filter)!(r=J[s].exec(a))||l[s]&&!(r=l[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ot.error(e):k(e,u).slice(0)}function mt(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function yt(e,t,n){var i=t.dir,o=n&&"parentNode"===i,s=T++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,a){var u,l,c,p=w+" "+s;if(a){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,a))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[v]||(t[v]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,a)||r,l[1]===!0)return!0}}function vt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function xt(e,t,n,r,i){var o,s=[],a=0,u=e.length,l=null!=t;for(;u>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),l&&t.push(a));return s}function bt(e,t,n,r,i,o){return r&&!r[v]&&(r=bt(r)),i&&!i[v]&&(i=bt(i,o)),at(function(o,s,a,u){var l,c,p,f=[],h=[],d=s.length,g=o||Ct(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:xt(g,f,e,a,u),y=n?i||(o?e:d||r)?[]:s:m;if(n&&n(m,y,a,u),r){l=xt(y,h),r(l,[],a,u),c=l.length;while(c--)(p=l[c])&&(y[h[c]]=!(m[h[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?P.call(o,p):f[c])>-1&&(o[l]=!(s[l]=p))}}else y=xt(y===s?y.splice(d,y.length):y),i?i(null,s,y,u):O.apply(s,y)})}function wt(e){var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,c=yt(function(e){return e===t},a,!0),p=yt(function(e){return P.call(t,e)>-1},a,!0),f=[function(e,n,r){return!s&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>l;l++)if(n=i.relative[e[l].type])f=[yt(vt(f),n)];else{if(n=i.filter[e[l].type].apply(null,e[l].matches),n[v]){for(r=++l;o>r;r++)if(i.relative[e[r].type])break;return bt(l>1&&vt(f),l>1&&mt(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(z,"$1"),n,r>l&&wt(e.slice(l,r)),o>r&&wt(e=e.slice(r)),o>r&&mt(e))}f.push(n)}return vt(f)}function Tt(e,t){var n=0,o=t.length>0,s=e.length>0,a=function(a,l,c,f,h){var d,g,m,y=[],v=0,x="0",b=a&&[],T=null!=h,C=u,k=a||s&&i.find.TAG("*",h&&l.parentNode||l),N=w+=null==C?1:Math.random()||.1;for(T&&(u=l!==p&&l,r=n);null!=(d=k[x]);x++){if(s&&d){g=0;while(m=e[g++])if(m(d,l,c)){f.push(d);break}T&&(w=N,r=++n)}o&&((d=!m&&d)&&v--,a&&b.push(d))}if(v+=x,o&&x!==v){g=0;while(m=t[g++])m(b,y,l,c);if(a){if(v>0)while(x--)b[x]||y[x]||(y[x]=q.call(f));y=xt(y)}O.apply(f,y),T&&!a&&y.length>0&&v+t.length>1&&ot.uniqueSort(f)}return T&&(w=N,u=C),b};return o?at(a):a}a=ot.compile=function(e,t){var n,r=[],i=[],o=N[e+" "];if(!o){t||(t=gt(e)),n=t.length;while(n--)o=wt(t[n]),o[v]?r.push(o):i.push(o);o=N(e,Tt(i,r))}return o};function Ct(e,t,n){var r=0,i=t.length;for(;i>r;r++)ot(e,t[r],n);return n}function kt(e,t,r,o){var s,u,l,c,p,f=gt(e);if(!o&&1===f.length){if(u=f[0]=f[0].slice(0),u.length>2&&"ID"===(l=u[0]).type&&n.getById&&9===t.nodeType&&h&&i.relative[u[1].type]){if(t=(i.find.ID(l.matches[0].replace(nt,rt),t)||[])[0],!t)return r;e=e.slice(u.shift().value.length)}s=J.needsContext.test(e)?0:u.length;while(s--){if(l=u[s],i.relative[c=l.type])break;if((p=i.find[c])&&(o=p(l.matches[0].replace(nt,rt),U.test(u[0].type)&&t.parentNode||t))){if(u.splice(s,1),e=o.length&&mt(u),!e)return O.apply(r,o),r;break}}}return a(e,f)(o,t,!h,r,U.test(e)),r}n.sortStable=v.split("").sort(S).join("")===v,n.detectDuplicates=E,c(),n.sortDetached=ut(function(e){return 1&e.compareDocumentPosition(p.createElement("div"))}),ut(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||lt("type|href|height|width",function(e,t,n){return n?undefined:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ut(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||lt("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?undefined:e.defaultValue}),ut(function(e){return null==e.getAttribute("disabled")})||lt(R,function(e,t,n){var r;return n?undefined:(r=e.getAttributeNode(t))&&r.specified?r.value:e[t]===!0?t.toLowerCase():null}),x.find=ot,x.expr=ot.selectors,x.expr[":"]=x.expr.pseudos,x.unique=ot.uniqueSort,x.text=ot.getText,x.isXMLDoc=ot.isXML,x.contains=ot.contains}(e);var D={};function A(e){var t=D[e]={};return x.each(e.match(w)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e="string"==typeof e?D[e]||A(e):x.extend({},e);var t,n,r,i,o,s,a=[],u=!e.once&&[],l=function(p){for(t=e.memory&&p,n=!0,s=i||0,i=0,o=a.length,r=!0;a&&o>s;s++)if(a[s].apply(p[0],p[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,a&&(u?u.length&&l(u.shift()):t?a=[]:c.disable())},c={add:function(){if(a){var n=a.length;(function s(t){x.each(t,function(t,n){var r=x.type(n);"function"===r?e.unique&&c.has(n)||a.push(n):n&&n.length&&"string"!==r&&s(n)})})(arguments),r?o=a.length:t&&(i=n,l(t))}return this},remove:function(){return a&&x.each(arguments,function(e,t){var n;while((n=x.inArray(t,a,n))>-1)a.splice(n,1),r&&(o>=n&&o--,s>=n&&s--)}),this},has:function(e){return e?x.inArray(e,a)>-1:!(!a||!a.length)},empty:function(){return a=[],o=0,this},disable:function(){return a=u=t=undefined,this},disabled:function(){return!a},lock:function(){return u=undefined,t||c.disable(),this},locked:function(){return!u},fireWith:function(e,t){return!a||n&&!u||(t=t||[],t=[e,t.slice?t.slice():t],r?u.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},x.extend({Deferred:function(e){var t=[["resolve","done",x.Callbacks("once memory"),"resolved"],["reject","fail",x.Callbacks("once memory"),"rejected"],["notify","progress",x.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var s=o[0],a=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=d.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),s=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?d.call(arguments):r,n===a?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},a,u,l;if(r>1)for(a=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(s(t,l,n)).fail(o.reject).progress(s(t,u,a)):--i;return i||o.resolveWith(l,n),o.promise()}}),x.support=function(t){var n=o.createElement("input"),r=o.createDocumentFragment(),i=o.createElement("div"),s=o.createElement("select"),a=s.appendChild(o.createElement("option"));return n.type?(n.type="checkbox",t.checkOn=""!==n.value,t.optSelected=a.selected,t.reliableMarginRight=!0,t.boxSizingReliable=!0,t.pixelPosition=!1,n.checked=!0,t.noCloneChecked=n.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!a.disabled,n=o.createElement("input"),n.value="t",n.type="radio",t.radioValue="t"===n.value,n.setAttribute("checked","t"),n.setAttribute("name","t"),r.appendChild(n),t.checkClone=r.cloneNode(!0).cloneNode(!0).lastChild.checked,t.focusinBubbles="onfocusin"in e,i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===i.style.backgroundClip,x(function(){var n,r,s="padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",a=o.getElementsByTagName("body")[0];a&&(n=o.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",a.appendChild(n).appendChild(i),i.innerHTML="",i.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%",x.swap(a,null!=a.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===i.offsetWidth}),e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(i,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(i,null)||{width:"4px"}).width,r=i.appendChild(o.createElement("div")),r.style.cssText=i.style.cssText=s,r.style.marginRight=r.style.width="0",i.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),a.removeChild(n))}),t):t}({});var L,q,H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,O=/([A-Z])/g;function F(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=x.expando+Math.random()}F.uid=1,F.accepts=function(e){return e.nodeType?1===e.nodeType||9===e.nodeType:!0},F.prototype={key:function(e){if(!F.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=F.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,x.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if("string"==typeof t)o[t]=n;else if(x.isEmptyObject(o))x.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return t===undefined?n:n[t]},access:function(e,t,n){var r;return t===undefined||t&&"string"==typeof t&&n===undefined?(r=this.get(e,t),r!==undefined?r:this.get(e,x.camelCase(t))):(this.set(e,t,n),n!==undefined?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(t===undefined)this.cache[o]={};else{x.isArray(t)?r=t.concat(t.map(x.camelCase)):(i=x.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(w)||[])),n=r.length;while(n--)delete s[r[n]]}},hasData:function(e){return!x.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}},L=new F,q=new F,x.extend({acceptData:F.accepts,hasData:function(e){return L.hasData(e)||q.hasData(e)},data:function(e,t,n){return L.access(e,t,n)},removeData:function(e,t){L.remove(e,t)},_data:function(e,t,n){return q.access(e,t,n)},_removeData:function(e,t){q.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,i=this[0],o=0,s=null;if(e===undefined){if(this.length&&(s=L.get(i),1===i.nodeType&&!q.get(i,"hasDataAttrs"))){for(n=i.attributes;n.length>o;o++)r=n[o].name,0===r.indexOf("data-")&&(r=x.camelCase(r.slice(5)),P(i,r,s[r]));q.set(i,"hasDataAttrs",!0)}return s}return"object"==typeof e?this.each(function(){L.set(this,e)}):x.access(this,function(t){var n,r=x.camelCase(e);if(i&&t===undefined){if(n=L.get(i,e),n!==undefined)return n;if(n=L.get(i,r),n!==undefined)return n;if(n=P(i,r,undefined),n!==undefined)return n}else this.each(function(){var n=L.get(this,r);L.set(this,r,t),-1!==e.indexOf("-")&&n!==undefined&&L.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){L.remove(this,e)})}});function P(e,t,n){var r;if(n===undefined&&1===e.nodeType)if(r="data-"+t.replace(O,"-$1").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:H.test(n)?JSON.parse(n):n}catch(i){}L.set(e,t,n)}else n=undefined;return n}x.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=q.get(e,t),n&&(!r||x.isArray(n)?r=q.access(e,t,x.makeArray(n)):r.push(n)),r||[]):undefined},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t),s=function(){x.dequeue(e,t)
};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return q.get(e,n)||q.access(e,n,{empty:x.Callbacks("once memory").add(function(){q.remove(e,[t+"queue",n])})})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),n>arguments.length?x.queue(this[0],e):t===undefined?this:this.each(function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},delay:function(e,t){return e=x.fx?x.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=x.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=undefined),e=e||"fx";while(s--)n=q.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var R,M,W=/[\t\r\n\f]/g,$=/\r/g,B=/^(?:input|select|textarea|button)$/i;x.fn.extend({attr:function(e,t){return x.access(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})},prop:function(e,t){return x.access(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})},addClass:function(e){var t,n,r,i,o,s=0,a=this.length,u="string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(W," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=x.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,s=0,a=this.length,u=0===arguments.length||"string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(W," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?x.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):x.isFunction(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var t,i=0,o=x(this),s=e.match(w)||[];while(t=s[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else(n===r||"boolean"===n)&&(this.className&&q.set(this,"__className__",this.className),this.className=this.className||e===!1?"":q.get(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(W," ").indexOf(t)>=0)return!0;return!1},val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=x.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,x(this).val()):e,null==i?i="":"number"==typeof i?i+="":x.isArray(i)&&(i=x.map(i,function(e){return null==e?"":e+""})),t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&t.set(this,i,"value")!==undefined||(this.value=i))});if(i)return t=x.valHooks[i.type]||x.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&(n=t.get(i,"value"))!==undefined?n:(n=i.value,"string"==typeof n?n.replace($,""):null==n?"":n)}}}),x.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;for(;a>u;u++)if(n=r[u],!(!n.selected&&u!==i||(x.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&x.nodeName(n.parentNode,"optgroup"))){if(t=x(n).val(),o)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=x.makeArray(t),s=i.length;while(s--)r=i[s],(r.selected=x.inArray(x(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,t,n){var i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===r?x.prop(e,t,n):(1===s&&x.isXMLDoc(e)||(t=t.toLowerCase(),i=x.attrHooks[t]||(x.expr.match.bool.test(t)?M:R)),n===undefined?i&&"get"in i&&null!==(o=i.get(e,t))?o:(o=x.find.attr(e,t),null==o?undefined:o):null!==n?i&&"set"in i&&(o=i.set(e,n,t))!==undefined?o:(e.setAttribute(t,n+""),n):(x.removeAttr(e,t),undefined))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=x.propFix[n]||n,x.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!x.support.radioValue&&"radio"===t&&x.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!x.isXMLDoc(e),o&&(t=x.propFix[t]||t,i=x.propHooks[t]),n!==undefined?i&&"set"in i&&(r=i.set(e,n,t))!==undefined?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||B.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),M={set:function(e,t,n){return t===!1?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,t){var n=x.expr.attrHandle[t]||x.find.attr;x.expr.attrHandle[t]=function(e,t,r){var i=x.expr.attrHandle[t],o=r?undefined:(x.expr.attrHandle[t]=undefined)!=n(e,t,r)?t.toLowerCase():null;return x.expr.attrHandle[t]=i,o}}),x.support.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,t){return x.isArray(t)?e.checked=x.inArray(x(e).val(),t)>=0:undefined}},x.support.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var I=/^key/,z=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,X=/^([^.]*)(?:\.(.+)|)$/;function U(){return!0}function Y(){return!1}function V(){try{return o.activeElement}catch(e){}}x.event={global:{},add:function(e,t,n,i,o){var s,a,u,l,c,p,f,h,d,g,m,y=q.get(e);if(y){n.handler&&(s=n,n=s.handler,o=s.selector),n.guid||(n.guid=x.guid++),(l=y.events)||(l=y.events={}),(a=y.handle)||(a=y.handle=function(e){return typeof x===r||e&&x.event.triggered===e.type?undefined:x.event.dispatch.apply(a.elem,arguments)},a.elem=e),t=(t||"").match(w)||[""],c=t.length;while(c--)u=X.exec(t[c])||[],d=m=u[1],g=(u[2]||"").split(".").sort(),d&&(f=x.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=x.event.special[d]||{},p=x.extend({type:d,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:g.join(".")},s),(h=l[d])||(h=l[d]=[],h.delegateCount=0,f.setup&&f.setup.call(e,i,g,a)!==!1||e.addEventListener&&e.addEventListener(d,a,!1)),f.add&&(f.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,p):h.push(p),x.event.global[d]=!0);e=null}},remove:function(e,t,n,r,i){var o,s,a,u,l,c,p,f,h,d,g,m=q.hasData(e)&&q.get(e);if(m&&(u=m.events)){t=(t||"").match(w)||[""],l=t.length;while(l--)if(a=X.exec(t[l])||[],h=g=a[1],d=(a[2]||"").split(".").sort(),h){p=x.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,f=u[h]||[],a=a[2]&&RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;while(o--)c=f[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,p.remove&&p.remove.call(e,c));s&&!f.length&&(p.teardown&&p.teardown.call(e,d,m.handle)!==!1||x.removeEvent(e,h,m.handle),delete u[h])}else for(h in u)x.event.remove(e,h+t[l],n,r,!0);x.isEmptyObject(u)&&(delete m.handle,q.remove(e,"events"))}},trigger:function(t,n,r,i){var s,a,u,l,c,p,f,h=[r||o],d=y.call(t,"type")?t.type:t,g=y.call(t,"namespace")?t.namespace.split("."):[];if(a=u=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!_.test(d+x.event.triggered)&&(d.indexOf(".")>=0&&(g=d.split("."),d=g.shift(),g.sort()),c=0>d.indexOf(":")&&"on"+d,t=t[x.expando]?t:new x.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=g.join("."),t.namespace_re=t.namespace?RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=undefined,t.target||(t.target=r),n=null==n?[t]:x.makeArray(n,[t]),f=x.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!x.isWindow(r)){for(l=f.delegateType||d,_.test(l+d)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||o)&&h.push(u.defaultView||u.parentWindow||e)}s=0;while((a=h[s++])&&!t.isPropagationStopped())t.type=s>1?l:f.bindType||d,p=(q.get(a,"events")||{})[t.type]&&q.get(a,"handle"),p&&p.apply(a,n),p=c&&a[c],p&&x.acceptData(a)&&p.apply&&p.apply(a,n)===!1&&t.preventDefault();return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),n)!==!1||!x.acceptData(r)||c&&x.isFunction(r[d])&&!x.isWindow(r)&&(u=r[c],u&&(r[c]=null),x.event.triggered=d,r[d](),x.event.triggered=undefined,u&&(r[c]=u)),t.result}},dispatch:function(e){e=x.event.fix(e);var t,n,r,i,o,s=[],a=d.call(arguments),u=(q.get(this,"events")||{})[e.type]||[],l=x.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){s=x.event.handlers.call(this,e,u),t=0;while((i=s[t++])&&!e.isPropagationStopped()){e.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((x.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),r!==undefined&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",r[i]===undefined&&(r[i]=o.needsContext?x(i,this).index(u)>=0:x.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return t.length>a&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,s=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||o,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||s===undefined||(e.which=1&s?1:2&s?3:4&s?2:0),e}},fix:function(e){if(e[x.expando])return e;var t,n,r,i=e.type,s=e,a=this.fixHooks[i];a||(this.fixHooks[i]=a=z.test(i)?this.mouseHooks:I.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new x.Event(s),t=r.length;while(t--)n=r[t],e[n]=s[n];return e.target||(e.target=o),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,s):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==V()&&this.focus?(this.focus(),!1):undefined},delegateType:"focusin"},blur:{trigger:function(){return this===V()&&this.blur?(this.blur(),!1):undefined},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&x.nodeName(this,"input")?(this.click(),!1):undefined},_default:function(e){return x.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){e.result!==undefined&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?x.event.trigger(i,null,t):x.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},x.Event=function(e,t){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.getPreventDefault&&e.getPreventDefault()?U:Y):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||x.now(),this[x.expando]=!0,undefined):new x.Event(e,t)},x.Event.prototype={isDefaultPrevented:Y,isPropagationStopped:Y,isImmediatePropagationStopped:Y,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=U,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=U,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=U,this.stopPropagation()}},x.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!x.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),x.support.focusinBubbles||x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){x.event.simulate(t,e.target,x.event.fix(e),!0)};x.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),x.fn.extend({on:function(e,t,n,r,i){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=undefined);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=undefined):null==r&&("string"==typeof t?(r=n,n=undefined):(r=n,n=t,t=undefined)),r===!1)r=Y;else if(!r)return this;return 1===i&&(o=r,r=function(e){return x().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=x.guid++)),this.each(function(){x.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=undefined),n===!1&&(n=Y),this.each(function(){x.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?x.event.trigger(e,t,n,!0):undefined}});var G=/^.[^:#\[\.,]*$/,J=/^(?:parents|prev(?:Until|All))/,Q=x.expr.match.needsContext,K={children:!0,contents:!0,next:!0,prev:!0};x.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;i>t;t++)if(x.contains(r[t],this))return!0}));for(t=0;i>t;t++)x.find(e,r[t],n);return n=this.pushStack(i>1?x.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){var e=0;for(;n>e;e++)if(x.contains(this,t[e]))return!0})},not:function(e){return this.pushStack(et(this,e||[],!0))},filter:function(e){return this.pushStack(et(this,e||[],!1))},is:function(e){return!!et(this,"string"==typeof e&&Q.test(e)?x(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],s=Q.test(e)||"string"!=typeof e?x(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(s?s.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?x.unique(o):o)},index:function(e){return e?"string"==typeof e?g.call(x(e),this[0]):g.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?x(e,t):x.makeArray(e&&e.nodeType?[e]:e),r=x.merge(this.get(),n);return this.pushStack(x.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function Z(e,t){while((e=e[t])&&1!==e.nodeType);return e}x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x.dir(e,"parentNode")},parentsUntil:function(e,t,n){return x.dir(e,"parentNode",n)},next:function(e){return Z(e,"nextSibling")},prev:function(e){return Z(e,"previousSibling")},nextAll:function(e){return x.dir(e,"nextSibling")},prevAll:function(e){return x.dir(e,"previousSibling")},nextUntil:function(e,t,n){return x.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return x.dir(e,"previousSibling",n)},siblings:function(e){return x.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return x.sibling(e.firstChild)},contents:function(e){return e.contentDocument||x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=x.filter(r,i)),this.length>1&&(K[e]||x.unique(i),J.test(e)&&i.reverse()),this.pushStack(i)}}),x.extend({filter:function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,t,n){var r=[],i=n!==undefined;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&x(e).is(n))break;r.push(e)}return r},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function et(e,t,n){if(x.isFunction(t))return x.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return x.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(G.test(t))return x.filter(t,e,n);t=x.filter(t,e)}return x.grep(e,function(e){return g.call(t,e)>=0!==n})}var tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,nt=/<([\w:]+)/,rt=/<|&#?\w+;/,it=/<(?:script|style|link)/i,ot=/^(?:checkbox|radio)$/i,st=/checked\s*(?:[^=]|=\s*.checked.)/i,at=/^$|\/(?:java|ecma)script/i,ut=/^true\/(.*)/,lt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ct={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ct.optgroup=ct.option,ct.tbody=ct.tfoot=ct.colgroup=ct.caption=ct.thead,ct.th=ct.td,x.fn.extend({text:function(e){return x.access(this,function(e){return e===undefined?x.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?x.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||x.cleanData(mt(n)),n.parentNode&&(t&&x.contains(n.ownerDocument,n)&&dt(mt(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(mt(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return x.access(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!it.test(e)&&!ct[(nt.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(tt,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(x.cleanData(mt(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=x.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),x(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=f.apply([],e);var r,i,o,s,a,u,l=0,c=this.length,p=this,h=c-1,d=e[0],g=x.isFunction(d);if(g||!(1>=c||"string"!=typeof d||x.support.checkClone)&&st.test(d))return this.each(function(r){var i=p.eq(r);g&&(e[0]=d.call(this,r,i.html())),i.domManip(e,t,n)});if(c&&(r=x.buildFragment(e,this[0].ownerDocument,!1,!n&&this),i=r.firstChild,1===r.childNodes.length&&(r=i),i)){for(o=x.map(mt(r,"script"),ft),s=o.length;c>l;l++)a=r,l!==h&&(a=x.clone(a,!0,!0),s&&x.merge(o,mt(a,"script"))),t.call(this[l],a,l);if(s)for(u=o[o.length-1].ownerDocument,x.map(o,ht),l=0;s>l;l++)a=o[l],at.test(a.type||"")&&!q.access(a,"globalEval")&&x.contains(u,a)&&(a.src?x._evalUrl(a.src):x.globalEval(a.textContent.replace(lt,"")))}return this}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){var n,r=[],i=x(e),o=i.length-1,s=0;for(;o>=s;s++)n=s===o?this:this.clone(!0),x(i[s])[t](n),h.apply(r,n.get());return this.pushStack(r)}}),x.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=x.contains(e.ownerDocument,e);if(!(x.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(s=mt(a),o=mt(e),r=0,i=o.length;i>r;r++)yt(o[r],s[r]);if(t)if(n)for(o=o||mt(e),s=s||mt(a),r=0,i=o.length;i>r;r++)gt(o[r],s[r]);else gt(e,a);return s=mt(a,"script"),s.length>0&&dt(s,!u&&mt(e,"script")),a},buildFragment:function(e,t,n,r){var i,o,s,a,u,l,c=0,p=e.length,f=t.createDocumentFragment(),h=[];for(;p>c;c++)if(i=e[c],i||0===i)if("object"===x.type(i))x.merge(h,i.nodeType?[i]:i);else if(rt.test(i)){o=o||f.appendChild(t.createElement("div")),s=(nt.exec(i)||["",""])[1].toLowerCase(),a=ct[s]||ct._default,o.innerHTML=a[1]+i.replace(tt,"<$1></$2>")+a[2],l=a[0];while(l--)o=o.lastChild;x.merge(h,o.childNodes),o=f.firstChild,o.textContent=""}else h.push(t.createTextNode(i));f.textContent="",c=0;while(i=h[c++])if((!r||-1===x.inArray(i,r))&&(u=x.contains(i.ownerDocument,i),o=mt(f.appendChild(i),"script"),u&&dt(o),n)){l=0;while(i=o[l++])at.test(i.type||"")&&n.push(i)}return f},cleanData:function(e){var t,n,r,i,o,s,a=x.event.special,u=0;for(;(n=e[u])!==undefined;u++){if(F.accepts(n)&&(o=n[q.expando],o&&(t=q.cache[o]))){if(r=Object.keys(t.events||{}),r.length)for(s=0;(i=r[s])!==undefined;s++)a[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);q.cache[o]&&delete q.cache[o]}delete L.cache[n[L.expando]]}},_evalUrl:function(e){return x.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})}});function pt(e,t){return x.nodeName(e,"table")&&x.nodeName(1===t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function ft(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ht(e){var t=ut.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function dt(e,t){var n=e.length,r=0;for(;n>r;r++)q.set(e[r],"globalEval",!t||q.get(t[r],"globalEval"))}function gt(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(q.hasData(e)&&(o=q.access(e),s=q.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;r>n;n++)x.event.add(t,i,l[i][n])}L.hasData(e)&&(a=L.access(e),u=x.extend({},a),L.set(t,u))}}function mt(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return t===undefined||t&&x.nodeName(e,t)?x.merge([e],n):n}function yt(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ot.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}x.fn.extend({wrapAll:function(e){var t;return x.isFunction(e)?this.each(function(t){x(this).wrapAll(e.call(this,t))}):(this[0]&&(t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return x.isFunction(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=x.isFunction(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){x.nodeName(this,"body")||x(this).replaceWith(this.childNodes)}).end()}});var vt,xt,bt=/^(none|table(?!-c[ea]).+)/,wt=/^margin/,Tt=RegExp("^("+b+")(.*)$","i"),Ct=RegExp("^("+b+")(?!px)[a-z%]+$","i"),kt=RegExp("^([+-])=("+b+")","i"),Nt={BODY:"block"},Et={position:"absolute",visibility:"hidden",display:"block"},St={letterSpacing:0,fontWeight:400},jt=["Top","Right","Bottom","Left"],Dt=["Webkit","O","Moz","ms"];function At(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Dt.length;while(i--)if(t=Dt[i]+n,t in e)return t;return r}function Lt(e,t){return e=t||e,"none"===x.css(e,"display")||!x.contains(e.ownerDocument,e)}function qt(t){return e.getComputedStyle(t,null)}function Ht(e,t){var n,r,i,o=[],s=0,a=e.length;for(;a>s;s++)r=e[s],r.style&&(o[s]=q.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Lt(r)&&(o[s]=q.access(r,"olddisplay",Rt(r.nodeName)))):o[s]||(i=Lt(r),(n&&"none"!==n||!i)&&q.set(r,"olddisplay",i?n:x.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}x.fn.extend({css:function(e,t){return x.access(this,function(e,t,n){var r,i,o={},s=0;if(x.isArray(t)){for(r=qt(e),i=t.length;i>s;s++)o[t[s]]=x.css(e,t[s],!1,r);return o}return n!==undefined?x.style(e,t,n):x.css(e,t)},e,t,arguments.length>1)},show:function(){return Ht(this,!0)},hide:function(){return Ht(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Lt(this)?x(this).show():x(this).hide()})}}),x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=vt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=x.camelCase(t),u=e.style;return t=x.cssProps[a]||(x.cssProps[a]=At(u,a)),s=x.cssHooks[t]||x.cssHooks[a],n===undefined?s&&"get"in s&&(i=s.get(e,!1,r))!==undefined?i:u[t]:(o=typeof n,"string"===o&&(i=kt.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(x.css(e,t)),o="number"),null==n||"number"===o&&isNaN(n)||("number"!==o||x.cssNumber[a]||(n+="px"),x.support.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&(n=s.set(e,n,r))===undefined||(u[t]=n)),undefined)}},css:function(e,t,n,r){var i,o,s,a=x.camelCase(t);return t=x.cssProps[a]||(x.cssProps[a]=At(e.style,a)),s=x.cssHooks[t]||x.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),i===undefined&&(i=vt(e,t,r)),"normal"===i&&t in St&&(i=St[t]),""===n||n?(o=parseFloat(i),n===!0||x.isNumeric(o)?o||0:i):i}}),vt=function(e,t,n){var r,i,o,s=n||qt(e),a=s?s.getPropertyValue(t)||s[t]:undefined,u=e.style;return s&&(""!==a||x.contains(e.ownerDocument,e)||(a=x.style(e,t)),Ct.test(a)&&wt.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=s.width,u.width=r,u.minWidth=i,u.maxWidth=o)),a};function Ot(e,t,n){var r=Tt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function Ft(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;for(;4>o;o+=2)"margin"===n&&(s+=x.css(e,n+jt[o],!0,i)),r?("content"===n&&(s-=x.css(e,"padding"+jt[o],!0,i)),"margin"!==n&&(s-=x.css(e,"border"+jt[o]+"Width",!0,i))):(s+=x.css(e,"padding"+jt[o],!0,i),"padding"!==n&&(s+=x.css(e,"border"+jt[o]+"Width",!0,i)));return s}function Pt(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=qt(e),s=x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=vt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Ct.test(i))return i;r=s&&(x.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+Ft(e,t,n||(s?"border":"content"),r,o)+"px"}function Rt(e){var t=o,n=Nt[e];return n||(n=Mt(e,t),"none"!==n&&n||(xt=(xt||x("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=(xt[0].contentWindow||xt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=Mt(e,t),xt.detach()),Nt[e]=n),n}function Mt(e,t){var n=x(t.createElement(e)).appendTo(t.body),r=x.css(n[0],"display");return n.remove(),r}x.each(["height","width"],function(e,t){x.cssHooks[t]={get:function(e,n,r){return n?0===e.offsetWidth&&bt.test(x.css(e,"display"))?x.swap(e,Et,function(){return Pt(e,t,r)}):Pt(e,t,r):undefined},set:function(e,n,r){var i=r&&qt(e);return Ot(e,n,r?Ft(e,t,r,x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,i),i):0)}}}),x(function(){x.support.reliableMarginRight||(x.cssHooks.marginRight={get:function(e,t){return t?x.swap(e,{display:"inline-block"},vt,[e,"marginRight"]):undefined}}),!x.support.pixelPosition&&x.fn.position&&x.each(["top","left"],function(e,t){x.cssHooks[t]={get:function(e,n){return n?(n=vt(e,t),Ct.test(n)?x(e).position()[t]+"px":n):undefined}}})}),x.expr&&x.expr.filters&&(x.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight},x.expr.filters.visible=function(e){return!x.expr.filters.hidden(e)}),x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+jt[r]+t]=o[r]||o[r-2]||o[0];return i}},wt.test(e)||(x.cssHooks[e+t].set=Ot)});var Wt=/%20/g,$t=/\[\]$/,Bt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,zt=/^(?:input|select|textarea|keygen)/i;x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&zt.test(this.nodeName)&&!It.test(e)&&(this.checked||!ot.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:x.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(Bt,"\r\n")}}):{name:t.name,value:n.replace(Bt,"\r\n")}}).get()}}),x.param=function(e,t){var n,r=[],i=function(e,t){t=x.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(t===undefined&&(t=x.ajaxSettings&&x.ajaxSettings.traditional),x.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){i(this.name,this.value)});else for(n in e)_t(n,e[n],t,i);return r.join("&").replace(Wt,"+")};function _t(e,t,n,r){var i;if(x.isArray(t))x.each(t,function(t,i){n||$t.test(e)?r(e,i):_t(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==x.type(t))r(e,t);else for(i in t)_t(e+"["+i+"]",t[i],n,r)}x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)
},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var Xt,Ut,Yt=x.now(),Vt=/\?/,Gt=/#.*$/,Jt=/([?&])_=[^&]*/,Qt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Kt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Zt=/^(?:GET|HEAD)$/,en=/^\/\//,tn=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,nn=x.fn.load,rn={},on={},sn="*/".concat("*");try{Ut=i.href}catch(an){Ut=o.createElement("a"),Ut.href="",Ut=Ut.href}Xt=tn.exec(Ut.toLowerCase())||[];function un(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(w)||[];if(x.isFunction(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function ln(e,t,n,r){var i={},o=e===on;function s(a){var u;return i[a]=!0,x.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):undefined:(t.dataTypes.unshift(l),s(l),!1)}),u}return s(t.dataTypes[0])||!i["*"]&&s("*")}function cn(e,t){var n,r,i=x.ajaxSettings.flatOptions||{};for(n in t)t[n]!==undefined&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&x.extend(!0,e,r),e}x.fn.load=function(e,t,n){if("string"!=typeof e&&nn)return nn.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>=0&&(r=e.slice(a),e=e.slice(0,a)),x.isFunction(t)?(n=t,t=undefined):t&&"object"==typeof t&&(i="POST"),s.length>0&&x.ajax({url:e,type:i,dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?x("<div>").append(x.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ut,type:"GET",isLocal:Kt.test(Xt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":sn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":x.parseJSON,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?cn(cn(e,x.ajaxSettings),t):cn(x.ajaxSettings,e)},ajaxPrefilter:un(rn),ajaxTransport:un(on),ajax:function(e,t){"object"==typeof e&&(t=e,e=undefined),t=t||{};var n,r,i,o,s,a,u,l,c=x.ajaxSetup({},t),p=c.context||c,f=c.context&&(p.nodeType||p.jquery)?x(p):x.event,h=x.Deferred(),d=x.Callbacks("once memory"),g=c.statusCode||{},m={},y={},v=0,b="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===v){if(!o){o={};while(t=Qt.exec(i))o[t[1].toLowerCase()]=t[2]}t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===v?i:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return v||(e=y[n]=y[n]||e,m[e]=t),this},overrideMimeType:function(e){return v||(c.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>v)for(t in e)g[t]=[g[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||b;return n&&n.abort(t),k(0,t),this}};if(h.promise(T).complete=d.add,T.success=T.done,T.error=T.fail,c.url=((e||c.url||Ut)+"").replace(Gt,"").replace(en,Xt[1]+"//"),c.type=t.method||t.type||c.method||c.type,c.dataTypes=x.trim(c.dataType||"*").toLowerCase().match(w)||[""],null==c.crossDomain&&(a=tn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===Xt[1]&&a[2]===Xt[2]&&(a[3]||("http:"===a[1]?"80":"443"))===(Xt[3]||("http:"===Xt[1]?"80":"443")))),c.data&&c.processData&&"string"!=typeof c.data&&(c.data=x.param(c.data,c.traditional)),ln(rn,c,t,T),2===v)return T;u=c.global,u&&0===x.active++&&x.event.trigger("ajaxStart"),c.type=c.type.toUpperCase(),c.hasContent=!Zt.test(c.type),r=c.url,c.hasContent||(c.data&&(r=c.url+=(Vt.test(r)?"&":"?")+c.data,delete c.data),c.cache===!1&&(c.url=Jt.test(r)?r.replace(Jt,"$1_="+Yt++):r+(Vt.test(r)?"&":"?")+"_="+Yt++)),c.ifModified&&(x.lastModified[r]&&T.setRequestHeader("If-Modified-Since",x.lastModified[r]),x.etag[r]&&T.setRequestHeader("If-None-Match",x.etag[r])),(c.data&&c.hasContent&&c.contentType!==!1||t.contentType)&&T.setRequestHeader("Content-Type",c.contentType),T.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+("*"!==c.dataTypes[0]?", "+sn+"; q=0.01":""):c.accepts["*"]);for(l in c.headers)T.setRequestHeader(l,c.headers[l]);if(c.beforeSend&&(c.beforeSend.call(p,T,c)===!1||2===v))return T.abort();b="abort";for(l in{success:1,error:1,complete:1})T[l](c[l]);if(n=ln(on,c,t,T)){T.readyState=1,u&&f.trigger("ajaxSend",[T,c]),c.async&&c.timeout>0&&(s=setTimeout(function(){T.abort("timeout")},c.timeout));try{v=1,n.send(m,k)}catch(C){if(!(2>v))throw C;k(-1,C)}}else k(-1,"No Transport");function k(e,t,o,a){var l,m,y,b,w,C=t;2!==v&&(v=2,s&&clearTimeout(s),n=undefined,i=a||"",T.readyState=e>0?4:0,l=e>=200&&300>e||304===e,o&&(b=pn(c,T,o)),b=fn(c,b,T,l),l?(c.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(x.lastModified[r]=w),w=T.getResponseHeader("etag"),w&&(x.etag[r]=w)),204===e||"HEAD"===c.type?C="nocontent":304===e?C="notmodified":(C=b.state,m=b.data,y=b.error,l=!y)):(y=C,(e||!C)&&(C="error",0>e&&(e=0))),T.status=e,T.statusText=(t||C)+"",l?h.resolveWith(p,[m,C,T]):h.rejectWith(p,[T,C,y]),T.statusCode(g),g=undefined,u&&f.trigger(l?"ajaxSuccess":"ajaxError",[T,c,l?m:y]),d.fireWith(p,[T,C]),u&&(f.trigger("ajaxComplete",[T,c]),--x.active||x.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,undefined,t,"script")}}),x.each(["get","post"],function(e,t){x[t]=function(e,n,r,i){return x.isFunction(n)&&(i=i||r,r=n,n=undefined),x.ajax({url:e,type:t,dataType:i,data:n,success:r})}});function pn(e,t,n){var r,i,o,s,a=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),r===undefined&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):undefined}function fn(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(p){return{state:"parsererror",error:s?p:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",function(e){e.cache===undefined&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),x.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=x("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}}});var hn=[],dn=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=hn.pop()||x.expando+"_"+Yt++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(dn.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&dn.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=x.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(dn,"$1"+i):t.jsonp!==!1&&(t.url+=(Vt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||x.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,hn.push(i)),s&&x.isFunction(o)&&o(s[0]),s=o=undefined}),"script"):undefined}),x.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var gn=x.ajaxSettings.xhr(),mn={0:200,1223:204},yn=0,vn={};e.ActiveXObject&&x(e).on("unload",function(){for(var e in vn)vn[e]();vn=undefined}),x.support.cors=!!gn&&"withCredentials"in gn,x.support.ajax=gn=!!gn,x.ajaxTransport(function(e){var t;return x.support.cors||gn&&!e.crossDomain?{send:function(n,r){var i,o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)s[i]=e.xhrFields[i];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)s.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete vn[o],t=s.onload=s.onerror=null,"abort"===e?s.abort():"error"===e?r(s.status||404,s.statusText):r(mn[s.status]||s.status,s.statusText,"string"==typeof s.responseText?{text:s.responseText}:undefined,s.getAllResponseHeaders()))}},s.onload=t(),s.onerror=t("error"),t=vn[o=yn++]=t("abort"),s.send(e.hasContent&&e.data||null)},abort:function(){t&&t()}}:undefined});var xn,bn,wn=/^(?:toggle|show|hide)$/,Tn=RegExp("^(?:([+-])=|)("+b+")([a-z%]*)$","i"),Cn=/queueHooks$/,kn=[An],Nn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Tn.exec(t),o=i&&i[3]||(x.cssNumber[e]?"":"px"),s=(x.cssNumber[e]||"px"!==o&&+r)&&Tn.exec(x.css(n.elem,e)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,x.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--u)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};function En(){return setTimeout(function(){xn=undefined}),xn=x.now()}function Sn(e,t,n){var r,i=(Nn[t]||[]).concat(Nn["*"]),o=0,s=i.length;for(;s>o;o++)if(r=i[o].call(n,t,e))return r}function jn(e,t,n){var r,i,o=0,s=kn.length,a=x.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=xn||En(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;for(;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:xn||En(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?a.resolveWith(e,[l,t]):a.rejectWith(e,[l,t]),this}}),c=l.props;for(Dn(c,l.opts.specialEasing);s>o;o++)if(r=kn[o].call(l,e,c,l.opts))return r;return x.map(c,Sn,l),x.isFunction(l.opts.start)&&l.opts.start.call(e,l),x.fx.timer(x.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function Dn(e,t){var n,r,i,o,s;for(n in e)if(r=x.camelCase(n),i=t[r],o=e[n],x.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=x.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}x.Animation=x.extend(jn,{tweener:function(e,t){x.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Nn[n]=Nn[n]||[],Nn[n].unshift(t)},prefilter:function(e,t){t?kn.unshift(e):kn.push(e)}});function An(e,t,n){var r,i,o,s,a,u,l=this,c={},p=e.style,f=e.nodeType&&Lt(e),h=q.get(e,"fxshow");n.queue||(a=x._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,l.always(function(){l.always(function(){a.unqueued--,x.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===x.css(e,"display")&&"none"===x.css(e,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",l.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],wn.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(f?"hide":"show")){if("show"!==i||!h||h[r]===undefined)continue;f=!0}c[r]=h&&h[r]||x.style(e,r)}if(!x.isEmptyObject(c)){h?"hidden"in h&&(f=h.hidden):h=q.access(e,"fxshow",{}),o&&(h.hidden=!f),f?x(e).show():l.done(function(){x(e).hide()}),l.done(function(){var t;q.remove(e,"fxshow");for(t in c)x.style(e,t,c[t])});for(r in c)s=Sn(f?h[r]:0,r,l),r in h||(h[r]=s.start,f&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function Ln(e,t,n,r,i){return new Ln.prototype.init(e,t,n,r,i)}x.Tween=Ln,Ln.prototype={constructor:Ln,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=Ln.propHooks[this.prop];return e&&e.get?e.get(this):Ln.propHooks._default.get(this)},run:function(e){var t,n=Ln.propHooks[this.prop];return this.pos=t=this.options.duration?x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Ln.propHooks._default.set(this),this}},Ln.prototype.init.prototype=Ln.prototype,Ln.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=x.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[x.cssProps[e.prop]]||x.cssHooks[e.prop])?x.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Ln.propHooks.scrollTop=Ln.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.each(["toggle","show","hide"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(qn(t,!0),e,r,i)}}),x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Lt).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),o=x.speed(t,n,r),s=function(){var t=jn(this,x.extend({},e),o);(i||q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=undefined),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=x.timers,s=q.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&Cn.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&x.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=x.timers,s=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function qn(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=jt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}x.each({slideDown:qn("show"),slideUp:qn("hide"),slideToggle:qn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||x.isFunction(e)&&e,duration:e,easing:n&&t||t&&!x.isFunction(t)&&t};return r.duration=x.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in x.fx.speeds?x.fx.speeds[r.duration]:x.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){x.isFunction(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},x.timers=[],x.fx=Ln.prototype.init,x.fx.tick=function(){var e,t=x.timers,n=0;for(xn=x.now();t.length>n;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||x.fx.stop(),xn=undefined},x.fx.timer=function(e){e()&&x.timers.push(e)&&x.fx.start()},x.fx.interval=13,x.fx.start=function(){bn||(bn=setInterval(x.fx.tick,x.fx.interval))},x.fx.stop=function(){clearInterval(bn),bn=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fx.step={},x.expr&&x.expr.filters&&(x.expr.filters.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length}),x.fn.offset=function(e){if(arguments.length)return e===undefined?this:this.each(function(t){x.offset.setOffset(this,e,t)});var t,n,i=this[0],o={top:0,left:0},s=i&&i.ownerDocument;if(s)return t=s.documentElement,x.contains(t,i)?(typeof i.getBoundingClientRect!==r&&(o=i.getBoundingClientRect()),n=Hn(s),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}):o},x.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=x.css(e,"position"),p=x(e),f={};"static"===c&&(e.style.position="relative"),a=p.offset(),o=x.css(e,"top"),u=x.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=p.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),x.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),"using"in t?t.using.call(e,f):p.css(f)}},x.fn.extend({position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===x.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),x.nodeName(e[0],"html")||(r=e.offset()),r.top+=x.css(e[0],"borderTopWidth",!0),r.left+=x.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-x.css(n,"marginTop",!0),left:t.left-r.left-x.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||s;while(e&&!x.nodeName(e,"html")&&"static"===x.css(e,"position"))e=e.offsetParent;return e||s})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;x.fn[t]=function(i){return x.access(this,function(t,i,o){var s=Hn(t);return o===undefined?s?s[n]:t[i]:(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o,undefined)},t,i,arguments.length,null)}});function Hn(e){return x.isWindow(e)?e:9===e.nodeType&&e.defaultView}x.each({Height:"height",Width:"width"},function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){x.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return x.access(this,function(t,n,r){var i;return x.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):r===undefined?x.css(t,n,s):x.style(t,n,r,s)},t,o?r:undefined,o,null)}})}),x.fn.size=function(){return this.length},x.fn.andSelf=x.fn.addBack,"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=x:"function"==typeof define&&define.amd&&define("jquery",[],function(){return x}),"object"==typeof e&&"object"==typeof e.document&&(e.jQuery=e.$=x)})(window);
(function($,undefined){var uuid=0,runiqueId=/^ui-id-\d+$/;$.ui=$.ui||{};if($.ui.version){return;}
$.extend($.ui,{version:"1.10.0",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}});$.fn.extend({_focus:$.fn.focus,focus:function(delay,fn){return typeof delay==="number"?this.each(function(){var elem=this;setTimeout(function(){$(elem).focus();if(fn){fn.call(elem);}},delay);}):this._focus.apply(this,arguments);},scrollParent:function(){var scrollParent;if(($.ui.ie&&(/(static|relative)/).test(this.css("position")))||(/absolute/).test(this.css("position"))){scrollParent=this.parents().filter(function(){return(/(relative|absolute|fixed)/).test($.css(this,"position"))&&(/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));}).eq(0);}else{scrollParent=this.parents().filter(function(){return(/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));}).eq(0);}
return(/fixed/).test(this.css("position"))||!scrollParent.length?$(document):scrollParent;},zIndex:function(zIndex){if(zIndex!==undefined){return this.css("zIndex",zIndex);}
if(this.length){var elem=$(this[0]),position,value;while(elem.length&&elem[0]!==document){position=elem.css("position");if(position==="absolute"||position==="relative"||position==="fixed"){value=parseInt(elem.css("zIndex"),10);if(!isNaN(value)&&value!==0){return value;}}
elem=elem.parent();}}
return 0;},uniqueId:function(){return this.each(function(){if(!this.id){this.id="ui-id-"+(++uuid);}});},removeUniqueId:function(){return this.each(function(){if(runiqueId.test(this.id)){$(this).removeAttr("id");}});}});function focusable(element,isTabIndexNotNaN){var map,mapName,img,nodeName=element.nodeName.toLowerCase();if("area"===nodeName){map=element.parentNode;mapName=map.name;if(!element.href||!mapName||map.nodeName.toLowerCase()!=="map"){return false;}
img=$("img[usemap=#"+mapName+"]")[0];return!!img&&visible(img);}
return(/input|select|textarea|button|object/.test(nodeName)?!element.disabled:"a"===nodeName?element.href||isTabIndexNotNaN:isTabIndexNotNaN)&&visible(element);}
function visible(element){return $.expr.filters.visible(element)&&!$(element).parents().addBack().filter(function(){return $.css(this,"visibility")==="hidden";}).length;}
$.extend($.expr[":"],{data:$.expr.createPseudo?$.expr.createPseudo(function(dataName){return function(elem){return!!$.data(elem,dataName);};}):function(elem,i,match){return!!$.data(elem,match[3]);},focusable:function(element){return focusable(element,!isNaN($.attr(element,"tabindex")));},tabbable:function(element){var tabIndex=$.attr(element,"tabindex"),isTabIndexNaN=isNaN(tabIndex);return(isTabIndexNaN||tabIndex>=0)&&focusable(element,!isTabIndexNaN);}});if(!$("<a>").outerWidth(1).jquery){$.each(["Width","Height"],function(i,name){var side=name==="Width"?["Left","Right"]:["Top","Bottom"],type=name.toLowerCase(),orig={innerWidth:$.fn.innerWidth,innerHeight:$.fn.innerHeight,outerWidth:$.fn.outerWidth,outerHeight:$.fn.outerHeight};function reduce(elem,size,border,margin){$.each(side,function(){size-=parseFloat($.css(elem,"padding"+this))||0;if(border){size-=parseFloat($.css(elem,"border"+this+"Width"))||0;}
if(margin){size-=parseFloat($.css(elem,"margin"+this))||0;}});return size;}
 $.fn["inner"+name]=function(size){if(size===undefined){return orig["inner"+name].call(this);}
return this.each(function(){$(this).css(type,reduce(this,size)+"px");});};$.fn["outer"+name]=function(size,margin){if(typeof size!=="number"){return orig["outer"+name].call(this,size);}
return this.each(function(){$(this).css(type,reduce(this,size,true,margin)+"px");});};});}
if(!$.fn.addBack){$.fn.addBack=function(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));};}
if($("<a>").data("a-b","a").removeData("a-b").data("a-b")){$.fn.removeData=(function(removeData){return function(key){if(arguments.length){return removeData.call(this,$.camelCase(key));}else{return removeData.call(this);}};})($.fn.removeData);}
$.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());$.support.selectstart="onselectstart" in document.createElement("div");$.fn.extend({disableSelection:function(){return this.bind(($.support.selectstart?"selectstart":"mousedown")+
".ui-disableSelection",function(event){event.preventDefault();});},enableSelection:function(){return this.unbind(".ui-disableSelection");}});$.extend($.ui,{plugin:{add:function(module,option,set){var i,proto=$.ui[module].prototype;for(i in set){proto.plugins[i]=proto.plugins[i]||[];proto.plugins[i].push([option,set[i]]);}},call:function(instance,name,args){var i,set=instance.plugins[name];if(!set||!instance.element[0].parentNode||instance.element[0].parentNode.nodeType=== 11){return;}
for(i=0;i<set.length;i++){if(instance.options[set[i][0]]){set[i][1].apply(instance.element,args);}}}},hasScroll:function(el,a){if($(el).css("overflow")==="hidden"){return false;}
var scroll=(a&&a==="left")?"scrollLeft":"scrollTop",has=false;if(el[scroll]>0){return true;}
el[scroll]=1;has=(el[scroll]>0);el[scroll]=0;return has;}});})(jQuery);(function($,undefined){var uuid=0,slice=Array.prototype.slice,_cleanData=$.cleanData;$.cleanData=function(elems){for(var i=0,elem;(elem=elems[i])!=null;i++){try{$(elem).triggerHandler("remove");}catch(e){}}
_cleanData(elems);};$.widget=function(name,base,prototype){var fullName,existingConstructor,constructor,basePrototype,proxiedPrototype={},namespace=name.split(".")[0];name=name.split(".")[1];fullName=namespace+"-"+name;if(!prototype){prototype=base;base=$.Widget;}
$.expr[":"][fullName.toLowerCase()]=function(elem){return!!$.data(elem,fullName);};$[namespace]=$[namespace]||{};existingConstructor=$[namespace][name];constructor=$[namespace][name]=function(options,element){if(!this._createWidget){return new constructor(options,element);}//
if(arguments.length){this._createWidget(options,element);}};$.extend(constructor,existingConstructor,{version:prototype.version,_proto:$.extend({},prototype),_childConstructors:[]});basePrototype=new base();basePrototype.options=$.widget.extend({},basePrototype.options);$.each(prototype,function(prop,value){if(!$.isFunction(value)){proxiedPrototype[prop]=value;return;}
proxiedPrototype[prop]=(function(){var _super=function(){return base.prototype[prop].apply(this,arguments);},_superApply=function(args){return base.prototype[prop].apply(this,args);};return function(){var __super=this._super,__superApply=this._superApply,returnValue;this._super=_super;this._superApply=_superApply;returnValue=value.apply(this,arguments);this._super=__super;this._superApply=__superApply;return returnValue;};})();});constructor.prototype=$.widget.extend(basePrototype,{widgetEventPrefix:existingConstructor?basePrototype.widgetEventPrefix:name},proxiedPrototype,{constructor:constructor,namespace:namespace,widgetName:name,widgetFullName:fullName});//
if(existingConstructor){$.each(existingConstructor._childConstructors,function(i,child){var childPrototype=child.prototype;$.widget(childPrototype.namespace+"."+childPrototype.widgetName,constructor,child._proto);});delete existingConstructor._childConstructors;}else{base._childConstructors.push(constructor);}
$.widget.bridge(name,constructor);};$.widget.extend=function(target){var input=slice.call(arguments,1),inputIndex=0,inputLength=input.length,key,value;for(;inputIndex<inputLength;inputIndex++){for(key in input[inputIndex]){value=input[inputIndex][key];if(input[inputIndex].hasOwnProperty(key)&&value!==undefined){if($.isPlainObject(value)){target[key]=$.isPlainObject(target[key])?$.widget.extend({},target[key],value):$.widget.extend({},value);}else{target[key]=value;}}}}
return target;};$.widget.bridge=function(name,object){var fullName=object.prototype.widgetFullName||name;$.fn[name]=function(options){var isMethodCall=typeof options==="string",args=slice.call(arguments,1),returnValue=this;options=!isMethodCall&&args.length?$.widget.extend.apply(null,[options].concat(args)):options;if(isMethodCall){this.each(function(){var methodValue,instance=$.data(this,fullName);if(!instance){return $.error("cannot call methods on "+name+" prior to initialization; "+
"attempted to call method '"+options+"'");}
if(!$.isFunction(instance[options])||options.charAt(0)==="_"){return $.error("no such method '"+options+"' for "+name+" widget instance");}
methodValue=instance[options].apply(instance,args);if(methodValue!==instance&&methodValue!==undefined){returnValue=methodValue&&methodValue.jquery?returnValue.pushStack(methodValue.get()):methodValue;return false;}});}else{this.each(function(){var instance=$.data(this,fullName);if(instance){instance.option(options||{})._init();}else{$.data(this,fullName,new object(options,this));}});}
return returnValue;};};$.Widget=function(){};$.Widget._childConstructors=[];$.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:false,create:null},_createWidget:function(options,element){element=$(element||this.defaultElement||this)[0];this.element=$(element);this.uuid=uuid++;this.eventNamespace="."+this.widgetName+this.uuid;this.options=$.widget.extend({},this.options,this._getCreateOptions(),options);this.bindings=$();this.hoverable=$();this.focusable=$();if(element!==this){$.data(element,this.widgetFullName,this);this._on(true,this.element,{remove:function(event){if(event.target===element){this.destroy();}}});this.document=$(element.style?//
element.ownerDocument:element.document||element);this.window=$(this.document[0].defaultView||this.document[0].parentWindow);}
this._create();this._trigger("create",null,this._getCreateEventData());this._init();},_getCreateOptions:$.noop,_getCreateEventData:$.noop,_create:$.noop,_init:$.noop,destroy:function(){this._destroy();this.element
.unbind(this.eventNamespace)
.removeData(this.widgetName)
.removeData(this.widgetFullName)
.removeData($.camelCase(this.widgetFullName));this.widget()
.unbind(this.eventNamespace)
.removeAttr("aria-disabled")
.removeClass(this.widgetFullName+"-disabled "+
"ui-state-disabled");this.bindings.unbind(this.eventNamespace);this.hoverable.removeClass("ui-state-hover");this.focusable.removeClass("ui-state-focus");},_destroy:$.noop,widget:function(){return this.element;},option:function(key,value){var options=key,parts,curOption,i;if(arguments.length===0){return $.widget.extend({},this.options);}
if(typeof key==="string"){options={};parts=key.split(".");key=parts.shift();if(parts.length){curOption=options[key]=$.widget.extend({},this.options[key]);for(i=0;i<parts.length-1;i++){curOption[parts[i]]=curOption[parts[i]]||{};curOption=curOption[parts[i]];}
key=parts.pop();if(value===undefined){return curOption[key]===undefined?null:curOption[key];}
curOption[key]=value;}else{if(value===undefined){return this.options[key]===undefined?null:this.options[key];}
options[key]=value;}}
this._setOptions(options);return this;},_setOptions:function(options){var key;for(key in options){this._setOption(key,options[key]);}
return this;},_setOption:function(key,value){this.options[key]=value;if(key==="disabled"){this.widget()
.toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!value)
.attr("aria-disabled",value);this.hoverable.removeClass("ui-state-hover");this.focusable.removeClass("ui-state-focus");}
return this;},enable:function(){return this._setOption("disabled",false);},disable:function(){return this._setOption("disabled",true);},_on:function(suppressDisabledCheck,element,handlers){var delegateElement,instance=this;if(typeof suppressDisabledCheck!=="boolean"){handlers=element;element=suppressDisabledCheck;suppressDisabledCheck=false;}
if(!handlers){handlers=element;element=this.element;delegateElement=this.widget();}else{element=delegateElement=$(element);this.bindings=this.bindings.add(element);}
$.each(handlers,function(event,handler){function handlerProxy(){if(!suppressDisabledCheck&&(instance.options.disabled===true||$(this).hasClass("ui-state-disabled"))){return;}
return(typeof handler==="string"?instance[handler]:handler)
.apply(instance,arguments);}//
if(typeof handler!=="string"){handlerProxy.guid=handler.guid=handler.guid||handlerProxy.guid||$.guid++;}
var match=event.match(/^(\w+)\s*(.*)$/),eventName=match[1]+instance.eventNamespace,selector=match[2];if(selector){delegateElement.delegate(selector,eventName,handlerProxy);}else{element.bind(eventName,handlerProxy);}});},_off:function(element,eventName){eventName=(eventName||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace;element.unbind(eventName).undelegate(eventName);},_delay:function(handler,delay){function handlerProxy(){return(typeof handler==="string"?instance[handler]:handler)
.apply(instance,arguments);}
var instance=this;return setTimeout(handlerProxy,delay||0);},_hoverable:function(element){this.hoverable=this.hoverable.add(element);this._on(element,{mouseenter:function(event){$(event.currentTarget).addClass("ui-state-hover");},mouseleave:function(event){$(event.currentTarget).removeClass("ui-state-hover");}});},_focusable:function(element){this.focusable=this.focusable.add(element);this._on(element,{focusin:function(event){$(event.currentTarget).addClass("ui-state-focus");},focusout:function(event){$(event.currentTarget).removeClass("ui-state-focus");}});},_trigger:function(type,event,data){var prop,orig,callback=this.options[type];data=data||{};event=$.Event(event);event.type=(type===this.widgetEventPrefix?type:this.widgetEventPrefix+type).toLowerCase();event.target=this.element[0];orig=event.originalEvent;if(orig){for(prop in orig){if(!(prop in event)){event[prop]=orig[prop];}}}
this.element.trigger(event,data);return!($.isFunction(callback)&&callback.apply(this.element[0],[event].concat(data))===false||event.isDefaultPrevented());}};$.each({show:"fadeIn",hide:"fadeOut"},function(method,defaultEffect){$.Widget.prototype["_"+method]=function(element,options,callback){if(typeof options==="string"){options={effect:options};}
var hasOptions,effectName=!options?method:options===true||typeof options==="number"?defaultEffect:options.effect||defaultEffect;options=options||{};if(typeof options==="number"){options={duration:options};}
hasOptions=!$.isEmptyObject(options);options.complete=callback;if(options.delay){element.delay(options.delay);}
if(hasOptions&&$.effects&&$.effects.effect[effectName]){element[method](options);}else if(effectName!==method&&element[effectName]){element[effectName](options.duration,options.easing,callback);}else{element.queue(function(next){$(this)[method]();if(callback){callback.call(element[0]);}
next();});}};});})(jQuery);(function($,undefined){var mouseHandled=false;$(document).mouseup(function(){mouseHandled=false;});$.widget("ui.mouse",{version:"1.10.0",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var that=this;this.element
.bind("mousedown."+this.widgetName,function(event){return that._mouseDown(event);})
.bind("click."+this.widgetName,function(event){if(true===$.data(event.target,that.widgetName+".preventClickEvent")){$.removeData(event.target,that.widgetName+".preventClickEvent");event.stopImmediatePropagation();return false;}});this.started=false;},_mouseDestroy:function(){this.element.unbind("."+this.widgetName);if(this._mouseMoveDelegate){$(document)
.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate)
.unbind("mouseup."+this.widgetName,this._mouseUpDelegate);}},_mouseDown:function(event){if(mouseHandled){return;}(this._mouseStarted&&this._mouseUp(event));this._mouseDownEvent=event;var that=this,btnIsLeft=(event.which===1),elIsCancel=(typeof this.options.cancel==="string"&&event.target.nodeName?$(event.target).closest(this.options.cancel).length:false);if(!btnIsLeft||elIsCancel||!this._mouseCapture(event)){return true;}
this.mouseDelayMet=!this.options.delay;if(!this.mouseDelayMet){this._mouseDelayTimer=setTimeout(function(){that.mouseDelayMet=true;},this.options.delay);}
if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){this._mouseStarted=(this._mouseStart(event)!==false);if(!this._mouseStarted){event.preventDefault();return true;}}
if(true===$.data(event.target,this.widgetName+".preventClickEvent")){$.removeData(event.target,this.widgetName+".preventClickEvent");}
this._mouseMoveDelegate=function(event){return that._mouseMove(event);};this._mouseUpDelegate=function(event){return that._mouseUp(event);};$(document)
.bind("mousemove."+this.widgetName,this._mouseMoveDelegate)
.bind("mouseup."+this.widgetName,this._mouseUpDelegate);event.preventDefault();mouseHandled=true;return true;},_mouseMove:function(event){if($.ui.ie&&(!document.documentMode||document.documentMode<9)&&!event.button){return this._mouseUp(event);}
if(this._mouseStarted){this._mouseDrag(event);return event.preventDefault();}
if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){this._mouseStarted=(this._mouseStart(this._mouseDownEvent,event)!==false);(this._mouseStarted?this._mouseDrag(event):this._mouseUp(event));}
return!this._mouseStarted;},_mouseUp:function(event){$(document)
.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate)
.unbind("mouseup."+this.widgetName,this._mouseUpDelegate);if(this._mouseStarted){this._mouseStarted=false;if(event.target===this._mouseDownEvent.target){$.data(event.target,this.widgetName+".preventClickEvent",true);}
this._mouseStop(event);}
return false;},_mouseDistanceMet:function(event){return(Math.max(Math.abs(this._mouseDownEvent.pageX-event.pageX),Math.abs(this._mouseDownEvent.pageY-event.pageY))>=this.options.distance);},_mouseDelayMet:function(){return this.mouseDelayMet;},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return true;}});})(jQuery);(function($,undefined){$.widget("ui.draggable",$.ui.mouse,{version:"1.10.0",widgetEventPrefix:"drag",options:{addClasses:true,appendTo:"parent",axis:false,connectToSortable:false,containment:false,cursor:"auto",cursorAt:false,grid:false,handle:false,helper:"original",iframeFix:false,opacity:false,refreshPositions:false,revert:false,revertDuration:500,scope:"default",scroll:true,scrollSensitivity:20,scrollSpeed:20,snap:false,snapMode:"both",snapTolerance:20,stack:false,zIndex:false,drag:null,start:null,stop:null},_create:function(){if(this.options.helper==="original"&&!(/^(?:r|a|f)/).test(this.element.css("position"))){this.element[0].style.position="relative";}
if(this.options.addClasses){this.element.addClass("ui-draggable");}
if(this.options.disabled){this.element.addClass("ui-draggable-disabled");}
this._mouseInit();},_destroy:function(){this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");this._mouseDestroy();},_mouseCapture:function(event){var o=this.options;if(this.helper||o.disabled||$(event.target).closest(".ui-resizable-handle").length>0){return false;}
this.handle=this._getHandle(event);if(!this.handle){return false;}
$(o.iframeFix===true?"iframe":o.iframeFix).each(function(){$("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>")
.css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1000})
.css($(this).offset())
.appendTo("body");});return true;},_mouseStart:function(event){var o=this.options;this.helper=this._createHelper(event);this.helper.addClass("ui-draggable-dragging");this._cacheHelperProportions();if($.ui.ddmanager){$.ui.ddmanager.current=this;}
this._cacheMargins(); this.cssPosition=this.helper.css("position");this.scrollParent=this.helper.scrollParent();this.offset=this.positionAbs=this.element.offset();this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left};$.extend(this.offset,{click:{left:event.pageX-this.offset.left,top:event.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()});this.originalPosition=this.position=this._generatePosition(event);this.originalPageX=event.pageX;this.originalPageY=event.pageY;(o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt));if(o.containment){this._setContainment();}
if(this._trigger("start",event)===false){this._clear();return false;}
this._cacheHelperProportions();if($.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}
this._mouseDrag(event,true);if($.ui.ddmanager){$.ui.ddmanager.dragStart(this,event);}
return true;},_mouseDrag:function(event,noPropagation){this.position=this._generatePosition(event);this.positionAbs=this._convertPositionTo("absolute");//
if(!noPropagation){var ui=this._uiHash();if(this._trigger("drag",event,ui)===false){this._mouseUp({});return false;}
this.position=ui.position;}
if(!this.options.axis||this.options.axis!=="y"){this.helper[0].style.left=this.position.left+"px";}
if(!this.options.axis||this.options.axis!=="x"){this.helper[0].style.top=this.position.top+"px";}
if($.ui.ddmanager){$.ui.ddmanager.drag(this,event);}
return false;},_mouseStop:function(event){var element,that=this,elementInDom=false,dropped=false;if($.ui.ddmanager&&!this.options.dropBehaviour){dropped=$.ui.ddmanager.drop(this,event);}
if(this.dropped){dropped=this.dropped;this.dropped=false;}
element=this.element[0];while(element&&(element=element.parentNode)){if(element===document){elementInDom=true;}}
if(!elementInDom&&this.options.helper==="original"){return false;}
if((this.options.revert==="invalid"&&!dropped)||(this.options.revert==="valid"&&dropped)||this.options.revert===true||($.isFunction(this.options.revert)&&this.options.revert.call(this.element,dropped))){$(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){if(that._trigger("stop",event)!==false){that._clear();}});}else{if(this._trigger("stop",event)!==false){this._clear();}}
return false;},_mouseUp:function(event){$("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this);});if($.ui.ddmanager){$.ui.ddmanager.dragStop(this,event);}
return $.ui.mouse.prototype._mouseUp.call(this,event);},cancel:function(){if(this.helper.is(".ui-draggable-dragging")){this._mouseUp({});}else{this._clear();}
return this;},_getHandle:function(event){var handle=!this.options.handle||!$(this.options.handle,this.element).length?true:false;$(this.options.handle,this.element)
.find("*")
.addBack()
.each(function(){if(this===event.target){handle=true;}});return handle;},_createHelper:function(event){var o=this.options,helper=$.isFunction(o.helper)?$(o.helper.apply(this.element[0],[event])):(o.helper==="clone"?this.element.clone().removeAttr("id"):this.element);if(!helper.parents("body").length){helper.appendTo((o.appendTo==="parent"?this.element[0].parentNode:o.appendTo));}
if(helper[0]!==this.element[0]&&!(/(fixed|absolute)/).test(helper.css("position"))){helper.css("position","absolute");}
return helper;},_adjustOffsetFromHelper:function(obj){if(typeof obj==="string"){obj=obj.split(" ");}
if($.isArray(obj)){obj={left:+obj[0],top:+obj[1]||0};}
if("left" in obj){this.offset.click.left=obj.left+this.margins.left;}
if("right" in obj){this.offset.click.left=this.helperProportions.width-obj.right+this.margins.left;}
if("top" in obj){this.offset.click.top=obj.top+this.margins.top;}
if("bottom" in obj){this.offset.click.top=this.helperProportions.height-obj.bottom+this.margins.top;}},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var po=this.offsetParent.offset();//
if(this.cssPosition==="absolute"&&this.scrollParent[0]!==document&&$.contains(this.scrollParent[0],this.offsetParent[0])){po.left+=this.scrollParent.scrollLeft();po.top+=this.scrollParent.scrollTop();}
if((this.offsetParent[0]===document.body)||(this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()==="html"&&$.ui.ie)){po={top:0,left:0};}
return{top:po.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:po.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)};},_getRelativeOffset:function(){if(this.cssPosition==="relative"){var p=this.element.position();return{top:p.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:p.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()};}else{return{top:0,left:0};}},_cacheMargins:function(){this.margins={left:(parseInt(this.element.css("marginLeft"),10)||0),top:(parseInt(this.element.css("marginTop"),10)||0),right:(parseInt(this.element.css("marginRight"),10)||0),bottom:(parseInt(this.element.css("marginBottom"),10)||0)};},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()};},_setContainment:function(){var over,c,ce,o=this.options;if(o.containment==="parent"){o.containment=this.helper[0].parentNode;}
if(o.containment==="document"||o.containment==="window"){this.containment=[o.containment==="document"?0:$(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,o.containment==="document"?0:$(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,(o.containment==="document"?0:$(window).scrollLeft())+$(o.containment==="document"?document:window).width()-this.helperProportions.width-this.margins.left,(o.containment==="document"?0:$(window).scrollTop())+($(o.containment==="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];}
if(!(/^(document|window|parent)$/).test(o.containment)&&o.containment.constructor!==Array){c=$(o.containment);ce=c[0];if(!ce){return;}
over=($(ce).css("overflow")!=="hidden");this.containment=[(parseInt($(ce).css("borderLeftWidth"),10)||0)+(parseInt($(ce).css("paddingLeft"),10)||0),(parseInt($(ce).css("borderTopWidth"),10)||0)+(parseInt($(ce).css("paddingTop"),10)||0),(over?Math.max(ce.scrollWidth,ce.offsetWidth):ce.offsetWidth)-(parseInt($(ce).css("borderLeftWidth"),10)||0)-(parseInt($(ce).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(over?Math.max(ce.scrollHeight,ce.offsetHeight):ce.offsetHeight)-(parseInt($(ce).css("borderTopWidth"),10)||0)-(parseInt($(ce).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom];this.relative_container=c;}else if(o.containment.constructor===Array){this.containment=o.containment;}},_convertPositionTo:function(d,pos){if(!pos){pos=this.position;}
var mod=d==="absolute"?1:-1,scroll=this.cssPosition==="absolute"&&!(this.scrollParent[0]!==document&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=(/(html|body)/i).test(scroll[0].tagName);return{top:(pos.top+
this.offset.relative.top*mod+
this.offset.parent.top*mod-((this.cssPosition==="fixed"?-this.scrollParent.scrollTop():(scrollIsRootNode?0:scroll.scrollTop()))*mod)),left:(pos.left+
this.offset.relative.left*mod+
this.offset.parent.left*mod-((this.cssPosition==="fixed"?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())*mod))};},_generatePosition:function(event){var containment,co,top,left,o=this.options,scroll=this.cssPosition==="absolute"&&!(this.scrollParent[0]!==document&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=(/(html|body)/i).test(scroll[0].tagName),pageX=event.pageX,pageY=event.pageY;if(this.originalPosition){if(this.containment){if(this.relative_container){co=this.relative_container.offset();containment=[this.containment[0]+co.left,this.containment[1]+co.top,this.containment[2]+co.left,this.containment[3]+co.top];}
else{containment=this.containment;}
if(event.pageX-this.offset.click.left<containment[0]){pageX=containment[0]+this.offset.click.left;}
if(event.pageY-this.offset.click.top<containment[1]){pageY=containment[1]+this.offset.click.top;}
if(event.pageX-this.offset.click.left>containment[2]){pageX=containment[2]+this.offset.click.left;}
if(event.pageY-this.offset.click.top>containment[3]){pageY=containment[3]+this.offset.click.top;}}
if(o.grid){top=o.grid[1]?this.originalPageY+Math.round((pageY-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY;pageY=containment?((top-this.offset.click.top>=containment[1]||top-this.offset.click.top>containment[3])?top:((top-this.offset.click.top>=containment[1])?top-o.grid[1]:top+o.grid[1])):top;left=o.grid[0]?this.originalPageX+Math.round((pageX-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX;pageX=containment?((left-this.offset.click.left>=containment[0]||left-this.offset.click.left>containment[2])?left:((left-this.offset.click.left>=containment[0])?left-o.grid[0]:left+o.grid[0])):left;}}
return{top:(pageY-
this.offset.click.top-
this.offset.relative.top-
this.offset.parent.top+((this.cssPosition==="fixed"?-this.scrollParent.scrollTop():(scrollIsRootNode?0:scroll.scrollTop())))),left:(pageX-
this.offset.click.left-
this.offset.relative.left-
this.offset.parent.left+
((this.cssPosition==="fixed"?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())))};},_clear:function(){this.helper.removeClass("ui-draggable-dragging");if(this.helper[0]!==this.element[0]&&!this.cancelHelperRemoval){this.helper.remove();}
this.helper=null;this.cancelHelperRemoval=false;},_trigger:function(type,event,ui){ui=ui||this._uiHash();$.ui.plugin.call(this,type,[event,ui]);if(type==="drag"){this.positionAbs=this._convertPositionTo("absolute");}
return $.Widget.prototype._trigger.call(this,type,event,ui);},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs};}});$.ui.plugin.add("draggable","connectToSortable",{start:function(event,ui){var inst=$(this).data("ui-draggable"),o=inst.options,uiSortable=$.extend({},ui,{item:inst.element});inst.sortables=[];$(o.connectToSortable).each(function(){var sortable=$.data(this,"ui-sortable");if(sortable&&!sortable.options.disabled){inst.sortables.push({instance:sortable,shouldRevert:sortable.options.revert});sortable.refreshPositions();sortable._trigger("activate",event,uiSortable);}});},stop:function(event,ui){var inst=$(this).data("ui-draggable"),uiSortable=$.extend({},ui,{item:inst.element});$.each(inst.sortables,function(){if(this.instance.isOver){this.instance.isOver=0;inst.cancelHelperRemoval=true;this.instance.cancelHelperRemoval=false;if(this.shouldRevert){this.instance.options.revert=true;}
this.instance._mouseStop(event);this.instance.options.helper=this.instance.options._helper;if(inst.options.helper==="original"){this.instance.currentItem.css({top:"auto",left:"auto"});}}else{this.instance.cancelHelperRemoval=false;this.instance._trigger("deactivate",event,uiSortable);}});},drag:function(event,ui){var inst=$(this).data("ui-draggable"),that=this;$.each(inst.sortables,function(){var innermostIntersecting=false,thisSortable=this;this.instance.positionAbs=inst.positionAbs;this.instance.helperProportions= inst.helperProportions;this.instance.offset.click=inst.offset.click;if(this.instance._intersectsWith(this.instance.containerCache)){innermostIntersecting=true;$.each(inst.sortables,function(){this.instance.positionAbs=inst.positionAbs;this.instance.helperProportions=inst.helperProportions;this.instance.offset.click=inst.offset.click;if(this!==thisSortable&&this.instance._intersectsWith(this.instance.containerCache)&&$.ui.contains(thisSortable.instance.element[0],this.instance.element[0])){innermostIntersecting=false;}
return innermostIntersecting;});}
if(innermostIntersecting){if(!this.instance.isOver){this.instance.isOver=1;this.instance.currentItem=$(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item",true);this.instance.options._helper=this.instance.options.helper;this.instance.options.helper=function(){return ui.helper[0];};event.target=this.instance.currentItem[0];this.instance._mouseCapture(event,true);this.instance._mouseStart(event,true,true);this.instance.offset.click.top=inst.offset.click.top;this.instance.offset.click.left=inst.offset.click.left;this.instance.offset.parent.left-=inst.offset.parent.left-this.instance.offset.parent.left;this.instance.offset.parent.top-=inst.offset.parent.top-this.instance.offset.parent.top;inst._trigger("toSortable",event);inst.dropped=this.instance.element;inst.currentItem=inst.element;this.instance.fromOutside=inst;}
if(this.instance.currentItem){this.instance._mouseDrag(event);}}else{if(this.instance.isOver){this.instance.isOver=0;this.instance.cancelHelperRemoval=true;this.instance.options.revert=false;this.instance._trigger("out",event,this.instance._uiHash(this.instance));this.instance._mouseStop(event,true);this.instance.options.helper=this.instance.options._helper;this.instance.currentItem.remove();if(this.instance.placeholder){this.instance.placeholder.remove();}
inst._trigger("fromSortable",event);inst.dropped=false;}}});}});$.ui.plugin.add("draggable","cursor",{start:function(){var t=$("body"),o=$(this).data("ui-draggable").options;if(t.css("cursor")){o._cursor=t.css("cursor");}
t.css("cursor",o.cursor);},stop:function(){var o=$(this).data("ui-draggable").options;if(o._cursor){$("body").css("cursor",o._cursor);}}});$.ui.plugin.add("draggable","opacity",{start:function(event,ui){var t=$(ui.helper),o=$(this).data("ui-draggable").options;if(t.css("opacity")){o._opacity=t.css("opacity");}
t.css("opacity",o.opacity);},stop:function(event,ui){var o=$(this).data("ui-draggable").options;if(o._opacity){$(ui.helper).css("opacity",o._opacity);}}});$.ui.plugin.add("draggable","scroll",{start:function(){var i=$(this).data("ui-draggable");if(i.scrollParent[0]!==document&&i.scrollParent[0].tagName!=="HTML"){i.overflowOffset=i.scrollParent.offset();}},drag:function(event){var i=$(this).data("ui-draggable"),o=i.options,scrolled=false;if(i.scrollParent[0]!==document&&i.scrollParent[0].tagName!=="HTML"){if(!o.axis||o.axis!=="x"){if((i.overflowOffset.top+i.scrollParent[0].offsetHeight)-event.pageY<o.scrollSensitivity){i.scrollParent[0].scrollTop=scrolled=i.scrollParent[0].scrollTop+o.scrollSpeed;}else if(event.pageY-i.overflowOffset.top<o.scrollSensitivity){i.scrollParent[0].scrollTop=scrolled=i.scrollParent[0].scrollTop-o.scrollSpeed;}}
if(!o.axis||o.axis!=="y"){if((i.overflowOffset.left+i.scrollParent[0].offsetWidth)-event.pageX<o.scrollSensitivity){i.scrollParent[0].scrollLeft=scrolled=i.scrollParent[0].scrollLeft+o.scrollSpeed;}else if(event.pageX-i.overflowOffset.left<o.scrollSensitivity){i.scrollParent[0].scrollLeft=scrolled=i.scrollParent[0].scrollLeft-o.scrollSpeed;}}}else{if(!o.axis||o.axis!=="x"){if(event.pageY-$(document).scrollTop()<o.scrollSensitivity){scrolled=$(document).scrollTop($(document).scrollTop()-o.scrollSpeed);}else if($(window).height()-(event.pageY-$(document).scrollTop())<o.scrollSensitivity){scrolled=$(document).scrollTop($(document).scrollTop()+o.scrollSpeed);}}
if(!o.axis||o.axis!=="y"){if(event.pageX-$(document).scrollLeft()<o.scrollSensitivity){scrolled=$(document).scrollLeft($(document).scrollLeft()-o.scrollSpeed);}else if($(window).width()-(event.pageX-$(document).scrollLeft())<o.scrollSensitivity){scrolled=$(document).scrollLeft($(document).scrollLeft()+o.scrollSpeed);}}}
if(scrolled!==false&&$.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(i,event);}}});$.ui.plugin.add("draggable","snap",{start:function(){var i=$(this).data("ui-draggable"),o=i.options;i.snapElements=[];$(o.snap.constructor!==String?(o.snap.items||":data(ui-draggable)"):o.snap).each(function(){var $t=$(this),$o=$t.offset();if(this!==i.element[0]){i.snapElements.push({item:this,width:$t.outerWidth(),height:$t.outerHeight(),top:$o.top,left:$o.left});}});},drag:function(event,ui){var ts,bs,ls,rs,l,r,t,b,i,first,inst=$(this).data("ui-draggable"),o=inst.options,d=o.snapTolerance,x1=ui.offset.left,x2=x1+inst.helperProportions.width,y1=ui.offset.top,y2=y1+inst.helperProportions.height;for(i=inst.snapElements.length-1;i>=0;i--){l=inst.snapElements[i].left;r=l+inst.snapElements[i].width;t=inst.snapElements[i].top;b=t+inst.snapElements[i].height;if(!((l-d<x1&&x1<r+d&&t-d<y1&&y1<b+d)||(l-d<x1&&x1<r+d&&t-d<y2&&y2<b+d)||(l-d<x2&&x2<r+d&&t-d<y1&&y1<b+d)||(l-d<x2&&x2<r+d&&t-d<y2&&y2<b+d))){if(inst.snapElements[i].snapping){(inst.options.snap.release&&inst.options.snap.release.call(inst.element,event,$.extend(inst._uiHash(),{snapItem:inst.snapElements[i].item})));}
inst.snapElements[i].snapping=false;continue;}
if(o.snapMode!=="inner"){ts=Math.abs(t-y2)<=d;bs=Math.abs(b-y1)<=d;ls=Math.abs(l-x2)<=d;rs=Math.abs(r-x1)<=d;if(ts){ui.position.top=inst._convertPositionTo("relative",{top:t-inst.helperProportions.height,left:0}).top-inst.margins.top;}
if(bs){ui.position.top=inst._convertPositionTo("relative",{top:b,left:0}).top-inst.margins.top;}
if(ls){ui.position.left=inst._convertPositionTo("relative",{top:0,left:l-inst.helperProportions.width}).left-inst.margins.left;}
if(rs){ui.position.left=inst._convertPositionTo("relative",{top:0,left:r}).left-inst.margins.left;}}
first=(ts||bs||ls||rs);if(o.snapMode!=="outer"){ts=Math.abs(t-y1)<=d;bs=Math.abs(b-y2)<=d;ls=Math.abs(l-x1)<=d;rs=Math.abs(r-x2)<=d;if(ts){ui.position.top=inst._convertPositionTo("relative",{top:t,left:0}).top-inst.margins.top;}
if(bs){ui.position.top=inst._convertPositionTo("relative",{top:b-inst.helperProportions.height,left:0}).top-inst.margins.top;}
if(ls){ui.position.left=inst._convertPositionTo("relative",{top:0,left:l}).left-inst.margins.left;}
if(rs){ui.position.left=inst._convertPositionTo("relative",{top:0,left:r-inst.helperProportions.width}).left-inst.margins.left;}}
if(!inst.snapElements[i].snapping&&(ts||bs||ls||rs||first)){(inst.options.snap.snap&&inst.options.snap.snap.call(inst.element,event,$.extend(inst._uiHash(),{snapItem:inst.snapElements[i].item})));}
inst.snapElements[i].snapping=(ts||bs||ls||rs||first);}}});$.ui.plugin.add("draggable","stack",{start:function(){var min,o=$(this).data("ui-draggable").options,group=$.makeArray($(o.stack)).sort(function(a,b){return(parseInt($(a).css("zIndex"),10)||0)-(parseInt($(b).css("zIndex"),10)||0);});if(!group.length){return;}
min=parseInt(group[0].style.zIndex,10)||0;$(group).each(function(i){this.style.zIndex=min+i;});this[0].style.zIndex=min+group.length;}});$.ui.plugin.add("draggable","zIndex",{start:function(event,ui){var t=$(ui.helper),o=$(this).data("ui-draggable").options;if(t.css("zIndex")){o._zIndex=t.css("zIndex");}
t.css("zIndex",o.zIndex);},stop:function(event,ui){var o=$(this).data("ui-draggable").options;if(o._zIndex){$(ui.helper).css("zIndex",o._zIndex);}}});})(jQuery);(function($,undefined){function isOverAxis(x,reference,size){return(x>reference)&&(x<(reference+size));}
$.widget("ui.droppable",{version:"1.10.0",widgetEventPrefix:"drop",options:{accept:"*",activeClass:false,addClasses:true,greedy:false,hoverClass:false,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var o=this.options,accept=o.accept;this.isover=false;this.isout=true;this.accept=$.isFunction(accept)?accept:function(d){return d.is(accept);};this.proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight};$.ui.ddmanager.droppables[o.scope]=$.ui.ddmanager.droppables[o.scope]||[];$.ui.ddmanager.droppables[o.scope].push(this);(o.addClasses&&this.element.addClass("ui-droppable"));},_destroy:function(){var i=0,drop=$.ui.ddmanager.droppables[this.options.scope];for(;i<drop.length;i++){if(drop[i]===this){drop.splice(i,1);}}
this.element.removeClass("ui-droppable ui-droppable-disabled");},_setOption:function(key,value){if(key==="accept"){this.accept=$.isFunction(value)?value:function(d){return d.is(value);};}
$.Widget.prototype._setOption.apply(this,arguments);},_activate:function(event){var draggable=$.ui.ddmanager.current;if(this.options.activeClass){this.element.addClass(this.options.activeClass);}
if(draggable){this._trigger("activate",event,this.ui(draggable));}},_deactivate:function(event){var draggable=$.ui.ddmanager.current;if(this.options.activeClass){this.element.removeClass(this.options.activeClass);}
if(draggable){this._trigger("deactivate",event,this.ui(draggable));}},_over:function(event){var draggable=$.ui.ddmanager.current;if(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return;}
if(this.accept.call(this.element[0],(draggable.currentItem||draggable.element))){if(this.options.hoverClass){this.element.addClass(this.options.hoverClass);}
this._trigger("over",event,this.ui(draggable));}},_out:function(event){var draggable=$.ui.ddmanager.current;if(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return;}
if(this.accept.call(this.element[0],(draggable.currentItem||draggable.element))){if(this.options.hoverClass){this.element.removeClass(this.options.hoverClass);}
this._trigger("out",event,this.ui(draggable));}},_drop:function(event,custom){var draggable=custom||$.ui.ddmanager.current,childrenIntersection=false;if(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return false;}
this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var inst=$.data(this,"ui-droppable");if(inst.options.greedy&&!inst.options.disabled&&inst.options.scope===draggable.options.scope&&inst.accept.call(inst.element[0],(draggable.currentItem||draggable.element))&&$.ui.intersect(draggable,$.extend(inst,{offset:inst.element.offset()}),inst.options.tolerance)){childrenIntersection=true;return false;}});if(childrenIntersection){return false;}
if(this.accept.call(this.element[0],(draggable.currentItem||draggable.element))){if(this.options.activeClass){this.element.removeClass(this.options.activeClass);}
if(this.options.hoverClass){this.element.removeClass(this.options.hoverClass);}
this._trigger("drop",event,this.ui(draggable));return this.element;}
return false;},ui:function(c){return{draggable:(c.currentItem||c.element),helper:c.helper,position:c.position,offset:c.positionAbs};}});$.ui.intersect=function(draggable,droppable,toleranceMode){if(!droppable.offset){return false;}
var draggableLeft,draggableTop,x1=(draggable.positionAbs||draggable.position.absolute).left,x2=x1+draggable.helperProportions.width,y1=(draggable.positionAbs||draggable.position.absolute).top,y2=y1+draggable.helperProportions.height,l=droppable.offset.left,r=l+droppable.proportions.width,t=droppable.offset.top,b=t+droppable.proportions.height;switch(toleranceMode){case "fit":return(l<=x1&&x2<=r&&t<=y1&&y2<=b);case "intersect":return(l<x1+(draggable.helperProportions.width/2)&&x2-(draggable.helperProportions.width/2)<r&&t<y1+(draggable.helperProportions.height/2)&&y2-(draggable.helperProportions.height/2)<b);case "pointer":draggableLeft=((draggable.positionAbs||draggable.position.absolute).left+(draggable.clickOffset||draggable.offset.click).left);draggableTop=((draggable.positionAbs||draggable.position.absolute).top+(draggable.clickOffset||draggable.offset.click).top);return isOverAxis(draggableTop,t,droppable.proportions.height)&&isOverAxis(draggableLeft,l,droppable.proportions.width);case "touch":return((y1>=t&&y1<=b)||(y2>=t&&y2<=b)||(y1<t&&y2>b))&&((x1>=l&&x1<=r)||(x2>=l&&x2<=r)||(x1<l&&x2>r));default:return false;}};$.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(t,event){var i,j,m=$.ui.ddmanager.droppables[t.options.scope]||[],type=event?event.type:null,list=(t.currentItem||t.element).find(":data(ui-droppable)").addBack();droppablesLoop:for(i=0;i<m.length;i++){if(m[i].options.disabled||(t&&!m[i].accept.call(m[i].element[0],(t.currentItem||t.element)))){continue;}
for(j=0;j<list.length;j++){if(list[j]===m[i].element[0]){m[i].proportions.height=0;continue droppablesLoop;}}
m[i].visible=m[i].element.css("display")!=="none";if(!m[i].visible){continue;}
if(type==="mousedown"){m[i]._activate.call(m[i],event);}
m[i].offset=m[i].element.offset();m[i].proportions={width:m[i].element[0].offsetWidth,height:m[i].element[0].offsetHeight};}},drop:function(draggable,event){var dropped=false;$.each($.ui.ddmanager.droppables[draggable.options.scope]||[],function(){if(!this.options){return;}
if(!this.options.disabled&&this.visible&&$.ui.intersect(draggable,this,this.options.tolerance)){dropped=this._drop.call(this,event)||dropped;}
if(!this.options.disabled&&this.visible&&this.accept.call(this.element[0],(draggable.currentItem||draggable.element))){this.isout=true;this.isover=false;this._deactivate.call(this,event);}});return dropped;},dragStart:function(draggable,event){draggable.element.parentsUntil("body").bind("scroll.droppable",function(){if(!draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}});},drag:function(draggable,event){if(draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}
$.each($.ui.ddmanager.droppables[draggable.options.scope]||[],function(){if(this.options.disabled||this.greedyChild||!this.visible){return;}
var parentInstance,scope,parent,intersects=$.ui.intersect(draggable,this,this.options.tolerance),c=!intersects&&this.isover?"isout":(intersects&&!this.isover?"isover":null);if(!c){return;}
if(this.options.greedy){scope=this.options.scope;parent=this.element.parents(":data(ui-droppable)").filter(function(){return $.data(this,"ui-droppable").options.scope===scope;});if(parent.length){parentInstance=$.data(parent[0],"ui-droppable");parentInstance.greedyChild=(c==="isover");}}
if(parentInstance&&c==="isover"){parentInstance.isover=false;parentInstance.isout=true;parentInstance._out.call(parentInstance,event);}
this[c]=true;this[c==="isout"?"isover":"isout"]=false;this[c==="isover"?"_over":"_out"].call(this,event);if(parentInstance&&c==="isout"){parentInstance.isout=false;parentInstance.isover=true;parentInstance._over.call(parentInstance,event);}});},dragStop:function(draggable,event){draggable.element.parentsUntil("body").unbind("scroll.droppable");if(!draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}}};})(jQuery);(function($,undefined){function num(v){return parseInt(v,10)||0;}
function isNumber(value){return!isNaN(parseInt(value,10));}
$.widget("ui.resizable",$.ui.mouse,{version:"1.10.0",widgetEventPrefix:"resize",options:{alsoResize:false,animate:false,animateDuration:"slow",animateEasing:"swing",aspectRatio:false,autoHide:false,containment:false,ghost:false,grid:false,handles:"e,s,se",helper:false,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_create:function(){var n,i,handle,axis,hname,that=this,o=this.options;this.element.addClass("ui-resizable");$.extend(this,{_aspectRatio:!!(o.aspectRatio),aspectRatio:o.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:o.helper||o.ghost||o.animate?o.helper||"ui-resizable-helper":null});if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)){this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")}));this.element=this.element.parent().data("ui-resizable",this.element.data("ui-resizable"));this.elementIsWrapper=true;this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")});this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0});this.originalResizeStyle=this.originalElement.css("resize");this.originalElement.css("resize","none");this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"}));this.originalElement.css({margin:this.originalElement.css("margin")});this._proportionallyResize();}
this.handles=o.handles||(!$(".ui-resizable-handle",this.element).length?"e,s,se":{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"});if(this.handles.constructor===String){if(this.handles==="all"){this.handles="n,e,s,w,se,sw,ne,nw";}
n=this.handles.split(",");this.handles={};for(i=0;i<n.length;i++){handle=$.trim(n[i]);hname="ui-resizable-"+handle;axis=$("<div class='ui-resizable-handle "+hname+"'></div>");axis.css({zIndex:o.zIndex});if("se"===handle){axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");}
this.handles[handle]=".ui-resizable-"+handle; this.element.append(axis);}}
this._renderAxis=function(target){var i,axis,padPos,padWrapper;target=target||this.element;for(i in this.handles){if(this.handles[i].constructor===String){this.handles[i]=$(this.handles[i],this.element).show();}
if(this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)){axis=$(this.handles[i],this.element);padWrapper=/sw|ne|nw|se|n|s/.test(i)?axis.outerHeight():axis.outerWidth();padPos=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join("");target.css(padPos,padWrapper);this._proportionallyResize();}
if(!$(this.handles[i]).length){continue;}}};this._renderAxis(this.element);this._handles=$(".ui-resizable-handle",this.element)
.disableSelection();this._handles.mouseover(function(){if(!that.resizing){if(this.className){axis=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);}
that.axis=axis&&axis[1]?axis[1]:"se";}});if(o.autoHide){this._handles.hide();$(this.element)
.addClass("ui-resizable-autohide")
.mouseenter(function(){if(o.disabled){return;}
$(this).removeClass("ui-resizable-autohide");that._handles.show();})
.mouseleave(function(){if(o.disabled){return;}
if(!that.resizing){$(this).addClass("ui-resizable-autohide");that._handles.hide();}});}//
this._mouseInit();},_destroy:function(){this._mouseDestroy();var wrapper,_destroy=function(exp){$(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
.removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();};if(this.elementIsWrapper){_destroy(this.element);wrapper=this.element;this.originalElement.css({position:wrapper.css("position"),width:wrapper.outerWidth(),height:wrapper.outerHeight(),top:wrapper.css("top"),left:wrapper.css("left")}).insertAfter(wrapper);wrapper.remove();}
this.originalElement.css("resize",this.originalResizeStyle);_destroy(this.originalElement);return this;},_mouseCapture:function(event){var i,handle,capture=false;for(i in this.handles){handle=$(this.handles[i])[0];if(handle===event.target||$.contains(handle,event.target)){capture=true;}}
return!this.options.disabled&&capture;},_mouseStart:function(event){var curleft,curtop,cursor,o=this.options,iniPos=this.element.position(),el=this.element;this.resizing=true;if((/absolute/).test(el.css("position"))){el.css({position:"absolute",top:el.css("top"),left:el.css("left")});}else if(el.is(".ui-draggable")){el.css({position:"absolute",top:iniPos.top,left:iniPos.left});}
this._renderProxy();curleft=num(this.helper.css("left"));curtop=num(this.helper.css("top"));if(o.containment){curleft+=$(o.containment).scrollLeft()||0;curtop+=$(o.containment).scrollTop()||0;}
this.offset=this.helper.offset();this.position={left:curleft,top:curtop};this.size=this._helper?{width:el.outerWidth(),height:el.outerHeight()}:{width:el.width(),height:el.height()};this.originalSize=this._helper?{width:el.outerWidth(),height:el.outerHeight()}:{width:el.width(),height:el.height()};this.originalPosition={left:curleft,top:curtop};this.sizeDiff={width:el.outerWidth()-el.width(),height:el.outerHeight()-el.height()};this.originalMousePosition={left:event.pageX,top:event.pageY};this.aspectRatio=(typeof o.aspectRatio==="number")?o.aspectRatio:((this.originalSize.width/this.originalSize.height)||1);cursor=$(".ui-resizable-"+this.axis).css("cursor");$("body").css("cursor",cursor==="auto"?this.axis+"-resize":cursor);el.addClass("ui-resizable-resizing");this._propagate("start",event);return true;},_mouseDrag:function(event){var data,el=this.helper,props={},smp=this.originalMousePosition,a=this.axis,prevTop=this.position.top,prevLeft=this.position.left,prevWidth=this.size.width,prevHeight=this.size.height,dx=(event.pageX-smp.left)||0,dy=(event.pageY-smp.top)||0,trigger=this._change[a];if(!trigger){return false;}
data=trigger.apply(this,[event,dx,dy]);//
this._updateVirtualBoundaries(event.shiftKey);if(this._aspectRatio||event.shiftKey){data=this._updateRatio(data,event);}
data=this._respectSize(data,event);this._updateCache(data);this._propagate("resize",event);if(this.position.top!==prevTop){props.top=this.position.top+"px";}
if(this.position.left!==prevLeft){props.left=this.position.left+"px";}
if(this.size.width!==prevWidth){props.width=this.size.width+"px";}
if(this.size.height!==prevHeight){props.height=this.size.height+"px";}
el.css(props);if(!this._helper&&this._proportionallyResizeElements.length){this._proportionallyResize();}
if(!$.isEmptyObject(props)){this._trigger("resize",event,this.ui());}
return false;},_mouseStop:function(event){this.resizing=false;var pr,ista,soffseth,soffsetw,s,left,top,o=this.options,that=this;if(this._helper){pr=this._proportionallyResizeElements;ista=pr.length&&(/textarea/i).test(pr[0].nodeName);soffseth=ista&&$.ui.hasScroll(pr[0],"left")?0:that.sizeDiff.height;soffsetw=ista?0:that.sizeDiff.width;s={width:(that.helper.width()-soffsetw),height:(that.helper.height()-soffseth)};left=(parseInt(that.element.css("left"),10)+(that.position.left-that.originalPosition.left))||null;top=(parseInt(that.element.css("top"),10)+(that.position.top-that.originalPosition.top))||null;if(!o.animate){this.element.css($.extend(s,{top:top,left:left}));}
that.helper.height(that.size.height);that.helper.width(that.size.width);if(this._helper&&!o.animate){this._proportionallyResize();}}
$("body").css("cursor","auto");this.element.removeClass("ui-resizable-resizing");this._propagate("stop",event);if(this._helper){this.helper.remove();}
return false;},_updateVirtualBoundaries:function(forceAspectRatio){var pMinWidth,pMaxWidth,pMinHeight,pMaxHeight,b,o=this.options;b={minWidth:isNumber(o.minWidth)?o.minWidth:0,maxWidth:isNumber(o.maxWidth)?o.maxWidth:Infinity,minHeight:isNumber(o.minHeight)?o.minHeight:0,maxHeight:isNumber(o.maxHeight)?o.maxHeight:Infinity};if(this._aspectRatio||forceAspectRatio){pMinWidth=b.minHeight*this.aspectRatio;pMinHeight=b.minWidth/this.aspectRatio;pMaxWidth=b.maxHeight*this.aspectRatio;pMaxHeight=b.maxWidth/this.aspectRatio;if(pMinWidth>b.minWidth){b.minWidth=pMinWidth;}
if(pMinHeight>b.minHeight){b.minHeight=pMinHeight;}
if(pMaxWidth<b.maxWidth){b.maxWidth=pMaxWidth;}
if(pMaxHeight<b.maxHeight){b.maxHeight=pMaxHeight;}}
this._vBoundaries=b;},_updateCache:function(data){this.offset=this.helper.offset();if(isNumber(data.left)){this.position.left=data.left;}
if(isNumber(data.top)){this.position.top=data.top;}
if(isNumber(data.height)){this.size.height=data.height;}
if(isNumber(data.width)){this.size.width=data.width;}},_updateRatio:function(data){var cpos=this.position,csize=this.size,a=this.axis;if(isNumber(data.height)){data.width=(data.height*this.aspectRatio);}else if(isNumber(data.width)){data.height=(data.width/this.aspectRatio);}
if(a==="sw"){data.left=cpos.left+(csize.width-data.width);data.top=null;}
if(a==="nw"){data.top=cpos.top+(csize.height-data.height);data.left=cpos.left+(csize.width-data.width);}
return data;},_respectSize:function(data){var o=this._vBoundaries,a=this.axis,ismaxw=isNumber(data.width)&&o.maxWidth&&(o.maxWidth<data.width),ismaxh=isNumber(data.height)&&o.maxHeight&&(o.maxHeight<data.height),isminw=isNumber(data.width)&&o.minWidth&&(o.minWidth>data.width),isminh=isNumber(data.height)&&o.minHeight&&(o.minHeight>data.height),dw=this.originalPosition.left+this.originalSize.width,dh=this.position.top+this.size.height,cw=/sw|nw|w/.test(a),ch=/nw|ne|n/.test(a);if(isminw){data.width=o.minWidth;}
if(isminh){data.height=o.minHeight;}
if(ismaxw){data.width=o.maxWidth;}
if(ismaxh){data.height=o.maxHeight;}
if(isminw&&cw){data.left=dw-o.minWidth;}
if(ismaxw&&cw){data.left=dw-o.maxWidth;}
if(isminh&&ch){data.top=dh-o.minHeight;}
if(ismaxh&&ch){data.top=dh-o.maxHeight;}
if(!data.width&&!data.height&&!data.left&&data.top){data.top=null;}else if(!data.width&&!data.height&&!data.top&&data.left){data.left=null;}
return data;},_proportionallyResize:function(){if(!this._proportionallyResizeElements.length){return;}
var i,j,borders,paddings,prel,element=this.helper||this.element;for(i=0;i<this._proportionallyResizeElements.length;i++){prel=this._proportionallyResizeElements[i];if(!this.borderDif){this.borderDif=[];borders=[prel.css("borderTopWidth"),prel.css("borderRightWidth"),prel.css("borderBottomWidth"),prel.css("borderLeftWidth")];paddings=[prel.css("paddingTop"),prel.css("paddingRight"),prel.css("paddingBottom"),prel.css("paddingLeft")];for(j=0;j<borders.length;j++){this.borderDif[j]=(parseInt(borders[j],10)||0)+(parseInt(paddings[j],10)||0);}}
prel.css({height:(element.height()-this.borderDif[0]-this.borderDif[2])||0,width:(element.width()-this.borderDif[1]-this.borderDif[3])||0});}},_renderProxy:function(){var el=this.element,o=this.options;this.elementOffset=el.offset();if(this._helper){this.helper=this.helper||$("<div style='overflow:hidden;'></div>");this.helper.addClass(this._helper).css({width:this.element.outerWidth()-1,height:this.element.outerHeight()-1,position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++o.zIndex});this.helper
.appendTo("body")
.disableSelection();}else{this.helper=this.element;}},_change:{e:function(event,dx){return{width:this.originalSize.width+dx};},w:function(event,dx){var cs=this.originalSize,sp=this.originalPosition;return{left:sp.left+dx,width:cs.width-dx};},n:function(event,dx,dy){var cs=this.originalSize,sp=this.originalPosition;return{top:sp.top+dy,height:cs.height-dy};},s:function(event,dx,dy){return{height:this.originalSize.height+dy};},se:function(event,dx,dy){return $.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[event,dx,dy]));},sw:function(event,dx,dy){return $.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[event,dx,dy]));},ne:function(event,dx,dy){return $.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[event,dx,dy]));},nw:function(event,dx,dy){return $.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[event,dx,dy]));}},_propagate:function(n,event){$.ui.plugin.call(this,n,[event,this.ui()]);(n!=="resize"&&this._trigger(n,event,this.ui()));},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition};}});$.ui.plugin.add("resizable","animate",{stop:function(event){var that=$(this).data("ui-resizable"),o=that.options,pr=that._proportionallyResizeElements,ista=pr.length&&(/textarea/i).test(pr[0].nodeName),soffseth=ista&&$.ui.hasScroll(pr[0],"left")?0:that.sizeDiff.height,soffsetw=ista?0:that.sizeDiff.width,style={width:(that.size.width-soffsetw),height:(that.size.height-soffseth)},left=(parseInt(that.element.css("left"),10)+(that.position.left-that.originalPosition.left))||null,top=(parseInt(that.element.css("top"),10)+(that.position.top-that.originalPosition.top))||null;that.element.animate($.extend(style,top&&left?{top:top,left:left}:{}),{duration:o.animateDuration,easing:o.animateEasing,step:function(){var data={width:parseInt(that.element.css("width"),10),height:parseInt(that.element.css("height"),10),top:parseInt(that.element.css("top"),10),left:parseInt(that.element.css("left"),10)};if(pr&&pr.length){$(pr[0]).css({width:data.width,height:data.height});}
that._updateCache(data);that._propagate("resize",event);}});}});$.ui.plugin.add("resizable","containment",{start:function(){var element,p,co,ch,cw,width,height,that=$(this).data("ui-resizable"),o=that.options,el=that.element,oc=o.containment,ce=(oc instanceof $)?oc.get(0):(/parent/.test(oc))?el.parent().get(0):oc;if(!ce){return;}
that.containerElement=$(ce);if(/document/.test(oc)||oc===document){that.containerOffset={left:0,top:0};that.containerPosition={left:0,top:0};that.parentData={element:$(document),left:0,top:0,width:$(document).width(),height:$(document).height()||document.body.parentNode.scrollHeight};}
else{element=$(ce);p=[];$(["Top","Right","Left","Bottom"]).each(function(i,name){p[i]=num(element.css("padding"+name));});that.containerOffset=element.offset();that.containerPosition=element.position();that.containerSize={height:(element.innerHeight()-p[3]),width:(element.innerWidth()-p[1])};co=that.containerOffset;ch=that.containerSize.height;cw=that.containerSize.width;width=($.ui.hasScroll(ce,"left")?ce.scrollWidth:cw);height=($.ui.hasScroll(ce)?ce.scrollHeight:ch);that.parentData={element:ce,left:co.left,top:co.top,width:width,height:height};}},resize:function(event){var woset,hoset,isParent,isOffsetRelative,that=$(this).data("ui-resizable"),o=that.options,co=that.containerOffset,cp=that.position,pRatio=that._aspectRatio||event.shiftKey,cop={top:0,left:0},ce=that.containerElement;if(ce[0]!==document&&(/static/).test(ce.css("position"))){cop=co;}
if(cp.left<(that._helper?co.left:0)){that.size.width=that.size.width+(that._helper?(that.position.left-co.left):(that.position.left-cop.left));if(pRatio){that.size.height=that.size.width/that.aspectRatio;}
that.position.left=o.helper?co.left:0;}
if(cp.top<(that._helper?co.top:0)){that.size.height=that.size.height+(that._helper?(that.position.top-co.top):that.position.top);if(pRatio){that.size.width=that.size.height*that.aspectRatio;}
that.position.top=that._helper?co.top:0;}
that.offset.left=that.parentData.left+that.position.left;that.offset.top=that.parentData.top+that.position.top;woset=Math.abs((that._helper?that.offset.left-cop.left:(that.offset.left-cop.left))+that.sizeDiff.width);hoset=Math.abs((that._helper?that.offset.top-cop.top:(that.offset.top-co.top))+that.sizeDiff.height);isParent=that.containerElement.get(0)===that.element.parent().get(0);isOffsetRelative=/relative|absolute/.test(that.containerElement.css("position"));if(isParent&&isOffsetRelative){woset-=that.parentData.left;}
if(woset+that.size.width>=that.parentData.width){that.size.width=that.parentData.width-woset;if(pRatio){that.size.height=that.size.width/that.aspectRatio;}}
if(hoset+that.size.height>=that.parentData.height){that.size.height=that.parentData.height-hoset;if(pRatio){that.size.width=that.size.height*that.aspectRatio;}}},stop:function(){var that=$(this).data("ui-resizable"),o=that.options,co=that.containerOffset,cop=that.containerPosition,ce=that.containerElement,helper=$(that.helper),ho=helper.offset(),w=helper.outerWidth()-that.sizeDiff.width,h=helper.outerHeight()-that.sizeDiff.height;if(that._helper&&!o.animate&&(/relative/).test(ce.css("position"))){$(this).css({left:ho.left-cop.left-co.left,width:w,height:h});}
if(that._helper&&!o.animate&&(/static/).test(ce.css("position"))){$(this).css({left:ho.left-cop.left-co.left,width:w,height:h});}}});$.ui.plugin.add("resizable","alsoResize",{start:function(){var that=$(this).data("ui-resizable"),o=that.options,_store=function(exp){$(exp).each(function(){var el=$(this);el.data("ui-resizable-alsoresize",{width:parseInt(el.width(),10),height:parseInt(el.height(),10),left:parseInt(el.css("left"),10),top:parseInt(el.css("top"),10)});});};if(typeof(o.alsoResize)==="object"&&!o.alsoResize.parentNode){if(o.alsoResize.length){o.alsoResize=o.alsoResize[0];_store(o.alsoResize);}
else{$.each(o.alsoResize,function(exp){_store(exp);});}}else{_store(o.alsoResize);}},resize:function(event,ui){var that=$(this).data("ui-resizable"),o=that.options,os=that.originalSize,op=that.originalPosition,delta={height:(that.size.height-os.height)||0,width:(that.size.width-os.width)||0,top:(that.position.top-op.top)||0,left:(that.position.left-op.left)||0},_alsoResize=function(exp,c){$(exp).each(function(){var el=$(this),start=$(this).data("ui-resizable-alsoresize"),style={},css=c&&c.length?c:el.parents(ui.originalElement[0]).length?["width","height"]:["width","height","top","left"];$.each(css,function(i,prop){var sum=(start[prop]||0)+(delta[prop]||0);if(sum&&sum>=0){style[prop]=sum||null;}});el.css(style);});};if(typeof(o.alsoResize)==="object"&&!o.alsoResize.nodeType){$.each(o.alsoResize,function(exp,c){_alsoResize(exp,c);});}else{_alsoResize(o.alsoResize);}},stop:function(){$(this).removeData("resizable-alsoresize");}});$.ui.plugin.add("resizable","ghost",{start:function(){var that=$(this).data("ui-resizable"),o=that.options,cs=that.size;that.ghost=that.originalElement.clone();that.ghost
.css({opacity:0.25,display:"block",position:"relative",height:cs.height,width:cs.width,margin:0,left:0,top:0})
.addClass("ui-resizable-ghost")
.addClass(typeof o.ghost==="string"?o.ghost:"");that.ghost.appendTo(that.helper);},resize:function(){var that=$(this).data("ui-resizable");if(that.ghost){that.ghost.css({position:"relative",height:that.size.height,width:that.size.width});}},stop:function(){var that=$(this).data("ui-resizable");if(that.ghost&&that.helper){that.helper.get(0).removeChild(that.ghost.get(0));}}});$.ui.plugin.add("resizable","grid",{resize:function(){var that=$(this).data("ui-resizable"),o=that.options,cs=that.size,os=that.originalSize,op=that.originalPosition,a=that.axis,grid=typeof o.grid==="number"?[o.grid,o.grid]:o.grid,gridX=(grid[0]||1),gridY=(grid[1]||1),ox=Math.round((cs.width-os.width)/gridX)*gridX,oy=Math.round((cs.height-os.height)/gridY)*gridY,newWidth=os.width+ox,newHeight=os.height+oy,isMaxWidth=o.maxWidth&&(o.maxWidth<newWidth),isMaxHeight=o.maxHeight&&(o.maxHeight<newHeight),isMinWidth=o.minWidth&&(o.minWidth>newWidth),isMinHeight=o.minHeight&&(o.minHeight>newHeight);o.grid=grid;if(isMinWidth){newWidth=newWidth+gridX;}
if(isMinHeight){newHeight=newHeight+gridY;}
if(isMaxWidth){newWidth=newWidth-gridX;}
if(isMaxHeight){newHeight=newHeight-gridY;}
if(/^(se|s|e)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;}else if(/^(ne)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;that.position.top=op.top-oy;}else if(/^(sw)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;that.position.left=op.left-ox;}else{that.size.width=newWidth;that.size.height=newHeight;that.position.top=op.top-oy;that.position.left=op.left-ox;}}});})(jQuery);(function($,undefined){$.widget("ui.selectable",$.ui.mouse,{version:"1.10.0",options:{appendTo:"body",autoRefresh:true,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var selectees,that=this;this.element.addClass("ui-selectable");this.dragged=false;this.refresh=function(){selectees=$(that.options.filter,that.element[0]);selectees.addClass("ui-selectee");selectees.each(function(){var $this=$(this),pos=$this.offset();$.data(this,"selectable-item",{element:this,$element:$this,left:pos.left,top:pos.top,right:pos.left+$this.outerWidth(),bottom:pos.top+$this.outerHeight(),startselected:false,selected:$this.hasClass("ui-selected"),selecting:$this.hasClass("ui-selecting"),unselecting:$this.hasClass("ui-unselecting")});});};this.refresh();this.selectees=selectees.addClass("ui-selectee");this._mouseInit();this.helper=$("<div class='ui-selectable-helper'></div>");},_destroy:function(){this.selectees
.removeClass("ui-selectee")
.removeData("selectable-item");this.element
.removeClass("ui-selectable ui-selectable-disabled");this._mouseDestroy();},_mouseStart:function(event){var that=this,options=this.options;this.opos=[event.pageX,event.pageY];if(this.options.disabled){return;}
this.selectees=$(options.filter,this.element[0]);this._trigger("start",event);$(options.appendTo).append(this.helper);this.helper.css({"left":event.pageX,"top":event.pageY,"width":0,"height":0});if(options.autoRefresh){this.refresh();}
this.selectees.filter(".ui-selected").each(function(){var selectee=$.data(this,"selectable-item");selectee.startselected=true;if(!event.metaKey&&!event.ctrlKey){selectee.$element.removeClass("ui-selected");selectee.selected=false;selectee.$element.addClass("ui-unselecting");selectee.unselecting=true;that._trigger("unselecting",event,{unselecting:selectee.element});}});$(event.target).parents().addBack().each(function(){var doSelect,selectee=$.data(this,"selectable-item");if(selectee){doSelect=(!event.metaKey&&!event.ctrlKey)||!selectee.$element.hasClass("ui-selected");selectee.$element
.removeClass(doSelect?"ui-unselecting":"ui-selected")
.addClass(doSelect?"ui-selecting":"ui-unselecting");selectee.unselecting=!doSelect;selectee.selecting=doSelect;selectee.selected=doSelect;if(doSelect){that._trigger("selecting",event,{selecting:selectee.element});}else{that._trigger("unselecting",event,{unselecting:selectee.element});}
return false;}});},_mouseDrag:function(event){this.dragged=true;if(this.options.disabled){return;}
var tmp,that=this,options=this.options,x1=this.opos[0],y1=this.opos[1],x2=event.pageX,y2=event.pageY;if(x1>x2){tmp=x2;x2=x1;x1=tmp;}
if(y1>y2){tmp=y2;y2=y1;y1=tmp;}
this.helper.css({left:x1,top:y1,width:x2-x1,height:y2-y1});this.selectees.each(function(){var selectee=$.data(this,"selectable-item"),hit=false;if(!selectee||selectee.element===that.element[0]){return;}
if(options.tolerance==="touch"){hit=(!(selectee.left>x2||selectee.right<x1||selectee.top>y2||selectee.bottom<y1));}else if(options.tolerance==="fit"){hit=(selectee.left>x1&&selectee.right<x2&&selectee.top>y1&&selectee.bottom<y2);}
if(hit){if(selectee.selected){selectee.$element.removeClass("ui-selected");selectee.selected=false;}
if(selectee.unselecting){selectee.$element.removeClass("ui-unselecting");selectee.unselecting=false;}
if(!selectee.selecting){selectee.$element.addClass("ui-selecting");selectee.selecting=true;that._trigger("selecting",event,{selecting:selectee.element});}}else{if(selectee.selecting){if((event.metaKey||event.ctrlKey)&&selectee.startselected){selectee.$element.removeClass("ui-selecting");selectee.selecting=false;selectee.$element.addClass("ui-selected");selectee.selected=true;}else{selectee.$element.removeClass("ui-selecting");selectee.selecting=false;if(selectee.startselected){selectee.$element.addClass("ui-unselecting");selectee.unselecting=true;}
that._trigger("unselecting",event,{unselecting:selectee.element});}}
if(selectee.selected){if(!event.metaKey&&!event.ctrlKey&&!selectee.startselected){selectee.$element.removeClass("ui-selected");selectee.selected=false;selectee.$element.addClass("ui-unselecting");selectee.unselecting=true;that._trigger("unselecting",event,{unselecting:selectee.element});}}}});return false;},_mouseStop:function(event){var that=this;this.dragged=false;$(".ui-unselecting",this.element[0]).each(function(){var selectee=$.data(this,"selectable-item");selectee.$element.removeClass("ui-unselecting");selectee.unselecting=false;selectee.startselected=false;that._trigger("unselected",event,{unselected:selectee.element});});$(".ui-selecting",this.element[0]).each(function(){var selectee=$.data(this,"selectable-item");selectee.$element.removeClass("ui-selecting").addClass("ui-selected");selectee.selecting=false;selectee.selected=true;selectee.startselected=true;that._trigger("selected",event,{selected:selectee.element});});this._trigger("stop",event);this.helper.remove();return false;}});})(jQuery);(function($,undefined){function isOverAxis(x,reference,size){return(x>reference)&&(x<(reference+size));}
$.widget("ui.sortable",$.ui.mouse,{version:"1.10.0",widgetEventPrefix:"sort",ready:false,options:{appendTo:"parent",axis:false,connectWith:false,containment:false,cursor:"auto",cursorAt:false,dropOnEmpty:true,forcePlaceholderSize:false,forceHelperSize:false,grid:false,handle:false,helper:"original",items:"> *",opacity:false,placeholder:false,revert:false,scroll:true,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1000,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_create:function(){var o=this.options;this.containerCache={};this.element.addClass("ui-sortable");this.refresh();this.floating=this.items.length?o.axis==="x"||(/left|right/).test(this.items[0].item.css("float"))||(/inline|table-cell/).test(this.items[0].item.css("display")):false;this.offset=this.element.offset();this._mouseInit();this.ready=true;},_destroy:function(){this.element
.removeClass("ui-sortable ui-sortable-disabled");this._mouseDestroy();for(var i=this.items.length-1;i>=0;i--){this.items[i].item.removeData(this.widgetName+"-item");}
return this;},_setOption:function(key,value){if(key==="disabled"){this.options[key]=value;this.widget().toggleClass("ui-sortable-disabled",!!value);}else{$.Widget.prototype._setOption.apply(this,arguments);}},_mouseCapture:function(event,overrideHandle){var currentItem=null,validHandle=false,that=this;if(this.reverting){return false;}
if(this.options.disabled||this.options.type==="static"){return false;}
this._refreshItems(event);$(event.target).parents().each(function(){if($.data(this,that.widgetName+"-item")===that){currentItem=$(this);return false;}});if($.data(event.target,that.widgetName+"-item")===that){currentItem=$(event.target);}
if(!currentItem){return false;}
if(this.options.handle&&!overrideHandle){$(this.options.handle,currentItem).find("*").addBack().each(function(){if(this===event.target){validHandle=true;}});if(!validHandle){return false;}}
this.currentItem=currentItem;this._removeCurrentsFromItems();return true;},_mouseStart:function(event,overrideHandle,noActivation){var i,o=this.options;this.currentContainer=this;this.refreshPositions();this.helper=this._createHelper(event);this._cacheHelperProportions();this._cacheMargins();this.scrollParent=this.helper.scrollParent();this.offset=this.currentItem.offset();this.offset={top:this.offset.top- this.margins.top,left:this.offset.left-this.margins.left};$.extend(this.offset,{click:{left:event.pageX-this.offset.left,top:event.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()});this.helper.css("position","absolute");this.cssPosition=this.helper.css("position");this.originalPosition=this._generatePosition(event);this.originalPageX=event.pageX;this.originalPageY=event.pageY;(o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt));this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]};if(this.helper[0]!==this.currentItem[0]){this.currentItem.hide();}
this._createPlaceholder();if(o.containment){this._setContainment();}
if(o.cursor){if($("body").css("cursor")){this._storedCursor=$("body").css("cursor");}
$("body").css("cursor",o.cursor);}
if(o.opacity){if(this.helper.css("opacity")){this._storedOpacity=this.helper.css("opacity");}
this.helper.css("opacity",o.opacity);}
if(o.zIndex){if(this.helper.css("zIndex")){this._storedZIndex=this.helper.css("zIndex");}
this.helper.css("zIndex",o.zIndex);}//
if(this.scrollParent[0]!==document&&this.scrollParent[0].tagName!=="HTML"){this.overflowOffset=this.scrollParent.offset();}
this._trigger("start",event,this._uiHash());if(!this._preserveHelperProportions){this._cacheHelperProportions();}
if(!noActivation){for(i=this.containers.length-1;i>=0;i--){this.containers[i]._trigger("activate",event,this._uiHash(this));}}
if($.ui.ddmanager){$.ui.ddmanager.current=this;}
if($.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}
this.dragging=true;this.helper.addClass("ui-sortable-helper");this._mouseDrag(event);return true;},_mouseDrag:function(event){var i,item,itemElement,intersection,o=this.options,scrolled=false;this.position=this._generatePosition(event);this.positionAbs=this._convertPositionTo("absolute");if(!this.lastPositionAbs){this.lastPositionAbs=this.positionAbs;}
if(this.options.scroll){if(this.scrollParent[0]!==document&&this.scrollParent[0].tagName!=="HTML"){if((this.overflowOffset.top+this.scrollParent[0].offsetHeight)-event.pageY<o.scrollSensitivity){this.scrollParent[0].scrollTop=scrolled=this.scrollParent[0].scrollTop+o.scrollSpeed;}else if(event.pageY-this.overflowOffset.top<o.scrollSensitivity){this.scrollParent[0].scrollTop=scrolled=this.scrollParent[0].scrollTop-o.scrollSpeed;}
if((this.overflowOffset.left+this.scrollParent[0].offsetWidth)-event.pageX<o.scrollSensitivity){this.scrollParent[0].scrollLeft=scrolled=this.scrollParent[0].scrollLeft+o.scrollSpeed;}else if(event.pageX-this.overflowOffset.left<o.scrollSensitivity){this.scrollParent[0].scrollLeft=scrolled=this.scrollParent[0].scrollLeft-o.scrollSpeed;}}else{if(event.pageY-$(document).scrollTop()<o.scrollSensitivity){scrolled=$(document).scrollTop($(document).scrollTop()-o.scrollSpeed);}else if($(window).height()-(event.pageY-$(document).scrollTop())<o.scrollSensitivity){scrolled=$(document).scrollTop($(document).scrollTop()+o.scrollSpeed);}
if(event.pageX-$(document).scrollLeft()<o.scrollSensitivity){scrolled=$(document).scrollLeft($(document).scrollLeft()-o.scrollSpeed);}else if($(window).width()-(event.pageX-$(document).scrollLeft())<o.scrollSensitivity){scrolled=$(document).scrollLeft($(document).scrollLeft()+o.scrollSpeed);}}
if(scrolled!==false&&$.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}}
this.positionAbs=this._convertPositionTo("absolute");if(!this.options.axis||this.options.axis!=="y"){this.helper[0].style.left=this.position.left+"px";}
if(!this.options.axis||this.options.axis!=="x"){this.helper[0].style.top=this.position.top+"px";}
for(i=this.items.length -1;i>=0;i--){item=this.items[i];itemElement=item.item[0];intersection=this._intersectsWithPointer(item);if(!intersection){continue;}
if(item.instance!==this.currentContainer){continue;}
if(itemElement!==this.currentItem[0]&&this.placeholder[intersection===1?"next":"prev"]()[0]!==itemElement&&!$.contains(this.placeholder[0],itemElement)&&(this.options.type==="semi-dynamic"?!$.contains(this.element[0],itemElement):true)){this.direction=intersection===1?"down":"up";if(this.options.tolerance==="pointer"||this._intersectsWithSides(item)){this._rearrange(event,item);}else{break;}
this._trigger("change",event,this._uiHash());break;}}
this._contactContainers(event);if($.ui.ddmanager){$.ui.ddmanager.drag(this,event);}
this._trigger("sort",event,this._uiHash());this.lastPositionAbs=this.positionAbs;return false;},_mouseStop:function(event,noPropagation){if(!event){return;}
if($.ui.ddmanager&&!this.options.dropBehaviour){$.ui.ddmanager.drop(this,event);}
if(this.options.revert){var that=this,cur=this.placeholder.offset(); this.reverting=true;$(this.helper).animate({left:cur.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollLeft),top:cur.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollTop)},parseInt(this.options.revert,10)||500,function(){that._clear(event);});}else{this._clear(event,noPropagation);}
return false;},cancel:function(){if(this.dragging){this._mouseUp({target:null});if(this.options.helper==="original"){this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");}else{this.currentItem.show();}
for(var i=this.containers.length-1;i>=0;i--){this.containers[i]._trigger("deactivate",null,this._uiHash(this));if(this.containers[i].containerCache.over){this.containers[i]._trigger("out",null,this._uiHash(this));this.containers[i].containerCache.over=0;}}}
if(this.placeholder){if(this.placeholder[0].parentNode){this.placeholder[0].parentNode.removeChild(this.placeholder[0]);}
if(this.options.helper!=="original"&&this.helper&&this.helper[0].parentNode){this.helper.remove();}
$.extend(this,{helper:null,dragging:false,reverting:false,_noFinalSort:null});if(this.domPosition.prev){$(this.domPosition.prev).after(this.currentItem);}else{$(this.domPosition.parent).prepend(this.currentItem);}}
return this;},serialize:function(o){var items=this._getItemsAsjQuery(o&&o.connected),str=[];o=o||{};$(items).each(function(){var res=($(o.item||this).attr(o.attribute||"id")||"").match(o.expression||(/(.+)[\-=_](.+)/));if(res){str.push((o.key||res[1]+"[]")+"="+(o.key&&o.expression?res[1]:res[2]));}});if(!str.length&&o.key){str.push(o.key+"=");}
return str.join("&");},toArray:function(o){var items=this._getItemsAsjQuery(o&&o.connected),ret=[];o=o||{};items.each(function(){ret.push($(o.item||this).attr(o.attribute||"id")||"");});return ret;},_intersectsWith:function(item){var x1=this.positionAbs.left,x2=x1+this.helperProportions.width,y1=this.positionAbs.top,y2=y1+this.helperProportions.height,l=item.left,r=l+item.width,t=item.top,b=t+item.height,dyClick=this.offset.click.top,dxClick=this.offset.click.left,isOverElement=(y1+dyClick)>t&&(y1+dyClick)<b&&(x1+dxClick)>l&&(x1+dxClick)<r;if(this.options.tolerance==="pointer"||this.options.forcePointerForContainers||(this.options.tolerance!=="pointer"&&this.helperProportions[this.floating?"width":"height"]>item[this.floating?"width":"height"])){return isOverElement;}else{return(l<x1+(this.helperProportions.width/2)&&x2-(this.helperProportions.width/2)<r&&t<y1+(this.helperProportions.height/2)&&y2-(this.helperProportions.height/2)<b);}},_intersectsWithPointer:function(item){var isOverElementHeight=(this.options.axis==="x")||isOverAxis(this.positionAbs.top+this.offset.click.top,item.top,item.height),isOverElementWidth=(this.options.axis==="y")||isOverAxis(this.positionAbs.left+this.offset.click.left,item.left,item.width),isOverElement=isOverElementHeight&&isOverElementWidth,verticalDirection=this._getDragVerticalDirection(),horizontalDirection=this._getDragHorizontalDirection();if(!isOverElement){return false;}
return this.floating?(((horizontalDirection&&horizontalDirection==="right")||verticalDirection==="down")?2:1):(verticalDirection&&(verticalDirection==="down"?2:1));},_intersectsWithSides:function(item){var isOverBottomHalf=isOverAxis(this.positionAbs.top+this.offset.click.top,item.top+(item.height/2),item.height),isOverRightHalf=isOverAxis(this.positionAbs.left+this.offset.click.left,item.left+(item.width/2),item.width),verticalDirection=this._getDragVerticalDirection(),horizontalDirection=this._getDragHorizontalDirection();if(this.floating&&horizontalDirection){return((horizontalDirection==="right"&&isOverRightHalf)||(horizontalDirection==="left"&&!isOverRightHalf));}else{return verticalDirection&&((verticalDirection==="down"&&isOverBottomHalf)||(verticalDirection==="up"&&!isOverBottomHalf));}},_getDragVerticalDirection:function(){var delta=this.positionAbs.top-this.lastPositionAbs.top;return delta!==0&&(delta>0?"down":"up");},_getDragHorizontalDirection:function(){var delta=this.positionAbs.left-this.lastPositionAbs.left;return delta!==0&&(delta>0?"right":"left");},refresh:function(event){this._refreshItems(event);this.refreshPositions();return this;},_connectWith:function(){var options=this.options;return options.connectWith.constructor===String?[options.connectWith]:options.connectWith;},_getItemsAsjQuery:function(connected){var i,j,cur,inst,items=[],queries=[],connectWith=this._connectWith();if(connectWith&&connected){for(i=connectWith.length-1;i>=0;i--){cur=$(connectWith[i]);for(j=cur.length-1;j>=0;j--){inst=$.data(cur[j],this.widgetFullName);if(inst&&inst!==this&&!inst.options.disabled){queries.push([$.isFunction(inst.options.items)?inst.options.items.call(inst.element):$(inst.options.items,inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),inst]);}}}}
queries.push([$.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):$(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]);for(i=queries.length-1;i>=0;i--){queries[i][0].each(function(){items.push(this);});}
return $(items);},_removeCurrentsFromItems:function(){var list=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=$.grep(this.items,function(item){for(var j=0;j<list.length;j++){if(list[j]===item.item[0]){return false;}}
return true;});},_refreshItems:function(event){this.items=[];this.containers=[this];var i,j,cur,inst,targetData,_queries,item,queriesLength,items=this.items,queries=[[$.isFunction(this.options.items)?this.options.items.call(this.element[0],event,{item:this.currentItem}):$(this.options.items,this.element),this]],connectWith=this._connectWith();if(connectWith&&this.ready){for(i=connectWith.length-1;i>=0;i--){cur=$(connectWith[i]);for(j=cur.length-1;j>=0;j--){inst=$.data(cur[j],this.widgetFullName);if(inst&&inst!==this&&!inst.options.disabled){queries.push([$.isFunction(inst.options.items)?inst.options.items.call(inst.element[0],event,{item:this.currentItem}):$(inst.options.items,inst.element),inst]);this.containers.push(inst);}}}}
for(i=queries.length-1;i>=0;i--){targetData=queries[i][1];_queries=queries[i][0];for(j=0,queriesLength=_queries.length;j<queriesLength;j++){item=$(_queries[j]);item.data(this.widgetName+"-item",targetData);//
items.push({item:item,instance:targetData,width:0,height:0,left:0,top:0});}}},refreshPositions:function(fast){if(this.offsetParent&&this.helper){this.offset.parent=this._getParentOffset();}
var i,item,t,p;for(i=this.items.length-1;i>=0;i--){item=this.items[i];if(item.instance!==this.currentContainer&&this.currentContainer&&item.item[0]!==this.currentItem[0]){continue;}
t=this.options.toleranceElement?$(this.options.toleranceElement,item.item):item.item;if(!fast){item.width=t.outerWidth();item.height=t.outerHeight();}
p=t.offset();item.left=p.left;item.top=p.top;}
if(this.options.custom&&this.options.custom.refreshContainers){this.options.custom.refreshContainers.call(this);}else{for(i=this.containers.length-1;i>=0;i--){p=this.containers[i].element.offset();this.containers[i].containerCache.left=p.left;this.containers[i].containerCache.top=p.top;this.containers[i].containerCache.width=this.containers[i].element.outerWidth();this.containers[i].containerCache.height=this.containers[i].element.outerHeight();}}
return this;},_createPlaceholder:function(that){that=that||this;var className,o=that.options;if(!o.placeholder||o.placeholder.constructor===String){className=o.placeholder;o.placeholder={element:function(){var el=$(document.createElement(that.currentItem[0].nodeName))
.addClass(className||that.currentItem[0].className+" ui-sortable-placeholder")
.removeClass("ui-sortable-helper")[0];if(!className){el.style.visibility="hidden";}
return el;}, update:function(container,p){if(className&&!o.forcePlaceholderSize){return;}
if(!p.height()){p.height(that.currentItem.innerHeight()-parseInt(that.currentItem.css("paddingTop")||0,10)-parseInt(that.currentItem.css("paddingBottom")||0,10));}
if(!p.width()){p.width(that.currentItem.innerWidth()-parseInt(that.currentItem.css("paddingLeft")||0,10)-parseInt(that.currentItem.css("paddingRight")||0,10));}}};}
that.placeholder=$(o.placeholder.element.call(that.element,that.currentItem));that.currentItem.after(that.placeholder);o.placeholder.update(that,that.placeholder);},_contactContainers:function(event){var i,j,dist,itemWithLeastDistance,posProperty,sizeProperty,base,cur,nearBottom,innermostContainer=null,innermostIndex=null;for(i=this.containers.length-1;i>=0;i--){if($.contains(this.currentItem[0],this.containers[i].element[0])){continue;}
if(this._intersectsWith(this.containers[i].containerCache)){if(innermostContainer&&$.contains(this.containers[i].element[0],innermostContainer.element[0])){continue;}
innermostContainer=this.containers[i];innermostIndex=i;}else{//
if(this.containers[i].containerCache.over){this.containers[i]._trigger("out",event,this._uiHash(this));this.containers[i].containerCache.over=0;}}}
if(!innermostContainer){return;}
if(this.containers.length===1){this.containers[innermostIndex]._trigger("over",event,this._uiHash(this));this.containers[innermostIndex].containerCache.over=1;}else{dist=10000;itemWithLeastDistance=null;posProperty=this.containers[innermostIndex].floating?"left":"top";sizeProperty=this.containers[innermostIndex].floating?"width":"height";base=this.positionAbs[posProperty]+this.offset.click[posProperty];for(j=this.items.length-1;j>=0;j--){if(!$.contains(this.containers[innermostIndex].element[0],this.items[j].item[0])){continue;}
if(this.items[j].item[0]===this.currentItem[0]){continue;}
cur=this.items[j].item.offset()[posProperty];nearBottom=false;if(Math.abs(cur-base)>Math.abs(cur+this.items[j][sizeProperty]-base)){nearBottom=true;cur+=this.items[j][sizeProperty];}
if(Math.abs(cur-base)<dist){dist=Math.abs(cur-base);itemWithLeastDistance=this.items[j];this.direction=nearBottom?"up":"down";}}
if(!itemWithLeastDistance&&!this.options.dropOnEmpty){return;}
this.currentContainer=this.containers[innermostIndex];itemWithLeastDistance?this._rearrange(event,itemWithLeastDistance,null,true):this._rearrange(event,null,this.containers[innermostIndex].element,true);this._trigger("change",event,this._uiHash());this.containers[innermostIndex]._trigger("change",event,this._uiHash(this));this.options.placeholder.update(this.currentContainer,this.placeholder);this.containers[innermostIndex]._trigger("over",event,this._uiHash(this));this.containers[innermostIndex].containerCache.over=1;}},_createHelper:function(event){var o=this.options,helper=$.isFunction(o.helper)?$(o.helper.apply(this.element[0],[event,this.currentItem])):(o.helper==="clone"?this.currentItem.clone():this.currentItem);if(!helper.parents("body").length){$(o.appendTo!=="parent"?o.appendTo:this.currentItem[0].parentNode)[0].appendChild(helper[0]);}
if(helper[0]===this.currentItem[0]){this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")};}
if(!helper[0].style.width||o.forceHelperSize){helper.width(this.currentItem.width());}
if(!helper[0].style.height||o.forceHelperSize){helper.height(this.currentItem.height());}
return helper;},_adjustOffsetFromHelper:function(obj){if(typeof obj==="string"){obj=obj.split(" ");}
if($.isArray(obj)){obj={left:+obj[0],top:+obj[1]||0};}
if("left" in obj){this.offset.click.left=obj.left+this.margins.left;}
if("right" in obj){this.offset.click.left=this.helperProportions.width-obj.right+this.margins.left;}
if("top" in obj){this.offset.click.top=obj.top+this.margins.top;}
if("bottom" in obj){this.offset.click.top=this.helperProportions.height-obj.bottom+this.margins.top;}},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var po=this.offsetParent.offset();//
if(this.cssPosition==="absolute"&&this.scrollParent[0]!==document&&$.contains(this.scrollParent[0],this.offsetParent[0])){po.left+=this.scrollParent.scrollLeft();po.top+=this.scrollParent.scrollTop();}
if(this.offsetParent[0]===document.body||(this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()==="html"&&$.ui.ie)){po={top:0,left:0};}
return{top:po.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:po.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)};},_getRelativeOffset:function(){if(this.cssPosition==="relative"){var p=this.currentItem.position();return{top:p.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:p.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()};}else{return{top:0,left:0};}},_cacheMargins:function(){this.margins={left:(parseInt(this.currentItem.css("marginLeft"),10)||0),top:(parseInt(this.currentItem.css("marginTop"),10)||0)};},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()};},_setContainment:function(){var ce,co,over,o=this.options;if(o.containment==="parent"){o.containment=this.helper[0].parentNode;}
if(o.containment==="document"||o.containment==="window"){this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,$(o.containment==="document"?document:window).width()-this.helperProportions.width-this.margins.left,($(o.containment==="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];}
if(!(/^(document|window|parent)$/).test(o.containment)){ce=$(o.containment)[0];co=$(o.containment).offset();over=($(ce).css("overflow")!=="hidden");this.containment=[co.left+(parseInt($(ce).css("borderLeftWidth"),10)||0)+(parseInt($(ce).css("paddingLeft"),10)||0)-this.margins.left,co.top+(parseInt($(ce).css("borderTopWidth"),10)||0)+(parseInt($(ce).css("paddingTop"),10)||0)-this.margins.top,co.left+(over?Math.max(ce.scrollWidth,ce.offsetWidth):ce.offsetWidth)-(parseInt($(ce).css("borderLeftWidth"),10)||0)-(parseInt($(ce).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,co.top+(over?Math.max(ce.scrollHeight,ce.offsetHeight):ce.offsetHeight)-(parseInt($(ce).css("borderTopWidth"),10)||0)-(parseInt($(ce).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top];}},_convertPositionTo:function(d,pos){if(!pos){pos=this.position;}
var mod=d==="absolute"?1:-1,scroll=this.cssPosition==="absolute"&&!(this.scrollParent[0]!==document&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=(/(html|body)/i).test(scroll[0].tagName);return{top:(pos.top+
this.offset.relative.top*mod+
this.offset.parent.top*mod-((this.cssPosition==="fixed"?-this.scrollParent.scrollTop():(scrollIsRootNode?0:scroll.scrollTop()))*mod)),left:(pos.left+
this.offset.relative.left*mod+
this.offset.parent.left*mod-((this.cssPosition==="fixed"?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())*mod))};},_generatePosition:function(event){var top,left,o=this.options,pageX=event.pageX,pageY=event.pageY,scroll=this.cssPosition==="absolute"&&!(this.scrollParent[0]!==document&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=(/(html|body)/i).test(scroll[0].tagName);if(this.cssPosition==="relative"&&!(this.scrollParent[0]!==document&&this.scrollParent[0]!==this.offsetParent[0])){this.offset.relative=this._getRelativeOffset();}
if(this.originalPosition){if(this.containment){if(event.pageX-this.offset.click.left<this.containment[0]){pageX=this.containment[0]+this.offset.click.left;}
if(event.pageY-this.offset.click.top<this.containment[1]){pageY=this.containment[1]+this.offset.click.top;}
if(event.pageX-this.offset.click.left>this.containment[2]){pageX=this.containment[2]+this.offset.click.left;}
if(event.pageY-this.offset.click.top>this.containment[3]){pageY=this.containment[3]+this.offset.click.top;}}
if(o.grid){top=this.originalPageY+Math.round((pageY-this.originalPageY)/o.grid[1])*o.grid[1];pageY=this.containment?((top-this.offset.click.top>=this.containment[1]&&top-this.offset.click.top<=this.containment[3])?top:((top-this.offset.click.top>=this.containment[1])?top-o.grid[1]:top+o.grid[1])):top;left=this.originalPageX+Math.round((pageX-this.originalPageX)/o.grid[0])*o.grid[0];pageX=this.containment?((left-this.offset.click.left>=this.containment[0]&&left-this.offset.click.left<=this.containment[2])?left:((left-this.offset.click.left>=this.containment[0])?left-o.grid[0]:left+o.grid[0])):left;}}
return{top:(pageY-
this.offset.click.top-
this.offset.relative.top-
this.offset.parent.top+((this.cssPosition==="fixed"?-this.scrollParent.scrollTop():(scrollIsRootNode?0:scroll.scrollTop())))),left:(pageX-
this.offset.click.left-
this.offset.relative.left-
this.offset.parent.left+((this.cssPosition==="fixed"?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())))};},_rearrange:function(event,i,a,hardRefresh){a?a[0].appendChild(this.placeholder[0]):i.item[0].parentNode.insertBefore(this.placeholder[0],(this.direction==="down"?i.item[0]:i.item[0].nextSibling));this.counter=this.counter?++this.counter:1;var counter=this.counter;this._delay(function(){if(counter===this.counter){this.refreshPositions(!hardRefresh);}});},_clear:function(event,noPropagation){this.reverting=false;var i,delayedTriggers=[];if(!this._noFinalSort&&this.currentItem.parent().length){this.placeholder.before(this.currentItem);}
this._noFinalSort=null;if(this.helper[0]===this.currentItem[0]){for(i in this._storedCSS){if(this._storedCSS[i]==="auto"||this._storedCSS[i]==="static"){this._storedCSS[i]="";}}
this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");}else{this.currentItem.show();}
if(this.fromOutside&&!noPropagation){delayedTriggers.push(function(event){this._trigger("receive",event,this._uiHash(this.fromOutside));});}
if((this.fromOutside||this.domPosition.prev!==this.currentItem.prev().not(".ui-sortable-helper")[0]||this.domPosition.parent!==this.currentItem.parent()[0])&&!noPropagation){delayedTriggers.push(function(event){this._trigger("update",event,this._uiHash());});//
}
if(this!==this.currentContainer){if(!noPropagation){delayedTriggers.push(function(event){this._trigger("remove",event,this._uiHash());});delayedTriggers.push((function(c){return function(event){c._trigger("receive",event,this._uiHash(this));};}).call(this,this.currentContainer));delayedTriggers.push((function(c){return function(event){c._trigger("update",event,this._uiHash(this));};}).call(this,this.currentContainer));}}
for(i=this.containers.length-1;i>=0;i--){if(!noPropagation){delayedTriggers.push((function(c){return function(event){c._trigger("deactivate",event,this._uiHash(this));};}).call(this,this.containers[i]));}
if(this.containers[i].containerCache.over){delayedTriggers.push((function(c){return function(event){c._trigger("out",event,this._uiHash(this));};}).call(this,this.containers[i]));this.containers[i].containerCache.over=0;}}
if(this._storedCursor){$("body").css("cursor",this._storedCursor);}
if(this._storedOpacity){this.helper.css("opacity",this._storedOpacity);}
if(this._storedZIndex){this.helper.css("zIndex",this._storedZIndex==="auto"?"":this._storedZIndex);}
this.dragging=false;if(this.cancelHelperRemoval){if(!noPropagation){this._trigger("beforeStop",event,this._uiHash());for(i=0;i<delayedTriggers.length;i++){delayedTriggers[i].call(this,event);}
this._trigger("stop",event,this._uiHash());}
this.fromOutside=false;return false;}
if(!noPropagation){this._trigger("beforeStop",event,this._uiHash());}
this.placeholder[0].parentNode.removeChild(this.placeholder[0]);if(this.helper[0]!==this.currentItem[0]){this.helper.remove();}
this.helper=null;if(!noPropagation){for(i=0;i<delayedTriggers.length;i++){delayedTriggers[i].call(this,event);}
this._trigger("stop",event,this._uiHash());}
this.fromOutside=false;return true;},_trigger:function(){if($.Widget.prototype._trigger.apply(this,arguments)===false){this.cancel();}},_uiHash:function(_inst){var inst=_inst||this;return{helper:inst.helper,placeholder:inst.placeholder||$([]),position:inst.position,originalPosition:inst.originalPosition,offset:inst.positionAbs,item:inst.currentItem,sender:_inst?_inst.element:null};}});})(jQuery);;(jQuery.effects||(function($,undefined){var dataSpace="ui-effects-";$.effects={effect:{}};(function(jQuery,undefined){var stepHooks="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",rplusequals=/^([\-+])=\s*(\d+\.?\d*)/,stringParsers=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(execResult){return[execResult[1],execResult[2],execResult[3],execResult[4]];}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(execResult){return[execResult[1]*2.55,execResult[2]*2.55,execResult[3]*2.55,execResult[4]];}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(execResult){return[parseInt(execResult[1],16),parseInt(execResult[2],16),parseInt(execResult[3],16)];}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(execResult){return[parseInt(execResult[1]+execResult[1],16),parseInt(execResult[2]+execResult[2],16),parseInt(execResult[3]+execResult[3],16)];}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(execResult){return[execResult[1],execResult[2]/100,execResult[3]/100,execResult[4]];}}],color=jQuery.Color=function(color,green,blue,alpha){return new jQuery.Color.fn.parse(color,green,blue,alpha);},spaces={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2, type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},propTypes={"byte":{floor:true,max:255},"percent":{max:1},"degrees":{mod:360,floor:true}},support=color.support={},supportElem=jQuery("<p>")[0],colors,each=jQuery.each;supportElem.style.cssText="background-color:rgba(1,1,1,.5)";support.rgba=supportElem.style.backgroundColor.indexOf("rgba")>-1;each(spaces,function(spaceName,space){space.cache="_"+spaceName;space.props.alpha={idx:3,type:"percent",def:1};});function clamp(value,prop,allowEmpty){var type=propTypes[prop.type]||{};if(value==null){return(allowEmpty||!prop.def)?null:prop.def;}
value=type.floor?~~value:parseFloat(value);if(isNaN(value)){return prop.def;}
if(type.mod){return(value+type.mod)%type.mod;}
return 0>value?0:type.max<value?type.max:value;}
function stringParse(string){var inst=color(),rgba=inst._rgba=[];string=string.toLowerCase();each(stringParsers,function(i,parser){var parsed,match=parser.re.exec(string),values=match&&parser.parse(match),spaceName=parser.space||"rgba";if(values){parsed=inst[spaceName](values);//
inst[spaces[spaceName].cache]=parsed[spaces[spaceName].cache];rgba=inst._rgba=parsed._rgba;return false;}});if(rgba.length){if(rgba.join()==="0,0,0,0"){jQuery.extend(rgba,colors.transparent);}
return inst;}
return colors[string];}
color.fn=jQuery.extend(color.prototype,{parse:function(red,green,blue,alpha){if(red===undefined){this._rgba=[null,null,null,null];return this;}
if(red.jquery||red.nodeType){red=jQuery(red).css(green);green=undefined;}
var inst=this,type=jQuery.type(red),rgba=this._rgba=[];if(green!==undefined){red=[red,green,blue,alpha];type="array";}
if(type==="string"){return this.parse(stringParse(red)||colors._default);}
if(type==="array"){each(spaces.rgba.props,function(key,prop){rgba[prop.idx]=clamp(red[prop.idx],prop);});return this;}
if(type==="object"){if(red instanceof color){each(spaces,function(spaceName,space){if(red[space.cache]){inst[space.cache]=red[space.cache].slice();}});}else{each(spaces,function(spaceName,space){var cache=space.cache;each(space.props,function(key,prop){if(!inst[cache]&&space.to){if(key==="alpha"||red[key] ==null){return;}
inst[cache]=space.to(inst._rgba);}
inst[cache][prop.idx]=clamp(red[key],prop,true);});if(inst[cache]&&jQuery.inArray(null,inst[cache].slice(0,3))<0){inst[cache][3]=1;if(space.from){inst._rgba=space.from(inst[cache]);}}});}
return this;}},is:function(compare){var is=color(compare),same=true,inst=this;each(spaces,function(_,space){var localCache,isCache=is[space.cache];if(isCache){localCache=inst[space.cache]||space.to&&space.to(inst._rgba)||[];each(space.props,function(_,prop){if(isCache[prop.idx]!=null){same=(isCache[prop.idx]===localCache[prop.idx]);return same;}});}
return same;});return same;},_space:function(){var used=[],inst=this;each(spaces,function(spaceName,space){if(inst[space.cache]){used.push(spaceName);}});return used.pop();},transition:function(other,distance){var end=color(other),spaceName=end._space(),space=spaces[spaceName],startColor=this.alpha()===0?color("transparent"):this,start=startColor[space.cache]||space.to(startColor._rgba),result=start.slice();end=end[space.cache];each(space.props,function(key,prop){var index=prop.idx,startValue=start[index],endValue=end[index],type=propTypes[prop.type]||{};if(endValue===null){return;}
if(startValue===null){result[index]=endValue;}else{if(type.mod){if(endValue-startValue>type.mod/2){startValue+=type.mod;}else if(startValue-endValue>type.mod/2){startValue-=type.mod;}}
result[index]=clamp((endValue-startValue)*distance+startValue,prop);}});return this[spaceName](result);},blend:function(opaque){if(this._rgba[3]===1){return this;}
var rgb=this._rgba.slice(),a=rgb.pop(),blend=color(opaque)._rgba;return color(jQuery.map(rgb,function(v,i){return(1-a)*blend[i]+a*v;}));},toRgbaString:function(){var prefix="rgba(",rgba=jQuery.map(this._rgba,function(v,i){return v==null?(i>2?1:0):v;});if(rgba[3]===1){rgba.pop();prefix="rgb(";}
return prefix+rgba.join()+")";},toHslaString:function(){var prefix="hsla(",hsla=jQuery.map(this.hsla(),function(v,i){if(v==null){v=i>2?1:0;}
if(i&&i<3){v=Math.round(v*100)+"%";}
return v;});if(hsla[3]===1){hsla.pop();prefix="hsl(";}
return prefix+hsla.join()+")";},toHexString:function(includeAlpha){var rgba=this._rgba.slice(),alpha=rgba.pop();if(includeAlpha){rgba.push(~~(alpha*255));}
return "#"+jQuery.map(rgba,function(v){v=(v||0).toString(16);return v.length===1?"0"+v:v;}).join("");},toString:function(){return this._rgba[3]===0?"transparent":this.toRgbaString();}});color.fn.parse.prototype=color.fn;function hue2rgb(p,q,h){h=(h+1)%1;if(h*6<1){return p+(q-p)*h*6;}
if(h*2<1){return q;}
if(h*3<2){return p+(q-p)*((2/3)-h)*6;}
return p;}
spaces.hsla.to=function(rgba){if(rgba[0]==null||rgba[1]==null||rgba[2]==null){return[null,null,null,rgba[3]];}
var r=rgba[0]/255,g=rgba[1]/255,b=rgba[2]/255,a=rgba[3],max=Math.max(r,g,b),min=Math.min(r,g,b),diff=max-min,add=max+min,l=add*0.5,h,s;if(min===max){h=0;}else if(r===max){h=(60*(g-b)/diff)+360;}else if(g===max){h=(60*(b-r)/diff)+120;}else{h=(60*(r-g)/diff)+240;}
if(diff===0){s=0;}else if(l<=0.5){s=diff/add;}else{s=diff/(2-add);}
return[Math.round(h)%360,s,l,a==null?1:a];};spaces.hsla.from=function(hsla){if(hsla[0]==null||hsla[1]==null||hsla[2]==null){return[null,null,null,hsla[3]];}
var h=hsla[0]/360,s=hsla[1],l=hsla[2],a=hsla[3],q=l<=0.5?l*(1+s):l+s-l*s,p=2*l-q;return[Math.round(hue2rgb(p,q,h+(1/3))*255),Math.round(hue2rgb(p,q,h)*255),Math.round(hue2rgb(p,q,h-(1/3))*255),a];};each(spaces,function(spaceName,space){var props=space.props,cache=space.cache,to=space.to,from=space.from;color.fn[spaceName]=function(value){if(to&&!this[cache]){this[cache]=to(this._rgba);}
if(value===undefined){return this[cache].slice();}
var ret,type=jQuery.type(value),arr=(type==="array"||type==="object")?value:arguments,local=this[cache].slice();each(props,function(key,prop){var val= arr[type==="object"?key:prop.idx];if(val==null){val=local[prop.idx];}
local[prop.idx]=clamp(val,prop);});if(from){ret=color(from(local));ret[cache]=local;return ret;}else{return color(local);}};each(props,function(key,prop){if(color.fn[key]){return;}
color.fn[key]=function(value){var vtype=jQuery.type(value),fn=(key==="alpha"?(this._hsla?"hsla":"rgba"):spaceName),local=this[fn](),cur=local[prop.idx],match;if(vtype==="undefined"){return cur;}
if(vtype==="function"){value=value.call(this,cur);vtype=jQuery.type(value);}
if(value==null&&prop.empty){return this;}
if(vtype==="string"){match=rplusequals.exec(value);if(match){value=cur+parseFloat(match[2])*(match[1]==="+"?1:-1);}}
local[prop.idx]=value;return this[fn](local);};});});color.hook=function(hook){var hooks=hook.split(" ");each(hooks,function(i,hook){jQuery.cssHooks[hook]={set:function(elem,value){var parsed,curElem,backgroundColor="";if(value!=="transparent"&&(jQuery.type(value)!=="string"||(parsed=stringParse(value)))){value=color(parsed||value);if(!support.rgba&&value._rgba[3]!==1){curElem=hook==="backgroundColor"?elem.parentNode:elem;while((backgroundColor===""||backgroundColor==="transparent")&&curElem&&curElem.style){try{backgroundColor=jQuery.css(curElem,"backgroundColor");curElem=curElem.parentNode;}catch (e){}}
value=value.blend(backgroundColor&&backgroundColor!=="transparent"?backgroundColor:"_default");}
value=value.toRgbaString();}
try{elem.style[hook]=value;}catch(e){}}};jQuery.fx.step[hook]=function(fx){if(!fx.colorInit){fx.start=color(fx.elem,hook);fx.end=color(fx.end);fx.colorInit=true;}
jQuery.cssHooks[hook].set(fx.elem,fx.start.transition(fx.end,fx.pos));};});};color.hook(stepHooks);jQuery.cssHooks.borderColor={expand:function(value){var expanded={};each(["Top","Right","Bottom","Left"],function(i,part){expanded["border"+part+"Color"]=value;});return expanded;}};colors=jQuery.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"};})(jQuery);(function(){var classAnimationActions=["add","remove","toggle"],shorthandStyles={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};$.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(_,prop){$.fx.step[prop]=function(fx){if(fx.end!=="none"&&!fx.setAttr||fx.pos===1&&!fx.setAttr){jQuery.style(fx.elem,prop,fx.end);fx.setAttr=true;}};});function getElementStyles(elem){var key,len,style=elem.ownerDocument.defaultView?elem.ownerDocument.defaultView.getComputedStyle(elem,null):elem.currentStyle,styles={};if(style&&style.length&&style[0]&&style[style[0]]){len=style.length;while(len--){key=style[len];if(typeof style[key]==="string"){styles[$.camelCase(key)]=style[key];}}}else{for(key in style){if(typeof style[key]==="string"){styles[key]=style[key];}}}
return styles;}
function styleDifference(oldStyle,newStyle){var diff={},name,value;for(name in newStyle){value=newStyle[name];if(oldStyle[name]!==value){if(!shorthandStyles[name]){if($.fx.step[name]||!isNaN(parseFloat(value))){diff[name]=value;}}}}
return diff;}
if(!$.fn.addBack){$.fn.addBack=function(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));};}
$.effects.animateClass=function(value,duration,easing,callback){var o=$.speed(duration,easing,callback);return this.queue(function(){var animated=$(this),baseClass=animated.attr("class")||"",applyClassChange,allAnimations=o.children?animated.find("*").addBack():animated;allAnimations=allAnimations.map(function(){var el=$(this);return{el:el,start:getElementStyles(this)};});applyClassChange=function(){$.each(classAnimationActions,function(i,action){if(value[action]){animated[action+"Class"](value[action]);}});};applyClassChange();allAnimations=allAnimations.map(function(){this.end=getElementStyles(this.el[0]);this.diff=styleDifference(this.start,this.end);return this;});animated.attr("class",baseClass);allAnimations=allAnimations.map(function(){var styleInfo=this,dfd=$.Deferred(),opts=$.extend({},o,{queue:false,complete:function(){dfd.resolve(styleInfo);}});this.el.animate(this.diff,opts);return dfd.promise();});$.when.apply($,allAnimations.get()).done(function(){applyClassChange();$.each(arguments,function(){var el=this.el;$.each(this.diff,function(key){el.css(key,"");});});o.complete.call(animated[0]);});});};$.fn.extend({_addClass:$.fn.addClass,addClass:function(classNames,speed,easing,callback){return speed?$.effects.animateClass.call(this,{add:classNames},speed,easing,callback):this._addClass(classNames);},_removeClass:$.fn.removeClass,removeClass:function(classNames,speed,easing,callback){return speed?$.effects.animateClass.call(this,{remove:classNames},speed,easing,callback):this._removeClass(classNames);},_toggleClass:$.fn.toggleClass,toggleClass:function(classNames,force,speed,easing,callback){if(typeof force==="boolean"||force===undefined){if(!speed){return this._toggleClass(classNames,force);}else{return $.effects.animateClass.call(this,(force?{add:classNames}:{remove:classNames}),speed,easing,callback);}}else{return $.effects.animateClass.call(this,{toggle:classNames},force,speed,easing);}},switchClass:function(remove,add,speed,easing,callback){return $.effects.animateClass.call(this,{add:add,remove:remove},speed,easing,callback);}});})();(function(){$.extend($.effects,{version:"1.10.0",save:function(element,set){for(var i=0;i<set.length;i++){if(set[i]!==null){element.data(dataSpace+set[i],element[0].style[set[i]]);}}},restore:function(element,set){var val,i;for(i=0;i<set.length;i++){if(set[i]!==null){val=element.data(dataSpace+set[i]);if(val===undefined){val="";}
element.css(set[i],val);}}},setMode:function(el,mode){if(mode==="toggle"){mode=el.is(":hidden")?"show":"hide";}
return mode;},getBaseline:function(origin,original){var y,x;switch(origin[0]){
case "top":y=0;break;case "middle":y=0.5;break;case "bottom":y=1;break;default:y=origin[0]/original.height;}
switch(origin[1]){case "left":x=0;break;case "center":x=0.5;break;case "right":x=1;break;default:x=origin[1]/original.width;}
return{x:x,y:y};},createWrapper:function(element){if(element.parent().is(".ui-effects-wrapper")){return element.parent();}
var props={width:element.outerWidth(true),height:element.outerHeight(true),"float":element.css("float")},wrapper=$("<div></div>")
.addClass("ui-effects-wrapper")
.css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),size={width:element.width(),height:element.height()},active=document.activeElement;try{active.id;}catch(e){active=document.body;}
element.wrap(wrapper);if(element[0]===active||$.contains(element[0],active)){$(active).focus();}
wrapper=element.parent();if(element.css("position")==="static"){wrapper.css({position:"relative"});element.css({position:"relative"});}else{$.extend(props,{position:element.css("position"),zIndex:element.css("z-index")});$.each(["top","left","bottom","right"],function(i,pos){props[pos]=element.css(pos);if(isNaN(parseInt(props[pos],10))){props[pos]="auto";}});element.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"});}
element.css(size);return wrapper.css(props).show();},removeWrapper:function(element){var active=document.activeElement;if(element.parent().is(".ui-effects-wrapper")){element.parent().replaceWith(element);if(element[0]===active||$.contains(element[0],active)){$(active).focus();}}
return element;},setTransition:function(element,list,factor,value){value=value||{};$.each(list,function(i,x){var unit=element.cssUnit(x);if(unit[0]>0){value[x]=unit[0]*factor+unit[1];}});return value;}});function _normalizeArguments(effect,options,speed,callback){if($.isPlainObject(effect)){options=effect;effect=effect.effect;}
effect={effect:effect};if(options==null){options={};}
if($.isFunction(options)){callback=options;speed=null;options={};}
if(typeof options==="number"||$.fx.speeds[options]){callback=speed;speed=options;options={};}
if($.isFunction(speed)){callback=speed;speed=null;}
if(options){$.extend(effect,options);}
speed=speed||options.duration;effect.duration=$.fx.off?0:typeof speed==="number"?speed:speed in $.fx.speeds?$.fx.speeds[speed]:$.fx.speeds._default;effect.complete=callback||options.complete;return effect;}
function standardSpeed(speed){if(!speed||typeof speed==="number"||$.fx.speeds[speed]){return true;}
return typeof speed==="string"&&!$.effects.effect[speed];}
$.fn.extend({effect:function(){var args=_normalizeArguments.apply(this,arguments),mode=args.mode,queue=args.queue,effectMethod=$.effects.effect[args.effect];if($.fx.off||!effectMethod){if(mode){return this[mode](args.duration,args.complete);}else{return this.each(function(){if(args.complete){args.complete.call(this);}});}}
function run(next){var elem=$(this),complete=args.complete,mode=args.mode;function done(){if($.isFunction(complete)){complete.call(elem[0]);}
if($.isFunction(next)){next();}}
if(elem.is(":hidden")?mode==="hide":mode==="show"){done();}else{effectMethod.call(elem[0],args,done);}}
return queue===false?this.each(run):this.queue(queue||"fx",run);},_show:$.fn.show,show:function(speed){if(standardSpeed(speed)){return this._show.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode="show";return this.effect.call(this,args);}},_hide:$.fn.hide,hide:function(speed){if(standardSpeed(speed)){return this._hide.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode="hide";return this.effect.call(this,args);}},__toggle:$.fn.toggle,toggle:function(speed){if(standardSpeed(speed)||typeof speed==="boolean"||$.isFunction(speed)){return this.__toggle.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode="toggle";return this.effect.call(this,args);}},cssUnit:function(key){var style=this.css(key),val=[];$.each(["em","px","%","pt"],function(i,unit){if(style.indexOf(unit)>0){val=[parseFloat(style),unit];}});return val;}});})();(function(){var baseEasings={};$.each(["Quad","Cubic","Quart","Quint","Expo"],function(i,name){baseEasings[name]=function(p){return Math.pow(p,i+2);};});$.extend(baseEasings,{Sine:function(p){return 1-Math.cos(p*Math.PI/2);},Circ:function(p){return 1-Math.sqrt(1-p*p);},Elastic:function(p){return p===0||p===1?p:-Math.pow(2,8*(p-1))*Math.sin(((p-1)*80-7.5)*Math.PI/15);},Back:function(p ){return p*p*(3*p-2);},Bounce:function(p){var pow2,bounce=4;while(p<((pow2=Math.pow(2,--bounce))-1)/11){}
return 1/Math.pow(4,3-bounce)-7.5625*Math.pow((pow2*3-2)/22-p,2);}});$.each(baseEasings,function(name,easeIn){$.easing["easeIn"+name]=easeIn;$.easing["easeOut"+name]=function(p){return 1-easeIn(1-p);};$.easing["easeInOut"+name]=function(p){return p<0.5?easeIn(p*2)/2:1-easeIn(p*-2+2)/2;};});})();})(jQuery));(function($,undefined){var uid=0,hideProps={},showProps={};hideProps.height=hideProps.paddingTop=hideProps.paddingBottom=hideProps.borderTopWidth=hideProps.borderBottomWidth="hide";showProps.height=showProps.paddingTop=showProps.paddingBottom=showProps.borderTopWidth=showProps.borderBottomWidth="show";$.widget("ui.accordion",{version:"1.10.0",options:{active:0,animate:{},collapsible:false,event:"click",header:"> li > :first-child,> :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},_create:function(){var options=this.options;this.prevShow=this.prevHide=$();this.element.addClass("ui-accordion ui-widget ui-helper-reset")
.attr("role","tablist");if(!options.collapsible&&(options.active===false||options.active==null)){options.active=0;}
this._processPanels();if(options.active<0){options.active+=this.headers.length;}
this._refresh();},_getCreateEventData:function(){return{header:this.active,content:!this.active.length?$():this.active.next()};},_createIcons:function(){var icons=this.options.icons;if(icons){$("<span>")
.addClass("ui-accordion-header-icon ui-icon "+icons.header)
.prependTo(this.headers);this.active.children(".ui-accordion-header-icon")
.removeClass(icons.header)
.addClass(icons.activeHeader);this.headers.addClass("ui-accordion-icons");}},_destroyIcons:function(){this.headers
.removeClass("ui-accordion-icons")
.children(".ui-accordion-header-icon")
.remove();},_destroy:function(){var contents;this.element
.removeClass("ui-accordion ui-widget ui-helper-reset")
.removeAttr("role");this.headers
.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top")
.removeAttr("role")
.removeAttr("aria-selected")
.removeAttr("aria-controls")
.removeAttr("tabIndex")
.each(function(){if(/^ui-accordion/.test(this.id)){this.removeAttribute("id");}});this._destroyIcons();contents=this.headers.next()
.css("display","")
.removeAttr("role")
.removeAttr("aria-expanded")
.removeAttr("aria-hidden")
.removeAttr("aria-labelledby")
.removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled")
.each(function(){if(/^ui-accordion/.test(this.id)){this.removeAttribute("id");}});if(this.options.heightStyle!=="content"){contents.css("height","");}},_setOption:function(key,value){if(key==="active"){this._activate(value);return;}
if(key==="event"){if(this.options.event){this._off(this.headers,this.options.event);}
this._setupEvents(value);}
this._super(key,value);//
if(key==="collapsible"&&!value&&this.options.active===false){this._activate(0);}
if(key==="icons"){this._destroyIcons();if(value){this._createIcons();}}
if(key==="disabled"){this.headers.add(this.headers.next())
.toggleClass("ui-state-disabled",!!value);}},_keydown:function(event){if(event.altKey||event.ctrlKey){return;}
var keyCode=$.ui.keyCode,length=this.headers.length,currentIndex=this.headers.index(event.target),toFocus=false;switch(event.keyCode){case keyCode.RIGHT:case keyCode.DOWN:toFocus=this.headers[(currentIndex+1)%length];break;case keyCode.LEFT:case keyCode.UP:toFocus=this.headers[(currentIndex-1+length)%length];break;case keyCode.SPACE:case keyCode.ENTER:this._eventHandler(event);break;case keyCode.HOME:toFocus=this.headers[0];break;case keyCode.END:toFocus=this.headers[length-1];break;}
if(toFocus){$(event.target).attr("tabIndex",-1);$(toFocus).attr("tabIndex",0);toFocus.focus();event.preventDefault();}},_panelKeyDown:function(event){if(event.keyCode===$.ui.keyCode.UP&&event.ctrlKey){$(event.currentTarget).prev().focus();}},refresh:function(){var options=this.options;this._processPanels();if((options.active===false&&options.collapsible===true)||!this.headers.length){options.active=false;this.active=$();}if(options.active===false){this._activate(0);}else if(this.active.length&&!$.contains(this.element[0],this.active[0])){if(this.headers.length===this.headers.find(".ui-state-disabled").length){options.active=false;this.active=$();}else{this._activate(Math.max(0,options.active-1));}}else{options.active=this.headers.index(this.active);}
this._destroyIcons();this._refresh();},_processPanels:function(){this.headers=this.element.find(this.options.header)
.addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all");this.headers.next()
.addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom")
.filter(":not(.ui-accordion-content-active)")
.hide();},_refresh:function(){var maxHeight,options=this.options,heightStyle=options.heightStyle,parent=this.element.parent(),accordionId=this.accordionId="ui-accordion-"+(this.element.attr("id")||++uid);this.active=this._findActive(options.active)
.addClass("ui-accordion-header-active ui-state-active")
.toggleClass("ui-corner-all ui-corner-top");this.active.next()
.addClass("ui-accordion-content-active")
.show();this.headers
.attr("role","tab")
.each(function(i){var header=$(this),headerId=header.attr("id"),panel=header.next(),panelId=panel.attr("id");if(!headerId){headerId=accordionId+"-header-"+i;header.attr("id",headerId);}
if(!panelId){panelId=accordionId+"-panel-"+i;panel.attr("id",panelId);}
header.attr("aria-controls",panelId);panel.attr("aria-labelledby",headerId);})
.next()
.attr("role","tabpanel");this.headers
.not(this.active)
.attr({"aria-selected":"false",tabIndex:-1})
.next()
.attr({"aria-expanded":"false","aria-hidden":"true"})
.hide();if(!this.active.length){this.headers.eq(0).attr("tabIndex",0);}else{this.active.attr({"aria-selected":"true",tabIndex:0})
.next()
.attr({"aria-expanded":"true","aria-hidden":"false"});}
this._createIcons();this._setupEvents(options.event);if(heightStyle==="fill"){maxHeight=parent.height();this.element.siblings(":visible").each(function(){var elem=$(this),position=elem.css("position");if(position==="absolute"||position==="fixed"){return;}
maxHeight-=elem.outerHeight(true);});this.headers.each(function(){maxHeight-=$(this).outerHeight(true);});this.headers.next()
.each(function(){$(this).height(Math.max(0,maxHeight-
$(this).innerHeight()+$(this).height()));})
.css("overflow","auto");}else if(heightStyle==="auto"){maxHeight=0;this.headers.next()
.each(function(){maxHeight=Math.max(maxHeight,$(this).css("height","").height());})
.height(maxHeight);}},_activate:function(index){var active=this._findActive(index)[0];if(active===this.active[0]){return;}
active=active||this.active[0];this._eventHandler({target:active,currentTarget:active,preventDefault:$.noop});},_findActive:function(selector){return typeof selector==="number"?this.headers.eq(selector):$();},_setupEvents:function(event){var events={keydown:"_keydown"};if(event){$.each(event.split(" "),function(index,eventName){events[eventName]="_eventHandler";});}
this._off(this.headers.add(this.headers.next()));this._on(this.headers,events );this._on(this.headers.next(),{keydown:"_panelKeyDown"});this._hoverable(this.headers);this._focusable(this.headers);},_eventHandler:function(event){var options=this.options,active=this.active,clicked=$(event.currentTarget),clickedIsActive=clicked[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():clicked.next(),toHide=active.next(),eventData={oldHeader:active,oldPanel:toHide,newHeader:collapsing?$():clicked,newPanel:toShow};event.preventDefault();if((clickedIsActive&&!options.collapsible)||(this._trigger("beforeActivate",event,eventData)===false)){return;}
options.active=collapsing?false:this.headers.index(clicked);this.active=clickedIsActive?$():clicked;this._toggle(eventData);active.removeClass("ui-accordion-header-active ui-state-active");if(options.icons){active.children(".ui-accordion-header-icon")
.removeClass(options.icons.activeHeader)
.addClass(options.icons.header);}
if(!clickedIsActive){clicked
.removeClass("ui-corner-all")
.addClass("ui-accordion-header-active ui-state-active ui-corner-top");if(options.icons){clicked.children(".ui-accordion-header-icon")
.removeClass(options.icons.header)
.addClass(options.icons.activeHeader);}
clicked
.next()
.addClass("ui-accordion-content-active");}},_toggle:function(data){var toShow=data.newPanel,toHide=this.prevShow.length?this.prevShow:data.oldPanel; this.prevShow.add(this.prevHide).stop(true,true);this.prevShow=toShow;this.prevHide=toHide;if(this.options.animate){this._animate(toShow,toHide,data);}else{toHide.hide();toShow.show();this._toggleComplete(data);}
toHide.attr({"aria-expanded":"false","aria-hidden":"true"});toHide.prev().attr("aria-selected","false");if(toShow.length&&toHide.length){toHide.prev().attr("tabIndex",-1);}else if(toShow.length){this.headers.filter(function(){return $(this).attr("tabIndex")===0;})
.attr("tabIndex",-1);}
toShow
.attr({"aria-expanded":"true","aria-hidden":"false"})
.prev()
.attr({"aria-selected":"true",tabIndex:0});},_animate:function(toShow,toHide,data){var total,easing,duration,that=this,adjust=0,down=toShow.length&&(!toHide.length||(toShow.index()<toHide.index())),animate=this.options.animate||{},options=down&&animate.down||animate,complete=function(){that._toggleComplete(data);};if(typeof options==="number"){duration=options;}
if(typeof options==="string"){easing=options;}
easing=easing||options.easing||animate.easing;duration=duration||options.duration||animate.duration;if(!toHide.length){return toShow.animate(showProps,duration,easing,complete);}
if(!toShow.length){return toHide.animate(hideProps,duration,easing,complete);}
total=toShow.show().outerHeight();toHide.animate(hideProps,{duration:duration,easing:easing,step:function(now,fx){
fx.now=Math.round(now);}});toShow
.hide()
.animate(showProps,{duration:duration,easing:easing,complete:complete,step:function(now,fx){fx.now=Math.round(now);if(fx.prop!=="height"){adjust+=fx.now;}else if(that.options.heightStyle!=="content"){fx.now=Math.round(total-toHide.outerHeight()-adjust);adjust=0;}}});},_toggleComplete:function(data){var toHide=data.oldPanel;toHide
.removeClass("ui-accordion-content-active")
.prev()
.removeClass("ui-corner-top")
.addClass("ui-corner-all");if(toHide.length){toHide.parent()[0].className=toHide.parent()[0].className;}
this._trigger("activate",null,data);}});})(jQuery);(function($,undefined){var requestIndex=0;$.widget("ui.autocomplete",{version:"1.10.0",defaultElement:"<input>",options:{appendTo:null,autoFocus:false,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},pending:0,_create:function(){var suppressKeyPress,suppressKeyPressRepeat,suppressInput;this.isMultiLine=this._isMultiLine();this.valueMethod=this.element[this.element.is("input,textarea")?"val":"text"];this.isNewMenu=true;this.element
.addClass("ui-autocomplete-input")
.attr("autocomplete","off");this._on(this.element,{keydown:function(event){if(this.element.prop("readOnly")){suppressKeyPress=true;suppressInput=true;suppressKeyPressRepeat=true;return;}
suppressKeyPress=false;suppressInput=false;suppressKeyPressRepeat=false;var keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.PAGE_UP:suppressKeyPress=true;this._move("previousPage",event);break;case keyCode.PAGE_DOWN:suppressKeyPress=true;this._move("nextPage",event);break;case keyCode.UP:suppressKeyPress=true;this._keyEvent("previous",event);break;case keyCode.DOWN:suppressKeyPress=true;this._keyEvent("next",event);break;case keyCode.ENTER:case keyCode.NUMPAD_ENTER:if(this.menu.active){suppressKeyPress=true;event.preventDefault();this.menu.select(event);}
break;case keyCode.TAB:if(this.menu.active){this.menu.select(event);}
break;case keyCode.ESCAPE:if(this.menu.element.is(":visible")){this._value(this.term);this.close(event);event.preventDefault();}
break;default:suppressKeyPressRepeat=true;this._searchTimeout(event);break;}},keypress:function(event){if(suppressKeyPress){suppressKeyPress=false;event.preventDefault();return;}
if(suppressKeyPressRepeat){return;}
var keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.PAGE_UP:this._move("previousPage",event);break;case keyCode.PAGE_DOWN:this._move("nextPage",event);break;case keyCode.UP:this._keyEvent("previous",event);break;case keyCode.DOWN:this._keyEvent("next",event);break;}},input:function(event){if(suppressInput){suppressInput=false;event.preventDefault();return;}
this._searchTimeout(event);},focus:function(){this.selectedItem=null;this.previous=this._value();},blur:function(event){if(this.cancelBlur){delete this.cancelBlur;return;}
clearTimeout(this.searching);this.close(event);this._change(event);}});this._initSource();this.menu=$("<ul>")
.addClass("ui-autocomplete")
.appendTo(this._appendTo())
.menu({input:$(),role:null})
.zIndex(this.element.zIndex()+1)
.hide()
.data("ui-menu");this._on(this.menu.element,{mousedown:function(event){event.preventDefault();this.cancelBlur=true;this._delay(function(){delete this.cancelBlur;});var menuElement=this.menu.element[0];if(!$(event.target).closest(".ui-menu-item").length){this._delay(function(){var that=this;this.document.one("mousedown",function(event){if(event.target!==that.element[0]&&event.target!==menuElement&&!$.contains(menuElement,event.target)){that.close();}});});}},menufocus:function(event,ui){if(this.isNewMenu){this.isNewMenu=false;if(event.originalEvent&&/^mouse/.test(event.originalEvent.type)){this.menu.blur();this.document.one("mousemove",function(){$(event.target).trigger(event.originalEvent);});return;}}
var item=ui.item.data("ui-autocomplete-item");if(false!==this._trigger("focus",event,{item:item})){if(event.originalEvent&&/^key/.test(event.originalEvent.type)){this._value(item.value);}}else{this.liveRegion.text(item.value);}},menuselect:function(event,ui){var item=ui.item.data("ui-autocomplete-item"),previous=this.previous;if(this.element[0]!==this.document[0].activeElement){this.element.focus();this.previous=previous;this._delay(function(){this.previous=previous;this.selectedItem =item;});}
if(false!==this._trigger("select",event,{item:item})){this._value(item.value);}
this.term=this._value();this.close(event);this.selectedItem=item;}});this.liveRegion=$("<span>",{role:"status","aria-live":"polite"})
.addClass("ui-helper-hidden-accessible")
.insertAfter(this.element);this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete");}});},_destroy:function(){clearTimeout(this.searching);this.element
.removeClass("ui-autocomplete-input")
.removeAttr("autocomplete");this.menu.element.remove();this.liveRegion.remove();},_setOption:function(key,value){this._super(key,value);if(key==="source"){this._initSource();}
if(key==="appendTo"){this.menu.element.appendTo(this._appendTo());}
if(key==="disabled"&&value&&this.xhr){this.xhr.abort();}},_appendTo:function(){var element=this.options.appendTo;if(element){element=element.jquery||element.nodeType?$(element):this.document.find(element).eq(0);}
if(!element){element=this.element.closest(".ui-front");}
if(!element.length){element=this.document[0].body;}
return element;},_isMultiLine:function(){if(this.element.is("textarea")){return true;}
if(this.element.is("input")){return false;}//
return this.element.prop("isContentEditable");},_initSource:function(){var array,url,that=this;if($.isArray(this.options.source)){array=this.options.source;this.source=function(request,response){response($.ui.autocomplete.filter(array,request.term));};}else if(typeof this.options.source==="string"){url=this.options.source;this.source=function(request,response){if(that.xhr){that.xhr.abort();}
that.xhr=$.ajax({url:url,data:request,dataType:"json",success:function(data){response(data);},error:function(){response([]);}});};}else{this.source=this.options.source;}},_searchTimeout:function(event){clearTimeout(this.searching);this.searching=this._delay(function(){if(this.term!==this._value()){this.selectedItem=null;this.search(null,event);}},this.options.delay);},search:function(value,event){value=value!=null?value:this._value();this.term=this._value();if(value.length<this.options.minLength){return this.close(event);}
if(this._trigger("search",event)===false){return;}
return this._search(value);},_search:function(value){this.pending++;this.element.addClass("ui-autocomplete-loading");this.cancelSearch=false;this.source({term:value},this._response());},_response:function(){var that=this,index=++requestIndex;return function(content){if(index===requestIndex){that.__response(content);}
that.pending--;if(!that.pending){that.element.removeClass("ui-autocomplete-loading");}};},__response:function(content){if(content){content= this._normalize(content);}
this._trigger("response",null,{content:content});if(!this.options.disabled&&content&&content.length&&!this.cancelSearch){this._suggest(content);this._trigger("open");}else{this._close();}},close:function(event){this.cancelSearch=true;this._close(event);},_close:function(event){if(this.menu.element.is(":visible")){this.menu.element.hide();this.menu.blur();this.isNewMenu=true;this._trigger("close",event);}},_change:function(event){if(this.previous!==this._value()){this._trigger("change",event,{item:this.selectedItem});}},_normalize:function(items){if(items.length&&items[0].label&&items[0].value){return items;}
return $.map(items,function(item){if(typeof item==="string"){return{label:item,value:item};}
return $.extend({label:item.label||item.value,value:item.value||item.label},item);});},_suggest:function(items){var ul=this.menu.element
.empty()
.zIndex(this.element.zIndex()+1);this._renderMenu(ul,items);this.menu.refresh();ul.show();this._resizeMenu();ul.position($.extend({of:this.element},this.options.position));if(this.options.autoFocus){this.menu.next();}},_resizeMenu:function(){var ul=this.menu.element;ul.outerWidth(Math.max(ul.width("").outerWidth()+1,this.element.outerWidth()));},_renderMenu:function(ul,items){var that=this;$.each(items,function(index,item){that._renderItemData(ul,item);});},_renderItemData:function(ul,item){return this._renderItem(ul,item).data("ui-autocomplete-item",item);},_renderItem:function(ul,item){return $("<li>")
.append($("<a>").text(item.label))
.appendTo(ul);},_move:function(direction,event){if(!this.menu.element.is(":visible")){this.search(null,event);return;}
if(this.menu.isFirstItem()&&/^previous/.test(direction)||this.menu.isLastItem()&&/^next/.test(direction)){this._value(this.term);this.menu.blur();return;}
this.menu[direction](event);},widget:function(){return this.menu.element;},_value:function(){return this.valueMethod.apply(this.element,arguments);},_keyEvent:function(keyEvent,event){if(!this.isMultiLine||this.menu.element.is(":visible")){this._move(keyEvent,event);event.preventDefault();}}});$.extend($.ui.autocomplete,{escapeRegex:function(value){return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");},filter:function(array,term){var matcher=new RegExp($.ui.autocomplete.escapeRegex(term),"i");return $.grep(array,function(value){return matcher.test(value.label||value.value||value);});}});$.widget("ui.autocomplete",$.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(amount){return amount+(amount>1?" results are":" result is")+
" available, use up and down arrow keys to navigate.";}}},__response:function(content){var message;this._superApply(arguments);if(this.options.disabled||this.cancelSearch){return;}
if(content&&content.length){message=this.options.messages.results( content.length);}else{message=this.options.messages.noResults;}
this.liveRegion.text(message);}});}(jQuery));(function($,undefined){var lastActive,startXPos,startYPos,clickDragged,baseClasses="ui-button ui-widget ui-state-default ui-corner-all",stateClasses="ui-state-hover ui-state-active ",typeClasses="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",formResetHandler=function(){var buttons=$(this).find(":ui-button");setTimeout(function(){buttons.button("refresh");},1);},radioGroup=function(radio){var name=radio.name,form=radio.form,radios=$([]);if(name){name=name.replace(/'/g,"\\'");if(form){radios=$(form).find("[name='"+name+"']");}else{radios=$("[name='"+name+"']",radio.ownerDocument)
.filter(function(){return!this.form;});}}
return radios;};$.widget("ui.button",{version:"1.10.0",defaultElement:"<button>",options:{disabled:null,text:true,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form")
.unbind("reset"+this.eventNamespace)
.bind("reset"+this.eventNamespace,formResetHandler);if(typeof this.options.disabled!=="boolean"){this.options.disabled=!!this.element.prop("disabled");}else{this.element.prop("disabled",this.options.disabled);}
this._determineButtonType();this.hasTitle=!!this.buttonElement.attr("title");var that=this,options=this.options,toggleButton=this.type==="checkbox"||this.type==="radio",activeClass=!toggleButton?"ui-state-active":"",focusClass="ui-state-focus";if(options.label===null){options.label=(this.type==="input"?this.buttonElement.val():this.buttonElement.html());}
this._hoverable(this.buttonElement);this.buttonElement
.addClass(baseClasses)
.attr("role","button")
.bind("mouseenter"+this.eventNamespace,function(){if(options.disabled){return;}
if(this===lastActive){$(this).addClass("ui-state-active");}})
.bind("mouseleave"+this.eventNamespace,function(){if(options.disabled){return;}
$(this).removeClass(activeClass);})
.bind("click"+this.eventNamespace,function(event){if(options.disabled){event.preventDefault();event.stopImmediatePropagation();}});this.element
.bind("focus"+this.eventNamespace,function(){that.buttonElement.addClass(focusClass);})
.bind("blur"+this.eventNamespace,function(){that.buttonElement.removeClass(focusClass);});if(toggleButton){this.element.bind("change"+this.eventNamespace,function(){if(clickDragged){return;}
that.refresh();});this.buttonElement
.bind("mousedown"+this.eventNamespace,function(event){if(options.disabled){return;}
clickDragged=false;startXPos=event.pageX;startYPos=event.pageY;})
.bind("mouseup"+this.eventNamespace,function(event){if(options.disabled){return;}
if(startXPos!==event.pageX||startYPos!==event.pageY){clickDragged=true;}});}
if(this.type==="checkbox"){this.buttonElement.bind("click"+this.eventNamespace,function(){if(options.disabled||clickDragged){return false;}});}else if(this.type==="radio"){this.buttonElement.bind("click"+this.eventNamespace,function(){if(options.disabled||clickDragged){return false;}
$(this).addClass("ui-state-active");that.buttonElement.attr("aria-pressed","true");var radio=that.element[0];radioGroup(radio)
.not(radio)
.map(function(){return $(this).button("widget")[0];})
.removeClass("ui-state-active")
.attr("aria-pressed","false");});}else{this.buttonElement
.bind("mousedown"+this.eventNamespace,function(){if(options.disabled){return false;}
$(this).addClass("ui-state-active");lastActive=this;that.document.one("mouseup",function(){lastActive=null;});})
.bind("mouseup"+this.eventNamespace,function(){if(options.disabled){return false;}
$(this).removeClass("ui-state-active");})
.bind("keydown"+this.eventNamespace,function(event){if(options.disabled){return false;}
if(event.keyCode===$.ui.keyCode.SPACE||event.keyCode===$.ui.keyCode.ENTER){$(this).addClass("ui-state-active");}})
.bind("keyup"+this.eventNamespace+" blur"+this.eventNamespace,function(){$(this).removeClass("ui-state-active");});if(this.buttonElement.is("a")){this.buttonElement.keyup(function(event){if(event.keyCode===$.ui.keyCode.SPACE){$(this).click();}});}}
this._setOption("disabled",options.disabled);this._resetButton();},_determineButtonType:function(){var ancestor,labelSelector,checked;if(this.element.is("[type=checkbox]")){this.type="checkbox";}else if(this.element.is("[type=radio]")){this.type="radio";}else if(this.element.is("input")){this.type="input";}else{this.type="button";}
if(this.type==="checkbox"||this.type==="radio"){ancestor=this.element.parents().last();labelSelector="label[for='"+this.element.attr("id")+"']";this.buttonElement=ancestor.find(labelSelector);if(!this.buttonElement.length){ancestor=ancestor.length?ancestor.siblings():this.element.siblings();this.buttonElement=ancestor.filter(labelSelector);if(!this.buttonElement.length){this.buttonElement=ancestor.find(labelSelector);}}
this.element.addClass("ui-helper-hidden-accessible");checked=this.element.is(":checked");if(checked){this.buttonElement.addClass("ui-state-active");}
this.buttonElement.prop("aria-pressed",checked);}else{this.buttonElement=this.element;}},widget:function(){return this.buttonElement;},_destroy:function(){this.element
.removeClass("ui-helper-hidden-accessible");this.buttonElement
.removeClass(baseClasses+" "+stateClasses+" "+typeClasses)
.removeAttr("role")
.removeAttr("aria-pressed")
.html(this.buttonElement.find(".ui-button-text").html());if(!this.hasTitle){this.buttonElement.removeAttr("title");}},_setOption:function(key,value){this._super(key,value);if(key==="disabled"){if(value){this.element.prop("disabled",true);}else{this.element.prop("disabled",false);}
return;}
this._resetButton();},refresh:function(){var isDisabled=this.element.is("input, button")?this.element.is(":disabled"):this.element.hasClass("ui-button-disabled");if(isDisabled!==this.options.disabled){this._setOption("disabled",isDisabled);}
if(this.type==="radio"){radioGroup(this.element[0]).each(function(){if($(this).is(":checked")){$(this).button("widget")
.addClass("ui-state-active")
.attr("aria-pressed","true");}else{$(this).button("widget")
.removeClass("ui-state-active")
.attr("aria-pressed","false");}});}else if(this.type==="checkbox"){if(this.element.is(":checked")){this.buttonElement
.addClass("ui-state-active")
.attr("aria-pressed","true");}else{this.buttonElement
.removeClass("ui-state-active")
.attr("aria-pressed","false");}}},_resetButton:function(){if(this.type==="input"){if(this.options.label){this.element.val(this.options.label);}
return;}
var buttonElement=this.buttonElement.removeClass(typeClasses),buttonText=$("<span></span>",this.document[0])
.addClass("ui-button-text")
.html(this.options.label)
.appendTo(buttonElement.empty())
.text(),icons=this.options.icons,multipleIcons=icons.primary&&icons.secondary,buttonClasses=[];if(icons.primary||icons.secondary){if(this.options.text){buttonClasses.push("ui-button-text-icon"+(multipleIcons?"s":(icons.primary?"-primary":"-secondary")));}
if(icons.primary){buttonElement.prepend("<span class='ui-button-icon-primary ui-icon "+icons.primary+"'></span>");}
if(icons.secondary){buttonElement.append("<span class='ui-button-icon-secondary ui-icon "+icons.secondary+"'></span>");}
if(!this.options.text){buttonClasses.push(multipleIcons?"ui-button-icons-only":"ui-button-icon-only");if(!this.hasTitle){buttonElement.attr("title",$.trim(buttonText));}}}else{buttonClasses.push("ui-button-text-only");}
buttonElement.addClass(buttonClasses.join(" "));}});$.widget("ui.buttonset",{version:"1.10.0",options:{items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"},_create:function(){this.element.addClass("ui-buttonset");},_init:function(){this.refresh();},_setOption:function(key,value){if(key==="disabled"){this.buttons.button("option",key,value);}
this._super(key,value);},refresh:function(){var rtl=this.element.css("direction")==="rtl";this.buttons=this.element.find(this.options.items)
.filter(":ui-button")
.button("refresh")
.end()
.not(":ui-button")
.button()
.end()
.map(function(){return $(this).button("widget")[0];})
.removeClass("ui-corner-all ui-corner-left ui-corner-right")
.filter(":first")
.addClass(rtl?"ui-corner-right":"ui-corner-left")
.end()
.filter(":last")
.addClass(rtl?"ui-corner-left":"ui-corner-right")
.end()
.end();},_destroy:function(){this.element.removeClass("ui-buttonset");this.buttons
.map(function(){return $(this).button("widget")[0];})
.removeClass("ui-corner-left ui-corner-right")
.end()
.button("destroy");}});}(jQuery));(function($,undefined){$.extend($.ui,{datepicker:{version:"1.10.0"}});var PROP_NAME="datepicker",dpuuid=new Date().getTime(),instActive;function Datepicker(){this._curInst=null;this._keyEvent=false;this._disabledInputs=[];this._datepickerShowing=false;this._inDialog=false;this._mainDivId="ui-datepicker-div";this._inlineClass="ui-datepicker-inline";this._appendClass="ui-datepicker-append";this._triggerClass="ui-datepicker-trigger";//
this._dialogClass="ui-datepicker-dialog";this._disableClass="ui-datepicker-disabled";this._unselectableClass="ui-datepicker-unselectable";this._currentClass="ui-datepicker-current-day";this._dayOverClass="ui-datepicker-days-cell-over";this.regional=[];this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:false,showMonthAfterYear:false,yearSuffix:""};this._defaults={showOn:"focus",//
showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:false,hideIfNoPrevNext:false,navigationAsDateFormat:false,gotoCurrent:false,changeMonth:false,changeYear:false,yearRange:"c-10:c+10",showOtherMonths:false,selectOtherMonths:false,showWeek:false,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:true,showButtonPanel:false,autoSize:false,disabled:false};$.extend(this._defaults,this.regional[""]);this.dpDiv=bindHover($("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));}
$.extend(Datepicker.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv;},/**/
setDefaults:function(settings){extendRemove(this._defaults,settings||{});return this;},_attachDatepicker:function(target,settings){var nodeName,inline,inst;nodeName=target.nodeName.toLowerCase();inline=(nodeName==="div"||nodeName==="span");if(!target.id){this.uuid+=1;target.id="dp"+this.uuid;}
inst=this._newInst($(target),inline);inst.settings=$.extend({},settings||{});if(nodeName==="input"){this._connectDatepicker(target,inst);}else if(inline){this._inlineDatepicker(target,inst);}},_newInst:function(target,inline){var id=target[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:id,input:target,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:inline,dpDiv:(!inline?this.dpDiv:bindHover($("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};},_connectDatepicker:function(target,inst){var input=$(target);inst.append=$([]);inst.trigger=$([]);if(input.hasClass(this.markerClassName)){return;}
this._attachments(input,inst);input.addClass(this.markerClassName).keydown(this._doKeyDown).
keypress(this._doKeyPress).keyup(this._doKeyUp);this._autoSize(inst);$.data(target,PROP_NAME,inst);if(inst.settings.disabled){this._disableDatepicker(target);}},_attachments:function(input,inst){var showOn,buttonText,buttonImage,appendText=this._get(inst,"appendText"),isRTL=this._get(inst,"isRTL");if(inst.append){inst.append.remove();}
if(appendText){inst.append=$("<span class='"+this._appendClass+"'>"+appendText+"</span>");input[isRTL?"before":"after"](inst.append);}
input.unbind("focus",this._showDatepicker);if(inst.trigger){inst.trigger.remove();}
showOn=this._get(inst,"showOn");if(showOn==="focus"||showOn==="both"){input.focus(this._showDatepicker);}
if(showOn==="button"||showOn==="both"){buttonText=this._get(inst,"buttonText");buttonImage=this._get(inst,"buttonImage");inst.trigger=$(this._get(inst,"buttonImageOnly")?$("<img/>").addClass(this._triggerClass).
attr({src:buttonImage,alt:buttonText,title:buttonText}):$("<button type='button'></button>").addClass(this._triggerClass).
html(!buttonImage?buttonText:$("<img/>").attr({src:buttonImage,alt:buttonText,title:buttonText})));input[isRTL?"before":"after"](inst.trigger);inst.trigger.click(function(){if($.datepicker._datepickerShowing&&$.datepicker._lastInput===input[0]){$.datepicker._hideDatepicker();}else if($.datepicker._datepickerShowing&&$.datepicker._lastInput!==input[0]){$.datepicker._hideDatepicker();$.datepicker._showDatepicker(input[0]);}else{$.datepicker._showDatepicker(input[0]);}
return false;});}},_autoSize:function(inst){if(this._get(inst,"autoSize")&&!inst.inline){var findMax,max,maxI,i,date=new Date(2009,12-1,20),dateFormat=this._get(inst,"dateFormat");if(dateFormat.match(/[DM]/)){findMax=function(names){max=0;maxI=0;for(i=0;i<names.length;i++){if(names[i].length>max){max=names[i].length;maxI=i;}}
return maxI;};date.setMonth(findMax(this._get(inst,(dateFormat.match(/MM/)?"monthNames":"monthNamesShort"))));date.setDate(findMax(this._get(inst,(dateFormat.match(/DD/)?"dayNames":"dayNamesShort")))+20-date.getDay());}
inst.input.attr("size",this._formatDate(inst,date).length);}},_inlineDatepicker:function(target,inst){var divSpan=$(target);if(divSpan.hasClass(this.markerClassName)){return;}
divSpan.addClass(this.markerClassName).append(inst.dpDiv);$.data(target,PROP_NAME,inst);this._setDate(inst,this._getDefaultDate(inst),true);this._updateDatepicker(inst);this._updateAlternate(inst);if(inst.settings.disabled){this._disableDatepicker(target);}
inst.dpDiv.css("display","block");},_dialogDatepicker:function(input,date,onSelect,settings,pos){var id,browserWidth,browserHeight,scrollX,scrollY,inst=this._dialogInst;//
if(!inst){this.uuid+=1;id="dp"+this.uuid;this._dialogInput=$("<input type='text' id='"+id+
"' style='position: absolute; top: -100px; width: 0px;'/>");this._dialogInput.keydown(this._doKeyDown);$("body").append(this._dialogInput);inst=this._dialogInst=this._newInst(this._dialogInput,false);inst.settings={};$.data(this._dialogInput[0],PROP_NAME,inst);}
extendRemove(inst.settings,settings||{});date=(date&&date.constructor===Date?this._formatDate(inst,date):date);this._dialogInput.val(date);this._pos=(pos?(pos.length?pos:[pos.pageX,pos.pageY]):null);if(!this._pos){browserWidth=document.documentElement.clientWidth;browserHeight=document.documentElement.clientHeight;scrollX=document.documentElement.scrollLeft||document.body.scrollLeft;scrollY=document.documentElement.scrollTop||document.body.scrollTop;this._pos=[(browserWidth/2)-100+scrollX,(browserHeight/2)-150+scrollY];}
this._dialogInput.css("left",(this._pos[0]+20)+"px").css("top",this._pos[1]+"px");inst.settings.onSelect=onSelect;this._inDialog=true;this.dpDiv.addClass(this._dialogClass);this._showDatepicker(this._dialogInput[0]);if($.blockUI){$.blockUI(this.dpDiv);}
$.data(this._dialogInput[0],PROP_NAME,inst);return this;},_destroyDatepicker:function(target){var nodeName,$target=$(target),inst=$.data(target,PROP_NAME);if(!$target.hasClass(this.markerClassName)){return;}
nodeName=target.nodeName.toLowerCase();$.removeData(target,PROP_NAME);if(nodeName==="input"){inst.append.remove();inst.trigger.remove();$target.removeClass(this.markerClassName).
unbind("focus",this._showDatepicker).
unbind("keydown",this._doKeyDown).
unbind("keypress",this._doKeyPress).
unbind("keyup",this._doKeyUp);}else if(nodeName==="div"||nodeName==="span"){$target.removeClass(this.markerClassName).empty();}},_enableDatepicker:function(target){var nodeName,inline,$target=$(target),inst=$.data(target,PROP_NAME);if(!$target.hasClass(this.markerClassName)){return;}
nodeName=target.nodeName.toLowerCase();if(nodeName==="input"){target.disabled=false;inst.trigger.filter("button").
each(function(){this.disabled=false;}).end().
filter("img").css({opacity:"1.0",cursor:""});}else if(nodeName==="div"||nodeName==="span"){inline=$target.children("."+this._inlineClass);inline.children().removeClass("ui-state-disabled");inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
prop("disabled",false);}
this._disabledInputs=$.map(this._disabledInputs,function(value){return(value===target?null:value);});},_disableDatepicker:function(target){var nodeName,inline,$target=$(target),inst=$.data(target,PROP_NAME);if(!$target.hasClass(this.markerClassName)){return;}
nodeName=target.nodeName.toLowerCase();if(nodeName==="input"){target.disabled=true;inst.trigger.filter("button").
each(function(){this.disabled=true;}).end().
filter("img").css({opacity:"0.5",cursor:"default"});}else if(nodeName==="div"||nodeName==="span"){inline=$target.children("."+this._inlineClass);inline.children().addClass("ui-state-disabled");inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
 prop("disabled",true);}
this._disabledInputs=$.map(this._disabledInputs,function(value){return(value===target?null:value);});this._disabledInputs[this._disabledInputs.length]=target;},_isDisabledDatepicker:function(target){if(!target){return false;}
for(var i=0;i<this._disabledInputs.length;i++){if(this._disabledInputs[i]===target){return true;}}
return false;},_getInst:function(target){try{return $.data(target,PROP_NAME);}
catch(err){throw "Missing instance data for this datepicker";}},_optionDatepicker:function(target,name,value){var settings,date,minDate,maxDate,inst=this._getInst(target);if(arguments.length===2&&typeof name==="string"){return(name==="defaults"?$.extend({},$.datepicker._defaults):(inst?(name==="all"?$.extend({},inst.settings):this._get(inst,name)):null));}
settings=name||{};if(typeof name==="string"){settings={};settings[name]=value;}
if(inst){if(this._curInst===inst){this._hideDatepicker();}
date=this._getDateDatepicker(target,true);minDate=this._getMinMaxDate(inst,"min");maxDate=this._getMinMaxDate(inst,"max");extendRemove(inst.settings,settings);if(minDate!==null&&settings.dateFormat!==undefined&&settings.minDate===undefined){inst.settings.minDate=this._formatDate(inst,minDate);}
if(maxDate!==null&&settings.dateFormat!==undefined&&settings.maxDate===undefined){inst.settings.maxDate=this._formatDate(inst,maxDate);}
if("disabled" in settings){if(settings.disabled){this._disableDatepicker(target);}else{this._enableDatepicker(target);}}
this._attachments($(target),inst);this._autoSize(inst);this._setDate(inst,date);this._updateAlternate(inst);this._updateDatepicker(inst);}},_changeDatepicker:function(target,name,value){this._optionDatepicker(target,name,value);},_refreshDatepicker:function(target){var inst=this._getInst(target);if(inst){this._updateDatepicker(inst);}},_setDateDatepicker:function(target,date){var inst=this._getInst(target);if(inst){this._setDate(inst,date);this._updateDatepicker(inst);this._updateAlternate(inst);}},_getDateDatepicker:function(target,noDefault){var inst=this._getInst(target);if(inst&&!inst.inline){this._setDateFromField(inst,noDefault);}
return(inst?this._getDate(inst):null);},_doKeyDown:function(event){var onSelect,dateStr,sel,inst=$.datepicker._getInst(event.target),handled=true,isRTL=inst.dpDiv.is(".ui-datepicker-rtl");inst._keyEvent=true;if($.datepicker._datepickerShowing){switch(event.keyCode){case 9:$.datepicker._hideDatepicker();handled=false;break;case 13:sel=$("td."+$.datepicker._dayOverClass+":not(."+
$.datepicker._currentClass+")",inst.dpDiv);if(sel[0]){$.datepicker._selectDay(event.target,inst.selectedMonth,inst.selectedYear,sel[0]);}
onSelect=$.datepicker._get(inst,"onSelect");if(onSelect){dateStr=$.datepicker._formatDate(inst);onSelect.apply((inst.input?inst.input[0]:null),[dateStr,inst]);}else{$.datepicker._hideDatepicker();}
return false;case 27:$.datepicker._hideDatepicker();break;case 33:$.datepicker._adjustDate(event.target,(event.ctrlKey?-$.datepicker._get(inst,"stepBigMonths"):-$.datepicker._get(inst,"stepMonths")),"M");break;case 34:$.datepicker._adjustDate(event.target,(event.ctrlKey?+$.datepicker._get(inst,"stepBigMonths"):+$.datepicker._get(inst,"stepMonths")),"M");break;case 35:if(event.ctrlKey||event.metaKey){$.datepicker._clearDate(event.target);}
handled=event.ctrlKey||event.metaKey;break;case 36:if(event.ctrlKey||event.metaKey){$.datepicker._gotoToday(event.target);}
handled= event.ctrlKey||event.metaKey;break;case 37:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,(isRTL?+1:-1),"D");}
handled=event.ctrlKey||event.metaKey;if(event.originalEvent.altKey){$.datepicker._adjustDate(event.target,(event.ctrlKey?-$.datepicker._get(inst,"stepBigMonths"):-$.datepicker._get(inst,"stepMonths")),"M");}
break;case 38:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,-7,"D");}
handled=event.ctrlKey||event.metaKey;break;case 39:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,(isRTL?-1:+1),"D");}
handled=event.ctrlKey||event.metaKey;if(event.originalEvent.altKey){$.datepicker._adjustDate(event.target,(event.ctrlKey?+$.datepicker._get(inst,"stepBigMonths"):+$.datepicker._get(inst,"stepMonths")),"M");}
break;case 40:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,+7,"D");}
handled=event.ctrlKey||event.metaKey;break;default:handled=false;}}else if(event.keyCode===36&&event.ctrlKey){$.datepicker._showDatepicker(this);}else{handled=false;}
if(handled){event.preventDefault();event.stopPropagation();}},_doKeyPress:function(event){var chars,chr,inst=$.datepicker._getInst(event.target);if($.datepicker._get(inst,"constrainInput")){chars=$.datepicker._possibleChars($.datepicker._get(inst,"dateFormat"));chr=String.fromCharCode(event.charCode==null?event.keyCode:event.charCode);return event.ctrlKey||event.metaKey||(chr<" "||!chars||chars.indexOf(chr)>-1);}},_doKeyUp:function(event){var date,inst=$.datepicker._getInst(event.target);if(inst.input.val()!==inst.lastVal){try{date=$.datepicker.parseDate($.datepicker._get(inst,"dateFormat"),(inst.input?inst.input.val():null),$.datepicker._getFormatConfig(inst));if(date){$.datepicker._setDateFromField(inst);$.datepicker._updateAlternate(inst);$.datepicker._updateDatepicker(inst);}}
catch(err){}}
return true;},_showDatepicker:function(input){input=input.target||input;if(input.nodeName.toLowerCase()!=="input"){input=$("input",input.parentNode)[0];}
if($.datepicker._isDisabledDatepicker(input)||$.datepicker._lastInput===input){return;}
var inst,beforeShow,beforeShowSettings,isFixed,offset,showAnim,duration;inst=$.datepicker._getInst(input);if($.datepicker._curInst&&$.datepicker._curInst!==inst){$.datepicker._curInst.dpDiv.stop(true,true);if(inst&&$.datepicker._datepickerShowing){$.datepicker._hideDatepicker($.datepicker._curInst.input[0]);}}
beforeShow=$.datepicker._get(inst,"beforeShow");beforeShowSettings=beforeShow?beforeShow.apply(input,[input,inst]):{};if(beforeShowSettings===false){return;}
extendRemove(inst.settings,beforeShowSettings);inst.lastVal=null;$.datepicker._lastInput=input;$.datepicker._setDateFromField(inst);if($.datepicker._inDialog){input.value="";}
if(!$.datepicker._pos){$.datepicker._pos=$.datepicker._findPos(input);$.datepicker._pos[1]+=input.offsetHeight;}
isFixed=false;$(input).parents().each(function(){isFixed|=$(this).css("position")==="fixed";return!isFixed;});offset={left:$.datepicker._pos[0],top:$.datepicker._pos[1]};$.datepicker._pos=null;inst.dpDiv.empty();inst.dpDiv.css({position:"absolute",display:"block",top:"-1000px"});$.datepicker._updateDatepicker(inst);offset=$.datepicker._checkOffset(inst,offset,isFixed);inst.dpDiv.css({position:($.datepicker._inDialog&&$.blockUI?"static":(isFixed?"fixed":"absolute")),display:"none",left:offset.left+"px",top:offset.top+"px"});if(!inst.inline){showAnim=$.datepicker._get(inst,"showAnim");duration=$.datepicker._get(inst,"duration");inst.dpDiv.zIndex($(input).zIndex()+1);$.datepicker._datepickerShowing=true;if($.effects&&$.effects.effect[showAnim]){inst.dpDiv.show(showAnim,$.datepicker._get(inst,"showOptions"),duration);}else{inst.dpDiv[showAnim||"show"](showAnim?duration:null);}
if(inst.input.is(":visible")&&!inst.input.is(":disabled")){inst.input.focus();}
$.datepicker._curInst=inst;}},_updateDatepicker:function(inst){this.maxRows=4;instActive=inst;inst.dpDiv.empty().append(this._generateHTML(inst));this._attachHandlers(inst);inst.dpDiv.find("."+this._dayOverClass+" a").mouseover();var origyearshtml,numMonths=this._getNumberOfMonths(inst),cols=numMonths[1],width=17;inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");if(cols>1){inst.dpDiv.addClass("ui-datepicker-multi-"+cols).css("width",(width*cols)+"em");}
inst.dpDiv[(numMonths[0]!==1||numMonths[1]!==1?"add":"remove")+
"Class"]("ui-datepicker-multi");inst.dpDiv[(this._get(inst,"isRTL")?"add":"remove")+
"Class"]("ui-datepicker-rtl");if(inst===$.datepicker._curInst&&$.datepicker._datepickerShowing&&inst.input&&inst.input.is(":visible")&&!inst.input.is(":disabled")&&inst.input[0]!==document.activeElement){inst.input.focus();}
if(inst.yearshtml){origyearshtml=inst.yearshtml;setTimeout(function(){if(origyearshtml===inst.yearshtml&&inst.yearshtml){inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);}
origyearshtml=inst.yearshtml=null;},0);}},_getBorders:function(elem){var convert=function(value){return{thin:1,medium:2,thick:3}[value]||value;};return[parseFloat(convert(elem.css("border-left-width"))),parseFloat(convert(elem.css("border-top-width")))];},_checkOffset:function(inst,offset,isFixed){var dpWidth=inst.dpDiv.outerWidth(),dpHeight=inst.dpDiv.outerHeight(),inputWidth=inst.input?inst.input.outerWidth():0,inputHeight=inst.input?inst.input.outerHeight():0,viewWidth=document.documentElement.clientWidth+(isFixed?0:$(document).scrollLeft()),viewHeight=document.documentElement.clientHeight+(isFixed?0:$(document).scrollTop());offset.left-=(this._get(inst,"isRTL")?(dpWidth-inputWidth):0);offset.left-=(isFixed&&offset.left===inst.input.offset().left)?$(document).scrollLeft():0;offset.top-=(isFixed&&offset.top===(inst.input.offset().top+inputHeight))?$(document).scrollTop():0;offset.left-=Math.min(offset.left,(offset.left+dpWidth>viewWidth&&viewWidth>dpWidth)?Math.abs(offset.left+dpWidth-viewWidth):0);offset.top-=Math.min(offset.top,(offset.top+dpHeight>viewHeight&&viewHeight>dpHeight)?Math.abs(dpHeight+inputHeight):0);return offset;},_findPos:function(obj){var position,inst=this._getInst(obj),isRTL=this._get(inst,"isRTL");while(obj&&(obj.type==="hidden"||obj.nodeType!==1||$.expr.filters.hidden(obj))){obj=obj[isRTL?"previousSibling":"nextSibling"];}
position=$(obj).offset();return[position.left,position.top];},_hideDatepicker:function(input){var showAnim,duration,postProcess,onClose,inst=this._curInst;if(!inst||(input&&inst!==$.data(input,PROP_NAME))){return;}
if(this._datepickerShowing){showAnim=this._get(inst,"showAnim");duration=this._get(inst,"duration");postProcess=function(){$.datepicker._tidyDialog(inst);};if($.effects&&($.effects.effect[showAnim]||$.effects[showAnim])){inst.dpDiv.hide(showAnim,$.datepicker._get(inst,"showOptions"),duration,postProcess);}else{inst.dpDiv[(showAnim==="slideDown"?"slideUp":(showAnim==="fadeIn"?"fadeOut":"hide"))]((showAnim?duration:null),postProcess);}
if(!showAnim){postProcess();}
this._datepickerShowing=false;onClose=this._get(inst,"onClose");if(onClose){onClose.apply((inst.input?inst.input[0]:null),[(inst.input?inst.input.val():""),inst]);}
this._lastInput=null;if(this._inDialog){this._dialogInput.css({position:"absolute",left:"0",top:"-100px"});if($.blockUI){$.unblockUI();$("body").append(this.dpDiv);}}
this._inDialog=false;}},_tidyDialog:function(inst){inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");},_checkExternalClick:function(event){if(!$.datepicker._curInst){return;}
var $target=$(event.target),inst=$.datepicker._getInst($target[0]);if((($target[0].id!==$.datepicker._mainDivId&&$target.parents("#"+$.datepicker._mainDivId).length===0&&!$target.hasClass($.datepicker.markerClassName)&&!$target.closest("."+$.datepicker._triggerClass).length&&$.datepicker._datepickerShowing&&!($.datepicker._inDialog&&$.blockUI)))||($target.hasClass($.datepicker.markerClassName)&&$.datepicker._curInst!==inst)){$.datepicker._hideDatepicker();}},_adjustDate:function(id,offset,period){var target=$(id),inst=this._getInst(target[0]);if(this._isDisabledDatepicker(target[0])){return;}
this._adjustInstDate(inst,offset+(period==="M"?this._get(inst,"showCurrentAtPos"):0),period);this._updateDatepicker(inst);},_gotoToday:function(id){var date,target=$(id),inst=this._getInst(target[0]);if(this._get(inst,"gotoCurrent")&&inst.currentDay){inst.selectedDay=inst.currentDay;inst.drawMonth=inst.selectedMonth=inst.currentMonth;inst.drawYear=inst.selectedYear=inst.currentYear;}else{date=new Date();inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();}
this._notifyChange(inst);this._adjustDate(target);},_selectMonthYear:function(id,select,period){var target=$(id),inst=this._getInst(target[0]);inst["selected"+(period==="M"?"Month":"Year")]=inst["draw"+(period==="M"?"Month":"Year")]=parseInt(select.options[select.selectedIndex].value,10);this._notifyChange(inst);this._adjustDate(target);},_selectDay:function(id,month,year,td){var inst,target=$(id);if($(td).hasClass(this._unselectableClass)||this._isDisabledDatepicker(target[0])){return;}
inst=this._getInst(target[0]);inst.selectedDay=inst.currentDay=$("a",td).html();inst.selectedMonth=inst.currentMonth=month;inst.selectedYear=inst.currentYear=year;this._selectDate(id,this._formatDate(inst,inst.currentDay,inst.currentMonth,inst.currentYear));},_clearDate:function(id){var target=$(id);this._selectDate(target,"");},_selectDate:function(id,dateStr){var onSelect,target=$(id),inst=this._getInst(target[0]);dateStr=(dateStr!=null?dateStr:this._formatDate(inst));if(inst.input){inst.input.val(dateStr);}
this._updateAlternate(inst);onSelect=this._get(inst,"onSelect");if(onSelect){onSelect.apply((inst.input?inst.input[0]:null),[dateStr,inst]);}else if(inst.input){inst.input.trigger("change");}
if(inst.inline){this._updateDatepicker(inst);}else{this._hideDatepicker();this._lastInput=inst.input[0];if(typeof(inst.input[0])!=="object"){inst.input.focus();}
this._lastInput=null;}},_updateAlternate:function(inst){var altFormat,date,dateStr,altField=this._get(inst,"altField");if(altField){altFormat=this._get(inst,"altFormat")||this._get(inst,"dateFormat");date=this._getDate(inst);dateStr=this.formatDate(altFormat,date,this._getFormatConfig(inst));$(altField).each(function(){$(this).val(dateStr);});}},noWeekends:function(date){var day=date.getDay();return[(day>0&&day<6),""];},iso8601Week:function(date){var time,checkDate=new Date(date.getTime());checkDate.setDate(checkDate.getDate()+4-(checkDate.getDay()||7));time=checkDate.getTime();checkDate.setMonth(0);checkDate.setDate(1);return Math.floor(Math.round((time-checkDate)/86400000)/7)+1;},parseDate:function(format,value,settings){if(format==null||value==null){throw "Invalid arguments";}
value=(typeof value==="object"?value.toString():value+"");if(value===""){return null;}
var iFormat,dim,extra,iValue=0,shortYearCutoffTemp=(settings?settings.shortYearCutoff:null)||this._defaults.shortYearCutoff,shortYearCutoff=(typeof shortYearCutoffTemp!=="string"?shortYearCutoffTemp:new Date().getFullYear()%100+parseInt(shortYearCutoffTemp,10)),dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort,dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames,monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort,monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames,year=-1,month=-1,day=-1,doy=-1,literal=false,date,lookAhead=function(match){var matches=(iFormat+1<format.length&&format.charAt(iFormat+1)===match);if(matches){iFormat++;}
return matches;},getNumber=function(match){var isDoubled=lookAhead(match),size=(match==="@"?14:(match==="!"?20:(match==="y"&&isDoubled?4:(match==="o"?3:2)))),digits=new RegExp("^\\d{1,"+size+"}"),num=value.substring(iValue).match(digits);if(!num){throw "Missing number at position "+iValue;}
iValue+=num[0].length;return parseInt(num[0],10);},getName=function(match,shortNames,longNames){var index=-1,names=$.map(lookAhead(match)?longNames:shortNames,function(v,k){return[[k,v]];}).sort(function(a,b){return-(a[1].length-b[1].length);});$.each(names,function(i,pair){var name=pair[1];if(value.substr(iValue,name.length).toLowerCase()===name.toLowerCase()){index=pair[0];iValue+=name.length;return false;}});if(index!==-1){return index+1;}else{throw "Unknown name at position "+iValue;}},checkLiteral=function(){if(value.charAt(iValue)!==format.charAt(iFormat)){throw "Unexpected literal at position "+iValue;}
iValue++;};for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)==="'"&&!lookAhead("'")){literal=false;}else{checkLiteral();}}else{switch(format.charAt(iFormat)){case "d":day=getNumber("d");break;case "D":getName("D",dayNamesShort,dayNames);break;case "o":doy=getNumber("o");break;case "m":month=getNumber("m");break;case "M":month=getName("M",monthNamesShort,monthNames);break;case "y":year=getNumber("y");break;case "@":date=new Date(getNumber("@"));year=date.getFullYear();month=date.getMonth()+1;day=date.getDate();break;case "!":date=new Date((getNumber("!")-this._ticksTo1970)/10000);year=date.getFullYear();month=date.getMonth()+1;day=date.getDate();break;case "'":if(lookAhead("'")){checkLiteral();}else{literal=true;}
break;default:checkLiteral();}}}
if(iValue<value.length){extra=value.substr(iValue);if(!/^\s+/.test(extra)){throw "Extra/unparsed characters found in date: "+extra;}}
if(year===-1){year=new Date().getFullYear();}else if(year<100){year+=new Date().getFullYear()-new Date().getFullYear()%100+(year<=shortYearCutoff?0:-100);}
if(doy>-1){month=1;day=doy;do{dim=this._getDaysInMonth(year,month-1);if(day<=dim){break;}
month++;day-=dim;}while(true);}
date=this._daylightSavingAdjust(new Date(year,month-1,day));if(date.getFullYear()!==year||date.getMonth()+1!==month||date.getDate()!==day){throw "Invalid date";}
return date;},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:(((1970-1)*365+Math.floor(1970/4)-Math.floor(1970/100)+
Math.floor(1970/400))*24*60*60*10000000),/**/
formatDate:function(format,date,settings){if(!date){return "";}
var iFormat,dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort,dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames,monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort,monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames,lookAhead=function(match){var matches=(iFormat+1<format.length&&format.charAt(iFormat+1)===match);if(matches){iFormat++;}
return matches;},formatNumber=function(match,value,len){var num=""+value;if(lookAhead(match)){while(num.length<len){num="0"+num;}}
return num;},formatName=function(match,value,shortNames,longNames){return(lookAhead(match)?longNames[value]:shortNames[value]);},output="",literal=false;if(date){for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)==="'"&&!lookAhead("'")){literal=false;}else{output+=format.charAt(iFormat);}}else{switch(format.charAt(iFormat)){case "d":output+=formatNumber("d",date.getDate(),2);break;case "D":output+=formatName("D",date.getDay(),dayNamesShort,dayNames);break;case "o":output+=formatNumber("o",Math.round((new Date(date.getFullYear(),date.getMonth(),date.getDate()).getTime()-new Date(date.getFullYear(),0,0).getTime())/86400000),3);break;case "m":output+=formatNumber("m",date.getMonth()+1,2);break;case "M":output+=formatName("M",date.getMonth(),monthNamesShort,monthNames);break;case "y":output+=(lookAhead("y")?date.getFullYear():(date.getYear()%100<10?"0":"")+date.getYear()%100);break;case "@":output+=date.getTime();break;case "!":output+=date.getTime()*10000+this._ticksTo1970;break;case "'":if(lookAhead("'")){output+="'";}else{literal=true;}
break;default:output+=format.charAt(iFormat);}}}}
return output;},_possibleChars:function(format){var iFormat,chars="",literal=false,lookAhead=function(match){var matches=(iFormat+1<format.length&&format.charAt(iFormat+1)===match);if(matches){iFormat++;}
return matches;};for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)==="'"&&!lookAhead("'")){literal=false;}else{chars+=format.charAt(iFormat);}}else{switch(format.charAt(iFormat)){case "d":case "m":case "y":case "@":chars+="0123456789";break;case "D":case "M":return null;case "'":if(lookAhead("'")){chars+="'";}else{literal=true;}
break;default:chars+=format.charAt(iFormat);}}}
return chars;},_get:function(inst,name){return inst.settings[name]!==undefined?inst.settings[name]:this._defaults[name];},_setDateFromField:function(inst,noDefault){if(inst.input.val()===inst.lastVal){return;}
var dateFormat=this._get(inst,"dateFormat"),dates=inst.lastVal=inst.input?inst.input.val():null,defaultDate=this._getDefaultDate(inst),date=defaultDate,settings=this._getFormatConfig(inst);try{date=this.parseDate(dateFormat,dates,settings)||defaultDate;}catch(event){dates=(noDefault?"":dates);}
inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();inst.currentDay=(dates?date.getDate():0);inst.currentMonth=(dates?date.getMonth():0);inst.currentYear=(dates?date.getFullYear():0);this._adjustInstDate(inst);},_getDefaultDate:function(inst){return this._restrictMinMax(inst,this._determineDate(inst,this._get(inst,"defaultDate"),new Date()));},_determineDate:function(inst,date,defaultDate){var offsetNumeric=function(offset){var date=new Date();date.setDate(date.getDate()+offset);return date;},offsetString=function(offset){try{return $.datepicker.parseDate($.datepicker._get(inst,"dateFormat"),offset,$.datepicker._getFormatConfig(inst));}
catch(e){}
var date=(offset.toLowerCase().match(/^c/)?$.datepicker._getDate(inst):null)||new Date(),year=date.getFullYear(),month=date.getMonth(),day=date.getDate(),pattern=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,matches=pattern.exec(offset);while(matches){switch(matches[2]||"d"){case "d":case "D":day+=parseInt(matches[1],10);break;case "w":case "W":day+=parseInt(matches[1],10)*7;break;case "m":case "M":month+=parseInt(matches[1],10);day=Math.min(day,$.datepicker._getDaysInMonth(year,month));break;case "y":case "Y":year+=parseInt(matches[1],10);day=Math.min(day,$.datepicker._getDaysInMonth(year,month));break;}
matches=pattern.exec(offset);}
return new Date(year,month,day);},newDate=(date==null||date===""?defaultDate:(typeof date==="string"?offsetString(date):(typeof date==="number"?(isNaN(date)?defaultDate:offsetNumeric(date)):new Date(date.getTime()))));newDate=(newDate&&newDate.toString()==="Invalid Date"?defaultDate:newDate);if(newDate){newDate.setHours(0);newDate.setMinutes(0);newDate.setSeconds(0);newDate.setMilliseconds(0);}
return this._daylightSavingAdjust(newDate);},_daylightSavingAdjust:function(date){if(!date){return null;}
date.setHours(date.getHours()>12?date.getHours()+2:0);return date;},_setDate:function(inst,date,noChange){var clear=!date,origMonth=inst.selectedMonth,origYear=inst.selectedYear,newDate=this._restrictMinMax(inst,this._determineDate(inst,date,new Date()));inst.selectedDay=inst.currentDay=newDate.getDate();inst.drawMonth=inst.selectedMonth=inst.currentMonth=newDate.getMonth();inst.drawYear=inst.selectedYear=inst.currentYear=newDate.getFullYear();if((origMonth!==inst.selectedMonth||origYear!==inst.selectedYear)&&!noChange){this._notifyChange(inst);}
this._adjustInstDate(inst);if(inst.input){inst.input.val(clear?"":this._formatDate(inst));}},_getDate:function(inst){var startDate=(!inst.currentYear||(inst.input&&inst.input.val()==="")?null:this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));return startDate;},_attachHandlers:function(inst){var stepMonths=this._get(inst,"stepMonths"),id="#"+inst.id.replace(/\\\\/g,"\\");inst.dpDiv.find("[data-handler]").map(function(){var handler={prev:function(){window["DP_jQuery_"+dpuuid].datepicker._adjustDate(id,-stepMonths,"M");},next:function(){window["DP_jQuery_"+dpuuid].datepicker._adjustDate(id,+stepMonths,"M");},hide:function(){window["DP_jQuery_"+dpuuid].datepicker._hideDatepicker();},today:function(){window["DP_jQuery_"+dpuuid].datepicker._gotoToday(id);},selectDay:function(){window["DP_jQuery_"+dpuuid].datepicker._selectDay(id,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this);return false;},selectMonth:function(){window["DP_jQuery_"+dpuuid].datepicker._selectMonthYear(id,this,"M");return false;},selectYear:function(){window["DP_jQuery_"+dpuuid].datepicker._selectMonthYear(id,this,"Y");return false;}};$(this).bind(this.getAttribute("data-event"),handler[this.getAttribute("data-handler")]);});},_generateHTML:function(inst){var maxDraw,prevText,prev,nextText,next,currentText,gotoDate,controls,buttonPanel,firstDay,showWeek,dayNames,dayNamesMin,monthNames,monthNamesShort,beforeShowDay,showOtherMonths,selectOtherMonths,defaultDate,html,dow,row,group,col,selectedDate,cornerClass,calender,thead,day,daysInMonth,leadDays,curRows,numRows,printDate,dRow,tbody,daySettings,otherMonth,unselectable,tempDate=new Date(),today=this._daylightSavingAdjust(new Date(tempDate.getFullYear(),tempDate.getMonth(),tempDate.getDate())),isRTL=this._get(inst,"isRTL"),showButtonPanel=this._get(inst,"showButtonPanel"),hideIfNoPrevNext=this._get(inst,"hideIfNoPrevNext"),navigationAsDateFormat=this._get(inst,"navigationAsDateFormat"),numMonths=this._getNumberOfMonths(inst),showCurrentAtPos=this._get(inst,"showCurrentAtPos"),stepMonths=this._get(inst,"stepMonths"),isMultiMonth=(numMonths[0]!==1||numMonths[1]!==1),currentDate=this._daylightSavingAdjust((!inst.currentDay?new Date(9999,9,9):new Date(inst.currentYear,inst.currentMonth,inst.currentDay))),minDate=this._getMinMaxDate(inst,"min"),maxDate=this._getMinMaxDate(inst,"max"),drawMonth=inst.drawMonth-showCurrentAtPos,drawYear=inst.drawYear;if(drawMonth<0){drawMonth+=12;drawYear--;}
if(maxDate){maxDraw=this._daylightSavingAdjust(new Date(maxDate.getFullYear(),maxDate.getMonth()-(numMonths[0]*numMonths[1])+1,maxDate.getDate()));maxDraw=(minDate&&maxDraw<minDate?minDate:maxDraw);while(this._daylightSavingAdjust(new Date(drawYear,drawMonth,1))>maxDraw){drawMonth--;if(drawMonth<0){drawMonth=11;drawYear--;}}}
inst.drawMonth=drawMonth;inst.drawYear=drawYear;prevText=this._get(inst,"prevText");prevText=(!navigationAsDateFormat?prevText:this.formatDate(prevText,this._daylightSavingAdjust(new Date(drawYear,drawMonth-stepMonths,1)),this._getFormatConfig(inst)));prev=(this._canAdjustMonth(inst,-1,drawYear,drawMonth)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'"+
" title='"+prevText+"'><span class='ui-icon ui-icon-circle-triangle-"+(isRTL?"e":"w")+"'>"+prevText+"</span></a>":(hideIfNoPrevNext?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+prevText+"'><span class='ui-icon ui-icon-circle-triangle-"+(isRTL?"e":"w")+"'>"+prevText+"</span></a>"));nextText=this._get(inst,"nextText");nextText=(!navigationAsDateFormat?nextText:this.formatDate(nextText,this._daylightSavingAdjust(new Date(drawYear,drawMonth+stepMonths,1)),this._getFormatConfig(inst)));next=(this._canAdjustMonth(inst,+1,drawYear,drawMonth)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'"+
" title='"+nextText+"'><span class='ui-icon ui-icon-circle-triangle-"+(isRTL?"w":"e")+"'>"+nextText+"</span></a>":(hideIfNoPrevNext?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+nextText+"'><span class='ui-icon ui-icon-circle-triangle-"+(isRTL?"w":"e")+"'>"+nextText+"</span></a>"));currentText=this._get(inst,"currentText");gotoDate=(this._get(inst,"gotoCurrent")&&inst.currentDay?currentDate:today);currentText=(!navigationAsDateFormat?currentText:this.formatDate(currentText,gotoDate,this._getFormatConfig(inst)));controls=(!inst.inline?"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+
this._get(inst,"closeText")+"</button>":"");buttonPanel=(showButtonPanel)?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(isRTL?controls:"")+(this._isInRange(inst,gotoDate)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'"+
">"+currentText+"</button>":"")+(isRTL?"":controls)+"</div>":"";firstDay=parseInt(this._get(inst,"firstDay"),10);firstDay=(isNaN(firstDay)?0:firstDay);showWeek=this._get(inst,"showWeek");dayNames=this._get(inst,"dayNames");dayNamesMin=this._get(inst,"dayNamesMin");monthNames=this._get(inst,"monthNames");monthNamesShort=this._get(inst,"monthNamesShort");beforeShowDay=this._get(inst,"beforeShowDay");showOtherMonths=this._get(inst,"showOtherMonths");selectOtherMonths=this._get(inst,"selectOtherMonths");defaultDate=this._getDefaultDate(inst);html="";dow;for(row=0;row<numMonths[0];row++){group="";this.maxRows=4;for(col=0;col<numMonths[1];col++){selectedDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,inst.selectedDay));cornerClass=" ui-corner-all";calender="";if(isMultiMonth){calender+="<div class='ui-datepicker-group";if(numMonths[1]>1){switch(col){case 0:calender+=" ui-datepicker-group-first";cornerClass=" ui-corner-"+(isRTL?"right":"left");break;case numMonths[1]-1:calender+=" ui-datepicker-group-last";cornerClass=" ui-corner-"+(isRTL?"left":"right");break;default:calender+=" ui-datepicker-group-middle";cornerClass="";break;}}
calender+="'>";}
calender+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+cornerClass+"'>"+(/all|left/.test(cornerClass)&&row===0?(isRTL?next:prev):"")+(/all|right/.test(cornerClass)&&row===0?(isRTL?prev:next):"")+
this._generateMonthYearHeader(inst,drawMonth,drawYear,minDate,maxDate,row>0||col>0,monthNames,monthNamesShort)+
"</div><table class='ui-datepicker-calendar'><thead>"+
"<tr>";thead=(showWeek?"<th class='ui-datepicker-week-col'>"+this._get(inst,"weekHeader")+"</th>":"");for(dow=0;dow<7;dow++){day=(dow+firstDay)%7;thead+="<th"+((dow+firstDay+6)%7>=5?" class='ui-datepicker-week-end'":"")+">"+
"<span title='"+dayNames[day]+"'>"+dayNamesMin[day]+"</span></th>";}
calender+=thead+"</tr></thead><tbody>";daysInMonth=this._getDaysInMonth(drawYear,drawMonth);if(drawYear===inst.selectedYear&&drawMonth===inst.selectedMonth){inst.selectedDay=Math.min(inst.selectedDay,daysInMonth);}
leadDays=(this._getFirstDayOfMonth(drawYear,drawMonth)-firstDay+7)%7;curRows=Math.ceil((leadDays+daysInMonth)/7);numRows=(isMultiMonth?this.maxRows>curRows?this.maxRows:curRows:curRows);this.maxRows=numRows;printDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,1-leadDays));for(dRow=0;dRow<numRows;dRow++){//
calender+="<tr>";tbody=(!showWeek?"":"<td class='ui-datepicker-week-col'>"+
this._get(inst,"calculateWeek")(printDate)+"</td>");for(dow=0;dow<7;dow++){daySettings=(beforeShowDay?beforeShowDay.apply((inst.input?inst.input[0]:null),[printDate]):[true,""]);otherMonth=(printDate.getMonth()!==drawMonth);unselectable=(otherMonth&&!selectOtherMonths)||!daySettings[0]||(minDate&&printDate<minDate)||(maxDate&&printDate>maxDate);tbody+="<td class='"+((dow+firstDay+6)%7>=5?" ui-datepicker-week-end":"")+(otherMonth?" ui-datepicker-other-month":"")+((printDate.getTime()===selectedDate.getTime()&&drawMonth===inst.selectedMonth&&inst._keyEvent)||(defaultDate.getTime()===printDate.getTime()&&defaultDate.getTime()===selectedDate.getTime())?" "+this._dayOverClass:"")+(unselectable?" "+this._unselectableClass+" ui-state-disabled":"")+(otherMonth&&!showOtherMonths?"":" "+daySettings[1]+(printDate.getTime()===currentDate.getTime()?" "+this._currentClass:"")+(printDate.getTime()===today.getTime()?" ui-datepicker-today":""))+"'"+((!otherMonth||showOtherMonths)&&daySettings[2]?" title='"+daySettings[2]+"'":"")+(unselectable?"":" data-handler='selectDay' data-event='click' data-month='"+printDate.getMonth()+"' data-year='"+printDate.getFullYear()+"'")+">"+(otherMonth&&!showOtherMonths?"&#xa0;":(unselectable?"<span class='ui-state-default'>"+printDate.getDate()+"</span>":"<a class='ui-state-default"+(printDate.getTime()===today.getTime()?" ui-state-highlight":"")+(printDate.getTime()===currentDate.getTime()?" ui-state-active":"")+(otherMonth?" ui-priority-secondary":"")+
"' href='#'>"+printDate.getDate()+"</a>"))+"</td>";printDate.setDate(printDate.getDate()+1);printDate=this._daylightSavingAdjust(printDate);}
calender+=tbody+"</tr>";}
drawMonth++;if(drawMonth>11){drawMonth=0;drawYear++;}
calender+="</tbody></table>"+(isMultiMonth?"</div>"+((numMonths[0]>0&&col===numMonths[1]-1)?"<div class='ui-datepicker-row-break'></div>":""):"");group+=calender;}
html+=group;}
html+=buttonPanel;inst._keyEvent=false;return html;},_generateMonthYearHeader:function(inst,drawMonth,drawYear,minDate,maxDate,secondary,monthNames,monthNamesShort){var inMinYear,inMaxYear,month,years,thisYear,determineYear,year,endYear,changeMonth=this._get(inst,"changeMonth"),changeYear=this._get(inst,"changeYear"),showMonthAfterYear=this._get(inst,"showMonthAfterYear"),html="<div class='ui-datepicker-title'>",monthHtml="";if(secondary||!changeMonth){monthHtml+="<span class='ui-datepicker-month'>"+monthNames[drawMonth]+"</span>";}else{inMinYear=(minDate&&minDate.getFullYear()===drawYear);inMaxYear=(maxDate&&maxDate.getFullYear()===drawYear);monthHtml+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";for(month=0;month<12;month++){if((!inMinYear||month>=minDate.getMonth())&&(!inMaxYear||month<=maxDate.getMonth())){monthHtml+="<option value='"+month+"'"+(month===drawMonth?" selected='selected'":"")+
">"+monthNamesShort[month]+"</option>";}}
monthHtml+="</select>";}
if(!showMonthAfterYear){html+=monthHtml+(secondary||!(changeMonth&&changeYear)?"&#xa0;":"");}
if(!inst.yearshtml){inst.yearshtml="";if(secondary||!changeYear){html+="<span class='ui-datepicker-year'>"+drawYear+"</span>";}else{years=this._get(inst,"yearRange").split(":");thisYear=new Date().getFullYear();determineYear=function(value){var year=(value.match(/c[+\-].*/)?drawYear+parseInt(value.substring(1),10):(value.match(/[+\-].*/)?thisYear+parseInt(value,10):parseInt(value,10)));return(isNaN(year)?thisYear:year);};year=determineYear(years[0]);endYear=Math.max(year,determineYear(years[1]||""));year=(minDate?Math.max(year,minDate.getFullYear()):year);endYear=(maxDate?Math.min(endYear,maxDate.getFullYear()):endYear);inst.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";for(;year<=endYear;year++){inst.yearshtml+="<option value='"+year+"'"+(year===drawYear?" selected='selected'":"")+
">"+year+"</option>";}
inst.yearshtml+="</select>";html+=inst.yearshtml;inst.yearshtml=null;}}
html+=this._get(inst,"yearSuffix");if(showMonthAfterYear){html+=(secondary||!(changeMonth&&changeYear)?"&#xa0;":"")+monthHtml;}
html+="</div>";return html;},_adjustInstDate:function(inst,offset,period){var year=inst.drawYear+(period==="Y"?offset:0),month=inst.drawMonth+(period==="M"?offset:0),day=Math.min(inst.selectedDay,this._getDaysInMonth(year,month))+(period=== "D"?offset:0),date=this._restrictMinMax(inst,this._daylightSavingAdjust(new Date(year,month,day)));inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();if(period==="M"||period==="Y"){this._notifyChange(inst);}},_restrictMinMax:function(inst,date){var minDate=this._getMinMaxDate(inst,"min"),maxDate=this._getMinMaxDate(inst,"max"),newDate=(minDate&&date<minDate?minDate:date);return(maxDate&&newDate>maxDate?maxDate:newDate);},_notifyChange:function(inst){var onChange=this._get(inst,"onChangeMonthYear");if(onChange){onChange.apply((inst.input?inst.input[0]:null),[inst.selectedYear,inst.selectedMonth+1,inst]);}},_getNumberOfMonths:function(inst){var numMonths=this._get(inst,"numberOfMonths");return(numMonths==null?[1,1]:(typeof numMonths==="number"?[1,numMonths]:numMonths));},_getMinMaxDate:function(inst,minMax){return this._determineDate(inst,this._get(inst,minMax+"Date"),null);},_getDaysInMonth:function(year,month){return 32-this._daylightSavingAdjust(new Date(year,month,32)).getDate();},_getFirstDayOfMonth:function(year,month){return new Date(year,month,1).getDay();},_canAdjustMonth:function(inst,offset,curYear,curMonth){var numMonths=this._getNumberOfMonths(inst),date=this._daylightSavingAdjust(new Date(curYear,curMonth+(offset<0?offset:numMonths[0]*numMonths[1]),1));if(offset<0){date.setDate(this._getDaysInMonth(date.getFullYear(),date.getMonth()));}
return this._isInRange(inst,date);},_isInRange:function(inst,date){var yearSplit,currentYear,minDate=this._getMinMaxDate(inst,"min"),maxDate=this._getMinMaxDate(inst,"max"),minYear=null,maxYear=null,years=this._get(inst,"yearRange");if(years){yearSplit=years.split(":");currentYear=new Date().getFullYear();minYear=parseInt(yearSplit[0],10)+currentYear;maxYear=parseInt(yearSplit[1],10)+currentYear;}
return((!minDate||date.getTime()>=minDate.getTime())&&(!maxDate||date.getTime()<=maxDate.getTime())&&(!minYear||date.getFullYear()>=minYear)&&(!maxYear||date.getFullYear()<=maxYear));},_getFormatConfig:function(inst){var shortYearCutoff=this._get(inst,"shortYearCutoff");shortYearCutoff=(typeof shortYearCutoff!=="string"?shortYearCutoff:new Date().getFullYear()%100+parseInt(shortYearCutoff,10));return{shortYearCutoff:shortYearCutoff,dayNamesShort:this._get(inst,"dayNamesShort"),dayNames:this._get(inst,"dayNames"),monthNamesShort:this._get(inst,"monthNamesShort"),monthNames:this._get(inst,"monthNames")};},_formatDate:function(inst,day,month,year){if(!day){inst.currentDay=inst.selectedDay;inst.currentMonth=inst.selectedMonth;inst.currentYear=inst.selectedYear;}
var date=(day?(typeof day==="object"?day:this._daylightSavingAdjust(new Date(year,month,day))):this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));return this.formatDate(this._get(inst,"dateFormat"),date,this._getFormatConfig(inst));}});/**/
function bindHover(dpDiv){var selector="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return dpDiv.delegate(selector,"mouseout",function(){$(this).removeClass("ui-state-hover");if(this.className.indexOf("ui-datepicker-prev")!==-1){$(this).removeClass("ui-datepicker-prev-hover");}
if(this.className.indexOf("ui-datepicker-next")!==-1){$(this).removeClass("ui-datepicker-next-hover");}})
.delegate(selector,"mouseover",function(){if(!$.datepicker._isDisabledDatepicker(instActive.inline?dpDiv.parent()[0]:instActive.input[0])){$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");$(this).addClass("ui-state-hover");if(this.className.indexOf("ui-datepicker-prev")!==-1){$(this).addClass("ui-datepicker-prev-hover");}
if(this.className.indexOf("ui-datepicker-next")!==-1){$(this).addClass("ui-datepicker-next-hover");}}});}
function extendRemove(target,props){$.extend(target,props);for(var name in props){if(props[name]==null){target[name]=props[name];}}
return target;}
$.fn.datepicker=function(options){if(!this.length){return this;}
if(!$.datepicker.initialized){$(document).mousedown($.datepicker._checkExternalClick);$.datepicker.initialized=true;}
if($("#"+$.datepicker._mainDivId).length===0){$("body").append($.datepicker.dpDiv);}
var otherArgs =Array.prototype.slice.call(arguments,1);if(typeof options==="string"&&(options==="isDisabled"||options==="getDate"||options==="widget")){return $.datepicker["_"+options+"Datepicker"].
apply($.datepicker,[this[0]].concat(otherArgs));}
if(options==="option"&&arguments.length===2&&typeof arguments[1]==="string"){return $.datepicker["_"+options+"Datepicker"].
apply($.datepicker,[this[0]].concat(otherArgs));}
return this.each(function(){typeof options==="string"?$.datepicker["_"+options+"Datepicker"].
apply($.datepicker,[this].concat(otherArgs)):$.datepicker._attachDatepicker(this,options);});};$.datepicker=new Datepicker();$.datepicker.initialized=false;$.datepicker.uuid=new Date().getTime();$.datepicker.version="1.10.0";window["DP_jQuery_"+dpuuid]=$;})(jQuery);(function($,undefined){var sizeRelatedOptions={buttons:true,height:true,maxHeight:true,maxWidth:true,minHeight:true,minWidth:true,width:true},resizableRelatedOptions={maxHeight:true,maxWidth:true,minHeight:true,minWidth:true};$.widget("ui.dialog",{version:"1.10.0",options:{appendTo:"body",autoOpen:true,buttons:[],closeOnEscape:true,closeText:"close",dialogClass:"",draggable:true,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:false,position:{my:"center",at:"center",of:window,collision:"fit",using:function(pos){var topOffset=$(this).css(pos).offset().top;if(topOffset<0){$(this).css("top",pos.top-topOffset);}}},resizable:true,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height};this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)};this.originalTitle=this.element.attr("title");this.options.title=this.options.title||this.originalTitle;this._createWrapper();this.element
.show()
.removeAttr("title")
.addClass("ui-dialog-content ui-widget-content")
.appendTo(this.uiDialog);this._createTitlebar();this._createButtonPane();if(this.options.draggable&&$.fn.draggable){this._makeDraggable();}
if(this.options.resizable&&$.fn.resizable){this._makeResizable();}
this._isOpen=false;},_init:function(){if(this.options.autoOpen){this.open();}},_appendTo:function(){var element=this.options.appendTo;if(element&&(element.jquery||element.nodeType)){return $(element);}
return this.document.find(element||"body").eq(0);},_destroy:function(){var next,originalPosition=this.originalPosition;this._destroyOverlay();this.element
.removeUniqueId()
.removeClass("ui-dialog-content ui-widget-content")
.css(this.originalCss)
.detach();this.uiDialog.stop(true,true).remove();if(this.originalTitle){this.element.attr("title",this.originalTitle);}
next=originalPosition.parent.children().eq(originalPosition.index);if(next.length&&next[0]!==this.element[0]){next.before(this.element);}else{originalPosition.parent.append(this.element);}},widget:function(){return this.uiDialog;},disable:$.noop,enable:$.noop,close:function(event){var that=this;if(!this._isOpen||this._trigger("beforeClose",event)===false){return;}
this._isOpen=false;this._destroyOverlay();if(!this.opener.filter(":focusable").focus().length){$(this.document[0].activeElement).blur();}
this._hide(this.uiDialog,this.options.hide,function(){that._trigger("close",event);});},isOpen:function(){return this._isOpen;},moveToTop:function(){this._moveToTop();},_moveToTop:function(event,silent){var moved=!!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog).length;if(moved&&!silent){this._trigger("focus",event);}
return moved;},open:function(){if(this._isOpen){if(this._moveToTop()){this._focusTabbable();}
return;}
this.opener=$(this.document[0].activeElement);this._size();this._position();this._createOverlay();this._moveToTop(null,true);this._show(this.uiDialog,this.options.show);this._focusTabbable();this._isOpen=true;this._trigger("open");this._trigger("focus");},_focusTabbable:function(){var hasFocus=this.element.find("[autofocus]");if(!hasFocus.length){hasFocus=this.element.find(":tabbable");}
if(!hasFocus.length){hasFocus=this.uiDialogButtonPane.find(":tabbable");}
if(!hasFocus.length){hasFocus=this.uiDialogTitlebarClose.filter(":tabbable");}
if (!hasFocus.length){hasFocus=this.uiDialog;}
hasFocus.eq(0).focus();},_keepFocus:function(event){function checkFocus(){var activeElement=this.document[0].activeElement,isActive=this.uiDialog[0]===activeElement||$.contains(this.uiDialog[0],activeElement);if(!isActive){this._focusTabbable();}}
event.preventDefault();checkFocus.call(this);this._delay(checkFocus);},_createWrapper:function(){this.uiDialog=$("<div>")
.addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front "+
this.options.dialogClass)
.hide()
.attr({tabIndex:-1,role:"dialog"})
.appendTo(this._appendTo());this._on(this.uiDialog,{keydown:function(event){if(this.options.closeOnEscape&&!event.isDefaultPrevented()&&event.keyCode&&event.keyCode===$.ui.keyCode.ESCAPE){event.preventDefault();this.close(event);return;}
if(event.keyCode!==$.ui.keyCode.TAB){return;}
var tabbables=this.uiDialog.find(":tabbable"),first=tabbables.filter(":first"),last=tabbables.filter(":last");if((event.target===last[0]||event.target===this.uiDialog[0])&&!event.shiftKey){first.focus(1);event.preventDefault();}else if((event.target===first[0]||event.target===this.uiDialog[0])&&event.shiftKey){last.focus(1);event.preventDefault();}},mousedown:function(event){if(this._moveToTop(event)){this._focusTabbable();}}});if(!this.element.find("[aria-describedby]").length){this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")});}},_createTitlebar:function(){var uiDialogTitle;this.uiDialogTitlebar=$("<div>")
.addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix")
.prependTo(this.uiDialog);this._on(this.uiDialogTitlebar,{mousedown:function(event){if(!$(event.target).closest(".ui-dialog-titlebar-close")){this.uiDialog.focus();}}});this.uiDialogTitlebarClose=$("<button></button>")
.button({label:this.options.closeText,icons:{primary:"ui-icon-closethick"},text:false})
.addClass("ui-dialog-titlebar-close")
.appendTo(this.uiDialogTitlebar);this._on(this.uiDialogTitlebarClose,{click:function(event){event.preventDefault();this.close(event);}});uiDialogTitle=$("<span>")
.uniqueId()
.addClass("ui-dialog-title")
.prependTo(this.uiDialogTitlebar);this._title(uiDialogTitle);this.uiDialog.attr({"aria-labelledby":uiDialogTitle.attr("id")});},_title:function(title){if(!this.options.title){title.html("&#160;");}
title.text(this.options.title);},_createButtonPane:function(){this.uiDialogButtonPane=$("<div>")
.addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");this.uiButtonSet=$("<div>")
.addClass("ui-dialog-buttonset")
.appendTo(this.uiDialogButtonPane);this._createButtons();},_createButtons:function(){var that=this,buttons=this.options.buttons;this.uiDialogButtonPane.remove();this.uiButtonSet.empty();if($.isEmptyObject(buttons)){this.uiDialog.removeClass("ui-dialog-buttons");return;}
$.each(buttons,function(name,props){var click,buttonOptions;props=$.isFunction(props)?{click:props,text:name}:props;props=$.extend({type:"button"},props);click=props.click;props.click=function(){click.apply(that.element[0],arguments);};buttonOptions={icons:props.icons,text:props.showText};delete props.icons;delete props.showText;$("<button></button>",props)
.button(buttonOptions)
.appendTo(that.uiButtonSet);});this.uiDialog.addClass("ui-dialog-buttons");this.uiDialogButtonPane.appendTo(this.uiDialog);},_makeDraggable:function(){var that=this,options=this.options;function filteredUi(ui){return{position:ui.position,offset:ui.offset};}
this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(event,ui){$(this).addClass("ui-dialog-dragging");that._trigger("dragStart",event,filteredUi(ui));},drag:function(event,ui){that._trigger("drag",event,filteredUi(ui));},stop:function(event,ui){options.position=[ui.position.left-that.document.scrollLeft(),ui.position.top-that.document.scrollTop()];$(this).removeClass("ui-dialog-dragging");that._trigger("dragStop",event,filteredUi(ui));}});},_makeResizable:function(){var that=this,options=this.options,handles=options.resizable,position=this.uiDialog.css("position"),resizeHandles=typeof handles==="string"?handles:"n,e,s,w,se,sw,ne,nw";function filteredUi(ui){return{originalPosition:ui.originalPosition,originalSize:ui.originalSize,position:ui.position,size:ui.size};}
this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:options.maxWidth,maxHeight:options.maxHeight,minWidth:options.minWidth,minHeight:this._minHeight(),handles:resizeHandles,start:function(event,ui){$(this).addClass("ui-dialog-resizing");that._trigger("resizeStart",event,filteredUi(ui));},resize:function(event,ui){that._trigger("resize",event,filteredUi(ui));},stop:function(event,ui){options.height=$(this).height();options.width=$(this).width();$(this).removeClass("ui-dialog-resizing");that._trigger("resizeStop",event,filteredUi(ui));}})
.css("position",position);},_minHeight:function(){var options=this.options;return options.height==="auto"?options.minHeight:Math.min(options.minHeight,options.height);},_position:function(){var isVisible=this.uiDialog.is(":visible");if(!isVisible){this.uiDialog.show();}
this.uiDialog.position(this.options.position);if(!isVisible){this.uiDialog.hide();}},_setOptions:function(options){var that=this,resize=false,resizableOptions={};$.each(options,function(key,value){that._setOption(key,value);if(key in sizeRelatedOptions){resize=true;}
if(key in resizableRelatedOptions){resizableOptions[key]=value;}});if(resize){this._size();this._position();}
if(this.uiDialog.is(":data(ui-resizable)")){this.uiDialog.resizable("option",resizableOptions);}},_setOption:function(key,value){var isDraggable,isResizable,uiDialog=this.uiDialog;if(key==="dialogClass"){uiDialog
.removeClass(this.options.dialogClass)
.addClass(value);}
if(key==="disabled"){return;}
this._super(key,value);if(key==="appendTo"){this.uiDialog.appendTo(this._appendTo());}
if(key==="buttons"){this._createButtons();}
if(key==="closeText"){this.uiDialogTitlebarClose.button({label:""+value});}
if(key==="draggable"){isDraggable=uiDialog.is(":data(ui-draggable)");if(isDraggable&&!value){uiDialog.draggable("destroy");}
if(!isDraggable&&value){this._makeDraggable();}}
if(key==="position"){this._position();}
if(key==="resizable"){isResizable=uiDialog.is(":data(ui-resizable)");if(isResizable&&!value){uiDialog.resizable("destroy");}
if(isResizable&&typeof value==="string"){uiDialog.resizable("option","handles",value);}
if(!isResizable&&value!==false){this._makeResizable();}}
if(key==="title"){this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));}},_size:function(){var nonContentHeight,minContentHeight,maxContentHeight,options=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0});if(options.minWidth>options.width){options.width=options.minWidth;}
nonContentHeight=this.uiDialog.css({height:"auto",width:options.width})
.outerHeight();minContentHeight=Math.max(0,options.minHeight-nonContentHeight);maxContentHeight=typeof options.maxHeight==="number"?Math.max(0,options.maxHeight-nonContentHeight):"none";if(options.height==="auto"){this.element.css({minHeight:minContentHeight,maxHeight:maxContentHeight,height:"auto"});}else{this.element.height(Math.max(0,options.height-nonContentHeight));}
if(this.uiDialog.is(":data(ui-resizable)")){this.uiDialog.resizable("option","minHeight",this._minHeight());}},_createOverlay:function(){if(!this.options.modal){return;}
if(!$.ui.dialog.overlayInstances){this._delay(function(){if($.ui.dialog.overlayInstances){this._on(this.document,{focusin:function(event){if(!$(event.target).closest(".ui-dialog").length){event.preventDefault();$(".ui-dialog:visible:last .ui-dialog-content")
.data("ui-dialog")._focusTabbable();}}});}});}
this.overlay=$("<div>")
.addClass("ui-widget-overlay ui-front")
.appendTo(this.document[0].body);this._on(this.overlay,{mousedown:"_keepFocus"});$.ui.dialog.overlayInstances++;},_destroyOverlay:function(){if(!this.options.modal){return;}
$.ui.dialog.overlayInstances--;if(!$.ui.dialog.overlayInstances){this._off(this.document,"focusin");}
this.overlay.remove();}});$.ui.dialog.overlayInstances=0;if($.uiBackCompat!==false){$.widget("ui.dialog",$.ui.dialog,{_position:function(){var position=this.options.position,myAt=[],offset=[0,0],isVisible;if(position){if(typeof position==="string"||(typeof position==="object"&&"0" in position)){myAt=position.split?position.split(" "):[position[0],position[1]];if(myAt.length===1){myAt[1]=myAt[0];}
$.each(["left","top"],function(i,offsetPosition){if(+myAt[i]===myAt[i]){offset[i]=myAt[i];myAt[i]=offsetPosition;}});position={my:myAt[0]+(offset[0]<0?offset[0]:"+"+offset[0])+" "+
myAt[1]+(offset[1]<0?offset[1]:"+"+offset[1]),at:myAt.join(" ")};}
position=$.extend({},$.ui.dialog.prototype.options.position,position);}else{position=$.ui.dialog.prototype.options.position;}
isVisible=this.uiDialog.is(":visible");if(!isVisible){this.uiDialog.show();}
this.uiDialog.position(position);if(!isVisible){this.uiDialog.hide();}}});}}(jQuery));(function($,undefined){var rvertical=/up|down|vertical/,rpositivemotion=/up|left|vertical|horizontal/;$.effects.effect.blind=function(o,done){var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"hide"),direction=o.direction||"up",vertical=rvertical.test(direction),ref=vertical?"height":"width",ref2=vertical?"top":"left",motion=rpositivemotion.test(direction),animation={},show=mode==="show",wrapper,distance,margin;if(el.parent().is(".ui-effects-wrapper")){$.effects.save(el.parent(),props);}else{$.effects.save(el,props);}
el.show();wrapper=$.effects.createWrapper(el).css({overflow:"hidden"});distance=wrapper[ref]();margin=parseFloat(wrapper.css(ref2))||0;animation[ref]=show?distance:0;if(!motion){el
.css(vertical?"bottom":"right",0)
.css(vertical?"top":"left","auto")
.css({position:"absolute"});animation[ref2]=show?margin:distance+margin;}
if(show){wrapper.css(ref,0);if(!motion){wrapper.css(ref2,margin+distance);}}
wrapper.animate(animation,{duration:o.duration,easing:o.easing,queue:false,complete:function(){if(mode==="hide"){el.hide();}
$.effects.restore(el,props);$.effects.removeWrapper(el);done();}});};})(jQuery);(function($,undefined){$.effects.effect.bounce=function(o,done){var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"effect"),hide=mode==="hide",show=mode==="show",direction=o.direction||"up",distance=o.distance,times=o.times||5,anims=times*2+(show||hide?1:0),speed=o.duration/anims,easing=o.easing,ref=(direction==="up"||direction==="down")?"top":"left",motion=(direction==="up"||direction=== "left"),i,upAnim,downAnim,queue=el.queue(),queuelen=queue.length;if(show||hide){props.push("opacity");}
$.effects.save(el,props);el.show();$.effects.createWrapper(el);if(!distance){distance=el[ref==="top"?"outerHeight":"outerWidth"]()/3;}
if(show){downAnim={opacity:1};downAnim[ref]=0;el.css("opacity",0)
.css(ref,motion?-distance*2:distance*2)
.animate(downAnim,speed,easing);}
if(hide){distance=distance/Math.pow(2,times-1);}
downAnim={};downAnim[ref]=0;for(i=0;i<times;i++){upAnim={};upAnim[ref]=(motion?"-=":"+=")+distance;el.animate(upAnim,speed,easing)
.animate(downAnim,speed,easing);distance=hide?distance*2:distance/2;}
if(hide){upAnim={opacity:0};upAnim[ref]=(motion?"-=":"+=")+distance;el.animate(upAnim,speed,easing);}
el.queue(function(){if(hide){el.hide();}
$.effects.restore(el,props);$.effects.removeWrapper(el);done();});if(queuelen>1){queue.splice.apply(queue,[1,0].concat(queue.splice(queuelen,anims+1)));}
el.dequeue();};})(jQuery);(function($,undefined){$.effects.effect.clip=function(o,done){var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"hide"),show=mode==="show",direction=o.direction||"vertical",vert=direction==="vertical",size=vert?"height":"width",position=vert?"top":"left",animation={},wrapper,animate,distance;$.effects.save(el,props);el.show();wrapper=$.effects.createWrapper(el).css({overflow:"hidden"});animate=(el[0].tagName==="IMG")?wrapper:el;distance=animate[size]();if(show){animate.css(size,0);animate.css(position,distance/2);}
animation[size]=show?distance:0;animation[position]=show?0:distance/2;animate.animate(animation,{queue:false,duration:o.duration,easing:o.easing,complete:function(){if(!show){el.hide();}
$.effects.restore(el,props);$.effects.removeWrapper(el);done();}});};})(jQuery);(function($,undefined){$.effects.effect.drop=function(o,done){var el=$(this),props=["position","top","bottom","left","right","opacity","height","width"],mode=$.effects.setMode(el,o.mode||"hide"),show=mode==="show",direction=o.direction||"left",ref=(direction==="up"||direction==="down")?"top":"left",motion=(direction==="up"||direction==="left")?"pos":"neg",animation={opacity:show?1:0},distance;$.effects.save(el,props);el.show();$.effects.createWrapper(el);distance=o.distance||el[ref==="top"?"outerHeight":"outerWidth"](true)/2;if(show){el
.css("opacity",0)
.css(ref,motion==="pos"?-distance:distance);}
animation[ref]=(show?(motion==="pos"?"+=":"-="):(motion==="pos"?"-=":"+="))+
distance;el.animate(animation,{queue:false,duration:o.duration,easing:o.easing,complete:function(){if(mode==="hide"){el.hide();}
$.effects.restore(el,props);$.effects.removeWrapper(el);done();}});};})(jQuery);(function($,undefined){$.effects.effect.explode=function(o,done){var rows=o.pieces?Math.round(Math.sqrt(o.pieces)):3,cells=rows,el=$(this),mode=$.effects.setMode(el,o.mode||"hide"),show=mode==="show",offset=el.show().css("visibility","hidden").offset(),width=Math.ceil(el.outerWidth()/cells),height=Math.ceil(el.outerHeight()/rows),pieces=[],i,j,left,top,mx,my;function childComplete(){pieces.push(this);if(pieces.length===rows*cells){animComplete();}}
for(i=0;i<rows;i++){top=offset.top+i*height;my=i-(rows-1)/2;for(j=0;j<cells;j++){left=offset.left+j*width;mx=j-(cells-1)/2;el
.clone()
.appendTo("body")
.wrap("<div></div>")
.css({position:"absolute",visibility:"visible",left:-j*width,top:-i*height})
.parent()
.addClass("ui-effects-explode")
.css({position:"absolute",overflow:"hidden",width:width,height:height,left:left+(show?mx*width:0),top:top+(show?my*height:0),opacity:show?0:1}).animate({left:left+(show?0:mx*width),top:top+(show?0:my*height), opacity:show?1:0},o.duration||500,o.easing,childComplete);}}
function animComplete(){el.css({visibility:"visible"});$(pieces).remove();if(!show){el.hide();}
done();}};})(jQuery);(function($,undefined){$.effects.effect.fade=function(o,done){var el=$(this),mode=$.effects.setMode(el,o.mode||"toggle");el.animate({opacity:mode},{queue:false,duration:o.duration,easing:o.easing,complete:done});};})(jQuery);(function($,undefined){$.effects.effect.fold=function(o,done){var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"hide"),show=mode==="show",hide=mode==="hide",size=o.size||15,percent=/([0-9]+)%/.exec(size),horizFirst=!!o.horizFirst,widthFirst=show!==horizFirst,ref=widthFirst?["width","height"]:["height","width"],duration=o.duration/2,wrapper,distance,animation1={},animation2={};$.effects.save(el,props);el.show();wrapper=$.effects.createWrapper(el).css({overflow:"hidden"});distance=widthFirst?[wrapper.width(),wrapper.height()]:[wrapper.height(),wrapper.width()];if(percent){size=parseInt(percent[1],10)/100*distance[hide?0:1];}
if(show){wrapper.css(horizFirst?{height:0,width:size}:{height:size,width:0});}
animation1[ref[0]]=show?distance[0]:size;animation2[ref[1]]=show?distance[1]:0;wrapper
.animate(animation1,duration,o.easing)
.animate(animation2,duration,o.easing,function(){if(hide){el.hide();}
$.effects.restore(el,props);$.effects.removeWrapper(el);done();});};})(jQuery);(function($,undefined){$.effects.effect.highlight=function(o,done){var elem =$(this),props=["backgroundImage","backgroundColor","opacity"],mode=$.effects.setMode(elem,o.mode||"show"),animation={backgroundColor:elem.css("backgroundColor")};if(mode==="hide"){animation.opacity=0;}
$.effects.save(elem,props);elem
.show()
.css({backgroundImage:"none",backgroundColor:o.color||"#ffff99"})
.animate(animation,{queue:false,duration:o.duration,easing:o.easing,complete:function(){if(mode==="hide"){elem.hide();}
$.effects.restore(elem,props);done();}});};})(jQuery);(function($,undefined){$.effects.effect.pulsate=function(o,done){var elem=$(this),mode=$.effects.setMode(elem,o.mode||"show"),show=mode==="show",hide=mode==="hide",showhide=(show||mode==="hide"),anims=((o.times||5)*2)+(showhide?1:0),duration=o.duration/anims,animateTo=0,queue=elem.queue(),queuelen=queue.length,i;if(show||!elem.is(":visible")){elem.css("opacity",0).show();animateTo=1;}
for(i=1;i<anims;i++){elem.animate({opacity:animateTo},duration,o.easing);animateTo=1-animateTo;}
elem.animate({opacity:animateTo},duration,o.easing);elem.queue(function(){if(hide){elem.hide();}
done();});if(queuelen>1){queue.splice.apply(queue,[1,0].concat(queue.splice(queuelen,anims+1)));}
elem.dequeue();};})(jQuery);(function($,undefined){$.effects.effect.puff=function(o,done){var elem=$(this),mode=$.effects.setMode(elem,o.mode||"hide"),hide=mode==="hide",percent=parseInt(o.percent,10)||150,factor=percent/100,original={height:elem.height(),width:elem.width(), outerHeight:elem.outerHeight(),outerWidth:elem.outerWidth()};$.extend(o,{effect:"scale",queue:false,fade:true,mode:mode,complete:done,percent:hide?percent:100,from:hide?original:{height:original.height*factor,width:original.width*factor,outerHeight:original.outerHeight*factor,outerWidth:original.outerWidth*factor}});elem.effect(o);};$.effects.effect.scale=function(o,done){var el=$(this),options=$.extend(true,{},o),mode=$.effects.setMode(el,o.mode||"effect"),percent=parseInt(o.percent,10)||(parseInt(o.percent,10)===0?0:(mode==="hide"?0:100)),direction=o.direction||"both",origin=o.origin,original={height:el.height(),width:el.width(),outerHeight:el.outerHeight(),outerWidth:el.outerWidth()},factor={y:direction!=="horizontal"?(percent/100):1,x:direction!=="vertical"?(percent/100):1};options.effect="size";options.queue=false;options.complete=done;if(mode!=="effect"){options.origin=origin||["middle","center"];options.restore=true;}
options.from=o.from||(mode==="show"?{height:0,width:0,outerHeight:0,outerWidth:0}:original);options.to={height:original.height*factor.y,width:original.width*factor.x,outerHeight:original.outerHeight*factor.y,outerWidth:original.outerWidth*factor.x};if(options.fade){if(mode==="show"){options.from.opacity=0;options.to.opacity=1;}
if(mode==="hide"){options.from.opacity=1;options.to.opacity=0;}}
el.effect(options);};$.effects.effect.size=function(o,done){var original,baseline,factor,el=$(this),props0=["position","top","bottom","left","right","width","height","overflow","opacity"],props1=["position","top","bottom","left","right","overflow","opacity"],props2=["width","height","overflow"],cProps=["fontSize"],vProps=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],hProps=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],mode=$.effects.setMode(el,o.mode||"effect"),restore=o.restore||mode!=="effect",scale=o.scale||"both",origin=o.origin||["middle","center"],position=el.css("position"),props=restore?props0:props1,zero={height:0,width:0,outerHeight:0,outerWidth:0};if(mode==="show"){el.show();}
original={height:el.height(),width:el.width(),outerHeight:el.outerHeight(),outerWidth:el.outerWidth()};if(o.mode==="toggle"&&mode==="show"){el.from=o.to||zero;el.to=o.from||original;}else{el.from=o.from||(mode==="show"?zero:original);el.to=o.to||(mode==="hide"?zero:original);}
factor={from:{y:el.from.height/original.height,x:el.from.width/original.width},to:{y:el.to.height/original.height,x:el.to.width/original.width}};if(scale==="box"||scale==="both"){if(factor.from.y!==factor.to.y){props=props.concat(vProps);el.from=$.effects.setTransition(el,vProps,factor.from.y,el.from);el.to=$.effects.setTransition(el,vProps,factor.to.y,el.to);}
if(factor.from.x!==factor.to.x){props=props.concat(hProps);el.from=$.effects.setTransition(el,hProps,factor.from.x,el.from);el.to=$.effects.setTransition(el,hProps,factor.to.x,el.to);}}
if( scale==="content"||scale==="both"){if(factor.from.y!==factor.to.y){props=props.concat(cProps).concat(props2);el.from=$.effects.setTransition(el,cProps,factor.from.y,el.from);el.to=$.effects.setTransition(el,cProps,factor.to.y,el.to);}}
$.effects.save(el,props);el.show();$.effects.createWrapper(el);el.css("overflow","hidden").css(el.from);if(origin){baseline=$.effects.getBaseline(origin,original);el.from.top=(original.outerHeight-el.outerHeight())*baseline.y;el.from.left=(original.outerWidth-el.outerWidth())*baseline.x;el.to.top=(original.outerHeight-el.to.outerHeight)*baseline.y;el.to.left=(original.outerWidth-el.to.outerWidth)*baseline.x;}
el.css(el.from);if(scale==="content"||scale==="both"){vProps=vProps.concat(["marginTop","marginBottom"]).concat(cProps);hProps=hProps.concat(["marginLeft","marginRight"]);props2=props0.concat(vProps).concat(hProps);el.find("*[width]").each(function(){var child=$(this),c_original={height:child.height(),width:child.width(),outerHeight:child.outerHeight(),outerWidth:child.outerWidth()};if(restore){$.effects.save(child,props2);}
child.from={height:c_original.height*factor.from.y,width:c_original.width*factor.from.x,outerHeight:c_original.outerHeight*factor.from.y,outerWidth:c_original.outerWidth*factor.from.x};child.to={height:c_original.height*factor.to.y,width:c_original.width*factor.to.x,outerHeight:c_original.height*factor.to.y,outerWidth:c_original.width*factor.to.x};if(factor.from.y!==factor.to.y){child.from=$.effects.setTransition(child,vProps,factor.from.y,child.from);child.to=$.effects.setTransition(child,vProps,factor.to.y,child.to);}
if(factor.from.x!==factor.to.x){child.from=$.effects.setTransition(child,hProps,factor.from.x,child.from);child.to=$.effects.setTransition(child,hProps,factor.to.x,child.to);}
child.css(child.from);child.animate(child.to,o.duration,o.easing,function(){if(restore){$.effects.restore(child,props2);}});});}
el.animate(el.to,{queue:false,duration:o.duration,easing:o.easing,complete:function(){if(el.to.opacity===0){el.css("opacity",el.from.opacity);}
if(mode==="hide"){el.hide();}
$.effects.restore(el,props);if(!restore){if(position==="static"){el.css({position:"relative",top:el.to.top,left:el.to.left});}else{$.each(["top","left"],function(idx,pos){el.css(pos,function(_,str){var val=parseInt(str,10),toRef=idx?el.to.left:el.to.top;if(str==="auto"){return toRef+"px";}
return val+toRef+"px";});});}}
$.effects.removeWrapper(el);done();}});};})(jQuery);(function($,undefined){$.effects.effect.shake=function(o,done){var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"effect"),direction=o.direction||"left",distance=o.distance||20,times=o.times||3,anims=times*2+1,speed=Math.round(o.duration/anims),ref=(direction==="up"||direction==="down")?"top":"left",positiveMotion=(direction==="up"||direction==="left"),animation={},animation1={},animation2={},i,queue=el.queue(),queuelen=queue.length;$.effects.save(el,props);el.show();$.effects.createWrapper(el);animation[ref]=(positiveMotion?"-=":"+=")+distance;animation1[ref]=(positiveMotion?"+=":"-=")+distance*2;animation2[ref]=(positiveMotion?"-=":"+=")+distance*2;el.animate(animation,speed,o.easing);for(i=1;i<times;i++){el.animate(animation1,speed,o.easing).animate(animation2,speed,o.easing);}
el
.animate(animation1,speed,o.easing)
.animate(animation,speed/2,o.easing)
.queue(function(){if(mode==="hide"){el.hide();}
$.effects.restore(el,props);$.effects.removeWrapper(el);done();});if(queuelen>1){queue.splice.apply(queue,[1,0].concat(queue.splice(queuelen,anims+1)));}
el.dequeue();};})(jQuery);(function($,undefined){$.effects.effect.slide=function(o,done){var el=$(this),props=["position","top","bottom","left","right","width","height"],mode=$.effects.setMode(el,o.mode||"show"),show=mode==="show",direction=o.direction||"left",ref=(direction==="up"||direction==="down")?"top":"left",positiveMotion=(direction==="up"||direction==="left"),distance,animation={};$.effects.save(el,props);el.show();distance=o.distance||el[ref==="top"?"outerHeight":"outerWidth"](true);$.effects.createWrapper(el).css({overflow:"hidden"});if(show){el.css(ref,positiveMotion?(isNaN(distance)?"-"+distance:-distance):distance);}
animation[ref]=(show?(positiveMotion?"+=":"-="):(positiveMotion?"-=":"+="))+
distance;el.animate(animation,{queue:false,duration:o.duration,easing:o.easing,complete:function(){if(mode==="hide"){el.hide();}
$.effects.restore(el,props);$.effects.removeWrapper(el);done();}});};})(jQuery);(function($,undefined){$.effects.effect.transfer=function(o,done){var elem=$(this),target=$(o.to),targetFixed=target.css("position")==="fixed",body=$("body"),fixTop=targetFixed?body.scrollTop():0,fixLeft=targetFixed?body.scrollLeft():0,endPosition=target.offset(),animation={top:endPosition.top-fixTop,left:endPosition.left-fixLeft,height:target.innerHeight(),width:target.innerWidth()},startPosition=elem.offset(),transfer=$("<div class='ui-effects-transfer'></div>")
.appendTo(document.body)
.addClass(o.className)
.css({top:startPosition.top-fixTop,left:startPosition.left-fixLeft,height:elem.innerHeight(),width:elem.innerWidth(),position:targetFixed?"fixed":"absolute"})
.animate(animation,o.duration,o.easing,function(){transfer.remove();done();});};})(jQuery);(function($,undefined){$.widget("ui.menu",{version:"1.10.0",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-carat-1-e"},menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element;this.mouseHandled=false;this.element
.uniqueId()
.addClass("ui-menu ui-widget ui-widget-content ui-corner-all")
.toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length)
.attr({role:this.options.role,tabIndex:0})//
.bind("click"+this.eventNamespace,$.proxy(function(event){if(this.options.disabled){event.preventDefault();}},this));if(this.options.disabled){this.element
.addClass("ui-state-disabled")
.attr("aria-disabled","true");}
this._on({"mousedown .ui-menu-item > a":function(event){event.preventDefault();},"click .ui-state-disabled > a":function(event){event.preventDefault();},"click .ui-menu-item:has(a)":function(event){var target=$(event.target).closest(".ui-menu-item");if(!this.mouseHandled&&target.not(".ui-state-disabled").length){this.mouseHandled=true;this.select(event);if(target.has(".ui-menu").length){this.expand(event);}else if(!this.element.is(":focus")){this.element.trigger("focus",[true]);if(this.active&&this.active.parents(".ui-menu").length===1){clearTimeout(this.timer);}}}},"mouseenter .ui-menu-item":function(event){var target=$(event.currentTarget);target.siblings().children(".ui-state-active").removeClass("ui-state-active");this.focus(event,target);},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(event,keepActiveItem){var item=this.active||this.element.children(".ui-menu-item").eq(0);if(!keepActiveItem){this.focus(event,item);}},blur:function(event){this._delay(function(){if(!$.contains(this.element[0],this.document[0].activeElement)){this.collapseAll(event);}});},keydown:"_keydown"});this.refresh();this._on(this.document,{click:function(event){if(!$(event.target).closest(".ui-menu").length){this.collapseAll(event);}
this.mouseHandled=false;}});},_destroy:function(){this.element
.removeAttr("aria-activedescendant")
.find(".ui-menu").addBack()
.removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons")
.removeAttr("role")
.removeAttr("tabIndex")
.removeAttr("aria-labelledby")
.removeAttr("aria-expanded")
.removeAttr("aria-hidden")
.removeAttr("aria-disabled")
.removeUniqueId()
.show();this.element.find(".ui-menu-item")
.removeClass("ui-menu-item")
.removeAttr("role")
.removeAttr("aria-disabled")
.children("a")
.removeUniqueId()
.removeClass("ui-corner-all ui-state-hover")
.removeAttr("tabIndex")
.removeAttr("role")
.removeAttr("aria-haspopup")
.children().each(function(){var elem=$(this);if(elem.data("ui-menu-submenu-carat")){elem.remove();}});this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");},_keydown:function(event){var match,prev,character,skip,regex,preventDefault=true;function escape(value){return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");}
switch(event.keyCode){case $.ui.keyCode.PAGE_UP:this.previousPage(event);break;case $.ui.keyCode.PAGE_DOWN:this.nextPage(event);break;case $.ui.keyCode.HOME:this._move("first","first",event);break;case $.ui.keyCode.END:this._move("last","last",event);break;case $.ui.keyCode.UP:this.previous(event);break;case $.ui.keyCode.DOWN:this.next(event);break;case $.ui.keyCode.LEFT:this.collapse(event);break;case $.ui.keyCode.RIGHT:if(this.active&&!this.active.is(".ui-state-disabled")){this.expand(event);}
break;case $.ui.keyCode.ENTER:case $.ui.keyCode.SPACE:this._activate(event);break;case $.ui.keyCode.ESCAPE:this.collapse(event);break;default:preventDefault=false;prev=this.previousFilter||"";character=String.fromCharCode(event.keyCode);skip=false;clearTimeout(this.filterTimer);if(character===prev){skip=true;}else{character=prev+character;}
regex=new RegExp("^"+escape(character),"i");match=this.activeMenu.children(".ui-menu-item").filter(function(){return regex.test($(this).children("a").text());});match=skip&&match.index(this.active.next())!==-1?this.active.nextAll(".ui-menu-item"):match;if(!match.length){character=String.fromCharCode(event.keyCode);regex=new RegExp("^"+escape(character),"i");match=this.activeMenu.children(".ui-menu-item").filter(function(){return regex.test($(this).children("a").text());});}
if(match.length){this.focus(event,match);if(match.length>1){this.previousFilter=character;this.filterTimer=this._delay(function(){delete this.previousFilter;},1000);}else{delete this.previousFilter;}}else{delete this.previousFilter;}}
if(preventDefault){event.preventDefault();}},_activate:function(event){if(!this.active.is(".ui-state-disabled")){if(this.active.children("a[aria-haspopup='true']").length){this.expand(event);}else{this.select(event);}}},refresh:function(){var menus,icon=this.options.icons.submenu,submenus=this.element.find(this.options.menus);submenus.filter(":not(.ui-menu)")
.addClass("ui-menu ui-widget ui-widget-content ui-corner-all")
.hide()
.attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"})
.each(function(){var menu=$(this),item=menu.prev("a"),submenuCarat=$("<span>")
.addClass("ui-menu-icon ui-icon "+icon)
.data("ui-menu-submenu-carat",true);item
.attr("aria-haspopup","true")
.prepend(submenuCarat);menu.attr("aria-labelledby",item.attr("id"));});menus=submenus.add(this.element);menus.children(":not(.ui-menu-item):has(a)")
.addClass("ui-menu-item")
.attr("role","presentation")
.children("a")
.uniqueId()
.addClass("ui-corner-all")
.attr({tabIndex:-1,role:this._itemRole()});menus.children(":not(.ui-menu-item)").each(function(){var item=$(this);if(!/[^\-—–\s]/.test(item.text())){item.addClass("ui-widget-content ui-menu-divider");}});menus.children(".ui-state-disabled").attr("aria-disabled","true");if(this.active&&!$.contains(this.element[0],this.active[0])){this.blur();}},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role];},_setOption:function(key,value){if(key==="icons"){this.element.find(".ui-menu-icon")
.removeClass(this.options.icons.submenu)
.addClass(value.submenu);}
this._super(key,value);},focus:function(event,item){var nested,focused;this.blur(event,event&&event.type==="focus");this._scrollIntoView(item);this.active=item.first();focused=this.active.children("a").addClass("ui-state-focus");if(this.options.role){this.element.attr("aria-activedescendant",focused.attr("id"));}
this.active
.parent()
.closest(".ui-menu-item")
.children("a:first")
.addClass("ui-state-active");if(event&&event.type==="keydown"){this._close();}else{this.timer=this._delay(function(){this._close();},this.delay);}
nested=item.children(".ui-menu");if(nested.length&&(/^mouse/.test(event.type))){this._startOpening(nested);}
this.activeMenu=item.parent();this._trigger("focus",event,{item:item});},_scrollIntoView:function(item){var borderTop,paddingTop,offset,scroll,elementHeight,itemHeight;if(this._hasScroll()){borderTop=parseFloat($.css(this.activeMenu[0],"borderTopWidth"))||0;paddingTop=parseFloat($.css(this.activeMenu[0],"paddingTop"))||0;offset=item.offset().top-this.activeMenu.offset().top-borderTop-paddingTop;scroll=this.activeMenu.scrollTop();elementHeight=this.activeMenu.height();itemHeight=item.height();if(offset<0){this.activeMenu.scrollTop(scroll+offset);}else if(offset+itemHeight>elementHeight){this.activeMenu.scrollTop(scroll+offset-elementHeight+itemHeight);}
}},blur:function(event,fromFocus){if(!fromFocus){clearTimeout(this.timer);}
if(!this.active){return;}
this.active.children("a").removeClass("ui-state-focus");this.active=null;this._trigger("blur",event,{item:this.active});},_startOpening:function(submenu){clearTimeout(this.timer);if(submenu.attr("aria-hidden")!=="true"){return;}
this.timer=this._delay(function(){this._close();this._open(submenu);},this.delay);},_open:function(submenu){var position=$.extend({of:this.active},this.options.position);clearTimeout(this.timer);this.element.find(".ui-menu").not(submenu.parents(".ui-menu"))
.hide()
.attr("aria-hidden","true");submenu
.show()
.removeAttr("aria-hidden")
.attr("aria-expanded","true")
.position(position);},collapseAll:function(event,all){clearTimeout(this.timer);this.timer=this._delay(function(){var currentMenu=all?this.element:$(event&&event.target).closest(this.element.find(".ui-menu"));if(!currentMenu.length){currentMenu=this.element;}
this._close(currentMenu);this.blur(event);this.activeMenu=currentMenu;},this.delay);},_close:function(startMenu){if(!startMenu){startMenu=this.active?this.active.parent():this.element;}
startMenu
.find(".ui-menu")
.hide()
.attr("aria-hidden","true")
.attr("aria-expanded","false")
.end()
.find("a.ui-state-active")
.removeClass("ui-state-active");},collapse:function(event){var newItem=this.active&&this.active.parent().closest(".ui-menu-item",this.element);if(newItem&&newItem.length){this._close();this.focus(event,newItem);}},expand:function(event){var newItem=this.active&&this.active
.children(".ui-menu ")
.children(".ui-menu-item")
.first();if(newItem&&newItem.length){this._open(newItem.parent());this._delay(function(){this.focus(event,newItem);});}},next:function(event){this._move("next","first",event);},previous:function(event){this._move("prev","last",event);},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length;},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length;},_move:function(direction,filter,event){var next;if(this.active){if(direction==="first"||direction==="last"){next=this.active[direction==="first"?"prevAll":"nextAll"](".ui-menu-item")
.eq(-1);}else{next=this.active[direction+"All"](".ui-menu-item")
.eq(0);}}
if(!next||!next.length||!this.active){next=this.activeMenu.children(".ui-menu-item")[filter]();}
this.focus(event,next);},nextPage:function(event){var item,base,height;if(!this.active){this.next(event);return;}
if(this.isLastItem()){return;}
if(this._hasScroll()){base=this.active.offset().top;height=this.element.height();this.active.nextAll(".ui-menu-item").each(function(){item=$(this);return item.offset().top-base-height<0;});this.focus(event,item);}else{this.focus(event,this.activeMenu.children(".ui-menu-item")[!this.active?"first":"last"]());}},previousPage:function(event){var item,base,height;if(!this.active){this.next(event);return;}
if(this.isFirstItem()){return;}
if(this._hasScroll()){base=this.active.offset().top;height=this.element.height();this.active.prevAll(".ui-menu-item").each(function(){item=$(this);return item.offset().top-base+height>0;});this.focus(event,item);}else{this.focus(event,this.activeMenu.children(".ui-menu-item").first());}},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight");},select:function(event){this.active=this.active||$(event.target).closest(".ui-menu-item");var ui={item:this.active};if(!this.active.has(".ui-menu").length){this.collapseAll(event,true);}
this._trigger("select",event,ui);}});}(jQuery));(function($,undefined){$.ui=$.ui||{};var cachedScrollbarWidth,max=Math.max,abs=Math.abs,round=Math.round,rhorizontal=/left|center|right/,rvertical=/top|center|bottom/,roffset=/[\+\-]\d+%?/,rposition=/^\w+/,rpercent=/%$/,_position=$.fn.position;function getOffsets(offsets,width,height){return[parseInt(offsets[0],10)*(rpercent.test(offsets[0])?width/100:1),parseInt(offsets[1],10)*(rpercent.test(offsets[1])?height/100:1)];}
function parseCss(element,property){return parseInt($.css(element,property),10)||0;}
function getDimensions(elem){var raw=elem[0];if(raw.nodeType===9){return{width:elem.width(),height:elem.height(),offset:{top:0,left:0}};}
if($.isWindow(raw)){return{width:elem.width(),height:elem.height(),offset:{top:elem.scrollTop(),left:elem.scrollLeft()}};}
if(raw.preventDefault){return{width:0,height:0,offset:{top:raw.pageY,left:raw.pageX}};}
return{width:elem.outerWidth(),height:elem.outerHeight(),offset:elem.offset()};}
$.position={scrollbarWidth:function(){if(cachedScrollbarWidth!==undefined){return cachedScrollbarWidth;}
var w1,w2,div=$("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),innerDiv=div.children()[0];$("body").append(div);w1=innerDiv.offsetWidth;div.css("overflow","scroll");w2=innerDiv.offsetWidth;if(w1===w2){w2=div[0].clientWidth;}
div.remove();return(cachedScrollbarWidth=w1-w2);},getScrollInfo:function(within){var overflowX=within.isWindow?"":within.element.css("overflow-x"),overflowY=within.isWindow?"":within.element.css("overflow-y"),hasOverflowX=overflowX==="scroll"||(overflowX==="auto"&&within.width<within.element[0].scrollWidth),hasOverflowY=overflowY==="scroll"||(overflowY==="auto"&&within.height<within.element[0].scrollHeight);return{width:hasOverflowX?$.position.scrollbarWidth():0,height:hasOverflowY?$.position.scrollbarWidth():0};},getWithinInfo:function(element){var withinElement=$(element||window),isWindow=$.isWindow(withinElement[0]);return{element:withinElement,isWindow:isWindow,offset:withinElement.offset()||{left:0,top:0},scrollLeft:withinElement.scrollLeft(),scrollTop:withinElement.scrollTop(),width:isWindow?withinElement.width():withinElement.outerWidth(),height:isWindow?withinElement.height():withinElement.outerHeight()};}};$.fn.position=function(options){if(!options||!options.of){return _position.apply(this,arguments);}//
options=$.extend({},options);var atOffset,targetWidth,targetHeight,targetOffset,basePosition,dimensions,target=$(options.of),within=$.position.getWithinInfo(options.within),scrollInfo=$.position.getScrollInfo(within),collision=(options.collision||"flip").split(" "),offsets={};dimensions=getDimensions(target);if(target[0].preventDefault){options.at="left top";}
targetWidth=dimensions.width;targetHeight=dimensions.height;targetOffset=dimensions.offset;basePosition=$.extend({},targetOffset);$.each(["my","at"],function(){var pos=(options[this]||"").split(" "),horizontalOffset,verticalOffset;if(pos.length===1){pos=rhorizontal.test(pos[0])?pos.concat(["center"]):rvertical.test(pos[0])?["center"].concat(pos):["center","center"];}
pos[0]=rhorizontal.test(pos[0])?pos[0]:"center";pos[1]=rvertical.test(pos[1])?pos[1]:"center";horizontalOffset=roffset.exec(pos[0]);verticalOffset=roffset.exec(pos[1]);offsets[this]=[horizontalOffset?horizontalOffset[0]:0,verticalOffset?verticalOffset[0]:0];options[this]=[rposition.exec(pos[0])[0],rposition.exec(pos[1])[0]];});if(collision.length===1){collision[1]=collision[0];}
if(options.at[0]==="right"){basePosition.left+=targetWidth;}else if(options.at[0]==="center"){basePosition.left+=targetWidth/2;}
if(options.at[1]==="bottom"){basePosition.top+=targetHeight;}else if(options.at[1]==="center"){basePosition.top+=targetHeight/2;}
atOffset=getOffsets(offsets.at,targetWidth,targetHeight);basePosition.left+=atOffset[0];basePosition.top+=atOffset[1];return this.each(function(){var collisionPosition,using,elem=$(this),elemWidth=elem.outerWidth(),elemHeight=elem.outerHeight(),marginLeft=parseCss(this,"marginLeft"),marginTop=parseCss(this,"marginTop"),collisionWidth=elemWidth+marginLeft+parseCss(this,"marginRight")+scrollInfo.width,collisionHeight=elemHeight+marginTop+parseCss(this,"marginBottom")+scrollInfo.height,position=$.extend({},basePosition),myOffset=getOffsets(offsets.my,elem.outerWidth(),elem.outerHeight());if(options.my[0]==="right"){position.left-=elemWidth;}else if(options.my[0]==="center"){position.left-=elemWidth/2;}
if(options.my[1]==="bottom"){position.top-=elemHeight;}else if(options.my[1]==="center"){position.top-=elemHeight/2;}
position.left+=myOffset[0];position.top+=myOffset[1];if(!$.support.offsetFractions){position.left=round(position.left);position.top=round(position.top);}
collisionPosition={marginLeft:marginLeft,marginTop:marginTop};$.each(["left","top"],function(i,dir){if($.ui.position[collision[i]]){$.ui.position[collision[i]][dir](position,{targetWidth:targetWidth,targetHeight:targetHeight,elemWidth:elemWidth,elemHeight:elemHeight,collisionPosition:collisionPosition,collisionWidth:collisionWidth,collisionHeight:collisionHeight,offset:[atOffset[0]+myOffset[0],atOffset[1]+myOffset[1]],my:options.my,at:options.at,within:within,elem:elem});}});if(options.using){using=function(props){var left=targetOffset.left-position.left,right=left+targetWidth-elemWidth,top=targetOffset.top-position.top,bottom=top+targetHeight-elemHeight,feedback={target:{element:target,left:targetOffset.left,top:targetOffset.top,width:targetWidth,height:targetHeight},element:{element:elem,left:position.left,top:position.top,width:elemWidth,height:elemHeight},horizontal:right<0?"left":left>0?"right":"center",vertical:bottom<0?"top":top>0?"bottom":"middle"};if(targetWidth<elemWidth&&abs(left+right)<targetWidth){feedback.horizontal="center";}
if(targetHeight<elemHeight&&abs(top+bottom)<targetHeight){feedback.vertical="middle";}
if(max(abs(left),abs(right))>max(abs(top),abs(bottom))){feedback.important="horizontal";}else{feedback.important="vertical";}
options.using.call(this,props,feedback);};}
elem.offset($.extend(position,{using:using}));});};$.ui.position={fit:{left:function(position,data){var within=data.within,withinOffset=within.isWindow?within.scrollLeft:within.offset.left,outerWidth=within.width,collisionPosLeft=position.left-data.collisionPosition.marginLeft,overLeft=withinOffset-collisionPosLeft,overRight=collisionPosLeft+data.collisionWidth-outerWidth-withinOffset,newOverRight;if(data.collisionWidth>outerWidth){if(overLeft>0&&overRight<=0){newOverRight=position.left+overLeft+data.collisionWidth-outerWidth-withinOffset;position.left+=overLeft -newOverRight;}else if(overRight>0&&overLeft<=0){position.left=withinOffset;}else{if(overLeft>overRight){position.left=withinOffset+outerWidth-data.collisionWidth;}else{position.left=withinOffset;}}}else if(overLeft>0){position.left+=overLeft;}else if(overRight>0){position.left-=overRight;}else{position.left=max(position.left-collisionPosLeft,position.left);}},top:function(position,data){var within=data.within,withinOffset=within.isWindow?within.scrollTop:within.offset.top,outerHeight=data.within.height,collisionPosTop=position.top-data.collisionPosition.marginTop,overTop=withinOffset-collisionPosTop,overBottom=collisionPosTop+data.collisionHeight-outerHeight-withinOffset,newOverBottom;if(data.collisionHeight>outerHeight){if(overTop>0&&overBottom<=0){newOverBottom=position.top+overTop+data.collisionHeight-outerHeight-withinOffset;position.top+=overTop-newOverBottom;}else if(overBottom>0&&overTop<=0){position.top=withinOffset;}else{if(overTop>overBottom){position.top=withinOffset+outerHeight-data.collisionHeight;}else{position.top=withinOffset;}}}else if(overTop>0){position.top+=overTop;}else if(overBottom>0){position.top-=overBottom;}else{position.top=max(position.top-collisionPosTop,position.top);}}},flip:{left:function(position,data){var within=data.within,withinOffset=within.offset.left+within.scrollLeft,outerWidth=within.width,offsetLeft=within.isWindow?within.scrollLeft:within.offset.left,collisionPosLeft=position.left-data.collisionPosition.marginLeft,overLeft=collisionPosLeft-offsetLeft,overRight=collisionPosLeft+data.collisionWidth-outerWidth-offsetLeft,myOffset=data.my[0]==="left"?-data.elemWidth:data.my[0]==="right"?data.elemWidth:0,atOffset=data.at[0]==="left"?data.targetWidth:data.at[0]==="right"?-data.targetWidth:0,offset=-2*data.offset[0],newOverRight,newOverLeft;if(overLeft<0){newOverRight=position.left+myOffset+atOffset+offset+data.collisionWidth-outerWidth-withinOffset;if(newOverRight<0||newOverRight<abs(overLeft)){position.left+=myOffset+atOffset+offset;}}
else if(overRight>0){newOverLeft=position.left-data.collisionPosition.marginLeft+myOffset+atOffset+offset-offsetLeft;if(newOverLeft>0||abs(newOverLeft)<overRight){position.left+=myOffset+atOffset+offset;}}},top:function(position,data){var within=data.within,withinOffset=within.offset.top+within.scrollTop,outerHeight=within.height,offsetTop=within.isWindow?within.scrollTop:within.offset.top,collisionPosTop=position.top-data.collisionPosition.marginTop,overTop=collisionPosTop-offsetTop,overBottom=collisionPosTop+data.collisionHeight-outerHeight-offsetTop,top=data.my[1]==="top",myOffset=top?-data.elemHeight:data.my[1]==="bottom"?data.elemHeight:0, atOffset=data.at[1]==="top"?data.targetHeight:data.at[1]==="bottom"?-data.targetHeight:0,offset=-2*data.offset[1],newOverTop,newOverBottom;if(overTop<0){newOverBottom=position.top+myOffset+atOffset+offset+data.collisionHeight-outerHeight-withinOffset;if((position.top+myOffset+atOffset+offset)>overTop&&(newOverBottom<0||newOverBottom<abs(overTop))){position.top+=myOffset+atOffset+offset;}}
else if(overBottom>0){newOverTop=position.top-data.collisionPosition.marginTop+myOffset+atOffset+offset-offsetTop;if((position.top+myOffset+atOffset+offset)>overBottom&&(newOverTop>0||abs(newOverTop)<overBottom)){position.top+=myOffset+atOffset+offset;}}}},flipfit:{left:function(){$.ui.position.flip.left.apply(this,arguments);$.ui.position.fit.left.apply(this,arguments);},top:function(){$.ui.position.flip.top.apply(this,arguments);$.ui.position.fit.top.apply(this,arguments);}}};(function(){var testElement,testElementParent,testElementStyle,offsetLeft,i,body=document.getElementsByTagName("body")[0],div=document.createElement("div");testElement=document.createElement(body?"div":"body");testElementStyle={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"};if(body){$.extend(testElementStyle,{position:"absolute",left:"-1000px",top:"-1000px"});}
for(i in testElementStyle){testElement.style[i]=testElementStyle[i];}
testElement.appendChild(div);testElementParent=body||document.documentElement;testElementParent.insertBefore(testElement,testElementParent.firstChild);div.style.cssText="position: absolute; left: 10.7432222px;";offsetLeft=$(div).offset().left;$.support.offsetFractions=offsetLeft>10&&offsetLeft<11;testElement.innerHTML="";testElementParent.removeChild(testElement);})();}(jQuery));(function($,undefined){$.widget("ui.progressbar",{version:"1.10.0",options:{max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue();this.element
.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all")
.attr({role:"progressbar","aria-valuemin":this.min});this.valueDiv=$("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>")
.appendTo(this.element);this._refreshValue();},_destroy:function(){this.element
.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all")
.removeAttr("role")
.removeAttr("aria-valuemin")
.removeAttr("aria-valuemax")
.removeAttr("aria-valuenow");this.valueDiv.remove();},value:function(newValue){if(newValue===undefined){return this.options.value;}
this.options.value=this._constrainedValue(newValue);this._refreshValue();},_constrainedValue:function(newValue){if(newValue===undefined){newValue=this.options.value;}
this.indeterminate=newValue===false;if(typeof newValue!=="number"){newValue=0;}
return this.indeterminate?false:Math.min(this.options.max,Math.max(this.min,newValue));},_setOptions:function(options){var value=options.value;delete options.value;this._super(options);this.options.value=this._constrainedValue(value);this._refreshValue();},_setOption:function(key,value){if(key==="max"){value=Math.max(this.min,value);}
this._super(key,value);},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min);},_refreshValue:function(){var value=this.options.value,percentage=this._percentage();this.valueDiv
.toggle(this.indeterminate||value>this.min)
.toggleClass("ui-corner-right",value===this.options.max)
.width(percentage.toFixed(0)+"%");this.element.toggleClass("ui-progressbar-indeterminate",this.indeterminate);if(this.indeterminate){this.element.removeAttr("aria-valuenow");if(!this.overlayDiv){this.overlayDiv=$("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv);}}else{this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":value});if(this.overlayDiv){this.overlayDiv.remove();this.overlayDiv=null;}}
if(this.oldValue!==value){this.oldValue=value;this._trigger("change");}
if(value===this.options.max){this._trigger("complete");}}});})(jQuery);(function($,undefined){var numPages=5;$.widget("ui.slider",$.ui.mouse,{version:"1.10.0",widgetEventPrefix:"slide",options:{animate:false,distance:0,max:100,min:0,orientation:"horizontal",range:false,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},_create:function(){var i,handleCount,o=this.options,existingHandles=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),handle="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",handles=[];this._keySliding=false;this._mouseSliding=false; this._animateOff=true;this._handleIndex=null;this._detectOrientation();this._mouseInit();this.element
.addClass("ui-slider"+
" ui-slider-"+this.orientation+
" ui-widget"+
" ui-widget-content"+
" ui-corner-all");this.range=$([]);if(o.range){if(o.range===true){if(!o.values){o.values=[this._valueMin(),this._valueMin()];}else if(o.values.length&&o.values.length!==2){o.values=[o.values[0],o.values[0]];}else if($.isArray(o.values)){o.values=o.values.slice(0);}}
this.range=$("<div></div>")
.appendTo(this.element)
.addClass("ui-slider-range"+
" ui-widget-header"+((o.range==="min"||o.range==="max")?" ui-slider-range-"+o.range:""));}
handleCount=(o.values&&o.values.length)||1;for(i=existingHandles.length;i<handleCount;i++){handles.push(handle);}
this.handles=existingHandles.add($(handles.join("")).appendTo(this.element));this.handle=this.handles.eq(0);this.handles.add(this.range).filter("a")
.click(function(event){event.preventDefault();})
.mouseenter(function(){if(!o.disabled){$(this).addClass("ui-state-hover");}})
.mouseleave(function(){$(this).removeClass("ui-state-hover");})
.focus(function(){if(!o.disabled){$(".ui-slider .ui-state-focus").removeClass("ui-state-focus");$(this).addClass("ui-state-focus");}else{$(this).blur();}})
.blur(function(){$(this).removeClass("ui-state-focus");});this.handles.each(function(i){$(this).data("ui-slider-handle-index",i);});this._setOption("disabled",o.disabled);this._on(this.handles,this._handleEvents);this._refreshValue();this._animateOff=false;},_destroy:function(){this.handles.remove();this.range.remove();this.element
.removeClass("ui-slider"+
" ui-slider-horizontal"+
" ui-slider-vertical"+
" ui-widget"+
" ui-widget-content"+
" ui-corner-all");this._mouseDestroy();},_mouseCapture:function(event){var position,normValue,distance,closestHandle,index,allowed,offset,mouseOverHandle,that=this,o=this.options;if(o.disabled){return false;}
this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()};this.elementOffset=this.element.offset();position={x:event.pageX,y:event.pageY};normValue=this._normValueFromMouse(position);distance=this._valueMax()-this._valueMin()+1;this.handles.each(function(i){var thisDistance=Math.abs(normValue-that.values(i));if((distance>thisDistance)||(distance===thisDistance&&(i===that._lastChangedValue||that.values(i)===o.min))){distance=thisDistance;closestHandle=$(this);index=i;}});allowed=this._start(event,index);if(allowed===false){return false;}
this._mouseSliding=true;this._handleIndex=index;closestHandle
.addClass("ui-state-active")
.focus();offset=closestHandle.offset();mouseOverHandle=!$(event.target).parents().addBack().is(".ui-slider-handle");this._clickOffset=mouseOverHandle?{left:0,top:0}:{left:event.pageX-offset.left-(closestHandle.width()/2),top:event.pageY-offset.top-(closestHandle.height()/2)-(parseInt(closestHandle.css("borderTopWidth"),10)||0)-(parseInt(closestHandle.css("borderBottomWidth"),10)||0)+(parseInt(closestHandle.css("marginTop"),10)||0)};if(!this.handles.hasClass("ui-state-hover")){this._slide(event,index,normValue);}
this._animateOff=true;return true;},_mouseStart:function(){return true;},_mouseDrag:function(event){var position={x:event.pageX,y:event.pageY},normValue=this._normValueFromMouse(position);this._slide(event,this._handleIndex,normValue);return false;},_mouseStop:function(event){this.handles.removeClass("ui-state-active");this._mouseSliding=false;this._stop(event,this._handleIndex);this._change(event,this._handleIndex);this._handleIndex=null;this._clickOffset=null;this._animateOff=false;return false;},_detectOrientation:function(){this.orientation=(this.options.orientation==="vertical")?"vertical":"horizontal";},_normValueFromMouse:function(position){var pixelTotal,pixelMouse,percentMouse,valueTotal,valueMouse;if(this.orientation==="horizontal"){pixelTotal=this.elementSize.width;pixelMouse=position.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0);}else{pixelTotal=this.elementSize.height;pixelMouse=position.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0);}
percentMouse=(pixelMouse/pixelTotal);if(percentMouse>1){percentMouse=1;}
if(percentMouse<0){percentMouse=0;}
if(this.orientation==="vertical"){percentMouse=1-percentMouse;}
valueTotal=this._valueMax()-this._valueMin();valueMouse=this._valueMin()+percentMouse*valueTotal;return this._trimAlignValue(valueMouse);},_start:function(event,index){var uiHash={handle:this.handles[index],value:this.value()};if(this.options.values&&this.options.values.length){uiHash.value=this.values(index);uiHash.values=this.values();}
return this._trigger("start",event,uiHash);},_slide:function(event,index,newVal){var otherVal,newValues,allowed;if(this.options.values&&this.options.values.length){otherVal =this.values(index?0:1);if((this.options.values.length===2&&this.options.range===true)&&((index===0&&newVal>otherVal)||(index===1&&newVal<otherVal))){newVal=otherVal;}
if(newVal!==this.values(index)){newValues=this.values();newValues[index]=newVal;allowed=this._trigger("slide",event,{handle:this.handles[index],value:newVal,values:newValues});otherVal=this.values(index?0:1);if(allowed!==false){this.values(index,newVal,true);}}}else{if(newVal!==this.value()){allowed=this._trigger("slide",event,{handle:this.handles[index],value:newVal});if(allowed!==false){this.value(newVal);}}}},_stop:function(event,index){var uiHash={handle:this.handles[index],value:this.value()};if(this.options.values&&this.options.values.length){uiHash.value=this.values(index);uiHash.values=this.values();}
this._trigger("stop",event,uiHash);},_change:function(event,index){if(!this._keySliding&&!this._mouseSliding){var uiHash={handle:this.handles[index],value:this.value()};if(this.options.values&&this.options.values.length){uiHash.value=this.values(index);uiHash.values=this.values();}
this._lastChangedValue=index;this._trigger("change",event,uiHash);}},value:function(newValue){if(arguments.length){this.options.value=this._trimAlignValue(newValue);this._refreshValue();this._change(null,0);return;}
return this._value();},values:function(index,newValue){var vals,newValues,i;if(arguments.length>1){this.options.values[index]=this._trimAlignValue(newValue);this._refreshValue();this._change(null,index);return;}
if(arguments.length){if($.isArray(arguments[0])){vals=this.options.values;newValues=arguments[0];for(i=0;i<vals.length;i+=1){vals[i]=this._trimAlignValue(newValues[i]);this._change(null,i);}
this._refreshValue();}else{if(this.options.values&&this.options.values.length){return this._values(index);}else{return this.value();}}}else{return this._values();}},_setOption:function(key,value){var i,valsLength=0;if($.isArray(this.options.values)){valsLength=this.options.values.length;}
$.Widget.prototype._setOption.apply(this,arguments);switch(key){case "disabled":if(value){this.handles.filter(".ui-state-focus").blur();this.handles.removeClass("ui-state-hover");this.handles.prop("disabled",true);}else{this.handles.prop("disabled",false);}
break;case "orientation":this._detectOrientation();this.element
.removeClass("ui-slider-horizontal ui-slider-vertical")
.addClass("ui-slider-"+this.orientation);this._refreshValue();break;case "value":this._animateOff=true;this._refreshValue();this._change(null,0);this._animateOff=false;break;case "values":this._animateOff=true;this._refreshValue();for(i=0;i<valsLength;i+=1){this._change(null,i);}
this._animateOff=false;break;case "min":case "max":this._animateOff=true;this._refreshValue();this._animateOff=false;break;}},_value:function(){var val=this.options.value;val=this._trimAlignValue(val);return val;},_values:function(index){var val,vals,i;if(arguments.length){val=this.options.values[index];val=this._trimAlignValue(val);return val;}else{vals=this.options.values.slice();for(i=0;i<vals.length;i+=1){vals[i]=this._trimAlignValue(vals[i]);}
return vals;}},_trimAlignValue:function(val){if(val<=this._valueMin()){return this._valueMin();}
if(val>=this._valueMax()){return this._valueMax();}
var step=(this.options.step>0)?this.options.step:1,valModStep=(val-this._valueMin())%step,alignValue=val-valModStep;if(Math.abs(valModStep)*2>=step){alignValue+=(valModStep>0)?step:(-step);}
return parseFloat(alignValue.toFixed(5));},_valueMin:function(){return this.options.min;},_valueMax:function(){return this.options.max;},_refreshValue:function(){var lastValPercent,valPercent,value,valueMin,valueMax,oRange=this.options.range,o=this.options,that=this,animate=(!this._animateOff)?o.animate:false,_set={};if(this.options.values&&this.options.values.length){this.handles.each(function(i){valPercent=(that.values(i)-that._valueMin())/(that._valueMax()-that._valueMin())*100;_set[that.orientation==="horizontal"?"left":"bottom"]=valPercent+"%";$(this).stop(1,1)[animate?"animate":"css"](_set,o.animate);if(that.options.range===true){if(that.orientation==="horizontal"){if(i===0){that.range.stop(1,1)[animate?"animate":"css"]({left:valPercent+"%"},o.animate);}
if(i===1){that.range[animate?"animate":"css"]({width:(valPercent-lastValPercent)+"%"},{queue:false,duration:o.animate});}}else{if(i===0){that.range.stop(1,1)[animate?"animate":"css"]({bottom:(valPercent)+"%"},o.animate);}
if(i===1){that.range[animate?"animate":"css"]({height:(valPercent-lastValPercent)+"%"},{queue:false,duration:o.animate});}}}
lastValPercent=valPercent;});}else{value=this.value();valueMin=this._valueMin();valueMax=this._valueMax();valPercent=(valueMax!==valueMin)?(value-valueMin)/(valueMax-valueMin)*100:0;_set[this.orientation==="horizontal"?"left":"bottom"]=valPercent+"%";this.handle.stop(1,1)[animate?"animate":"css"](_set,o.animate);if(oRange==="min"&&this.orientation==="horizontal"){this.range.stop(1,1)[animate?"animate":"css"]({width:valPercent+"%"},o.animate);}
if(oRange==="max"&&this.orientation==="horizontal"){this.range[animate?"animate":"css"]({width:(100-valPercent)+"%"},{queue:false,duration:o.animate});}
if(oRange==="min"&&this.orientation==="vertical"){this.range.stop(1,1)[animate?"animate":"css"]({height:valPercent+"%"},o.animate);}
if(oRange==="max"&&this.orientation==="vertical"){this.range[animate?"animate":"css"]({height:(100-valPercent)+"%"},{queue:false,duration:o.animate});}}},_handleEvents:{keydown:function(event){var allowed,curVal,newVal,step,index=$(event.target).data("ui-slider-handle-index");switch(event.keyCode){case $.ui.keyCode.HOME:case $.ui.keyCode.END:case $.ui.keyCode.PAGE_UP:case $.ui.keyCode.PAGE_DOWN:case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:event.preventDefault();if(!this._keySliding){this._keySliding=true;$(event.target).addClass("ui-state-active");allowed=this._start(event,index);if(allowed===false){return;}}
break;}
step=this.options.step;if(this.options.values&&this.options.values.length){curVal=newVal=this.values(index);}else{curVal=newVal=this.value();}
switch(event.keyCode){case $.ui.keyCode.HOME:newVal=this._valueMin();break;case $.ui.keyCode.END:newVal=this._valueMax();break;case $.ui.keyCode.PAGE_UP:newVal=this._trimAlignValue(curVal+((this._valueMax()-this._valueMin())/numPages));break;case $.ui.keyCode.PAGE_DOWN:newVal=this._trimAlignValue(curVal-((this._valueMax()-this._valueMin())/numPages));break;case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:if(curVal===this._valueMax()){return;}
newVal=this._trimAlignValue(curVal+step);break;case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:if(curVal===this._valueMin()){return;}
newVal=this._trimAlignValue(curVal-step);break;}
this._slide(event,index,newVal);},keyup:function(event){var index=$(event.target).data("ui-slider-handle-index");if(this._keySliding){this._keySliding=false;this._stop(event,index);this._change(event,index);$(event.target).removeClass("ui-state-active");}}}});}(jQuery));(function($){function modifier(fn){return function(){ var previous=this.element.val();fn.apply(this,arguments);this._refresh();if(previous!==this.element.val()){this._trigger("change");}};}
$.widget("ui.spinner",{version:"1.10.0",defaultElement:"<input>",widgetEventPrefix:"spin",options:{culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:true,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max);this._setOption("min",this.options.min);this._setOption("step",this.options.step);this._value(this.element.val(),true);this._draw();this._on(this._events);this._refresh();this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete");}});},_getCreateOptions:function(){var options={},element=this.element;$.each(["min","max","step"],function(i,option){var value=element.attr(option);if(value!==undefined&&value.length){options[option]=value;}});return options;},_events:{keydown:function(event){if(this._start(event)&&this._keydown(event)){event.preventDefault();}},keyup:"_stop",focus:function(){this.previous=this.element.val();},blur:function(event){if(this.cancelBlur){delete this.cancelBlur;return;}
this._refresh();if(this.previous!==this.element.val()){this._trigger("change",event);}},mousewheel:function(event,delta){if(!delta){return;}
 if(!this.spinning&&!this._start(event)){return false;}
this._spin((delta>0?1:-1)*this.options.step,event);clearTimeout(this.mousewheelTimer);this.mousewheelTimer=this._delay(function(){if(this.spinning){this._stop(event);}},100);event.preventDefault();},"mousedown .ui-spinner-button":function(event){var previous;previous=this.element[0]===this.document[0].activeElement?this.previous:this.element.val();function checkFocus(){var isActive=this.element[0]===this.document[0].activeElement;if(!isActive){this.element.focus();this.previous=previous;this._delay(function(){this.previous=previous;});}}
event.preventDefault();checkFocus.call(this);this.cancelBlur=true;this._delay(function(){delete this.cancelBlur;checkFocus.call(this);});if(this._start(event)===false){return;}
this._repeat(null,$(event.currentTarget).hasClass("ui-spinner-up")?1:-1,event);},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(event){//
if(!$(event.currentTarget).hasClass("ui-state-active")){return;}
if(this._start(event)===false){return false;}
this._repeat(null,$(event.currentTarget).hasClass("ui-spinner-up")?1:-1,event);},"mouseleave .ui-spinner-button":"_stop"},_draw:function(){var uiSpinner=this.uiSpinner=this.element
.addClass("ui-spinner-input")
.attr("autocomplete","off")
.wrap(this._uiSpinnerHtml())
.parent()
.append(this._buttonHtml());this.element.attr("role","spinbutton");this.buttons=uiSpinner.find(".ui-spinner-button")
.attr("tabIndex",-1)
.button()
.removeClass("ui-corner-all");if(this.buttons.height()>Math.ceil(uiSpinner.height()*0.5)&&uiSpinner.height()>0){uiSpinner.height(uiSpinner.height());}
if(this.options.disabled){this.disable();}},_keydown:function(event){var options=this.options,keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.UP:this._repeat(null,1,event);return true;case keyCode.DOWN:this._repeat(null,-1,event);return true;case keyCode.PAGE_UP:this._repeat(null,options.page,event);return true;case keyCode.PAGE_DOWN:this._repeat(null,-options.page,event);return true;}
return false;},_uiSpinnerHtml:function(){return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";},_buttonHtml:function(){return ""+
"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>"+
"<span class='ui-icon "+this.options.icons.up+"'>&#9650;</span>"+
"</a>"+
"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>"+
"<span class='ui-icon "+this.options.icons.down+"'>&#9660;</span>"+
"</a>";},_start:function(event){if(!this.spinning&&this._trigger("start",event)===false){return false;}
if(!this.counter){this.counter=1;}
this.spinning=true;return true;},_repeat:function(i,steps,event){i=i||500;clearTimeout(this.timer);this.timer=this._delay(function(){this._repeat(40,steps,event);},i);this._spin(steps*this.options.step,event);},_spin:function(step,event){var value=this.value()||0;if(!this.counter){this.counter=1;}
value=this._adjustValue(value+step*this._increment(this.counter));if(!this.spinning||this._trigger("spin",event,{value:value})!==false){this._value(value);this.counter++;}},_increment:function(i){var incremental=this.options.incremental;if(incremental){return $.isFunction(incremental)?incremental(i):Math.floor(i*i*i/50000-i*i/500+17*i/200+1);}
return 1;},_precision:function(){var precision=this._precisionOf(this.options.step);if(this.options.min!==null){precision=Math.max(precision,this._precisionOf(this.options.min));}
return precision;},_precisionOf:function(num){var str=num.toString(),decimal=str.indexOf(".");return decimal===-1?0:str.length-decimal-1;},_adjustValue:function(value){var base,aboveMin,options=this.options;base=options.min!==null?options.min:0;aboveMin=value-base;aboveMin=Math.round(aboveMin/options.step)*options.step;value=base+aboveMin;//
value=parseFloat(value.toFixed(this._precision()));if(options.max!==null&&value>options.max){return options.max;}
if(options.min!==null&&value<options.min){return options.min;}
return value;},_stop:function(event){if(!this.spinning){return;}
clearTimeout(this.timer);clearTimeout(this.mousewheelTimer);this.counter=0;this.spinning=false;this._trigger("stop",event);},_setOption:function(key,value){if(key==="culture"||key==="numberFormat"){var prevValue=this._parse(this.element.val());this.options[key]=value;this.element.val(this._format(prevValue));return;}
if(key==="max"||key==="min"||key==="step"){if(typeof value==="string"){value=this._parse(value);}}
if(key==="icons"){this.buttons.first().find(".ui-icon")
.removeClass(this.options.icons.up)
.addClass(value.up);this.buttons.last().find(".ui-icon")
.removeClass(this.options.icons.down)
.addClass(value.down);}
this._super(key,value);if(key==="disabled"){if(value){this.element.prop("disabled",true);this.buttons.button("disable");}else{this.element.prop("disabled",false);this.buttons.button("enable");}}},_setOptions:modifier(function(options){this._super(options);this._value(this.element.val());}),_parse:function(val){if(typeof val==="string"&&val!==""){val=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(val,10,this.options.culture):+val;}
return val===""||isNaN(val)?null:val;},_format:function(value){if(value===""){return "";}
return window.Globalize&&this.options.numberFormat?Globalize.format(value,this.options.numberFormat,this.options.culture):value;},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())});},_value:function(value,allowAny){var parsed;if(value!==""){parsed=this._parse(value);if(parsed!==null){if(!allowAny){parsed=this._adjustValue(parsed);}
value=this._format(parsed);}}
this.element.val(value);this._refresh();},_destroy:function(){this.element
.removeClass("ui-spinner-input")
.prop("disabled",false)
.removeAttr("autocomplete")
.removeAttr("role")
.removeAttr("aria-valuemin")
.removeAttr("aria-valuemax")
.removeAttr("aria-valuenow");this.uiSpinner.replaceWith(this.element);},stepUp:modifier(function(steps){this._stepUp(steps);}),_stepUp:function(steps){if(this._start()){this._spin((steps||1)*this.options.step);this._stop();}},stepDown:modifier(function(steps){this._stepDown(steps);}),_stepDown:function(steps){if(this._start()){this._spin((steps||1)*-this.options.step);this._stop();}},pageUp:modifier(function(pages){this._stepUp((pages||1)*this.options.page);}),pageDown:modifier(function(pages){this._stepDown((pages||1)*this.options.page);}),value:function(newVal){if(!arguments.length){return this._parse(this.element.val());}
modifier(this._value).call(this,newVal);},widget:function(){return this.uiSpinner;}});}(jQuery));(function($,undefined){var tabId=0,rhash=/#.*$/;function getNextTabId(){return++tabId;}
function isLocal(anchor){return anchor.hash.length>1&&decodeURIComponent(anchor.href.replace(rhash,""))===decodeURIComponent(location.href.replace(rhash,""));}
$.widget("ui.tabs",{version:"1.10.0",delay:300,options:{active:null,collapsible:false,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_create:function(){var that=this,options=this.options;this.running=false;this.element
.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all")
.toggleClass("ui-tabs-collapsible",options.collapsible)
.delegate(".ui-tabs-nav > li","mousedown"+this.eventNamespace,function(event){if($(this).is(".ui-state-disabled")){event.preventDefault();}})
.delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){if($(this).closest("li").is(".ui-state-disabled")){this.blur();}});this._processTabs();options.active=this._initialActive();if($.isArray(options.disabled)){options.disabled=$.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"),function(li){return that.tabs.index(li);}))).sort();}
if(this.options.active!==false&&this.anchors.length){this.active=this._findActive(options.active);}else{this.active=$();}
this._refresh();if(this.active.length){this.load(options.active);}},_initialActive:function(){var active=this.options.active,collapsible=this.options.collapsible,locationHash=location.hash.substring(1);if(active===null){if(locationHash){this.tabs.each(function(i,tab){if($(tab).attr("aria-controls")===locationHash){active=i;return false;}});}
if(active===null){active=this.tabs.index(this.tabs.filter(".ui-tabs-active"));}
if(active===null||active===-1){active=this.tabs.length?0:false;}}
if(active!==false){active=this.tabs.index(this.tabs.eq(active));if(active===-1){active=collapsible?false:0;}}
if(!collapsible&&active===false&&this.anchors.length){active=0;}
return active;},_getCreateEventData:function(){return{tab:this.active,panel:!this.active.length?$():this._getPanelForTab(this.active)};},_tabKeydown:function(event){var focusedTab=$(this.document[0].activeElement).closest("li"),selectedIndex=this.tabs.index(focusedTab),goingForward=true;if(this._handlePageNav(event)){return;}
switch(event.keyCode){case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:selectedIndex++;break;case $.ui.keyCode.UP:case $.ui.keyCode.LEFT:goingForward=false;selectedIndex--;break;case $.ui.keyCode.END:selectedIndex=this.anchors.length-1;break;case $.ui.keyCode.HOME:selectedIndex=0;break;case $.ui.keyCode.SPACE:event.preventDefault();clearTimeout(this.activating);this._activate(selectedIndex);return;case $.ui.keyCode.ENTER:event.preventDefault();clearTimeout(this.activating);this._activate(selectedIndex===this.options.active?false:selectedIndex);return;default:return;}
event.preventDefault();clearTimeout(this.activating);selectedIndex=this._focusNextTab(selectedIndex,goingForward);if(!event.ctrlKey){focusedTab.attr("aria-selected","false");this.tabs.eq(selectedIndex).attr("aria-selected","true");this.activating=this._delay(function(){this.option("active",selectedIndex);},this.delay);}},_panelKeydown:function(event){if(this._handlePageNav(event)){return;}
if(event.ctrlKey&&event.keyCode===$.ui.keyCode.UP){event.preventDefault();this.active.focus();}},_handlePageNav:function(event){if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_UP){this._activate(this._focusNextTab(this.options.active-1,false));return true;}
if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_DOWN){this._activate(this._focusNextTab(this.options.active+1,true));return true;}},_findNextTab:function(index,goingForward){var lastTabIndex=this.tabs.length-1;function constrain(){if(index>lastTabIndex){index=0;}
if(index<0){index=lastTabIndex;}
return index;}
while($.inArray(constrain(),this.options.disabled)!==-1){index=goingForward?index+1:index -1;}
return index;},_focusNextTab:function(index,goingForward){index=this._findNextTab(index,goingForward);this.tabs.eq(index).focus();return index;},_setOption:function(key,value){if(key==="active"){this._activate(value);return;}
if(key==="disabled"){this._setupDisabled(value);return;}
this._super(key,value);if(key==="collapsible"){this.element.toggleClass("ui-tabs-collapsible",value);if(!value&&this.options.active===false){this._activate(0);}}
if(key==="event"){this._setupEvents(value);}
if(key==="heightStyle"){this._setupHeightStyle(value);}},_tabId:function(tab){return tab.attr("aria-controls")||"ui-tabs-"+getNextTabId();},_sanitizeSelector:function(hash){return hash?hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):"";},refresh:function(){var options=this.options,lis=this.tablist.children(":has(a[href])");options.disabled=$.map(lis.filter(".ui-state-disabled"),function(tab){return lis.index(tab);});this._processTabs();if(options.active===false||!this.anchors.length){options.active=false;this.active=$();}else if(this.active.length&&!$.contains(this.tablist[0],this.active[0])){if(this.tabs.length===options.disabled.length){options.active=false;this.active=$();}else{this._activate(this._findNextTab(Math.max(0,options.active-1),false));}}else{options.active=this.tabs.index(this.active);}
this._refresh();},_refresh:function(){this._setupDisabled(this.options.disabled);this._setupEvents(this.options.event);this._setupHeightStyle(this.options.heightStyle);this.tabs.not(this.active).attr({"aria-selected":"false",tabIndex:-1});this.panels.not(this._getPanelForTab(this.active))
.hide()
.attr({"aria-expanded":"false","aria-hidden":"true"});if(!this.active.length){this.tabs.eq(0).attr("tabIndex",0);}else{this.active
.addClass("ui-tabs-active ui-state-active")
.attr({"aria-selected":"true",tabIndex:0});this._getPanelForTab(this.active)
.show()
.attr({"aria-expanded":"true","aria-hidden":"false"});}},_processTabs:function(){var that=this;this.tablist=this._getList()
.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all")
.attr("role","tablist");this.tabs=this.tablist.find("> li:has(a[href])")
.addClass("ui-state-default ui-corner-top")
.attr({role:"tab",tabIndex:-1});this.anchors=this.tabs.map(function(){return $("a",this)[0];})
.addClass("ui-tabs-anchor")
.attr({role:"presentation",tabIndex:-1});this.panels=$();this.anchors.each(function(i,anchor){var selector,panel,panelId,anchorId=$(anchor).uniqueId().attr("id"),tab=$(anchor).closest("li"),originalAriaControls=tab.attr("aria-controls");if(isLocal(anchor)){selector=anchor.hash;panel=that.element.find(that._sanitizeSelector(selector));}else{panelId=that._tabId(tab);selector="#"+panelId;panel=that.element.find(selector);if(!panel.length){panel=that._createPanel(panelId);panel.insertAfter(that.panels[i-1]||that.tablist);}
panel.attr("aria-live","polite");}
if(panel.length){that.panels=that.panels.add(panel);}
if(originalAriaControls){tab.data("ui-tabs-aria-controls",originalAriaControls);}
tab.attr({"aria-controls":selector.substring(1),"aria-labelledby":anchorId});panel.attr("aria-labelledby",anchorId);});this.panels
.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom")
.attr("role","tabpanel");},_getList:function(){return this.element.find("ol,ul").eq(0);},_createPanel:function(id){return $("<div>")
.attr("id",id)
.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom")
.data("ui-tabs-destroy",true);},_setupDisabled:function(disabled){if($.isArray(disabled)){if(!disabled.length){disabled=false;}else if(disabled.length===this.anchors.length){disabled=true;}}
for(var i=0,li;(li=this.tabs[i]);i++){if(disabled===true||$.inArray(i,disabled)!==-1){$(li)
.addClass("ui-state-disabled")
.attr("aria-disabled","true");}else{$(li)
.removeClass("ui-state-disabled")
.removeAttr("aria-disabled");}}
this.options.disabled=disabled;},_setupEvents:function(event){var events={click:function(event){event.preventDefault();}};if(event){$.each(event.split(" "),function(index,eventName){events[eventName]="_eventHandler";});}
this._off(this.anchors.add(this.tabs).add(this.panels));this._on(this.anchors,events);this._on(this.tabs,{keydown:"_tabKeydown"});this._on(this.panels,{keydown:"_panelKeydown"});this._focusable(this.tabs);this._hoverable(this.tabs);},_setupHeightStyle:function(heightStyle){var maxHeight,parent=this.element.parent();if(heightStyle==="fill"){maxHeight=parent.height();maxHeight-=this.element.outerHeight()-this.element.height();this.element.siblings(":visible").each(function(){var elem=$(this),position=elem.css("position");if(position==="absolute"||position==="fixed"){return;}
maxHeight-=elem.outerHeight(true);});this.element.children().not(this.panels).each(function(){maxHeight-=$(this).outerHeight(true);});this.panels.each(function(){$(this).height(Math.max(0,maxHeight-
$(this).innerHeight()+$(this).height()));})
.css("overflow","auto");}else if(heightStyle==="auto"){maxHeight=0;this.panels.each(function(){maxHeight=Math.max(maxHeight,$(this).height("").height());}).height(maxHeight);}},_eventHandler:function(event){var options=this.options,active=this.active,anchor=$(event.currentTarget),tab=anchor.closest("li"),clickedIsActive=tab[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():this._getPanelForTab(tab),toHide=!active.length?$():this._getPanelForTab(active),eventData={oldTab:active,oldPanel:toHide,newTab:collapsing?$():tab,newPanel:toShow};event.preventDefault();if(tab.hasClass("ui-state-disabled")||tab.hasClass("ui-tabs-loading")||this.running||(clickedIsActive&&!options.collapsible)||(this._trigger("beforeActivate",event,eventData)===false)){return;}
options.active=collapsing?false:this.tabs.index(tab);this.active=clickedIsActive?$():tab;if(this.xhr){this.xhr.abort();}
if(!toHide.length&&!toShow.length){$.error("jQuery UI Tabs: Mismatching fragment identifier.");}
if(toShow.length){this.load(this.tabs.index(tab),event);}
this._toggle(event,eventData);},_toggle:function(event,eventData){var that=this,toShow=eventData.newPanel,toHide=eventData.oldPanel;this.running=true;function complete(){that.running=false;that._trigger("activate",event,eventData);}
function show(){eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");if(toShow.length&&that.options.show){that._show(toShow,that.options.show,complete);}else{toShow.show();complete();}}
if(toHide.length&&this.options.hide){this._hide(toHide,this.options.hide,function(){eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");show();});}else{eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");toHide.hide();show();}
toHide.attr({"aria-expanded":"false","aria-hidden":"true"});eventData.oldTab.attr("aria-selected","false");if(toShow.length&&toHide.length){eventData.oldTab.attr("tabIndex",-1);}else if(toShow.length){this.tabs.filter(function(){return $(this).attr("tabIndex")===0;})
.attr("tabIndex",-1);}
toShow.attr({"aria-expanded":"true","aria-hidden":"false"});eventData.newTab.attr({"aria-selected":"true",tabIndex:0});},_activate:function(index ){var anchor,active=this._findActive(index);if(active[0]===this.active[0]){return;}
if(!active.length){active=this.active;}
anchor=active.find(".ui-tabs-anchor")[0];this._eventHandler({target:anchor,currentTarget:anchor,preventDefault:$.noop});},_findActive:function(index){return index===false?$():this.tabs.eq(index);},_getIndex:function(index){if(typeof index==="string"){index=this.anchors.index(this.anchors.filter("[href$='"+index+"']"));}
return index;},_destroy:function(){if(this.xhr){this.xhr.abort();}
this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");this.tablist
.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all")
.removeAttr("role");this.anchors
.removeClass("ui-tabs-anchor")
.removeAttr("role")
.removeAttr("tabIndex")
.removeUniqueId();this.tabs.add(this.panels).each(function(){if($.data(this,"ui-tabs-destroy")){$(this).remove();}else{$(this)
.removeClass("ui-state-default ui-state-active ui-state-disabled "+
"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel")
.removeAttr("tabIndex")
.removeAttr("aria-live")
.removeAttr("aria-busy")
.removeAttr("aria-selected")
.removeAttr("aria-labelledby")
.removeAttr("aria-hidden")
.removeAttr("aria-expanded")
.removeAttr("role");}});this.tabs.each(function(){var li=$(this),prev=li.data("ui-tabs-aria-controls");if(prev){li
.attr("aria-controls",prev)
.removeData("ui-tabs-aria-controls");}else{li.removeAttr("aria-controls");}});this.panels.show();if(this.options.heightStyle!=="content"){this.panels.css("height","");}},enable:function(index){var disabled=this.options.disabled;if(disabled===false){return;}
if(index===undefined){disabled=false;}else{index=this._getIndex(index);if($.isArray(disabled)){disabled=$.map(disabled,function(num){return num!==index?num:null;});}else{disabled=$.map(this.tabs,function(li,num){return num!==index?num:null;});}}
this._setupDisabled(disabled);},disable:function(index){var disabled=this.options.disabled;if(disabled===true){return;}
if(index===undefined){disabled=true;}else{index=this._getIndex(index);if($.inArray(index,disabled)!==-1){return;}
if($.isArray(disabled)){disabled=$.merge([index],disabled).sort();}else{disabled=[index];}}
this._setupDisabled(disabled);},load:function(index,event){index=this._getIndex(index);var that=this,tab=this.tabs.eq(index),anchor=tab.find(".ui-tabs-anchor"),panel=this._getPanelForTab(tab),eventData={tab:tab,panel:panel};if(isLocal(anchor[0])){return;}
this.xhr=$.ajax(this._ajaxSettings(anchor,event,eventData));if(this.xhr&&this.xhr.statusText!=="canceled"){tab.addClass("ui-tabs-loading");panel.attr("aria-busy","true");this.xhr
.success(function(response){setTimeout(function(){panel.html(response);that._trigger("load",event,eventData);},1);})
.complete(function(jqXHR,status){setTimeout(function(){if(status==="abort"){that.panels.stop(false,true);}
tab.removeClass("ui-tabs-loading");panel.removeAttr("aria-busy");if(jqXHR===that.xhr){delete that.xhr;}},1);});}},_ajaxSettings:function(anchor,event,eventData){var that=this;return{url:anchor.attr("href"),beforeSend:function(jqXHR,settings){return that._trigger("beforeLoad",event,$.extend({jqXHR:jqXHR,ajaxSettings:settings},eventData));}};},_getPanelForTab:function(tab){var id=$(tab).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+id));}});})(jQuery);(function($){var increments=0;function addDescribedBy(elem,id){var describedby=(elem.attr("aria-describedby")||"").split(/\s+/);describedby.push(id);elem
.data("ui-tooltip-id",id)
.attr("aria-describedby",$.trim(describedby.join(" ")));}
function removeDescribedBy(elem){var id=elem.data("ui-tooltip-id"),describedby=(elem.attr("aria-describedby")||"").split(/\s+/),index=$.inArray(id,describedby);if(index!==-1){describedby.splice(index,1);}
elem.removeData("ui-tooltip-id");describedby=$.trim(describedby.join(" "));if(describedby){elem.attr("aria-describedby",describedby);}else{elem.removeAttr("aria-describedby");}}
$.widget("ui.tooltip",{version:"1.10.0",options:{content:function(){var title=$(this).attr("title")||"";return $("<a>").text(title).html();},hide:true,//
items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:true,tooltipClass:null,track:false,close:null,open:null},_create:function(){this._on({mouseover:"open",focusin:"open"});this.tooltips={};this.parents={};if(this.options.disabled){this._disable();}},_setOption:function(key,value){var that=this;if(key==="disabled"){this[value?"_disable":"_enable"]();this.options[key]=value;return;}
this._super(key,value);if(key==="content"){$.each(this.tooltips,function(id,element){that._updateContent(element);});}},_disable:function(){var that=this;$.each(this.tooltips,function(id,element){var event=$.Event("blur");event.target=event.currentTarget=element[0];that.close(event,true);});this.element.find(this.options.items).addBack().each(function(){var element=$(this);if(element.is("[title]")){element
.data("ui-tooltip-title",element.attr("title"))
.attr("title","");}});},_enable:function(){this.element.find(this.options.items).addBack().each(function(){var element=$(this);if(element.data("ui-tooltip-title")){element.attr("title",element.data("ui-tooltip-title"));}});},open:function(event){var that=this,target=$(event?event.target:this.element)
.closest(this.options.items);//
if(!target.length||target.data("ui-tooltip-id")){return;}
if(target.attr("title")){target.data("ui-tooltip-title",target.attr("title"));}
target.data("ui-tooltip-open",true);if(event&&event.type==="mouseover"){target.parents().each(function(){var parent=$(this),blurEvent;if(parent.data("ui-tooltip-open")){blurEvent=$.Event("blur");blurEvent.target=blurEvent.currentTarget=this;that.close(blurEvent,true);}
if(parent.attr("title")){parent.uniqueId();that.parents[this.id]={element:this,title:parent.attr("title")};parent.attr("title","");}});}
this._updateContent(target,event);},_updateContent:function(target,event){var content,contentOption=this.options.content,that=this,eventType=event?event.type:null;if(typeof contentOption==="string"){return this._open(event,target,contentOption);}
content=contentOption.call(target[0],function(response){if(!target.data("ui-tooltip-open")){return;}
that._delay(function(){if(event){event.type=eventType;}
this._open(event,target,response);});});if(content){this._open(event,target,content);}},_open:function(event,target,content){var tooltip,events,delayedShow,positionOption=$.extend({},this.options.position);if(!content){return;}
tooltip=this._find(target);if(tooltip.length){tooltip.find(".ui-tooltip-content").html(content);return;}
if(target.is("[title]")){if(event&&event.type==="mouseover"){target.attr("title","");}else{target.removeAttr("title");}}
tooltip=this._tooltip(target);addDescribedBy(target,tooltip.attr("id"));tooltip.find(".ui-tooltip-content").html(content);function position(event){positionOption.of=event;if(tooltip.is(":hidden")){return;}
tooltip.position(positionOption);}
if(this.options.track&&event&&/^mouse/.test(event.type)){this._on(this.document,{mousemove:position});position(event);}else{tooltip.position($.extend({of:target},this.options.position));}
tooltip.hide();this._show(tooltip,this.options.show);if(this.options.show&&this.options.show.delay){delayedShow=this.delayedShow=setInterval(function(){if(tooltip.is(":visible")){position(positionOption.of);clearInterval(delayedShow);}},$.fx.interval);}
this._trigger("open",event,{tooltip:tooltip});events={keyup:function(event){if(event.keyCode===$.ui.keyCode.ESCAPE){var fakeEvent=$.Event(event);fakeEvent.currentTarget=target[0];this.close(fakeEvent,true);}},remove:function(){this._removeTooltip(tooltip);}};if(!event||event.type==="mouseover"){events.mouseleave="close";}
if(!event||event.type==="focusin"){events.focusout="close";}
this._on(true,target,events);},close:function(event){var that=this,target=$(event?event.currentTarget:this.element),tooltip=this._find(target);if(this.closing){return;}
clearInterval(this.delayedShow);if(target.data("ui-tooltip-title")){target.attr("title",target.data("ui-tooltip-title"));}
removeDescribedBy(target);tooltip.stop(true);this._hide(tooltip,this.options.hide,function(){that._removeTooltip($(this));});target.removeData("ui-tooltip-open");this._off(target,"mouseleave focusout keyup");if(target[0]!==this.element[0]){this._off(target,"remove");}
this._off(this.document,"mousemove");if(event&&event.type==="mouseleave"){$.each(this.parents,function(id,parent){$(parent.element).attr("title",parent.title);delete that.parents[id];});}
this.closing=true;this._trigger("close",event,{tooltip:tooltip});this.closing=false;},_tooltip:function(element){var id="ui-tooltip-"+increments++,tooltip=$("<div>")
.attr({ id:id,role:"tooltip"})
.addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+(this.options.tooltipClass||""));$("<div>")
.addClass("ui-tooltip-content")
.appendTo(tooltip);tooltip.appendTo(this.document[0].body);this.tooltips[id]=element;return tooltip;},_find:function(target){var id=target.data("ui-tooltip-id");return id?$("#"+id):$();},_removeTooltip:function(tooltip){tooltip.remove();delete this.tooltips[tooltip.attr("id")];},_destroy:function(){var that=this;$.each(this.tooltips,function(id,element){var event=$.Event("blur");event.target=event.currentTarget=element[0];that.close(event,true);$("#"+id).remove();if(element.data("ui-tooltip-title")){element.attr("title",element.data("ui-tooltip-title"));element.removeData("ui-tooltip-title");}});}});}(jQuery));
/*!
 * jQuery UI Touch Punch 0.2.2
 *
 * Copyright 2011, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:s
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */

(function ($) {

  // Detect touch support
  $.support.touch = 'ontouchend' in document;

  // Ignore browsers without touch support
  if (!$.support.touch) {
    return;
  }

  var mouseProto = $.ui.mouse.prototype,
      _mouseInit = mouseProto._mouseInit,
      touchHandled;

  /**
   * Simulate a mouse event based on a corresponding touch event
   * @param {Object} event A touch event
   * @param {String} simulatedType The corresponding mouse event
   */
  function simulateMouseEvent (event, simulatedType) {

    // Ignore multi-touch events
    if (event.originalEvent.touches.length > 1) {
      return;
    }

    event.preventDefault();

    var touch = event.originalEvent.changedTouches[0],
        simulatedEvent = document.createEvent('MouseEvents');

    // Initialize the simulated mouse event using the touch event's coordinates
    simulatedEvent.initMouseEvent(
      simulatedType,    // type
      true,             // bubbles
      true,             // cancelable
      window,           // view
      1,                // detail
      touch.screenX,    // screenX
      touch.screenY,    // screenY
      touch.clientX,    // clientX
      touch.clientY,    // clientY
      false,            // ctrlKey
      false,            // altKey
      false,            // shiftKey
      false,            // metaKey
      0,                // button
      null              // relatedTarget
    );

    // Dispatch the simulated event to the target element
    event.target.dispatchEvent(simulatedEvent);
  }

  /**
   * Handle the jQuery UI widget's touchstart events
   * @param {Object} event The widget element's touchstart event
   */
  mouseProto._touchStart = function (event) {

    var self = this;

    function start () {
      // Ignore the event if another widget is already being handled
      if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
        return;
      }

      // Set the flag to prevent other widgets from inheriting the touch event
      touchHandled = true;

      // Track movement to determine if interaction was a click
      self._touchMoved = false;

      // Simulate the mouseover event
      simulateMouseEvent(event, 'mouseover');

      // Simulate the mousemove event
      simulateMouseEvent(event, 'mousemove');

      // Simulate the mousedown event
      simulateMouseEvent(event, 'mousedown');
    }

    var timer = setTimeout(start, 300);
  };

  /**
   * Handle the jQuery UI widget's touchmove events
   * @param {Object} event The document's touchmove event
   */
  mouseProto._touchMove = function (event) {

    // Ignore event if not handled
    if (!touchHandled) {
      return;
    }

    // Interaction was not a click
    this._touchMoved = true;

    // Simulate the mousemove event
    simulateMouseEvent(event, 'mousemove');
  };

  /**
   * Handle the jQuery UI widget's touchend events
   * @param {Object} event The document's touchend event
   */
  mouseProto._touchEnd = function (event) {

    // Ignore event if not handled
    if (!touchHandled) {
      return;
    }

    // Simulate the mouseup event
    simulateMouseEvent(event, 'mouseup');

    // Simulate the mouseout event
    simulateMouseEvent(event, 'mouseout');

    // If the touch interaction did not move, it should trigger a click
    if (!this._touchMoved) {

      // Simulate the click event
      simulateMouseEvent(event, 'click');
    }

    // Unset the flag to allow other widgets to inherit the touch event
    touchHandled = false;
  };

  /**
   * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
   * This method extends the widget with bound touch event handlers that
   * translate touch events to mouse events and pass them to the widget's
   * original mouse event handling methods.
   */
  mouseProto._mouseInit = function () {

    var self = this;

    // Delegate the touch handlers to the widget's element
    self.element
      .bind('touchstart', $.proxy(self, '_touchStart'))
      .bind('touchmove', $.proxy(self, '_touchMove'))
      .bind('touchend', $.proxy(self, '_touchEnd'));

    // Call the original $.ui.mouse init method
    _mouseInit.call(self);
  };

})(jQuery);
$.extend($.fn, {

  touchStates: function(selector){

    var $body = $(document.body),
      $container = $(this);

    function coords(event){
      event = event.originalEvent;

      return {
        x: event.touches ? event.touches[0].clientX : event.clientX,
        y: event.touches ? event.touches[0].clientY : event.clientY
      };
    }

    function start(event){
      var $elem = $(event.currentTarget),
        startPos = coords(event),
        timer;

      timer = setTimeout(function(){
        $elem.addClass("active");
      }, 100);

      function end(){
        clearTimeout(timer);

        $body.unbind('touchend', end);
        $body.unbind('mouseup', end);

        $body.unbind('touchmove', move);
        $body.unbind('mousemove', move);

        $elem.removeClass("active");
      }

      function move(event){
        var currentPos = coords(event);

        if (
          Math.abs(currentPos.x - startPos.x) > 10 ||
          Math.abs(currentPos.y - startPos.y) > 10
        ) {
          end();
        }
      }

      $body.bind('touchend', end);
      $body.bind('mouseup', end);

      $body.bind('touchmove', move);
      $body.bind('mousemove', move);
    }

    $container.delegate(selector, "mousedown", start);
    $container.delegate(selector, "touchstart", start);
  }
});
/**
 * Created by user on 1/6/14.
 */

d3=function(){function n(n){return null!=n&&!isNaN(n)}function t(n){return n.length}function e(n){for(var t=1;n*t%1;)t*=10;return t}function r(n,t){try{for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}catch(r){n.prototype=t}}function u(){}function i(){}function o(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function a(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.substring(1);for(var e=0,r=fa.length;r>e;++e){var u=fa[e]+t;if(u in n)return u}}function c(){}function s(){}function l(n){function t(){for(var t,r=e,u=-1,i=r.length;++u<i;)(t=r[u].on)&&t.apply(this,arguments);return n}var e=[],r=new u;return t.on=function(t,u){var i,o=r.get(t);return arguments.length<2?o&&o.on:(o&&(o.on=null,e=e.slice(0,i=e.indexOf(o)).concat(e.slice(i+1)),r.remove(t)),u&&e.push(r.set(t,{on:u})),n)},t}function f(){Bo.event.preventDefault()}function h(){for(var n,t=Bo.event;n=t.sourceEvent;)t=n;return t}function g(n){for(var t=new s,e=0,r=arguments.length;++e<r;)t[arguments[e]]=l(t);return t.of=function(e,r){return function(u){try{var i=u.sourceEvent=Bo.event;u.target=n,Bo.event=u,t[u.type].apply(e,r)}finally{Bo.event=i}}},t}function p(n){return ga(n,ya),n}function v(n){return"function"==typeof n?n:function(){return pa(n,this)}}function d(n){return"function"==typeof n?n:function(){return va(n,this)}}function m(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function u(){this.setAttribute(n,t)}function i(){this.setAttributeNS(n.space,n.local,t)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=Bo.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?a:o:n.local?i:u}function y(n){return n.trim().replace(/\s+/g," ")}function x(n){return new RegExp("(?:^|\\s+)"+Bo.requote(n)+"(?:\\s+|$)","g")}function M(n){return n.trim().split(/^|\s+/)}function _(n,t){function e(){for(var e=-1;++e<u;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<u;)n[e](this,r)}n=M(n).map(b);var u=n.length;return"function"==typeof t?r:e}function b(n){var t=x(n);return function(e,r){if(u=e.classList)return r?u.add(n):u.remove(n);var u=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(u)||e.setAttribute("class",y(u+" "+n))):e.setAttribute("class",y(u.replace(t," ")))}}function w(n,t,e){function r(){this.style.removeProperty(n)}function u(){this.style.setProperty(n,t,e)}function i(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?i:u}function S(n,t){function e(){delete this[n]}function r(){this[n]=t}function u(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?u:r}function k(n){return"function"==typeof n?n:(n=Bo.ns.qualify(n)).local?function(){return this.ownerDocument.createElementNS(n.space,n.local)}:function(){return this.ownerDocument.createElementNS(this.namespaceURI,n)}}function E(n){return{__data__:n}}function A(n){return function(){return ma(this,n)}}function C(n){return arguments.length||(n=Bo.ascending),function(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}}function N(n,t){for(var e=0,r=n.length;r>e;e++)for(var u,i=n[e],o=0,a=i.length;a>o;o++)(u=i[o])&&t(u,o,e);return n}function L(n){return ga(n,Ma),n}function T(n){var t,e;return function(r,u,i){var o,a=n[i].update,c=a.length;for(i!=e&&(e=i,t=0),u>=t&&(t=u+1);!(o=a[t])&&++t<c;);return o}}function q(){var n=this.__transition__;n&&++n.active}function z(n,t,e){function r(){var t=this[o];t&&(this.removeEventListener(n,t,t.$),delete this[o])}function u(){var u=s(t,Jo(arguments));r.call(this),this.addEventListener(n,this[o]=u,u.$=e),u._=t}function i(){var t,e=new RegExp("^__on([^.]+)"+Bo.requote(n)+"$");for(var r in this)if(t=r.match(e)){var u=this[r];this.removeEventListener(t[1],u,u.$),delete this[r]}}var o="__on"+n,a=n.indexOf("."),s=R;a>0&&(n=n.substring(0,a));var l=ba.get(n);return l&&(n=l,s=D),a?t?u:r:t?c:i}function R(n,t){return function(e){var r=Bo.event;Bo.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{Bo.event=r}}}function D(n,t){var e=R(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function P(){var n=".dragsuppress-"+ ++Sa,t="click"+n,e=Bo.select(Qo).on("touchmove"+n,f).on("dragstart"+n,f).on("selectstart"+n,f);if(wa){var r=Ko.style,u=r[wa];r[wa]="none"}return function(i){function o(){e.on(t,null)}e.on(n,null),wa&&(r[wa]=u),i&&(e.on(t,function(){f(),o()},!0),setTimeout(o,0))}}function U(n,t){t.changedTouches&&(t=t.changedTouches[0]);var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();if(0>ka&&(Qo.scrollX||Qo.scrollY)){e=Bo.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var u=e[0][0].getScreenCTM();ka=!(u.f||u.e),e.remove()}return ka?(r.x=t.pageX,r.y=t.pageY):(r.x=t.clientX,r.y=t.clientY),r=r.matrixTransform(n.getScreenCTM().inverse()),[r.x,r.y]}var i=n.getBoundingClientRect();return[t.clientX-i.left-n.clientLeft,t.clientY-i.top-n.clientTop]}function j(n){return n>0?1:0>n?-1:0}function H(n){return n>1?0:-1>n?Ea:Math.acos(n)}function F(n){return n>1?Ca:-1>n?-Ca:Math.asin(n)}function O(n){return((n=Math.exp(n))-1/n)/2}function Y(n){return((n=Math.exp(n))+1/n)/2}function I(n){return((n=Math.exp(2*n))-1)/(n+1)}function Z(n){return(n=Math.sin(n/2))*n}function V(){}function X(n,t,e){return new $(n,t,e)}function $(n,t,e){this.h=n,this.s=t,this.l=e}function B(n,t,e){function r(n){return n>360?n-=360:0>n&&(n+=360),60>n?i+(o-i)*n/60:180>n?o:240>n?i+(o-i)*(240-n)/60:i}function u(n){return Math.round(255*r(n))}var i,o;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:0>t?0:t>1?1:t,e=0>e?0:e>1?1:e,o=.5>=e?e*(1+t):e+t-e*t,i=2*e-o,at(u(n+120),u(n),u(n-120))}function W(n,t,e){return new J(n,t,e)}function J(n,t,e){this.h=n,this.c=t,this.l=e}function G(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),K(e,Math.cos(n*=Ta)*t,Math.sin(n)*t)}function K(n,t,e){return new Q(n,t,e)}function Q(n,t,e){this.l=n,this.a=t,this.b=e}function nt(n,t,e){var r=(n+16)/116,u=r+t/500,i=r-e/200;return u=et(u)*Ya,r=et(r)*Ia,i=et(i)*Za,at(ut(3.2404542*u-1.5371385*r-.4985314*i),ut(-.969266*u+1.8760108*r+.041556*i),ut(.0556434*u-.2040259*r+1.0572252*i))}function tt(n,t,e){return n>0?W(Math.atan2(e,t)*qa,Math.sqrt(t*t+e*e),n):W(0/0,0/0,n)}function et(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function rt(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function ut(n){return Math.round(255*(.00304>=n?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function it(n){return at(n>>16,255&n>>8,255&n)}function ot(n){return it(n)+""}function at(n,t,e){return new ct(n,t,e)}function ct(n,t,e){this.r=n,this.g=t,this.b=e}function st(n){return 16>n?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function lt(n,t,e){var r,u,i,o=0,a=0,c=0;if(r=/([a-z]+)\((.*)\)/i.exec(n))switch(u=r[2].split(","),r[1]){case"hsl":return e(parseFloat(u[0]),parseFloat(u[1])/100,parseFloat(u[2])/100);case"rgb":return t(pt(u[0]),pt(u[1]),pt(u[2]))}return(i=$a.get(n))?t(i.r,i.g,i.b):(null!=n&&"#"===n.charAt(0)&&(4===n.length?(o=n.charAt(1),o+=o,a=n.charAt(2),a+=a,c=n.charAt(3),c+=c):7===n.length&&(o=n.substring(1,3),a=n.substring(3,5),c=n.substring(5,7)),o=parseInt(o,16),a=parseInt(a,16),c=parseInt(c,16)),t(o,a,c))}function ft(n,t,e){var r,u,i=Math.min(n/=255,t/=255,e/=255),o=Math.max(n,t,e),a=o-i,c=(o+i)/2;return a?(u=.5>c?a/(o+i):a/(2-o-i),r=n==o?(t-e)/a+(e>t?6:0):t==o?(e-n)/a+2:(n-t)/a+4,r*=60):(r=0/0,u=c>0&&1>c?0:r),X(r,u,c)}function ht(n,t,e){n=gt(n),t=gt(t),e=gt(e);var r=rt((.4124564*n+.3575761*t+.1804375*e)/Ya),u=rt((.2126729*n+.7151522*t+.072175*e)/Ia),i=rt((.0193339*n+.119192*t+.9503041*e)/Za);return K(116*u-16,500*(r-u),200*(u-i))}function gt(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function pt(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function vt(n){return"function"==typeof n?n:function(){return n}}function dt(n){return n}function mt(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),yt(t,e,n,r)}}function yt(n,t,e,r){function u(){var n,t=c.status;if(!t&&c.responseText||t>=200&&300>t||304===t){try{n=e.call(i,c)}catch(r){return o.error.call(i,r),void 0}o.load.call(i,n)}else o.error.call(i,c)}var i={},o=Bo.dispatch("beforesend","progress","load","error"),a={},c=new XMLHttpRequest,s=null;return!Qo.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(n)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=u:c.onreadystatechange=function(){c.readyState>3&&u()},c.onprogress=function(n){var t=Bo.event;Bo.event=n;try{o.progress.call(i,c)}finally{Bo.event=t}},i.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?a[n]:(null==t?delete a[n]:a[n]=t+"",i)},i.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",i):t},i.responseType=function(n){return arguments.length?(s=n,i):s},i.response=function(n){return e=n,i},["get","post"].forEach(function(n){i[n]=function(){return i.send.apply(i,[n].concat(Jo(arguments)))}}),i.send=function(e,r,u){if(2===arguments.length&&"function"==typeof r&&(u=r,r=null),c.open(e,n,!0),null==t||"accept"in a||(a.accept=t+",*/*"),c.setRequestHeader)for(var l in a)c.setRequestHeader(l,a[l]);return null!=t&&c.overrideMimeType&&c.overrideMimeType(t),null!=s&&(c.responseType=s),null!=u&&i.on("error",u).on("load",function(n){u(null,n)}),o.beforesend.call(i,c),c.send(null==r?null:r),i},i.abort=function(){return c.abort(),i},Bo.rebind(i,o,"on"),null==r?i:i.get(xt(r))}function xt(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function Mt(){var n=_t(),t=bt()-n;t>24?(isFinite(t)&&(clearTimeout(Ga),Ga=setTimeout(Mt,t)),Ja=0):(Ja=1,Qa(Mt))}function _t(){var n=Date.now();for(Ka=Ba;Ka;)n>=Ka.t&&(Ka.f=Ka.c(n-Ka.t)),Ka=Ka.n;return n}function bt(){for(var n,t=Ba,e=1/0;t;)t.f?t=n?n.n=t.n:Ba=t.n:(t.t<e&&(e=t.t),t=(n=t).n);return Wa=n,e}function wt(n,t){var e=Math.pow(10,3*ca(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function St(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function kt(n){return n+""}function Et(){}function At(n,t,e){var r=e.s=n+t,u=r-n,i=r-u;e.t=n-i+(t-u)}function Ct(n,t){n&&fc.hasOwnProperty(n.type)&&fc[n.type](n,t)}function Nt(n,t,e){var r,u=-1,i=n.length-e;for(t.lineStart();++u<i;)r=n[u],t.point(r[0],r[1],r[2]);t.lineEnd()}function Lt(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)Nt(n[e],t,1);t.polygonEnd()}function Tt(){function n(n,t){n*=Ta,t=t*Ta/2+Ea/4;var e=n-r,o=Math.cos(t),a=Math.sin(t),c=i*a,s=u*o+c*Math.cos(e),l=c*Math.sin(e);gc.add(Math.atan2(l,s)),r=n,u=o,i=a}var t,e,r,u,i;pc.point=function(o,a){pc.point=n,r=(t=o)*Ta,u=Math.cos(a=(e=a)*Ta/2+Ea/4),i=Math.sin(a)},pc.lineEnd=function(){n(t,e)}}function qt(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function zt(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function Rt(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function Dt(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function Pt(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function Ut(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function jt(n){return[Math.atan2(n[1],n[0]),F(n[2])]}function Ht(n,t){return ca(n[0]-t[0])<Na&&ca(n[1]-t[1])<Na}function Ft(n,t){n*=Ta;var e=Math.cos(t*=Ta);Ot(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function Ot(n,t,e){++vc,mc+=(n-mc)/vc,yc+=(t-yc)/vc,xc+=(e-xc)/vc}function Yt(){function n(n,u){n*=Ta;var i=Math.cos(u*=Ta),o=i*Math.cos(n),a=i*Math.sin(n),c=Math.sin(u),s=Math.atan2(Math.sqrt((s=e*c-r*a)*s+(s=r*o-t*c)*s+(s=t*a-e*o)*s),t*o+e*a+r*c);dc+=s,Mc+=s*(t+(t=o)),_c+=s*(e+(e=a)),bc+=s*(r+(r=c)),Ot(t,e,r)}var t,e,r;Ec.point=function(u,i){u*=Ta;var o=Math.cos(i*=Ta);t=o*Math.cos(u),e=o*Math.sin(u),r=Math.sin(i),Ec.point=n,Ot(t,e,r)}}function It(){Ec.point=Ft}function Zt(){function n(n,t){n*=Ta;var e=Math.cos(t*=Ta),o=e*Math.cos(n),a=e*Math.sin(n),c=Math.sin(t),s=u*c-i*a,l=i*o-r*c,f=r*a-u*o,h=Math.sqrt(s*s+l*l+f*f),g=r*o+u*a+i*c,p=h&&-H(g)/h,v=Math.atan2(h,g);wc+=p*s,Sc+=p*l,kc+=p*f,dc+=v,Mc+=v*(r+(r=o)),_c+=v*(u+(u=a)),bc+=v*(i+(i=c)),Ot(r,u,i)}var t,e,r,u,i;Ec.point=function(o,a){t=o,e=a,Ec.point=n,o*=Ta;var c=Math.cos(a*=Ta);r=c*Math.cos(o),u=c*Math.sin(o),i=Math.sin(a),Ot(r,u,i)},Ec.lineEnd=function(){n(t,e),Ec.lineEnd=It,Ec.point=Ft}}function Vt(){return!0}function Xt(n,t,e,r,u){var i=[],o=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(Ht(e,r)){u.lineStart();for(var a=0;t>a;++a)u.point((e=n[a])[0],e[1]);return u.lineEnd(),void 0}var c=new Bt(e,n,null,!0),s=new Bt(e,null,c,!1);c.o=s,i.push(c),o.push(s),c=new Bt(r,n,null,!1),s=new Bt(r,null,c,!0),c.o=s,i.push(c),o.push(s)}}),o.sort(t),$t(i),$t(o),i.length){for(var a=0,c=e,s=o.length;s>a;++a)o[a].e=c=!c;for(var l,f,h=i[0];;){for(var g=h,p=!0;g.v;)if((g=g.n)===h)return;l=g.z,u.lineStart();do{if(g.v=g.o.v=!0,g.e){if(p)for(var a=0,s=l.length;s>a;++a)u.point((f=l[a])[0],f[1]);else r(g.x,g.n.x,1,u);g=g.n}else{if(p){l=g.p.z;for(var a=l.length-1;a>=0;--a)u.point((f=l[a])[0],f[1])}else r(g.x,g.p.x,-1,u);g=g.p}g=g.o,l=g.z,p=!p}while(!g.v);u.lineEnd()}}}function $t(n){if(t=n.length){for(var t,e,r=0,u=n[0];++r<t;)u.n=e=n[r],e.p=u,u=e;u.n=e=n[0],e.p=u}}function Bt(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Wt(n,t,e,r){return function(u,i){function o(t,e){var r=u(t,e);n(t=r[0],e=r[1])&&i.point(t,e)}function a(n,t){var e=u(n,t);d.point(e[0],e[1])}function c(){y.point=a,d.lineStart()}function s(){y.point=o,d.lineEnd()}function l(n,t){v.push([n,t]);var e=u(n,t);M.point(e[0],e[1])}function f(){M.lineStart(),v=[]}function h(){l(v[0][0],v[0][1]),M.lineEnd();var n,t=M.clean(),e=x.buffer(),r=e.length;if(v.pop(),p.push(v),v=null,r){if(1&t){n=e[0];var u,r=n.length-1,o=-1;for(i.lineStart();++o<r;)i.point((u=n[o])[0],u[1]);return i.lineEnd(),void 0}r>1&&2&t&&e.push(e.pop().concat(e.shift())),g.push(e.filter(Jt))}}var g,p,v,d=t(i),m=u.invert(r[0],r[1]),y={point:o,lineStart:c,lineEnd:s,polygonStart:function(){y.point=l,y.lineStart=f,y.lineEnd=h,g=[],p=[],i.polygonStart()},polygonEnd:function(){y.point=o,y.lineStart=c,y.lineEnd=s,g=Bo.merge(g);var n=Qt(m,p);g.length?Xt(g,Kt,n,e,i):n&&(i.lineStart(),e(null,null,1,i),i.lineEnd()),i.polygonEnd(),g=p=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}},x=Gt(),M=t(x);return y}}function Jt(n){return n.length>1}function Gt(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:c,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function Kt(n,t){return((n=n.x)[0]<0?n[1]-Ca-Na:Ca-n[1])-((t=t.x)[0]<0?t[1]-Ca-Na:Ca-t[1])}function Qt(n,t){var e=n[0],r=n[1],u=[Math.sin(e),-Math.cos(e),0],i=0,o=0;gc.reset();for(var a=0,c=t.length;c>a;++a){var s=t[a],l=s.length;if(l)for(var f=s[0],h=f[0],g=f[1]/2+Ea/4,p=Math.sin(g),v=Math.cos(g),d=1;;){d===l&&(d=0),n=s[d];var m=n[0],y=n[1]/2+Ea/4,x=Math.sin(y),M=Math.cos(y),_=m-h,b=ca(_)>Ea,w=p*x;if(gc.add(Math.atan2(w*Math.sin(_),v*M+w*Math.cos(_))),i+=b?_+(_>=0?Aa:-Aa):_,b^h>=e^m>=e){var S=Rt(qt(f),qt(n));Ut(S);var k=Rt(u,S);Ut(k);var E=(b^_>=0?-1:1)*F(k[2]);(r>E||r===E&&(S[0]||S[1]))&&(o+=b^_>=0?1:-1)}if(!d++)break;h=m,p=x,v=M,f=n}}return(-Na>i||Na>i&&0>gc)^1&o}function ne(n){var t,e=0/0,r=0/0,u=0/0;return{lineStart:function(){n.lineStart(),t=1},point:function(i,o){var a=i>0?Ea:-Ea,c=ca(i-e);ca(c-Ea)<Na?(n.point(e,r=(r+o)/2>0?Ca:-Ca),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(a,r),n.point(i,r),t=0):u!==a&&c>=Ea&&(ca(e-u)<Na&&(e-=u*Na),ca(i-a)<Na&&(i-=a*Na),r=te(e,r,i,o),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(a,r),t=0),n.point(e=i,r=o),u=a},lineEnd:function(){n.lineEnd(),e=r=0/0},clean:function(){return 2-t}}}function te(n,t,e,r){var u,i,o=Math.sin(n-e);return ca(o)>Na?Math.atan((Math.sin(t)*(i=Math.cos(r))*Math.sin(e)-Math.sin(r)*(u=Math.cos(t))*Math.sin(n))/(u*i*o)):(t+r)/2}function ee(n,t,e,r){var u;if(null==n)u=e*Ca,r.point(-Ea,u),r.point(0,u),r.point(Ea,u),r.point(Ea,0),r.point(Ea,-u),r.point(0,-u),r.point(-Ea,-u),r.point(-Ea,0),r.point(-Ea,u);else if(ca(n[0]-t[0])>Na){var i=n[0]<t[0]?Ea:-Ea;u=e*i/2,r.point(-i,u),r.point(0,u),r.point(i,u)}else r.point(t[0],t[1])}function re(n){function t(n,t){return Math.cos(n)*Math.cos(t)>i}function e(n){var e,i,c,s,l;return{lineStart:function(){s=c=!1,l=1},point:function(f,h){var g,p=[f,h],v=t(f,h),d=o?v?0:u(f,h):v?u(f+(0>f?Ea:-Ea),h):0;if(!e&&(s=c=v)&&n.lineStart(),v!==c&&(g=r(e,p),(Ht(e,g)||Ht(p,g))&&(p[0]+=Na,p[1]+=Na,v=t(p[0],p[1]))),v!==c)l=0,v?(n.lineStart(),g=r(p,e),n.point(g[0],g[1])):(g=r(e,p),n.point(g[0],g[1]),n.lineEnd()),e=g;else if(a&&e&&o^v){var m;d&i||!(m=r(p,e,!0))||(l=0,o?(n.lineStart(),n.point(m[0][0],m[0][1]),n.point(m[1][0],m[1][1]),n.lineEnd()):(n.point(m[1][0],m[1][1]),n.lineEnd(),n.lineStart(),n.point(m[0][0],m[0][1])))}!v||e&&Ht(e,p)||n.point(p[0],p[1]),e=p,c=v,i=d},lineEnd:function(){c&&n.lineEnd(),e=null},clean:function(){return l|(s&&c)<<1}}}function r(n,t,e){var r=qt(n),u=qt(t),o=[1,0,0],a=Rt(r,u),c=zt(a,a),s=a[0],l=c-s*s;if(!l)return!e&&n;var f=i*c/l,h=-i*s/l,g=Rt(o,a),p=Pt(o,f),v=Pt(a,h);Dt(p,v);var d=g,m=zt(p,d),y=zt(d,d),x=m*m-y*(zt(p,p)-1);if(!(0>x)){var M=Math.sqrt(x),_=Pt(d,(-m-M)/y);if(Dt(_,p),_=jt(_),!e)return _;var b,w=n[0],S=t[0],k=n[1],E=t[1];w>S&&(b=w,w=S,S=b);var A=S-w,C=ca(A-Ea)<Na,N=C||Na>A;if(!C&&k>E&&(b=k,k=E,E=b),N?C?k+E>0^_[1]<(ca(_[0]-w)<Na?k:E):k<=_[1]&&_[1]<=E:A>Ea^(w<=_[0]&&_[0]<=S)){var L=Pt(d,(-m+M)/y);return Dt(L,p),[_,jt(L)]}}}function u(t,e){var r=o?n:Ea-n,u=0;return-r>t?u|=1:t>r&&(u|=2),-r>e?u|=4:e>r&&(u|=8),u}var i=Math.cos(n),o=i>0,a=ca(i)>Na,c=Te(n,6*Ta);return Wt(t,e,c,o?[0,-n]:[-Ea,n-Ea])}function ue(n,t,e,r){return function(u){var i,o=u.a,a=u.b,c=o.x,s=o.y,l=a.x,f=a.y,h=0,g=1,p=l-c,v=f-s;if(i=n-c,p||!(i>0)){if(i/=p,0>p){if(h>i)return;g>i&&(g=i)}else if(p>0){if(i>g)return;i>h&&(h=i)}if(i=e-c,p||!(0>i)){if(i/=p,0>p){if(i>g)return;i>h&&(h=i)}else if(p>0){if(h>i)return;g>i&&(g=i)}if(i=t-s,v||!(i>0)){if(i/=v,0>v){if(h>i)return;g>i&&(g=i)}else if(v>0){if(i>g)return;i>h&&(h=i)}if(i=r-s,v||!(0>i)){if(i/=v,0>v){if(i>g)return;i>h&&(h=i)}else if(v>0){if(h>i)return;g>i&&(g=i)}return h>0&&(u.a={x:c+h*p,y:s+h*v}),1>g&&(u.b={x:c+g*p,y:s+g*v}),u}}}}}}function ie(n,t,e,r){function u(r,u){return ca(r[0]-n)<Na?u>0?0:3:ca(r[0]-e)<Na?u>0?2:1:ca(r[1]-t)<Na?u>0?1:0:u>0?3:2}function i(n,t){return o(n.x,t.x)}function o(n,t){var e=u(n,1),r=u(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(a){function c(n){for(var t=0,e=m.length,r=n[1],u=0;e>u;++u)for(var i,o=1,a=m[u],c=a.length,l=a[0];c>o;++o)i=a[o],l[1]<=r?i[1]>r&&s(l,i,n)>0&&++t:i[1]<=r&&s(l,i,n)<0&&--t,l=i;return 0!==t}function s(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(e[0]-n[0])*(t[1]-n[1])}function l(i,a,c,s){var l=0,f=0;if(null==i||(l=u(i,c))!==(f=u(a,c))||o(i,a)<0^c>0){do s.point(0===l||3===l?n:e,l>1?r:t);while((l=(l+c+4)%4)!==f)}else s.point(a[0],a[1])}function f(u,i){return u>=n&&e>=u&&i>=t&&r>=i}function h(n,t){f(n,t)&&a.point(n,t)}function g(){L.point=v,m&&m.push(y=[]),k=!0,S=!1,b=w=0/0}function p(){d&&(v(x,M),_&&S&&C.rejoin(),d.push(C.buffer())),L.point=h,S&&a.lineEnd()}function v(n,t){n=Math.max(-Cc,Math.min(Cc,n)),t=Math.max(-Cc,Math.min(Cc,t));var e=f(n,t);if(m&&y.push([n,t]),k)x=n,M=t,_=e,k=!1,e&&(a.lineStart(),a.point(n,t));else if(e&&S)a.point(n,t);else{var r={a:{x:b,y:w},b:{x:n,y:t}};N(r)?(S||(a.lineStart(),a.point(r.a.x,r.a.y)),a.point(r.b.x,r.b.y),e||a.lineEnd(),E=!1):e&&(a.lineStart(),a.point(n,t),E=!1)}b=n,w=t,S=e}var d,m,y,x,M,_,b,w,S,k,E,A=a,C=Gt(),N=ue(n,t,e,r),L={point:h,lineStart:g,lineEnd:p,polygonStart:function(){a=C,d=[],m=[],E=!0},polygonEnd:function(){a=A,d=Bo.merge(d);var t=c([n,r]),e=E&&t,u=d.length;(e||u)&&(a.polygonStart(),e&&(a.lineStart(),l(null,null,1,a),a.lineEnd()),u&&Xt(d,i,t,l,a),a.polygonEnd()),d=m=y=null}};return L}}function oe(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function ae(n){var t=0,e=Ea/3,r=we(n),u=r(t,e);return u.parallels=function(n){return arguments.length?r(t=n[0]*Ea/180,e=n[1]*Ea/180):[180*(t/Ea),180*(e/Ea)]},u}function ce(n,t){function e(n,t){var e=Math.sqrt(i-2*u*Math.sin(t))/u;return[e*Math.sin(n*=u),o-e*Math.cos(n)]}var r=Math.sin(n),u=(r+Math.sin(t))/2,i=1+r*(2*u-r),o=Math.sqrt(i)/u;return e.invert=function(n,t){var e=o-t;return[Math.atan2(n,e)/u,F((i-(n*n+e*e)*u*u)/(2*u))]},e}function se(){function n(n,t){Lc+=u*n-r*t,r=n,u=t}var t,e,r,u;Dc.point=function(i,o){Dc.point=n,t=r=i,e=u=o},Dc.lineEnd=function(){n(t,e)}}function le(n,t){Tc>n&&(Tc=n),n>zc&&(zc=n),qc>t&&(qc=t),t>Rc&&(Rc=t)}function fe(){function n(n,t){o.push("M",n,",",t,i)}function t(n,t){o.push("M",n,",",t),a.point=e}function e(n,t){o.push("L",n,",",t)}function r(){a.point=n}function u(){o.push("Z")}var i=he(4.5),o=[],a={point:n,lineStart:function(){a.point=t},lineEnd:r,polygonStart:function(){a.lineEnd=u},polygonEnd:function(){a.lineEnd=r,a.point=n},pointRadius:function(n){return i=he(n),a},result:function(){if(o.length){var n=o.join("");return o=[],n}}};return a}function he(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function ge(n,t){mc+=n,yc+=t,++xc}function pe(){function n(n,r){var u=n-t,i=r-e,o=Math.sqrt(u*u+i*i);Mc+=o*(t+n)/2,_c+=o*(e+r)/2,bc+=o,ge(t=n,e=r)}var t,e;Uc.point=function(r,u){Uc.point=n,ge(t=r,e=u)}}function ve(){Uc.point=ge}function de(){function n(n,t){var e=n-r,i=t-u,o=Math.sqrt(e*e+i*i);Mc+=o*(r+n)/2,_c+=o*(u+t)/2,bc+=o,o=u*n-r*t,wc+=o*(r+n),Sc+=o*(u+t),kc+=3*o,ge(r=n,u=t)}var t,e,r,u;Uc.point=function(i,o){Uc.point=n,ge(t=r=i,e=u=o)},Uc.lineEnd=function(){n(t,e)}}function me(n){function t(t,e){n.moveTo(t,e),n.arc(t,e,o,0,Aa)}function e(t,e){n.moveTo(t,e),a.point=r}function r(t,e){n.lineTo(t,e)}function u(){a.point=t}function i(){n.closePath()}var o=4.5,a={point:t,lineStart:function(){a.point=e},lineEnd:u,polygonStart:function(){a.lineEnd=i},polygonEnd:function(){a.lineEnd=u,a.point=t},pointRadius:function(n){return o=n,a},result:c};return a}function ye(n){function t(n){return(a?r:e)(n)}function e(t){return _e(t,function(e,r){e=n(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e=n(e,r),t.point(e[0],e[1])}function r(){x=0/0,S.point=i,t.lineStart()}function i(e,r){var i=qt([e,r]),o=n(e,r);u(x,M,y,_,b,w,x=o[0],M=o[1],y=e,_=i[0],b=i[1],w=i[2],a,t),t.point(x,M)}function o(){S.point=e,t.lineEnd()}function c(){r(),S.point=s,S.lineEnd=l}function s(n,t){i(f=n,h=t),g=x,p=M,v=_,d=b,m=w,S.point=i}function l(){u(x,M,y,_,b,w,g,p,f,v,d,m,a,t),S.lineEnd=o,o()}var f,h,g,p,v,d,m,y,x,M,_,b,w,S={point:e,lineStart:r,lineEnd:o,polygonStart:function(){t.polygonStart(),S.lineStart=c},polygonEnd:function(){t.polygonEnd(),S.lineStart=r}};return S}function u(t,e,r,a,c,s,l,f,h,g,p,v,d,m){var y=l-t,x=f-e,M=y*y+x*x;if(M>4*i&&d--){var _=a+g,b=c+p,w=s+v,S=Math.sqrt(_*_+b*b+w*w),k=Math.asin(w/=S),E=ca(ca(w)-1)<Na||ca(r-h)<Na?(r+h)/2:Math.atan2(b,_),A=n(E,k),C=A[0],N=A[1],L=C-t,T=N-e,q=x*L-y*T;(q*q/M>i||ca((y*L+x*T)/M-.5)>.3||o>a*g+c*p+s*v)&&(u(t,e,r,a,c,s,C,N,E,_/=S,b/=S,w,d,m),m.point(C,N),u(C,N,E,_,b,w,l,f,h,g,p,v,d,m))}}var i=.5,o=Math.cos(30*Ta),a=16;return t.precision=function(n){return arguments.length?(a=(i=n*n)>0&&16,t):Math.sqrt(i)},t}function xe(n){var t=ye(function(t,e){return n([t*qa,e*qa])});return function(n){return Se(t(n))}}function Me(n){this.stream=n}function _e(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function be(n){return we(function(){return n})()}function we(n){function t(n){return n=a(n[0]*Ta,n[1]*Ta),[n[0]*h+c,s-n[1]*h]}function e(n){return n=a.invert((n[0]-c)/h,(s-n[1])/h),n&&[n[0]*qa,n[1]*qa]}function r(){a=oe(o=Ae(m,y,x),i);var n=i(v,d);return c=g-n[0]*h,s=p+n[1]*h,u()}function u(){return l&&(l.valid=!1,l=null),t}var i,o,a,c,s,l,f=ye(function(n,t){return n=i(n,t),[n[0]*h+c,s-n[1]*h]}),h=150,g=480,p=250,v=0,d=0,m=0,y=0,x=0,M=Ac,_=dt,b=null,w=null;return t.stream=function(n){return l&&(l.valid=!1),l=Se(M(o,f(_(n)))),l.valid=!0,l},t.clipAngle=function(n){return arguments.length?(M=null==n?(b=n,Ac):re((b=+n)*Ta),u()):b},t.clipExtent=function(n){return arguments.length?(w=n,_=n?ie(n[0][0],n[0][1],n[1][0],n[1][1]):dt,u()):w},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(g=+n[0],p=+n[1],r()):[g,p]},t.center=function(n){return arguments.length?(v=n[0]%360*Ta,d=n[1]%360*Ta,r()):[v*qa,d*qa]},t.rotate=function(n){return arguments.length?(m=n[0]%360*Ta,y=n[1]%360*Ta,x=n.length>2?n[2]%360*Ta:0,r()):[m*qa,y*qa,x*qa]},Bo.rebind(t,f,"precision"),function(){return i=n.apply(this,arguments),t.invert=i.invert&&e,r()}}function Se(n){return _e(n,function(t,e){n.point(t*Ta,e*Ta)})}function ke(n,t){return[n,t]}function Ee(n,t){return[n>Ea?n-Aa:-Ea>n?n+Aa:n,t]}function Ae(n,t,e){return n?t||e?oe(Ne(n),Le(t,e)):Ne(n):t||e?Le(t,e):Ee}function Ce(n){return function(t,e){return t+=n,[t>Ea?t-Aa:-Ea>t?t+Aa:t,e]}}function Ne(n){var t=Ce(n);return t.invert=Ce(-n),t}function Le(n,t){function e(n,t){var e=Math.cos(t),a=Math.cos(n)*e,c=Math.sin(n)*e,s=Math.sin(t),l=s*r+a*u;return[Math.atan2(c*i-l*o,a*r-s*u),F(l*i+c*o)]}var r=Math.cos(n),u=Math.sin(n),i=Math.cos(t),o=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),a=Math.cos(n)*e,c=Math.sin(n)*e,s=Math.sin(t),l=s*i-c*o;return[Math.atan2(c*i+s*o,a*r+l*u),F(l*r-a*u)]},e}function Te(n,t){var e=Math.cos(n),r=Math.sin(n);return function(u,i,o,a){var c=o*t;null!=u?(u=qe(e,u),i=qe(e,i),(o>0?i>u:u>i)&&(u+=o*Aa)):(u=n+o*Aa,i=n-.5*c);for(var s,l=u;o>0?l>i:i>l;l-=c)a.point((s=jt([e,-r*Math.cos(l),-r*Math.sin(l)]))[0],s[1])}}function qe(n,t){var e=qt(t);e[0]-=n,Ut(e);var r=H(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Na)%(2*Math.PI)}function ze(n,t,e){var r=Bo.range(n,t-Na,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function Re(n,t,e){var r=Bo.range(n,t-Na,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function De(n){return n.source}function Pe(n){return n.target}function Ue(n,t,e,r){var u=Math.cos(t),i=Math.sin(t),o=Math.cos(r),a=Math.sin(r),c=u*Math.cos(n),s=u*Math.sin(n),l=o*Math.cos(e),f=o*Math.sin(e),h=2*Math.asin(Math.sqrt(Z(r-t)+u*o*Z(e-n))),g=1/Math.sin(h),p=h?function(n){var t=Math.sin(n*=h)*g,e=Math.sin(h-n)*g,r=e*c+t*l,u=e*s+t*f,o=e*i+t*a;return[Math.atan2(u,r)*qa,Math.atan2(o,Math.sqrt(r*r+u*u))*qa]}:function(){return[n*qa,t*qa]};return p.distance=h,p}function je(){function n(n,u){var i=Math.sin(u*=Ta),o=Math.cos(u),a=ca((n*=Ta)-t),c=Math.cos(a);jc+=Math.atan2(Math.sqrt((a=o*Math.sin(a))*a+(a=r*i-e*o*c)*a),e*i+r*o*c),t=n,e=i,r=o}var t,e,r;Hc.point=function(u,i){t=u*Ta,e=Math.sin(i*=Ta),r=Math.cos(i),Hc.point=n},Hc.lineEnd=function(){Hc.point=Hc.lineEnd=c}}function He(n,t){function e(t,e){var r=Math.cos(t),u=Math.cos(e),i=n(r*u);return[i*u*Math.sin(t),i*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),u=t(r),i=Math.sin(u),o=Math.cos(u);return[Math.atan2(n*i,r*o),Math.asin(r&&e*i/r)]},e}function Fe(n,t){function e(n,t){var e=ca(ca(t)-Ca)<Na?0:o/Math.pow(u(t),i);return[e*Math.sin(i*n),o-e*Math.cos(i*n)]}var r=Math.cos(n),u=function(n){return Math.tan(Ea/4+n/2)},i=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(u(t)/u(n)),o=r*Math.pow(u(n),i)/i;return i?(e.invert=function(n,t){var e=o-t,r=j(i)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/i,2*Math.atan(Math.pow(o/r,1/i))-Ca]},e):Ye}function Oe(n,t){function e(n,t){var e=i-t;return[e*Math.sin(u*n),i-e*Math.cos(u*n)]}var r=Math.cos(n),u=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),i=r/u+n;return ca(u)<Na?ke:(e.invert=function(n,t){var e=i-t;return[Math.atan2(n,e)/u,i-j(u)*Math.sqrt(n*n+e*e)]},e)}function Ye(n,t){return[n,Math.log(Math.tan(Ea/4+t/2))]}function Ie(n){var t,e=be(n),r=e.scale,u=e.translate,i=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=u.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var o=i.apply(e,arguments);if(o===e){if(t=null==n){var a=Ea*r(),c=u();i([[c[0]-a,c[1]-a],[c[0]+a,c[1]+a]])}}else t&&(o=null);return o},e.clipExtent(null)}function Ze(n,t){return[Math.log(Math.tan(Ea/4+t/2)),-n]}function Ve(n){return n[0]}function Xe(n){return n[1]}function $e(n,t,e,r){var u,i,o,a,c,s,l;return u=r[n],i=u[0],o=u[1],u=r[t],a=u[0],c=u[1],u=r[e],s=u[0],l=u[1],(l-o)*(a-i)-(c-o)*(s-i)>0}function Be(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function We(n,t,e,r){var u=n[0],i=e[0],o=t[0]-u,a=r[0]-i,c=n[1],s=e[1],l=t[1]-c,f=r[1]-s,h=(a*(c-s)-f*(u-i))/(f*o-a*l);return[u+h*o,c+h*l]}function Je(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function Ge(){yr(this),this.edge=this.site=this.circle=null}function Ke(n){var t=Gc.pop()||new Ge;return t.site=n,t}function Qe(n){sr(n),Bc.remove(n),Gc.push(n),yr(n)}function nr(n){var t=n.circle,e=t.x,r=t.cy,u={x:e,y:r},i=n.P,o=n.N,a=[n];Qe(n);for(var c=i;c.circle&&ca(e-c.circle.x)<Na&&ca(r-c.circle.cy)<Na;)i=c.P,a.unshift(c),Qe(c),c=i;a.unshift(c),sr(c);for(var s=o;s.circle&&ca(e-s.circle.x)<Na&&ca(r-s.circle.cy)<Na;)o=s.N,a.push(s),Qe(s),s=o;a.push(s),sr(s);var l,f=a.length;for(l=1;f>l;++l)s=a[l],c=a[l-1],vr(s.edge,c.site,s.site,u);c=a[0],s=a[f-1],s.edge=gr(c.site,s.site,null,u),cr(c),cr(s)}function tr(n){for(var t,e,r,u,i=n.x,o=n.y,a=Bc._;a;)if(r=er(a,o)-i,r>Na)a=a.L;else{if(u=i-rr(a,o),!(u>Na)){r>-Na?(t=a.P,e=a):u>-Na?(t=a,e=a.N):t=e=a;break}if(!a.R){t=a;break}a=a.R}var c=Ke(n);if(Bc.insert(t,c),t||e){if(t===e)return sr(t),e=Ke(t.site),Bc.insert(c,e),c.edge=e.edge=gr(t.site,c.site),cr(t),cr(e),void 0;if(!e)return c.edge=gr(t.site,c.site),void 0;sr(t),sr(e);var s=t.site,l=s.x,f=s.y,h=n.x-l,g=n.y-f,p=e.site,v=p.x-l,d=p.y-f,m=2*(h*d-g*v),y=h*h+g*g,x=v*v+d*d,M={x:(d*y-g*x)/m+l,y:(h*x-v*y)/m+f};vr(e.edge,s,p,M),c.edge=gr(s,n,null,M),e.edge=gr(n,p,null,M),cr(t),cr(e)}}function er(n,t){var e=n.site,r=e.x,u=e.y,i=u-t;if(!i)return r;var o=n.P;if(!o)return-1/0;e=o.site;var a=e.x,c=e.y,s=c-t;if(!s)return a;var l=a-r,f=1/i-1/s,h=l/s;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*s)-c+s/2+u-i/2)))/f+r:(r+a)/2}function rr(n,t){var e=n.N;if(e)return er(e,t);var r=n.site;return r.y===t?r.x:1/0}function ur(n){this.site=n,this.edges=[]}function ir(n){for(var t,e,r,u,i,o,a,c,s,l,f=n[0][0],h=n[1][0],g=n[0][1],p=n[1][1],v=$c,d=v.length;d--;)if(i=v[d],i&&i.prepare())for(a=i.edges,c=a.length,o=0;c>o;)l=a[o].end(),r=l.x,u=l.y,s=a[++o%c].start(),t=s.x,e=s.y,(ca(r-t)>Na||ca(u-e)>Na)&&(a.splice(o,0,new dr(pr(i.site,l,ca(r-f)<Na&&p-u>Na?{x:f,y:ca(t-f)<Na?e:p}:ca(u-p)<Na&&h-r>Na?{x:ca(e-p)<Na?t:h,y:p}:ca(r-h)<Na&&u-g>Na?{x:h,y:ca(t-h)<Na?e:g}:ca(u-g)<Na&&r-f>Na?{x:ca(e-g)<Na?t:f,y:g}:null),i.site,null)),++c)}function or(n,t){return t.angle-n.angle}function ar(){yr(this),this.x=this.y=this.arc=this.site=this.cy=null}function cr(n){var t=n.P,e=n.N;if(t&&e){var r=t.site,u=n.site,i=e.site;if(r!==i){var o=u.x,a=u.y,c=r.x-o,s=r.y-a,l=i.x-o,f=i.y-a,h=2*(c*f-s*l);if(!(h>=-La)){var g=c*c+s*s,p=l*l+f*f,v=(f*g-s*p)/h,d=(c*p-l*g)/h,f=d+a,m=Kc.pop()||new ar;m.arc=n,m.site=u,m.x=v+o,m.y=f+Math.sqrt(v*v+d*d),m.cy=f,n.circle=m;for(var y=null,x=Jc._;x;)if(m.y<x.y||m.y===x.y&&m.x<=x.x){if(!x.L){y=x.P;break}x=x.L}else{if(!x.R){y=x;break}x=x.R}Jc.insert(y,m),y||(Wc=m)}}}}function sr(n){var t=n.circle;t&&(t.P||(Wc=t.N),Jc.remove(t),Kc.push(t),yr(t),n.circle=null)}function lr(n){for(var t,e=Xc,r=ue(n[0][0],n[0][1],n[1][0],n[1][1]),u=e.length;u--;)t=e[u],(!fr(t,n)||!r(t)||ca(t.a.x-t.b.x)<Na&&ca(t.a.y-t.b.y)<Na)&&(t.a=t.b=null,e.splice(u,1))}function fr(n,t){var e=n.b;if(e)return!0;var r,u,i=n.a,o=t[0][0],a=t[1][0],c=t[0][1],s=t[1][1],l=n.l,f=n.r,h=l.x,g=l.y,p=f.x,v=f.y,d=(h+p)/2,m=(g+v)/2;
    if(v===g){if(o>d||d>=a)return;if(h>p){if(i){if(i.y>=s)return}else i={x:d,y:c};e={x:d,y:s}}else{if(i){if(i.y<c)return}else i={x:d,y:s};e={x:d,y:c}}}else if(r=(h-p)/(v-g),u=m-r*d,-1>r||r>1)if(h>p){if(i){if(i.y>=s)return}else i={x:(c-u)/r,y:c};e={x:(s-u)/r,y:s}}else{if(i){if(i.y<c)return}else i={x:(s-u)/r,y:s};e={x:(c-u)/r,y:c}}else if(v>g){if(i){if(i.x>=a)return}else i={x:o,y:r*o+u};e={x:a,y:r*a+u}}else{if(i){if(i.x<o)return}else i={x:a,y:r*a+u};e={x:o,y:r*o+u}}return n.a=i,n.b=e,!0}function hr(n,t){this.l=n,this.r=t,this.a=this.b=null}function gr(n,t,e,r){var u=new hr(n,t);return Xc.push(u),e&&vr(u,n,t,e),r&&vr(u,t,n,r),$c[n.i].edges.push(new dr(u,n,t)),$c[t.i].edges.push(new dr(u,t,n)),u}function pr(n,t,e){var r=new hr(n,null);return r.a=t,r.b=e,Xc.push(r),r}function vr(n,t,e,r){n.a||n.b?n.l===e?n.b=r:n.a=r:(n.a=r,n.l=t,n.r=e)}function dr(n,t,e){var r=n.a,u=n.b;this.edge=n,this.site=t,this.angle=e?Math.atan2(e.y-t.y,e.x-t.x):n.l===t?Math.atan2(u.x-r.x,r.y-u.y):Math.atan2(r.x-u.x,u.y-r.y)}function mr(){this._=null}function yr(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function xr(n,t){var e=t,r=t.R,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Mr(n,t){var e=t,r=t.L,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function _r(n){for(;n.L;)n=n.L;return n}function br(n,t){var e,r,u,i=n.sort(wr).pop();for(Xc=[],$c=new Array(n.length),Bc=new mr,Jc=new mr;;)if(u=Wc,i&&(!u||i.y<u.y||i.y===u.y&&i.x<u.x))(i.x!==e||i.y!==r)&&($c[i.i]=new ur(i),tr(i),e=i.x,r=i.y),i=n.pop();else{if(!u)break;nr(u.arc)}t&&(lr(t),ir(t));var o={cells:$c,edges:Xc};return Bc=Jc=Xc=$c=null,o}function wr(n,t){return t.y-n.y||t.x-n.x}function Sr(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function kr(n){return n.x}function Er(n){return n.y}function Ar(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function Cr(n,t,e,r,u,i){if(!n(t,e,r,u,i)){var o=.5*(e+u),a=.5*(r+i),c=t.nodes;c[0]&&Cr(n,c[0],e,r,o,a),c[1]&&Cr(n,c[1],o,r,u,a),c[2]&&Cr(n,c[2],e,a,o,i),c[3]&&Cr(n,c[3],o,a,u,i)}}function Nr(n,t){n=Bo.rgb(n),t=Bo.rgb(t);var e=n.r,r=n.g,u=n.b,i=t.r-e,o=t.g-r,a=t.b-u;return function(n){return"#"+st(Math.round(e+i*n))+st(Math.round(r+o*n))+st(Math.round(u+a*n))}}function Lr(n,t){var e,r={},u={};for(e in n)e in t?r[e]=zr(n[e],t[e]):u[e]=n[e];for(e in t)e in n||(u[e]=t[e]);return function(n){for(e in r)u[e]=r[e](n);return u}}function Tr(n,t){return t-=n=+n,function(e){return n+t*e}}function qr(n,t){var e,r,u,i,o,a=0,c=0,s=[],l=[];for(n+="",t+="",ns.lastIndex=0,r=0;e=ns.exec(t);++r)e.index&&s.push(t.substring(a,c=e.index)),l.push({i:s.length,x:e[0]}),s.push(null),a=ns.lastIndex;for(a<t.length&&s.push(t.substring(a)),r=0,i=l.length;(e=ns.exec(n))&&i>r;++r)if(o=l[r],o.x==e[0]){if(o.i)if(null==s[o.i+1])for(s[o.i-1]+=o.x,s.splice(o.i,1),u=r+1;i>u;++u)l[u].i--;else for(s[o.i-1]+=o.x+s[o.i+1],s.splice(o.i,2),u=r+1;i>u;++u)l[u].i-=2;else if(null==s[o.i+1])s[o.i]=o.x;else for(s[o.i]=o.x+s[o.i+1],s.splice(o.i+1,1),u=r+1;i>u;++u)l[u].i--;l.splice(r,1),i--,r--}else o.x=Tr(parseFloat(e[0]),parseFloat(o.x));for(;i>r;)o=l.pop(),null==s[o.i+1]?s[o.i]=o.x:(s[o.i]=o.x+s[o.i+1],s.splice(o.i+1,1)),i--;return 1===s.length?null==s[0]?(o=l[0].x,function(n){return o(n)+""}):function(){return t}:function(n){for(r=0;i>r;++r)s[(o=l[r]).i]=o.x(n);return s.join("")}}function zr(n,t){for(var e,r=Bo.interpolators.length;--r>=0&&!(e=Bo.interpolators[r](n,t)););return e}function Rr(n,t){var e,r=[],u=[],i=n.length,o=t.length,a=Math.min(n.length,t.length);for(e=0;a>e;++e)r.push(zr(n[e],t[e]));for(;i>e;++e)u[e]=n[e];for(;o>e;++e)u[e]=t[e];return function(n){for(e=0;a>e;++e)u[e]=r[e](n);return u}}function Dr(n){return function(t){return 0>=t?0:t>=1?1:n(t)}}function Pr(n){return function(t){return 1-n(1-t)}}function Ur(n){return function(t){return.5*(.5>t?n(2*t):2-n(2-2*t))}}function jr(n){return n*n}function Hr(n){return n*n*n}function Fr(n){if(0>=n)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(.5>n?e:3*(n-t)+e-.75)}function Or(n){return function(t){return Math.pow(t,n)}}function Yr(n){return 1-Math.cos(n*Ca)}function Ir(n){return Math.pow(2,10*(n-1))}function Zr(n){return 1-Math.sqrt(1-n*n)}function Vr(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/Aa*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*Aa/t)}}function Xr(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function $r(n){return 1/2.75>n?7.5625*n*n:2/2.75>n?7.5625*(n-=1.5/2.75)*n+.75:2.5/2.75>n?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Br(n,t){n=Bo.hcl(n),t=Bo.hcl(t);var e=n.h,r=n.c,u=n.l,i=t.h-e,o=t.c-r,a=t.l-u;return isNaN(o)&&(o=0,r=isNaN(r)?t.c:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return G(e+i*n,r+o*n,u+a*n)+""}}function Wr(n,t){n=Bo.hsl(n),t=Bo.hsl(t);var e=n.h,r=n.s,u=n.l,i=t.h-e,o=t.s-r,a=t.l-u;return isNaN(o)&&(o=0,r=isNaN(r)?t.s:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return B(e+i*n,r+o*n,u+a*n)+""}}function Jr(n,t){n=Bo.lab(n),t=Bo.lab(t);var e=n.l,r=n.a,u=n.b,i=t.l-e,o=t.a-r,a=t.b-u;return function(n){return nt(e+i*n,r+o*n,u+a*n)+""}}function Gr(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function Kr(n){var t=[n.a,n.b],e=[n.c,n.d],r=nu(t),u=Qr(t,e),i=nu(tu(e,t,-u))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,u*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*qa,this.translate=[n.e,n.f],this.scale=[r,i],this.skew=i?Math.atan2(u,i)*qa:0}function Qr(n,t){return n[0]*t[0]+n[1]*t[1]}function nu(n){var t=Math.sqrt(Qr(n,n));return t&&(n[0]/=t,n[1]/=t),t}function tu(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function eu(n,t){var e,r=[],u=[],i=Bo.transform(n),o=Bo.transform(t),a=i.translate,c=o.translate,s=i.rotate,l=o.rotate,f=i.skew,h=o.skew,g=i.scale,p=o.scale;return a[0]!=c[0]||a[1]!=c[1]?(r.push("translate(",null,",",null,")"),u.push({i:1,x:Tr(a[0],c[0])},{i:3,x:Tr(a[1],c[1])})):c[0]||c[1]?r.push("translate("+c+")"):r.push(""),s!=l?(s-l>180?l+=360:l-s>180&&(s+=360),u.push({i:r.push(r.pop()+"rotate(",null,")")-2,x:Tr(s,l)})):l&&r.push(r.pop()+"rotate("+l+")"),f!=h?u.push({i:r.push(r.pop()+"skewX(",null,")")-2,x:Tr(f,h)}):h&&r.push(r.pop()+"skewX("+h+")"),g[0]!=p[0]||g[1]!=p[1]?(e=r.push(r.pop()+"scale(",null,",",null,")"),u.push({i:e-4,x:Tr(g[0],p[0])},{i:e-2,x:Tr(g[1],p[1])})):(1!=p[0]||1!=p[1])&&r.push(r.pop()+"scale("+p+")"),e=u.length,function(n){for(var t,i=-1;++i<e;)r[(t=u[i]).i]=t.x(n);return r.join("")}}function ru(n,t){return t=t-(n=+n)?1/(t-n):0,function(e){return(e-n)*t}}function uu(n,t){return t=t-(n=+n)?1/(t-n):0,function(e){return Math.max(0,Math.min(1,(e-n)*t))}}function iu(n){for(var t=n.source,e=n.target,r=au(t,e),u=[t];t!==r;)t=t.parent,u.push(t);for(var i=u.length;e!==r;)u.splice(i,0,e),e=e.parent;return u}function ou(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function au(n,t){if(n===t)return n;for(var e=ou(n),r=ou(t),u=e.pop(),i=r.pop(),o=null;u===i;)o=u,u=e.pop(),i=r.pop();return o}function cu(n){n.fixed|=2}function su(n){n.fixed&=-7}function lu(n){n.fixed|=4,n.px=n.x,n.py=n.y}function fu(n){n.fixed&=-5}function hu(n,t,e){var r=0,u=0;if(n.charge=0,!n.leaf)for(var i,o=n.nodes,a=o.length,c=-1;++c<a;)i=o[c],null!=i&&(hu(i,t,e),n.charge+=i.charge,r+=i.charge*i.cx,u+=i.charge*i.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var s=t*e[n.point.index];n.charge+=n.pointCharge=s,r+=s*n.point.x,u+=s*n.point.y}n.cx=r/n.charge,n.cy=u/n.charge}function gu(n,t){return Bo.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=mu,n}function pu(n){return n.children}function vu(n){return n.value}function du(n,t){return t.value-n.value}function mu(n){return Bo.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function yu(n){return n.x}function xu(n){return n.y}function Mu(n,t,e){n.y0=t,n.y=e}function _u(n){return Bo.range(n.length)}function bu(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function wu(n){for(var t,e=1,r=0,u=n[0][1],i=n.length;i>e;++e)(t=n[e][1])>u&&(r=e,u=t);return r}function Su(n){return n.reduce(ku,0)}function ku(n,t){return n+t[1]}function Eu(n,t){return Au(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function Au(n,t){for(var e=-1,r=+n[0],u=(n[1]-r)/t,i=[];++e<=t;)i[e]=u*e+r;return i}function Cu(n){return[Bo.min(n),Bo.max(n)]}function Nu(n,t){return n.parent==t.parent?1:2}function Lu(n){var t=n.children;return t&&t.length?t[0]:n._tree.thread}function Tu(n){var t,e=n.children;return e&&(t=e.length)?e[t-1]:n._tree.thread}function qu(n,t){var e=n.children;if(e&&(u=e.length))for(var r,u,i=-1;++i<u;)t(r=qu(e[i],t),n)>0&&(n=r);return n}function zu(n,t){return n.x-t.x}function Ru(n,t){return t.x-n.x}function Du(n,t){return n.depth-t.depth}function Pu(n,t){function e(n,r){var u=n.children;if(u&&(o=u.length))for(var i,o,a=null,c=-1;++c<o;)i=u[c],e(i,a),a=i;t(n,r)}e(n,null)}function Uu(n){for(var t,e=0,r=0,u=n.children,i=u.length;--i>=0;)t=u[i]._tree,t.prelim+=e,t.mod+=e,e+=t.shift+(r+=t.change)}function ju(n,t,e){n=n._tree,t=t._tree;var r=e/(t.number-n.number);n.change+=r,t.change-=r,t.shift+=e,t.prelim+=e,t.mod+=e}function Hu(n,t,e){return n._tree.ancestor.parent==t.parent?n._tree.ancestor:e}function Fu(n,t){return n.value-t.value}function Ou(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function Yu(n,t){n._pack_next=t,t._pack_prev=n}function Iu(n,t){var e=t.x-n.x,r=t.y-n.y,u=n.r+t.r;return.999*u*u>e*e+r*r}function Zu(n){function t(n){l=Math.min(n.x-n.r,l),f=Math.max(n.x+n.r,f),h=Math.min(n.y-n.r,h),g=Math.max(n.y+n.r,g)}if((e=n.children)&&(s=e.length)){var e,r,u,i,o,a,c,s,l=1/0,f=-1/0,h=1/0,g=-1/0;if(e.forEach(Vu),r=e[0],r.x=-r.r,r.y=0,t(r),s>1&&(u=e[1],u.x=u.r,u.y=0,t(u),s>2))for(i=e[2],Bu(r,u,i),t(i),Ou(r,i),r._pack_prev=i,Ou(i,u),u=r._pack_next,o=3;s>o;o++){Bu(r,u,i=e[o]);var p=0,v=1,d=1;for(a=u._pack_next;a!==u;a=a._pack_next,v++)if(Iu(a,i)){p=1;break}if(1==p)for(c=r._pack_prev;c!==a._pack_prev&&!Iu(c,i);c=c._pack_prev,d++);p?(d>v||v==d&&u.r<r.r?Yu(r,u=a):Yu(r=c,u),o--):(Ou(r,i),u=i,t(i))}var m=(l+f)/2,y=(h+g)/2,x=0;for(o=0;s>o;o++)i=e[o],i.x-=m,i.y-=y,x=Math.max(x,i.r+Math.sqrt(i.x*i.x+i.y*i.y));n.r=x,e.forEach(Xu)}}function Vu(n){n._pack_next=n._pack_prev=n}function Xu(n){delete n._pack_next,delete n._pack_prev}function $u(n,t,e,r){var u=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,u)for(var i=-1,o=u.length;++i<o;)$u(u[i],t,e,r)}function Bu(n,t,e){var r=n.r+e.r,u=t.x-n.x,i=t.y-n.y;if(r&&(u||i)){var o=t.r+e.r,a=u*u+i*i;o*=o,r*=r;var c=.5+(r-o)/(2*a),s=Math.sqrt(Math.max(0,2*o*(r+a)-(r-=a)*r-o*o))/(2*a);e.x=n.x+c*u+s*i,e.y=n.y+c*i-s*u}else e.x=n.x+r,e.y=n.y}function Wu(n){return 1+Bo.max(n,function(n){return n.y})}function Ju(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Gu(n){var t=n.children;return t&&t.length?Gu(t[0]):n}function Ku(n){var t,e=n.children;return e&&(t=e.length)?Ku(e[t-1]):n}function Qu(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function ni(n,t){var e=n.x+t[3],r=n.y+t[0],u=n.dx-t[1]-t[3],i=n.dy-t[0]-t[2];return 0>u&&(e+=u/2,u=0),0>i&&(r+=i/2,i=0),{x:e,y:r,dx:u,dy:i}}function ti(n){var t=n[0],e=n[n.length-1];return e>t?[t,e]:[e,t]}function ei(n){return n.rangeExtent?n.rangeExtent():ti(n.range())}function ri(n,t,e,r){var u=e(n[0],n[1]),i=r(t[0],t[1]);return function(n){return i(u(n))}}function ui(n,t){var e,r=0,u=n.length-1,i=n[r],o=n[u];return i>o&&(e=r,r=u,u=e,e=i,i=o,o=e),n[r]=t.floor(i),n[u]=t.ceil(o),n}function ii(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:ls}function oi(n,t,e,r){var u=[],i=[],o=0,a=Math.min(n.length,t.length)-1;for(n[a]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++o<=a;)u.push(e(n[o-1],n[o])),i.push(r(t[o-1],t[o]));return function(t){var e=Bo.bisect(n,t,1,a)-1;return i[e](u[e](t))}}function ai(n,t,e,r){function u(){var u=Math.min(n.length,t.length)>2?oi:ri,c=r?uu:ru;return o=u(n,t,c,e),a=u(t,n,c,zr),i}function i(n){return o(n)}var o,a;return i.invert=function(n){return a(n)},i.domain=function(t){return arguments.length?(n=t.map(Number),u()):n},i.range=function(n){return arguments.length?(t=n,u()):t},i.rangeRound=function(n){return i.range(n).interpolate(Gr)},i.clamp=function(n){return arguments.length?(r=n,u()):r},i.interpolate=function(n){return arguments.length?(e=n,u()):e},i.ticks=function(t){return fi(n,t)},i.tickFormat=function(t,e){return hi(n,t,e)},i.nice=function(t){return si(n,t),u()},i.copy=function(){return ai(n,t,e,r)},u()}function ci(n,t){return Bo.rebind(n,t,"range","rangeRound","interpolate","clamp")}function si(n,t){return ui(n,ii(li(n,t)[2]))}function li(n,t){null==t&&(t=10);var e=ti(n),r=e[1]-e[0],u=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),i=t/r*u;return.15>=i?u*=10:.35>=i?u*=5:.75>=i&&(u*=2),e[0]=Math.ceil(e[0]/u)*u,e[1]=Math.floor(e[1]/u)*u+.5*u,e[2]=u,e}function fi(n,t){return Bo.range.apply(Bo,li(n,t))}function hi(n,t,e){var r=li(n,t);return Bo.format(e?e.replace(ic,function(n,t,e,u,i,o,a,c,s,l){return[t,e,u,i,o,a,c,s||"."+pi(l,r),l].join("")}):",."+gi(r[2])+"f")}function gi(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function pi(n,t){var e=gi(t[2]);return n in fs?Math.abs(e-gi(Math.max(Math.abs(t[0]),Math.abs(t[1]))))+ +("e"!==n):e-2*("%"===n)}function vi(n,t,e,r){function u(n){return(e?Math.log(0>n?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function i(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function o(t){return n(u(t))}return o.invert=function(t){return i(n.invert(t))},o.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(u)),o):r},o.base=function(e){return arguments.length?(t=+e,n.domain(r.map(u)),o):t},o.nice=function(){var t=ui(r.map(u),e?Math:gs);return n.domain(t),r=t.map(i),o},o.ticks=function(){var n=ti(r),o=[],a=n[0],c=n[1],s=Math.floor(u(a)),l=Math.ceil(u(c)),f=t%1?2:t;if(isFinite(l-s)){if(e){for(;l>s;s++)for(var h=1;f>h;h++)o.push(i(s)*h);o.push(i(s))}else for(o.push(i(s));s++<l;)for(var h=f-1;h>0;h--)o.push(i(s)*h);for(s=0;o[s]<a;s++);for(l=o.length;o[l-1]>c;l--);o=o.slice(s,l)}return o},o.tickFormat=function(n,t){if(!arguments.length)return hs;arguments.length<2?t=hs:"function"!=typeof t&&(t=Bo.format(t));var r,a=Math.max(.1,n/o.ticks().length),c=e?(r=1e-12,Math.ceil):(r=-1e-12,Math.floor);return function(n){return n/i(c(u(n)+r))<=a?t(n):""}},o.copy=function(){return vi(n.copy(),t,e,r)},ci(o,n)}function di(n,t,e){function r(t){return n(u(t))}var u=mi(t),i=mi(1/t);return r.invert=function(t){return i(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(u)),r):e},r.ticks=function(n){return fi(e,n)},r.tickFormat=function(n,t){return hi(e,n,t)},r.nice=function(n){return r.domain(si(e,n))},r.exponent=function(o){return arguments.length?(u=mi(t=o),i=mi(1/t),n.domain(e.map(u)),r):t},r.copy=function(){return di(n.copy(),t,e)},ci(r,n)}function mi(n){return function(t){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}}function yi(n,t){function e(e){return o[((i.get(e)||"range"===t.t&&i.set(e,n.push(e)))-1)%o.length]}function r(t,e){return Bo.range(n.length).map(function(n){return t+e*n})}var i,o,a;return e.domain=function(r){if(!arguments.length)return n;n=[],i=new u;for(var o,a=-1,c=r.length;++a<c;)i.has(o=r[a])||i.set(o,n.push(o));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(o=n,a=0,t={t:"range",a:arguments},e):o},e.rangePoints=function(u,i){arguments.length<2&&(i=0);var c=u[0],s=u[1],l=(s-c)/(Math.max(1,n.length-1)+i);return o=r(n.length<2?(c+s)/2:c+l*i/2,l),a=0,t={t:"rangePoints",a:arguments},e},e.rangeBands=function(u,i,c){arguments.length<2&&(i=0),arguments.length<3&&(c=i);var s=u[1]<u[0],l=u[s-0],f=u[1-s],h=(f-l)/(n.length-i+2*c);return o=r(l+h*c,h),s&&o.reverse(),a=h*(1-i),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(u,i,c){arguments.length<2&&(i=0),arguments.length<3&&(c=i);var s=u[1]<u[0],l=u[s-0],f=u[1-s],h=Math.floor((f-l)/(n.length-i+2*c)),g=f-l-(n.length-i)*h;return o=r(l+Math.round(g/2),h),s&&o.reverse(),a=Math.round(h*(1-i)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return a},e.rangeExtent=function(){return ti(t.a[0])},e.copy=function(){return yi(n,t)},e.domain(n)}function xi(n,t){function e(){var e=0,i=t.length;for(u=[];++e<i;)u[e-1]=Bo.quantile(n,e/i);return r}function r(n){return isNaN(n=+n)?void 0:t[Bo.bisect(u,n)]}var u;return r.domain=function(t){return arguments.length?(n=t.filter(function(n){return!isNaN(n)}).sort(Bo.ascending),e()):n},r.range=function(n){return arguments.length?(t=n,e()):t},r.quantiles=function(){return u},r.invertExtent=function(e){return e=t.indexOf(e),0>e?[0/0,0/0]:[e>0?u[e-1]:n[0],e<u.length?u[e]:n[n.length-1]]},r.copy=function(){return xi(n,t)},e()}function Mi(n,t,e){function r(t){return e[Math.max(0,Math.min(o,Math.floor(i*(t-n))))]}function u(){return i=e.length/(t-n),o=e.length-1,r}var i,o;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],u()):[n,t]},r.range=function(n){return arguments.length?(e=n,u()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=0>t?0/0:t/i+n,[t,t+1/i]},r.copy=function(){return Mi(n,t,e)},u()}function _i(n,t){function e(e){return e>=e?t[Bo.bisect(n,e)]:void 0}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return _i(n,t)},e}function bi(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return fi(n,t)},t.tickFormat=function(t,e){return hi(n,t,e)},t.copy=function(){return bi(n)},t}function wi(n){return n.innerRadius}function Si(n){return n.outerRadius}function ki(n){return n.startAngle}function Ei(n){return n.endAngle}function Ai(n){function t(t){function o(){s.push("M",i(n(l),a))}for(var c,s=[],l=[],f=-1,h=t.length,g=vt(e),p=vt(r);++f<h;)u.call(this,c=t[f],f)?l.push([+g.call(this,c,f),+p.call(this,c,f)]):l.length&&(o(),l=[]);return l.length&&o(),s.length?s.join(""):null}var e=Ve,r=Xe,u=Vt,i=Ci,o=i.key,a=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.defined=function(n){return arguments.length?(u=n,t):u},t.interpolate=function(n){return arguments.length?(o="function"==typeof n?i=n:(i=Ms.get(n)||Ci).key,t):o},t.tension=function(n){return arguments.length?(a=n,t):a},t}function Ci(n){return n.join("L")}function Ni(n){return Ci(n)+"Z"}function Li(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&u.push("H",r[0]),u.join("")}function Ti(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("V",(r=n[t])[1],"H",r[0]);return u.join("")}function qi(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r=n[t])[0],"V",r[1]);return u.join("")}function zi(n,t){return n.length<4?Ci(n):n[1]+Pi(n.slice(1,n.length-1),Ui(n,t))}function Ri(n,t){return n.length<3?Ci(n):n[0]+Pi((n.push(n[0]),n),Ui([n[n.length-2]].concat(n,[n[1]]),t))}function Di(n,t){return n.length<3?Ci(n):n[0]+Pi(n,Ui(n,t))}function Pi(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return Ci(n);var e=n.length!=t.length,r="",u=n[0],i=n[1],o=t[0],a=o,c=1;if(e&&(r+="Q"+(i[0]-2*o[0]/3)+","+(i[1]-2*o[1]/3)+","+i[0]+","+i[1],u=n[1],c=2),t.length>1){a=t[1],i=n[c],c++,r+="C"+(u[0]+o[0])+","+(u[1]+o[1])+","+(i[0]-a[0])+","+(i[1]-a[1])+","+i[0]+","+i[1];for(var s=2;s<t.length;s++,c++)i=n[c],a=t[s],r+="S"+(i[0]-a[0])+","+(i[1]-a[1])+","+i[0]+","+i[1]}if(e){var l=n[c];r+="Q"+(i[0]+2*a[0]/3)+","+(i[1]+2*a[1]/3)+","+l[0]+","+l[1]}return r}function Ui(n,t){for(var e,r=[],u=(1-t)/2,i=n[0],o=n[1],a=1,c=n.length;++a<c;)e=i,i=o,o=n[a],r.push([u*(o[0]-e[0]),u*(o[1]-e[1])]);return r}function ji(n){if(n.length<3)return Ci(n);var t=1,e=n.length,r=n[0],u=r[0],i=r[1],o=[u,u,u,(r=n[1])[0]],a=[i,i,i,r[1]],c=[u,",",i,"L",Yi(ws,o),",",Yi(ws,a)];for(n.push(n[e-1]);++t<=e;)r=n[t],o.shift(),o.push(r[0]),a.shift(),a.push(r[1]),Ii(c,o,a);return n.pop(),c.push("L",r),c.join("")}function Hi(n){if(n.length<4)return Ci(n);for(var t,e=[],r=-1,u=n.length,i=[0],o=[0];++r<3;)t=n[r],i.push(t[0]),o.push(t[1]);for(e.push(Yi(ws,i)+","+Yi(ws,o)),--r;++r<u;)t=n[r],i.shift(),i.push(t[0]),o.shift(),o.push(t[1]),Ii(e,i,o);return e.join("")}function Fi(n){for(var t,e,r=-1,u=n.length,i=u+4,o=[],a=[];++r<4;)e=n[r%u],o.push(e[0]),a.push(e[1]);for(t=[Yi(ws,o),",",Yi(ws,a)],--r;++r<i;)e=n[r%u],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),Ii(t,o,a);return t.join("")}function Oi(n,t){var e=n.length-1;if(e)for(var r,u,i=n[0][0],o=n[0][1],a=n[e][0]-i,c=n[e][1]-o,s=-1;++s<=e;)r=n[s],u=s/e,r[0]=t*r[0]+(1-t)*(i+u*a),r[1]=t*r[1]+(1-t)*(o+u*c);return ji(n)}function Yi(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function Ii(n,t,e){n.push("C",Yi(_s,t),",",Yi(_s,e),",",Yi(bs,t),",",Yi(bs,e),",",Yi(ws,t),",",Yi(ws,e))}function Zi(n,t){return(t[1]-n[1])/(t[0]-n[0])}function Vi(n){for(var t=0,e=n.length-1,r=[],u=n[0],i=n[1],o=r[0]=Zi(u,i);++t<e;)r[t]=(o+(o=Zi(u=i,i=n[t+1])))/2;return r[t]=o,r}function Xi(n){for(var t,e,r,u,i=[],o=Vi(n),a=-1,c=n.length-1;++a<c;)t=Zi(n[a],n[a+1]),ca(t)<Na?o[a]=o[a+1]=0:(e=o[a]/t,r=o[a+1]/t,u=e*e+r*r,u>9&&(u=3*t/Math.sqrt(u),o[a]=u*e,o[a+1]=u*r));for(a=-1;++a<=c;)u=(n[Math.min(c,a+1)][0]-n[Math.max(0,a-1)][0])/(6*(1+o[a]*o[a])),i.push([u||0,o[a]*u||0]);return i}function $i(n){return n.length<3?Ci(n):n[0]+Pi(n,Xi(n))}function Bi(n){for(var t,e,r,u=-1,i=n.length;++u<i;)t=n[u],e=t[0],r=t[1]+ys,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function Wi(n){function t(t){function c(){v.push("M",a(n(m),f),l,s(n(d.reverse()),f),"Z")}for(var h,g,p,v=[],d=[],m=[],y=-1,x=t.length,M=vt(e),_=vt(u),b=e===r?function(){return g}:vt(r),w=u===i?function(){return p}:vt(i);++y<x;)o.call(this,h=t[y],y)?(d.push([g=+M.call(this,h,y),p=+_.call(this,h,y)]),m.push([+b.call(this,h,y),+w.call(this,h,y)])):d.length&&(c(),d=[],m=[]);return d.length&&c(),v.length?v.join(""):null}var e=Ve,r=Ve,u=0,i=Xe,o=Vt,a=Ci,c=a.key,s=a,l="L",f=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,t):e},t.x1=function(n){return arguments.length?(r=n,t):r},t.y=function(n){return arguments.length?(u=i=n,t):i},t.y0=function(n){return arguments.length?(u=n,t):u},t.y1=function(n){return arguments.length?(i=n,t):i},t.defined=function(n){return arguments.length?(o=n,t):o},t.interpolate=function(n){return arguments.length?(c="function"==typeof n?a=n:(a=Ms.get(n)||Ci).key,s=a.reverse||a,l=a.closed?"M":"L",t):c},t.tension=function(n){return arguments.length?(f=n,t):f},t}function Ji(n){return n.radius}function Gi(n){return[n.x,n.y]}function Ki(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]+ys;return[e*Math.cos(r),e*Math.sin(r)]}}function Qi(){return 64}function no(){return"circle"}function to(n){var t=Math.sqrt(n/Ea);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function eo(n,t){return ga(n,Ns),n.id=t,n}function ro(n,t,e,r){var u=n.id;return N(n,"function"==typeof e?function(n,i,o){n.__transition__[u].tween.set(t,r(e.call(n,n.__data__,i,o)))}:(e=r(e),function(n){n.__transition__[u].tween.set(t,e)}))}function uo(n){return null==n&&(n=""),function(){this.textContent=n}}function io(n,t,e,r){var i=n.__transition__||(n.__transition__={active:0,count:0}),o=i[e];if(!o){var a=r.time;o=i[e]={tween:new u,time:a,ease:r.ease,delay:r.delay,duration:r.duration},++i.count,Bo.timer(function(r){function u(r){return i.active>e?s():(i.active=e,o.event&&o.event.start.call(n,l,t),o.tween.forEach(function(e,r){(r=r.call(n,l,t))&&v.push(r)}),Bo.timer(function(){return p.c=c(r||1)?Vt:c,1},0,a),void 0)}function c(r){if(i.active!==e)return s();for(var u=r/g,a=f(u),c=v.length;c>0;)v[--c].call(n,a);return u>=1?(o.event&&o.event.end.call(n,l,t),s()):void 0}function s(){return--i.count?delete i[e]:delete n.__transition__,1}var l=n.__data__,f=o.ease,h=o.delay,g=o.duration,p=Ka,v=[];return p.t=h+a,r>=h?u(r-h):(p.c=u,void 0)},0,a)}}function oo(n,t){n.attr("transform",function(n){return"translate("+t(n)+",0)"})}function ao(n,t){n.attr("transform",function(n){return"translate(0,"+t(n)+")"})}function co(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function so(n,t,e){function r(t){var e=n(t),r=i(e,1);return r-t>t-e?e:r}function u(e){return t(e=n(new Ps(e-1)),1),e}function i(n,e){return t(n=new Ps(+n),e),n}function o(n,r,i){var o=u(n),a=[];if(i>1)for(;r>o;)e(o)%i||a.push(new Date(+o)),t(o,1);else for(;r>o;)a.push(new Date(+o)),t(o,1);return a}function a(n,t,e){try{Ps=co;var r=new co;return r._=n,o(r,t,e)}finally{Ps=Date}}n.floor=n,n.round=r,n.ceil=u,n.offset=i,n.range=o;var c=n.utc=lo(n);return c.floor=c,c.round=lo(r),c.ceil=lo(u),c.offset=lo(i),c.range=a,n}function lo(n){return function(t,e){try{Ps=co;var r=new co;return r._=t,n(r,e)._}finally{Ps=Date}}}function fo(n){function t(t){for(var r,u,i,o=[],a=-1,c=0;++a<e;)37===n.charCodeAt(a)&&(o.push(n.substring(c,a)),null!=(u=tl[r=n.charAt(++a)])&&(r=n.charAt(++a)),(i=el[r])&&(r=i(t,null==u?"e"===r?" ":"0":u)),o.push(r),c=a+1);return o.push(n.substring(c,a)),o.join("")}var e=n.length;return t.parse=function(t){var e={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},r=ho(e,n,t,0);if(r!=t.length)return null;"p"in e&&(e.H=e.H%12+12*e.p);var u=null!=e.Z&&Ps!==co,i=new(u?co:Ps);return"j"in e?i.setFullYear(e.y,0,e.j):"w"in e&&("W"in e||"U"in e)?(i.setFullYear(e.y,0,1),i.setFullYear(e.y,0,"W"in e?(e.w+6)%7+7*e.W-(i.getDay()+5)%7:e.w+7*e.U-(i.getDay()+6)%7)):i.setFullYear(e.y,e.m,e.d),i.setHours(e.H+Math.floor(e.Z/100),e.M+e.Z%100,e.S,e.L),u?i._:i},t.toString=function(){return n},t}function ho(n,t,e,r){for(var u,i,o,a=0,c=t.length,s=e.length;c>a;){if(r>=s)return-1;if(u=t.charCodeAt(a++),37===u){if(o=t.charAt(a++),i=rl[o in tl?t.charAt(a++):o],!i||(r=i(n,e,r))<0)return-1}else if(u!=e.charCodeAt(r++))return-1}return r}function go(n){return new RegExp("^(?:"+n.map(Bo.requote).join("|")+")","i")}function po(n){for(var t=new u,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function vo(n,t,e){var r=0>n?"-":"",u=(r?-n:n)+"",i=u.length;return r+(e>i?new Array(e-i+1).join(t)+u:u)}function mo(n,t,e){Bs.lastIndex=0;var r=Bs.exec(t.substring(e));return r?(n.w=Ws.get(r[0].toLowerCase()),e+r[0].length):-1}function yo(n,t,e){Xs.lastIndex=0;var r=Xs.exec(t.substring(e));return r?(n.w=$s.get(r[0].toLowerCase()),e+r[0].length):-1}function xo(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function Mo(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e));return r?(n.U=+r[0],e+r[0].length):-1}function _o(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e));return r?(n.W=+r[0],e+r[0].length):-1}function bo(n,t,e){Ks.lastIndex=0;var r=Ks.exec(t.substring(e));return r?(n.m=Qs.get(r[0].toLowerCase()),e+r[0].length):-1}function wo(n,t,e){Js.lastIndex=0;var r=Js.exec(t.substring(e));return r?(n.m=Gs.get(r[0].toLowerCase()),e+r[0].length):-1}function So(n,t,e){return ho(n,el.c.toString(),t,e)}function ko(n,t,e){return ho(n,el.x.toString(),t,e)}function Eo(n,t,e){return ho(n,el.X.toString(),t,e)}function Ao(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function Co(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+2));return r?(n.y=Lo(+r[0]),e+r[0].length):-1}function No(n,t,e){return/^[+-]\d{4}$/.test(t=t.substring(e,e+5))?(n.Z=+t,e+5):-1}function Lo(n){return n+(n>68?1900:2e3)}function To(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function qo(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function zo(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function Ro(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function Do(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function Po(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function Uo(n,t,e){ul.lastIndex=0;var r=ul.exec(t.substring(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function jo(n,t,e){var r=il.get(t.substring(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}function Ho(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=~~(ca(t)/60),u=ca(t)%60;return e+vo(r,"0",2)+vo(u,"0",2)}function Fo(n,t,e){nl.lastIndex=0;var r=nl.exec(t.substring(e,e+1));return r?e+r[0].length:-1}function Oo(n){function t(n){try{Ps=co;var t=new Ps;return t._=n,e(t)}finally{Ps=Date}}var e=fo(n);return t.parse=function(n){try{Ps=co;var t=e.parse(n);return t&&t._}finally{Ps=Date}},t.toString=e.toString,t}function Yo(n){return n.toISOString()}function Io(n,t,e){function r(t){return n(t)}function u(n,e){var r=n[1]-n[0],u=r/e,i=Bo.bisect(al,u);return i==al.length?[t.year,li(n.map(function(n){return n/31536e6}),e)[2]]:i?t[u/al[i-1]<al[i]/u?i-1:i]:[fl,li(n,e)[2]]}return r.invert=function(t){return Zo(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(Zo)},r.nice=function(n,t){function e(e){return!isNaN(e)&&!n.range(e,Zo(+e+1),t).length}var i=r.domain(),o=ti(i),a=null==n?u(o,10):"number"==typeof n&&u(o,n);return a&&(n=a[0],t=a[1]),r.domain(ui(i,t>1?{floor:function(t){for(;e(t=n.floor(t));)t=Zo(t-1);return t},ceil:function(t){for(;e(t=n.ceil(t));)t=Zo(+t+1);return t}}:n))},r.ticks=function(n,t){var e=ti(r.domain()),i=null==n?u(e,10):"number"==typeof n?u(e,n):!n.range&&[{range:n},t];return i&&(n=i[0],t=i[1]),n.range(e[0],Zo(+e[1]+1),1>t?1:t)},r.tickFormat=function(){return e},r.copy=function(){return Io(n.copy(),t,e)},ci(r,n)}function Zo(n){return new Date(n)}function Vo(n){return function(t){for(var e=n.length-1,r=n[e];!r[1](t);)r=n[--e];return r[0](t)}}function Xo(n){return JSON.parse(n.responseText)}function $o(n){var t=Go.createRange();return t.selectNode(Go.body),t.createContextualFragment(n.responseText)}var Bo={version:"3.3.13"};Date.now||(Date.now=function(){return+new Date});var Wo=[].slice,Jo=function(n){return Wo.call(n)},Go=document,Ko=Go.documentElement,Qo=window;try{Jo(Ko.childNodes)[0].nodeType}catch(na){Jo=function(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}}try{Go.createElement("div").style.setProperty("opacity",0,"")}catch(ta){var ea=Qo.Element.prototype,ra=ea.setAttribute,ua=ea.setAttributeNS,ia=Qo.CSSStyleDeclaration.prototype,oa=ia.setProperty;ea.setAttribute=function(n,t){ra.call(this,n,t+"")},ea.setAttributeNS=function(n,t,e){ua.call(this,n,t,e+"")},ia.setProperty=function(n,t,e){oa.call(this,n,t+"",e)}}Bo.ascending=function(n,t){return t>n?-1:n>t?1:n>=t?0:0/0},Bo.descending=function(n,t){return n>t?-1:t>n?1:t>=n?0:0/0},Bo.min=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i&&!(null!=(e=n[u])&&e>=e);)e=void 0;for(;++u<i;)null!=(r=n[u])&&e>r&&(e=r)}else{for(;++u<i&&!(null!=(e=t.call(n,n[u],u))&&e>=e);)e=void 0;for(;++u<i;)null!=(r=t.call(n,n[u],u))&&e>r&&(e=r)}return e},Bo.max=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i&&!(null!=(e=n[u])&&e>=e);)e=void 0;for(;++u<i;)null!=(r=n[u])&&r>e&&(e=r)}else{for(;++u<i&&!(null!=(e=t.call(n,n[u],u))&&e>=e);)e=void 0;for(;++u<i;)null!=(r=t.call(n,n[u],u))&&r>e&&(e=r)}return e},Bo.extent=function(n,t){var e,r,u,i=-1,o=n.length;if(1===arguments.length){for(;++i<o&&!(null!=(e=u=n[i])&&e>=e);)e=u=void 0;for(;++i<o;)null!=(r=n[i])&&(e>r&&(e=r),r>u&&(u=r))}else{for(;++i<o&&!(null!=(e=u=t.call(n,n[i],i))&&e>=e);)e=void 0;for(;++i<o;)null!=(r=t.call(n,n[i],i))&&(e>r&&(e=r),r>u&&(u=r))}return[e,u]},Bo.sum=function(n,t){var e,r=0,u=n.length,i=-1;if(1===arguments.length)for(;++i<u;)isNaN(e=+n[i])||(r+=e);else for(;++i<u;)isNaN(e=+t.call(n,n[i],i))||(r+=e);return r},Bo.mean=function(t,e){var r,u=t.length,i=0,o=-1,a=0;if(1===arguments.length)for(;++o<u;)n(r=t[o])&&(i+=(r-i)/++a);else for(;++o<u;)n(r=e.call(t,t[o],o))&&(i+=(r-i)/++a);return a?i:void 0},Bo.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),u=+n[r-1],i=e-r;
    return i?u+i*(n[r]-u):u},Bo.median=function(t,e){return arguments.length>1&&(t=t.map(e)),t=t.filter(n),t.length?Bo.quantile(t.sort(Bo.ascending),.5):void 0},Bo.bisector=function(n){return{left:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n.call(t,t[i],i)<e?r=i+1:u=i}return r},right:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;e<n.call(t,t[i],i)?u=i:r=i+1}return r}}};var aa=Bo.bisector(function(n){return n});Bo.bisectLeft=aa.left,Bo.bisect=Bo.bisectRight=aa.right,Bo.shuffle=function(n){for(var t,e,r=n.length;r;)e=0|Math.random()*r--,t=n[r],n[r]=n[e],n[e]=t;return n},Bo.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},Bo.pairs=function(n){for(var t,e=0,r=n.length-1,u=n[0],i=new Array(0>r?0:r);r>e;)i[e]=[t=u,u=n[++e]];return i},Bo.zip=function(){if(!(u=arguments.length))return[];for(var n=-1,e=Bo.min(arguments,t),r=new Array(e);++n<e;)for(var u,i=-1,o=r[n]=new Array(u);++i<u;)o[i]=arguments[i][n];return r},Bo.transpose=function(n){return Bo.zip.apply(Bo,n)},Bo.keys=function(n){var t=[];for(var e in n)t.push(e);return t},Bo.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},Bo.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},Bo.merge=function(n){for(var t,e,r,u=n.length,i=-1,o=0;++i<u;)o+=n[i].length;for(e=new Array(o);--u>=0;)for(r=n[u],t=r.length;--t>=0;)e[--o]=r[t];return e};var ca=Math.abs;Bo.range=function(n,t,r){if(arguments.length<3&&(r=1,arguments.length<2&&(t=n,n=0)),1/0===(t-n)/r)throw new Error("infinite range");var u,i=[],o=e(ca(r)),a=-1;if(n*=o,t*=o,r*=o,0>r)for(;(u=n+r*++a)>t;)i.push(u/o);else for(;(u=n+r*++a)<t;)i.push(u/o);return i},Bo.map=function(n){var t=new u;if(n instanceof u)n.forEach(function(n,e){t.set(n,e)});else for(var e in n)t.set(e,n[e]);return t},r(u,{has:function(n){return sa+n in this},get:function(n){return this[sa+n]},set:function(n,t){return this[sa+n]=t},remove:function(n){return n=sa+n,n in this&&delete this[n]},keys:function(){var n=[];return this.forEach(function(t){n.push(t)}),n},values:function(){var n=[];return this.forEach(function(t,e){n.push(e)}),n},entries:function(){var n=[];return this.forEach(function(t,e){n.push({key:t,value:e})}),n},forEach:function(n){for(var t in this)t.charCodeAt(0)===la&&n.call(this,t.substring(1),this[t])}});var sa="\x00",la=sa.charCodeAt(0);Bo.nest=function(){function n(t,a,c){if(c>=o.length)return r?r.call(i,a):e?a.sort(e):a;for(var s,l,f,h,g=-1,p=a.length,v=o[c++],d=new u;++g<p;)(h=d.get(s=v(l=a[g])))?h.push(l):d.set(s,[l]);return t?(l=t(),f=function(e,r){l.set(e,n(t,r,c))}):(l={},f=function(e,r){l[e]=n(t,r,c)}),d.forEach(f),l}function t(n,e){if(e>=o.length)return n;var r=[],u=a[e++];return n.forEach(function(n,u){r.push({key:n,values:t(u,e)})}),u?r.sort(function(n,t){return u(n.key,t.key)}):r}var e,r,i={},o=[],a=[];return i.map=function(t,e){return n(e,t,0)},i.entries=function(e){return t(n(Bo.map,e,0),0)},i.key=function(n){return o.push(n),i},i.sortKeys=function(n){return a[o.length-1]=n,i},i.sortValues=function(n){return e=n,i},i.rollup=function(n){return r=n,i},i},Bo.set=function(n){var t=new i;if(n)for(var e=0,r=n.length;r>e;++e)t.add(n[e]);return t},r(i,{has:function(n){return sa+n in this},add:function(n){return this[sa+n]=!0,n},remove:function(n){return n=sa+n,n in this&&delete this[n]},values:function(){var n=[];return this.forEach(function(t){n.push(t)}),n},forEach:function(n){for(var t in this)t.charCodeAt(0)===la&&n.call(this,t.substring(1))}}),Bo.behavior={},Bo.rebind=function(n,t){for(var e,r=1,u=arguments.length;++r<u;)n[e=arguments[r]]=o(n,t,t[e]);return n};var fa=["webkit","ms","moz","Moz","o","O"];Bo.dispatch=function(){for(var n=new s,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=l(n);return n},s.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.substring(e+1),n=n.substring(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},Bo.event=null,Bo.requote=function(n){return n.replace(ha,"\\$&")};var ha=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,ga={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},pa=function(n,t){return t.querySelector(n)},va=function(n,t){return t.querySelectorAll(n)},da=Ko[a(Ko,"matchesSelector")],ma=function(n,t){return da.call(n,t)};"function"==typeof Sizzle&&(pa=function(n,t){return Sizzle(n,t)[0]||null},va=function(n,t){return Sizzle.uniqueSort(Sizzle(n,t))},ma=Sizzle.matchesSelector),Bo.selection=function(){return _a};var ya=Bo.selection.prototype=[];ya.select=function(n){var t,e,r,u,i=[];n=v(n);for(var o=-1,a=this.length;++o<a;){i.push(t=[]),t.parentNode=(r=this[o]).parentNode;for(var c=-1,s=r.length;++c<s;)(u=r[c])?(t.push(e=n.call(u,u.__data__,c,o)),e&&"__data__"in u&&(e.__data__=u.__data__)):t.push(null)}return p(i)},ya.selectAll=function(n){var t,e,r=[];n=d(n);for(var u=-1,i=this.length;++u<i;)for(var o=this[u],a=-1,c=o.length;++a<c;)(e=o[a])&&(r.push(t=Jo(n.call(e,e.__data__,a,u))),t.parentNode=e);return p(r)};var xa={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};Bo.ns={prefix:xa,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&(e=n.substring(0,t),n=n.substring(t+1)),xa.hasOwnProperty(e)?{space:xa[e],local:n}:n}},ya.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=Bo.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(m(t,n[t]));return this}return this.each(m(n,t))},ya.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=M(n)).length,u=-1;if(t=e.classList){for(;++u<r;)if(!t.contains(n[u]))return!1}else for(t=e.getAttribute("class");++u<r;)if(!x(n[u]).test(t))return!1;return!0}for(t in n)this.each(_(t,n[t]));return this}return this.each(_(n,t))},ya.style=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t="");for(e in n)this.each(w(e,n[e],t));return this}if(2>r)return Qo.getComputedStyle(this.node(),null).getPropertyValue(n);e=""}return this.each(w(n,t,e))},ya.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(S(t,n[t]));return this}return this.each(S(n,t))},ya.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},ya.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},ya.append=function(n){return n=k(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},ya.insert=function(n,t){return n=k(n),t=v(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},ya.remove=function(){return this.each(function(){var n=this.parentNode;n&&n.removeChild(this)})},ya.data=function(n,t){function e(n,e){var r,i,o,a=n.length,f=e.length,h=Math.min(a,f),g=new Array(f),p=new Array(f),v=new Array(a);if(t){var d,m=new u,y=new u,x=[];for(r=-1;++r<a;)d=t.call(i=n[r],i.__data__,r),m.has(d)?v[r]=i:m.set(d,i),x.push(d);for(r=-1;++r<f;)d=t.call(e,o=e[r],r),(i=m.get(d))?(g[r]=i,i.__data__=o):y.has(d)||(p[r]=E(o)),y.set(d,o),m.remove(d);for(r=-1;++r<a;)m.has(x[r])&&(v[r]=n[r])}else{for(r=-1;++r<h;)i=n[r],o=e[r],i?(i.__data__=o,g[r]=i):p[r]=E(o);for(;f>r;++r)p[r]=E(e[r]);for(;a>r;++r)v[r]=n[r]}p.update=g,p.parentNode=g.parentNode=v.parentNode=n.parentNode,c.push(p),s.push(g),l.push(v)}var r,i,o=-1,a=this.length;if(!arguments.length){for(n=new Array(a=(r=this[0]).length);++o<a;)(i=r[o])&&(n[o]=i.__data__);return n}var c=L([]),s=p([]),l=p([]);if("function"==typeof n)for(;++o<a;)e(r=this[o],n.call(r,r.parentNode.__data__,o));else for(;++o<a;)e(r=this[o],n);return s.enter=function(){return c},s.exit=function(){return l},s},ya.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},ya.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=A(n));for(var i=0,o=this.length;o>i;i++){u.push(t=[]),t.parentNode=(e=this[i]).parentNode;for(var a=0,c=e.length;c>a;a++)(r=e[a])&&n.call(r,r.__data__,a,i)&&t.push(r)}return p(u)},ya.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],u=r.length-1,i=r[u];--u>=0;)(e=r[u])&&(i&&i!==e.nextSibling&&i.parentNode.insertBefore(e,i),i=e);return this},ya.sort=function(n){n=C.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},ya.each=function(n){return N(this,function(t,e,r){n.call(t,t.__data__,e,r)})},ya.call=function(n){var t=Jo(arguments);return n.apply(t[0]=this,t),this},ya.empty=function(){return!this.node()},ya.node=function(){for(var n=0,t=this.length;t>n;n++)for(var e=this[n],r=0,u=e.length;u>r;r++){var i=e[r];if(i)return i}return null},ya.size=function(){var n=0;return this.each(function(){++n}),n};var Ma=[];Bo.selection.enter=L,Bo.selection.enter.prototype=Ma,Ma.append=ya.append,Ma.empty=ya.empty,Ma.node=ya.node,Ma.call=ya.call,Ma.size=ya.size,Ma.select=function(n){for(var t,e,r,u,i,o=[],a=-1,c=this.length;++a<c;){r=(u=this[a]).update,o.push(t=[]),t.parentNode=u.parentNode;for(var s=-1,l=u.length;++s<l;)(i=u[s])?(t.push(r[s]=e=n.call(u.parentNode,i.__data__,s,a)),e.__data__=i.__data__):t.push(null)}return p(o)},Ma.insert=function(n,t){return arguments.length<2&&(t=T(this)),ya.insert.call(this,n,t)},ya.transition=function(){for(var n,t,e=ks||++Ls,r=[],u=Es||{time:Date.now(),ease:Fr,delay:0,duration:250},i=-1,o=this.length;++i<o;){r.push(n=[]);for(var a=this[i],c=-1,s=a.length;++c<s;)(t=a[c])&&io(t,c,e,u),n.push(t)}return eo(r,e)},ya.interrupt=function(){return this.each(q)},Bo.select=function(n){var t=["string"==typeof n?pa(n,Go):n];return t.parentNode=Ko,p([t])},Bo.selectAll=function(n){var t=Jo("string"==typeof n?va(n,Go):n);return t.parentNode=Ko,p([t])};var _a=Bo.select(Ko);ya.on=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t=!1);for(e in n)this.each(z(e,n[e],t));return this}if(2>r)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(z(n,t,e))};var ba=Bo.map({mouseenter:"mouseover",mouseleave:"mouseout"});ba.forEach(function(n){"on"+n in Go&&ba.remove(n)});var wa="onselectstart"in Go?null:a(Ko.style,"userSelect"),Sa=0;Bo.mouse=function(n){return U(n,h())};var ka=/WebKit/.test(Qo.navigator.userAgent)?-1:0;Bo.touches=function(n,t){return arguments.length<2&&(t=h().touches),t?Jo(t).map(function(t){var e=U(n,t);return e.identifier=t.identifier,e}):[]},Bo.behavior.drag=function(){function n(){this.on("mousedown.drag",o).on("touchstart.drag",a)}function t(){return Bo.event.changedTouches[0].identifier}function e(n,t){return Bo.touches(n).filter(function(n){return n.identifier===t})[0]}function r(n,t,e,r){return function(){function o(){var n=t(l,g),e=n[0]-v[0],r=n[1]-v[1];d|=e|r,v=n,f({type:"drag",x:n[0]+c[0],y:n[1]+c[1],dx:e,dy:r})}function a(){m.on(e+"."+p,null).on(r+"."+p,null),y(d&&Bo.event.target===h),f({type:"dragend"})}var c,s=this,l=s.parentNode,f=u.of(s,arguments),h=Bo.event.target,g=n(),p=null==g?"drag":"drag-"+g,v=t(l,g),d=0,m=Bo.select(Qo).on(e+"."+p,o).on(r+"."+p,a),y=P();i?(c=i.apply(s,arguments),c=[c.x-v[0],c.y-v[1]]):c=[0,0],f({type:"dragstart"})}}var u=g(n,"drag","dragstart","dragend"),i=null,o=r(c,Bo.mouse,"mousemove","mouseup"),a=r(t,e,"touchmove","touchend");return n.origin=function(t){return arguments.length?(i=t,n):i},Bo.rebind(n,u,"on")};var Ea=Math.PI,Aa=2*Ea,Ca=Ea/2,Na=1e-6,La=Na*Na,Ta=Ea/180,qa=180/Ea,za=Math.SQRT2,Ra=2,Da=4;Bo.interpolateZoom=function(n,t){function e(n){var t=n*y;if(m){var e=Y(v),o=i/(Ra*h)*(e*I(za*t+v)-O(v));return[r+o*s,u+o*l,i*e/Y(za*t+v)]}return[r+n*s,u+n*l,i*Math.exp(za*t)]}var r=n[0],u=n[1],i=n[2],o=t[0],a=t[1],c=t[2],s=o-r,l=a-u,f=s*s+l*l,h=Math.sqrt(f),g=(c*c-i*i+Da*f)/(2*i*Ra*h),p=(c*c-i*i-Da*f)/(2*c*Ra*h),v=Math.log(Math.sqrt(g*g+1)-g),d=Math.log(Math.sqrt(p*p+1)-p),m=d-v,y=(m||Math.log(c/i))/za;return e.duration=1e3*y,e},Bo.behavior.zoom=function(){function n(n){n.on(A,s).on(ja+".zoom",h).on(C,p).on("dblclick.zoom",v).on(L,l)}function t(n){return[(n[0]-S.x)/S.k,(n[1]-S.y)/S.k]}function e(n){return[n[0]*S.k+S.x,n[1]*S.k+S.y]}function r(n){S.k=Math.max(E[0],Math.min(E[1],n))}function u(n,t){t=e(t),S.x+=n[0]-t[0],S.y+=n[1]-t[1]}function i(){_&&_.domain(M.range().map(function(n){return(n-S.x)/S.k}).map(M.invert)),w&&w.domain(b.range().map(function(n){return(n-S.y)/S.k}).map(b.invert))}function o(n){n({type:"zoomstart"})}function a(n){i(),n({type:"zoom",scale:S.k,translate:[S.x,S.y]})}function c(n){n({type:"zoomend"})}function s(){function n(){l=1,u(Bo.mouse(r),h),a(i)}function e(){f.on(C,Qo===r?p:null).on(N,null),g(l&&Bo.event.target===s),c(i)}var r=this,i=T.of(r,arguments),s=Bo.event.target,l=0,f=Bo.select(Qo).on(C,n).on(N,e),h=t(Bo.mouse(r)),g=P();q.call(r),o(i)}function l(){function n(){var n=Bo.touches(p);return g=S.k,n.forEach(function(n){n.identifier in d&&(d[n.identifier]=t(n))}),n}function e(){for(var t=Bo.event.changedTouches,e=0,i=t.length;i>e;++e)d[t[e].identifier]=null;var o=n(),c=Date.now();if(1===o.length){if(500>c-x){var s=o[0],l=d[s.identifier];r(2*S.k),u(s,l),f(),a(v)}x=c}else if(o.length>1){var s=o[0],h=o[1],g=s[0]-h[0],p=s[1]-h[1];m=g*g+p*p}}function i(){for(var n,t,e,i,o=Bo.touches(p),c=0,s=o.length;s>c;++c,i=null)if(e=o[c],i=d[e.identifier]){if(t)break;n=e,t=i}if(i){var l=(l=e[0]-n[0])*l+(l=e[1]-n[1])*l,f=m&&Math.sqrt(l/m);n=[(n[0]+e[0])/2,(n[1]+e[1])/2],t=[(t[0]+i[0])/2,(t[1]+i[1])/2],r(f*g)}x=null,u(n,t),a(v)}function h(){if(Bo.event.touches.length){for(var t=Bo.event.changedTouches,e=0,r=t.length;r>e;++e)delete d[t[e].identifier];for(var u in d)return void n()}b.on(M,null).on(_,null),w.on(A,s).on(L,l),k(),c(v)}var g,p=this,v=T.of(p,arguments),d={},m=0,y=Bo.event.changedTouches[0].identifier,M="touchmove.zoom-"+y,_="touchend.zoom-"+y,b=Bo.select(Qo).on(M,i).on(_,h),w=Bo.select(p).on(A,null).on(L,e),k=P();q.call(p),e(),o(v)}function h(){var n=T.of(this,arguments);y?clearTimeout(y):(q.call(this),o(n)),y=setTimeout(function(){y=null,c(n)},50),f();var e=m||Bo.mouse(this);d||(d=t(e)),r(Math.pow(2,.002*Pa())*S.k),u(e,d),a(n)}function p(){d=null}function v(){var n=T.of(this,arguments),e=Bo.mouse(this),i=t(e),s=Math.log(S.k)/Math.LN2;o(n),r(Math.pow(2,Bo.event.shiftKey?Math.ceil(s)-1:Math.floor(s)+1)),u(e,i),a(n),c(n)}var d,m,y,x,M,_,b,w,S={x:0,y:0,k:1},k=[960,500],E=Ua,A="mousedown.zoom",C="mousemove.zoom",N="mouseup.zoom",L="touchstart.zoom",T=g(n,"zoomstart","zoom","zoomend");return n.event=function(n){n.each(function(){var n=T.of(this,arguments),t=S;ks?Bo.select(this).transition().each("start.zoom",function(){S=this.__chart__||{x:0,y:0,k:1},o(n)}).tween("zoom:zoom",function(){var e=k[0],r=k[1],u=e/2,i=r/2,o=Bo.interpolateZoom([(u-S.x)/S.k,(i-S.y)/S.k,e/S.k],[(u-t.x)/t.k,(i-t.y)/t.k,e/t.k]);return function(t){var r=o(t),c=e/r[2];this.__chart__=S={x:u-r[0]*c,y:i-r[1]*c,k:c},a(n)}}).each("end.zoom",function(){c(n)}):(this.__chart__=S,o(n),a(n),c(n))})},n.translate=function(t){return arguments.length?(S={x:+t[0],y:+t[1],k:S.k},i(),n):[S.x,S.y]},n.scale=function(t){return arguments.length?(S={x:S.x,y:S.y,k:+t},i(),n):S.k},n.scaleExtent=function(t){return arguments.length?(E=null==t?Ua:[+t[0],+t[1]],n):E},n.center=function(t){return arguments.length?(m=t&&[+t[0],+t[1]],n):m},n.size=function(t){return arguments.length?(k=t&&[+t[0],+t[1]],n):k},n.x=function(t){return arguments.length?(_=t,M=t.copy(),S={x:0,y:0,k:1},n):_},n.y=function(t){return arguments.length?(w=t,b=t.copy(),S={x:0,y:0,k:1},n):w},Bo.rebind(n,T,"on")};var Pa,Ua=[0,1/0],ja="onwheel"in Go?(Pa=function(){return-Bo.event.deltaY*(Bo.event.deltaMode?120:1)},"wheel"):"onmousewheel"in Go?(Pa=function(){return Bo.event.wheelDelta},"mousewheel"):(Pa=function(){return-Bo.event.detail},"MozMousePixelScroll");V.prototype.toString=function(){return this.rgb()+""},Bo.hsl=function(n,t,e){return 1===arguments.length?n instanceof $?X(n.h,n.s,n.l):lt(""+n,ft,X):X(+n,+t,+e)};var Ha=$.prototype=new V;Ha.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),X(this.h,this.s,this.l/n)},Ha.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),X(this.h,this.s,n*this.l)},Ha.rgb=function(){return B(this.h,this.s,this.l)},Bo.hcl=function(n,t,e){return 1===arguments.length?n instanceof J?W(n.h,n.c,n.l):n instanceof Q?tt(n.l,n.a,n.b):tt((n=ht((n=Bo.rgb(n)).r,n.g,n.b)).l,n.a,n.b):W(+n,+t,+e)};var Fa=J.prototype=new V;Fa.brighter=function(n){return W(this.h,this.c,Math.min(100,this.l+Oa*(arguments.length?n:1)))},Fa.darker=function(n){return W(this.h,this.c,Math.max(0,this.l-Oa*(arguments.length?n:1)))},Fa.rgb=function(){return G(this.h,this.c,this.l).rgb()},Bo.lab=function(n,t,e){return 1===arguments.length?n instanceof Q?K(n.l,n.a,n.b):n instanceof J?G(n.l,n.c,n.h):ht((n=Bo.rgb(n)).r,n.g,n.b):K(+n,+t,+e)};var Oa=18,Ya=.95047,Ia=1,Za=1.08883,Va=Q.prototype=new V;Va.brighter=function(n){return K(Math.min(100,this.l+Oa*(arguments.length?n:1)),this.a,this.b)},Va.darker=function(n){return K(Math.max(0,this.l-Oa*(arguments.length?n:1)),this.a,this.b)},Va.rgb=function(){return nt(this.l,this.a,this.b)},Bo.rgb=function(n,t,e){return 1===arguments.length?n instanceof ct?at(n.r,n.g,n.b):lt(""+n,at,B):at(~~n,~~t,~~e)};var Xa=ct.prototype=new V;Xa.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,u=30;return t||e||r?(t&&u>t&&(t=u),e&&u>e&&(e=u),r&&u>r&&(r=u),at(Math.min(255,~~(t/n)),Math.min(255,~~(e/n)),Math.min(255,~~(r/n)))):at(u,u,u)},Xa.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),at(~~(n*this.r),~~(n*this.g),~~(n*this.b))},Xa.hsl=function(){return ft(this.r,this.g,this.b)},Xa.toString=function(){return"#"+st(this.r)+st(this.g)+st(this.b)};var $a=Bo.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});$a.forEach(function(n,t){$a.set(n,it(t))}),Bo.functor=vt,Bo.xhr=mt(dt),Bo.dsv=function(n,t){function e(n,e,i){arguments.length<3&&(i=e,e=null);var o=yt(n,t,null==e?r:u(e),i);return o.row=function(n){return arguments.length?o.response(null==(e=n)?r:u(n)):e},o}function r(n){return e.parse(n.responseText)}function u(n){return function(t){return e.parse(t.responseText,n)}}function o(t){return t.map(a).join(n)}function a(n){return c.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var c=new RegExp('["'+n+"\n]"),s=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var u=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(u(n),e)}:u})},e.parseRows=function(n,t){function e(){if(l>=c)return o;if(u)return u=!1,i;var t=l;if(34===n.charCodeAt(t)){for(var e=t;e++<c;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}l=e+2;var r=n.charCodeAt(e+1);return 13===r?(u=!0,10===n.charCodeAt(e+2)&&++l):10===r&&(u=!0),n.substring(t+1,e).replace(/""/g,'"')}for(;c>l;){var r=n.charCodeAt(l++),a=1;if(10===r)u=!0;else if(13===r)u=!0,10===n.charCodeAt(l)&&(++l,++a);else if(r!==s)continue;return n.substring(t,l-a)}return n.substring(t)}for(var r,u,i={},o={},a=[],c=n.length,l=0,f=0;(r=e())!==o;){for(var h=[];r!==i&&r!==o;)h.push(r),r=e();(!t||(h=t(h,f++)))&&a.push(h)}return a},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new i,u=[];return t.forEach(function(n){for(var t in n)r.has(t)||u.push(r.add(t))}),[u.map(a).join(n)].concat(t.map(function(t){return u.map(function(n){return a(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(o).join("\n")},e},Bo.csv=Bo.dsv(",","text/csv"),Bo.tsv=Bo.dsv("	","text/tab-separated-values");var Ba,Wa,Ja,Ga,Ka,Qa=Qo[a(Qo,"requestAnimationFrame")]||function(n){setTimeout(n,17)};Bo.timer=function(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now());var u=e+t,i={c:n,t:u,f:!1,n:null};Wa?Wa.n=i:Ba=i,Wa=i,Ja||(Ga=clearTimeout(Ga),Ja=1,Qa(Mt))},Bo.timer.flush=function(){_t(),bt()};var nc=".",tc=",",ec=[3,3],rc="$",uc=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"].map(wt);Bo.formatPrefix=function(n,t){var e=0;return n&&(0>n&&(n*=-1),t&&(n=Bo.round(n,St(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((0>=e?e+1:e-1)/3)))),uc[8+e/3]},Bo.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)},Bo.format=function(n){var t=ic.exec(n),e=t[1]||" ",r=t[2]||">",u=t[3]||"",i=t[4]||"",o=t[5],a=+t[6],c=t[7],s=t[8],l=t[9],f=1,h="",g=!1;switch(s&&(s=+s.substring(1)),(o||"0"===e&&"="===r)&&(o=e="0",r="=",c&&(a-=Math.floor((a-1)/4))),l){case"n":c=!0,l="g";break;case"%":f=100,h="%",l="f";break;case"p":f=100,h="%",l="r";break;case"b":case"o":case"x":case"X":"#"===i&&(i="0"+l.toLowerCase());case"c":case"d":g=!0,s=0;break;case"s":f=-1,l="r"}"#"===i?i="":"$"===i&&(i=rc),"r"!=l||s||(l="g"),null!=s&&("g"==l?s=Math.max(1,Math.min(21,s)):("e"==l||"f"==l)&&(s=Math.max(0,Math.min(20,s)))),l=oc.get(l)||kt;var p=o&&c;return function(n){if(g&&n%1)return"";var t=0>n||0===n&&0>1/n?(n=-n,"-"):u;if(0>f){var v=Bo.formatPrefix(n,s);n=v.scale(n),h=v.symbol}else n*=f;n=l(n,s);var d=n.lastIndexOf("."),m=0>d?n:n.substring(0,d),y=0>d?"":nc+n.substring(d+1);!o&&c&&(m=ac(m));var x=i.length+m.length+y.length+(p?0:t.length),M=a>x?new Array(x=a-x+1).join(e):"";return p&&(m=ac(M+m)),t+=i,n=m+y,("<"===r?t+n+M:">"===r?M+t+n:"^"===r?M.substring(0,x>>=1)+t+n+M.substring(x):t+(p?n:M+n))+h}};var ic=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,oc=Bo.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=Bo.round(n,St(n,t))).toFixed(Math.max(0,Math.min(20,St(n*(1+1e-15),t))))}}),ac=dt;if(ec){var cc=ec.length;ac=function(n){for(var t=n.length,e=[],r=0,u=ec[0];t>0&&u>0;)e.push(n.substring(t-=u,t+u)),u=ec[r=(r+1)%cc];return e.reverse().join(tc)}}Bo.geo={},Et.prototype={s:0,t:0,add:function(n){At(n,this.t,sc),At(sc.s,this.s,this),this.s?this.t+=sc.t:this.s=sc.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var sc=new Et;Bo.geo.stream=function(n,t){n&&lc.hasOwnProperty(n.type)?lc[n.type](n,t):Ct(n,t)};var lc={Feature:function(n,t){Ct(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,u=e.length;++r<u;)Ct(e[r].geometry,t)}},fc={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){Nt(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)Nt(e[r],t,0)},Polygon:function(n,t){Lt(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)Lt(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,u=e.length;++r<u;)Ct(e[r],t)}};Bo.geo.area=function(n){return hc=0,Bo.geo.stream(n,pc),hc};var hc,gc=new Et,pc={sphere:function(){hc+=4*Ea},point:c,lineStart:c,lineEnd:c,polygonStart:function(){gc.reset(),pc.lineStart=Tt},polygonEnd:function(){var n=2*gc;hc+=0>n?4*Ea+n:n,pc.lineStart=pc.lineEnd=pc.point=c}};Bo.geo.bounds=function(){function n(n,t){x.push(M=[l=n,h=n]),f>t&&(f=t),t>g&&(g=t)}function t(t,e){var r=qt([t*Ta,e*Ta]);if(m){var u=Rt(m,r),i=[u[1],-u[0],0],o=Rt(i,u);Ut(o),o=jt(o);var c=t-p,s=c>0?1:-1,v=o[0]*qa*s,d=ca(c)>180;if(d^(v>s*p&&s*t>v)){var y=o[1]*qa;y>g&&(g=y)}else if(v=(v+360)%360-180,d^(v>s*p&&s*t>v)){var y=-o[1]*qa;f>y&&(f=y)}else f>e&&(f=e),e>g&&(g=e);d?p>t?a(l,t)>a(l,h)&&(h=t):a(t,h)>a(l,h)&&(l=t):h>=l?(l>t&&(l=t),t>h&&(h=t)):t>p?a(l,t)>a(l,h)&&(h=t):a(t,h)>a(l,h)&&(l=t)}else n(t,e);m=r,p=t}function e(){_.point=t}function r(){M[0]=l,M[1]=h,_.point=n,m=null}function u(n,e){if(m){var r=n-p;y+=ca(r)>180?r+(r>0?360:-360):r}else v=n,d=e;pc.point(n,e),t(n,e)}function i(){pc.lineStart()}function o(){u(v,d),pc.lineEnd(),ca(y)>Na&&(l=-(h=180)),M[0]=l,M[1]=h,m=null}function a(n,t){return(t-=n)<0?t+360:t}function c(n,t){return n[0]-t[0]}function s(n,t){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var l,f,h,g,p,v,d,m,y,x,M,_={point:n,lineStart:e,lineEnd:r,polygonStart:function(){_.point=u,_.lineStart=i,_.lineEnd=o,y=0,pc.polygonStart()},polygonEnd:function(){pc.polygonEnd(),_.point=n,_.lineStart=e,_.lineEnd=r,0>gc?(l=-(h=180),f=-(g=90)):y>Na?g=90:-Na>y&&(f=-90),M[0]=l,M[1]=h}};return function(n){g=h=-(l=f=1/0),x=[],Bo.geo.stream(n,_);var t=x.length;if(t){x.sort(c);for(var e,r=1,u=x[0],i=[u];t>r;++r)e=x[r],s(e[0],u)||s(e[1],u)?(a(u[0],e[1])>a(u[0],u[1])&&(u[1]=e[1]),a(e[0],u[1])>a(u[0],u[1])&&(u[0]=e[0])):i.push(u=e);for(var o,e,p=-1/0,t=i.length-1,r=0,u=i[t];t>=r;u=e,++r)e=i[r],(o=a(u[1],e[0]))>p&&(p=o,l=e[0],h=u[1])}return x=M=null,1/0===l||1/0===f?[[0/0,0/0],[0/0,0/0]]:[[l,f],[h,g]]}}(),Bo.geo.centroid=function(n){vc=dc=mc=yc=xc=Mc=_c=bc=wc=Sc=kc=0,Bo.geo.stream(n,Ec);var t=wc,e=Sc,r=kc,u=t*t+e*e+r*r;return La>u&&(t=Mc,e=_c,r=bc,Na>dc&&(t=mc,e=yc,r=xc),u=t*t+e*e+r*r,La>u)?[0/0,0/0]:[Math.atan2(e,t)*qa,F(r/Math.sqrt(u))*qa]};var vc,dc,mc,yc,xc,Mc,_c,bc,wc,Sc,kc,Ec={sphere:c,point:Ft,lineStart:Yt,lineEnd:It,polygonStart:function(){Ec.lineStart=Zt},polygonEnd:function(){Ec.lineStart=Yt}},Ac=Wt(Vt,ne,ee,[-Ea,-Ea/2]),Cc=1e9;Bo.geo.clipExtent=function(){var n,t,e,r,u,i,o={stream:function(n){return u&&(u.valid=!1),u=i(n),u.valid=!0,u},extent:function(a){return arguments.length?(i=ie(n=+a[0][0],t=+a[0][1],e=+a[1][0],r=+a[1][1]),u&&(u.valid=!1,u=null),o):[[n,t],[e,r]]}};return o.extent([[0,0],[960,500]])},(Bo.geo.conicEqualArea=function(){return ae(ce)}).raw=ce,Bo.geo.albers=function(){return Bo.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},Bo.geo.albersUsa=function(){function n(n){var i=n[0],o=n[1];return t=null,e(i,o),t||(r(i,o),t)||u(i,o),t}var t,e,r,u,i=Bo.geo.albers(),o=Bo.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),a=Bo.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(n,e){t=[n,e]}};return n.invert=function(n){var t=i.scale(),e=i.translate(),r=(n[0]-e[0])/t,u=(n[1]-e[1])/t;return(u>=.12&&.234>u&&r>=-.425&&-.214>r?o:u>=.166&&.234>u&&r>=-.214&&-.115>r?a:i).invert(n)},n.stream=function(n){var t=i.stream(n),e=o.stream(n),r=a.stream(n);return{point:function(n,u){t.point(n,u),e.point(n,u),r.point(n,u)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision=function(t){return arguments.length?(i.precision(t),o.precision(t),a.precision(t),n):i.precision()},n.scale=function(t){return arguments.length?(i.scale(t),o.scale(.35*t),a.scale(t),n.translate(i.translate())):i.scale()},n.translate=function(t){if(!arguments.length)return i.translate();var s=i.scale(),l=+t[0],f=+t[1];return e=i.translate(t).clipExtent([[l-.455*s,f-.238*s],[l+.455*s,f+.238*s]]).stream(c).point,r=o.translate([l-.307*s,f+.201*s]).clipExtent([[l-.425*s+Na,f+.12*s+Na],[l-.214*s-Na,f+.234*s-Na]]).stream(c).point,u=a.translate([l-.205*s,f+.212*s]).clipExtent([[l-.214*s+Na,f+.166*s+Na],[l-.115*s-Na,f+.234*s-Na]]).stream(c).point,n},n.scale(1070)};var Nc,Lc,Tc,qc,zc,Rc,Dc={point:c,lineStart:c,lineEnd:c,polygonStart:function(){Lc=0,Dc.lineStart=se},polygonEnd:function(){Dc.lineStart=Dc.lineEnd=Dc.point=c,Nc+=ca(Lc/2)}},Pc={point:le,lineStart:c,lineEnd:c,polygonStart:c,polygonEnd:c},Uc={point:ge,lineStart:pe,lineEnd:ve,polygonStart:function(){Uc.lineStart=de},polygonEnd:function(){Uc.point=ge,Uc.lineStart=pe,Uc.lineEnd=ve}};Bo.geo.path=function(){function n(n){return n&&("function"==typeof a&&i.pointRadius(+a.apply(this,arguments)),o&&o.valid||(o=u(i)),Bo.geo.stream(n,o)),i.result()}function t(){return o=null,n}var e,r,u,i,o,a=4.5;return n.area=function(n){return Nc=0,Bo.geo.stream(n,u(Dc)),Nc},n.centroid=function(n){return mc=yc=xc=Mc=_c=bc=wc=Sc=kc=0,Bo.geo.stream(n,u(Uc)),kc?[wc/kc,Sc/kc]:bc?[Mc/bc,_c/bc]:xc?[mc/xc,yc/xc]:[0/0,0/0]},n.bounds=function(n){return zc=Rc=-(Tc=qc=1/0),Bo.geo.stream(n,u(Pc)),[[Tc,qc],[zc,Rc]]},n.projection=function(n){return arguments.length?(u=(e=n)?n.stream||xe(n):dt,t()):e},n.context=function(n){return arguments.length?(i=null==(r=n)?new fe:new me(n),"function"!=typeof a&&i.pointRadius(a),t()):r},n.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(i.pointRadius(+t),+t),n):a},n.projection(Bo.geo.albersUsa()).context(null)},Bo.geo.transform=function(n){return{stream:function(t){var e=new Me(t);for(var r in n)e[r]=n[r];return e}}},Me.prototype={point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()
},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},Bo.geo.projection=be,Bo.geo.projectionMutator=we,(Bo.geo.equirectangular=function(){return be(ke)}).raw=ke.invert=ke,Bo.geo.rotation=function(n){function t(t){return t=n(t[0]*Ta,t[1]*Ta),t[0]*=qa,t[1]*=qa,t}return n=Ae(n[0]%360*Ta,n[1]*Ta,n.length>2?n[2]*Ta:0),t.invert=function(t){return t=n.invert(t[0]*Ta,t[1]*Ta),t[0]*=qa,t[1]*=qa,t},t},Ee.invert=ke,Bo.geo.circle=function(){function n(){var n="function"==typeof r?r.apply(this,arguments):r,t=Ae(-n[0]*Ta,-n[1]*Ta,0).invert,u=[];return e(null,null,1,{point:function(n,e){u.push(n=t(n,e)),n[0]*=qa,n[1]*=qa}}),{type:"Polygon",coordinates:[u]}}var t,e,r=[0,0],u=6;return n.origin=function(t){return arguments.length?(r=t,n):r},n.angle=function(r){return arguments.length?(e=Te((t=+r)*Ta,u*Ta),n):t},n.precision=function(r){return arguments.length?(e=Te(t*Ta,(u=+r)*Ta),n):u},n.angle(90)},Bo.geo.distance=function(n,t){var e,r=(t[0]-n[0])*Ta,u=n[1]*Ta,i=t[1]*Ta,o=Math.sin(r),a=Math.cos(r),c=Math.sin(u),s=Math.cos(u),l=Math.sin(i),f=Math.cos(i);return Math.atan2(Math.sqrt((e=f*o)*e+(e=s*l-c*f*a)*e),c*l+s*f*a)},Bo.geo.graticule=function(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return Bo.range(Math.ceil(i/d)*d,u,d).map(h).concat(Bo.range(Math.ceil(s/m)*m,c,m).map(g)).concat(Bo.range(Math.ceil(r/p)*p,e,p).filter(function(n){return ca(n%d)>Na}).map(l)).concat(Bo.range(Math.ceil(a/v)*v,o,v).filter(function(n){return ca(n%m)>Na}).map(f))}var e,r,u,i,o,a,c,s,l,f,h,g,p=10,v=p,d=90,m=360,y=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[h(i).concat(g(c).slice(1),h(u).reverse().slice(1),g(s).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent=function(t){return arguments.length?(i=+t[0][0],u=+t[1][0],s=+t[0][1],c=+t[1][1],i>u&&(t=i,i=u,u=t),s>c&&(t=s,s=c,c=t),n.precision(y)):[[i,s],[u,c]]},n.minorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],o=+t[1][1],r>e&&(t=r,r=e,e=t),a>o&&(t=a,a=o,o=t),n.precision(y)):[[r,a],[e,o]]},n.step=function(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep=function(t){return arguments.length?(d=+t[0],m=+t[1],n):[d,m]},n.minorStep=function(t){return arguments.length?(p=+t[0],v=+t[1],n):[p,v]},n.precision=function(t){return arguments.length?(y=+t,l=ze(a,o,90),f=Re(r,e,y),h=ze(s,c,90),g=Re(i,u,y),n):y},n.majorExtent([[-180,-90+Na],[180,90-Na]]).minorExtent([[-180,-80-Na],[180,80+Na]])},Bo.geo.greatArc=function(){function n(){return{type:"LineString",coordinates:[t||r.apply(this,arguments),e||u.apply(this,arguments)]}}var t,e,r=De,u=Pe;return n.distance=function(){return Bo.geo.distance(t||r.apply(this,arguments),e||u.apply(this,arguments))},n.source=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,n):r},n.target=function(t){return arguments.length?(u=t,e="function"==typeof t?null:t,n):u},n.precision=function(){return arguments.length?n:0},n},Bo.geo.interpolate=function(n,t){return Ue(n[0]*Ta,n[1]*Ta,t[0]*Ta,t[1]*Ta)},Bo.geo.length=function(n){return jc=0,Bo.geo.stream(n,Hc),jc};var jc,Hc={sphere:c,point:c,lineStart:je,lineEnd:c,polygonStart:c,polygonEnd:c},Fc=He(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(Bo.geo.azimuthalEqualArea=function(){return be(Fc)}).raw=Fc;var Oc=He(function(n){var t=Math.acos(n);return t&&t/Math.sin(t)},dt);(Bo.geo.azimuthalEquidistant=function(){return be(Oc)}).raw=Oc,(Bo.geo.conicConformal=function(){return ae(Fe)}).raw=Fe,(Bo.geo.conicEquidistant=function(){return ae(Oe)}).raw=Oe;var Yc=He(function(n){return 1/n},Math.atan);(Bo.geo.gnomonic=function(){return be(Yc)}).raw=Yc,Ye.invert=function(n,t){return[n,2*Math.atan(Math.exp(t))-Ca]},(Bo.geo.mercator=function(){return Ie(Ye)}).raw=Ye;var Ic=He(function(){return 1},Math.asin);(Bo.geo.orthographic=function(){return be(Ic)}).raw=Ic;var Zc=He(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(Bo.geo.stereographic=function(){return be(Zc)}).raw=Zc,Ze.invert=function(n,t){return[-t,2*Math.atan(Math.exp(n))-Ca]},(Bo.geo.transverseMercator=function(){var n=Ie(Ze),t=n.center,e=n.rotate;return n.center=function(n){return n?t([-n[1],n[0]]):(n=t(),[-n[1],n[0]])},n.rotate=function(n){return n?e([n[0],n[1],n.length>2?n[2]+90:90]):(n=e(),[n[0],n[1],n[2]-90])},n.rotate([0,0])}).raw=Ze,Bo.geom={},Bo.geom.hull=function(n){function t(n){if(n.length<3)return[];var t,u,i,o,a,c,s,l,f,h,g,p,v=vt(e),d=vt(r),m=n.length,y=m-1,x=[],M=[],_=0;if(v===Ve&&r===Xe)t=n;else for(i=0,t=[];m>i;++i)t.push([+v.call(this,u=n[i],i),+d.call(this,u,i)]);for(i=1;m>i;++i)(t[i][1]<t[_][1]||t[i][1]==t[_][1]&&t[i][0]<t[_][0])&&(_=i);for(i=0;m>i;++i)i!==_&&(c=t[i][1]-t[_][1],a=t[i][0]-t[_][0],x.push({angle:Math.atan2(c,a),index:i}));for(x.sort(function(n,t){return n.angle-t.angle}),g=x[0].angle,h=x[0].index,f=0,i=1;y>i;++i){if(o=x[i].index,g==x[i].angle){if(a=t[h][0]-t[_][0],c=t[h][1]-t[_][1],s=t[o][0]-t[_][0],l=t[o][1]-t[_][1],a*a+c*c>=s*s+l*l){x[i].index=-1;continue}x[f].index=-1}g=x[i].angle,f=i,h=o}for(M.push(_),i=0,o=0;2>i;++o)x[o].index>-1&&(M.push(x[o].index),i++);for(p=M.length;y>o;++o)if(!(x[o].index<0)){for(;!$e(M[p-2],M[p-1],x[o].index,t);)--p;M[p++]=x[o].index}var b=[];for(i=p-1;i>=0;--i)b.push(n[M[i]]);return b}var e=Ve,r=Xe;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t)},Bo.geom.polygon=function(n){return ga(n,Vc),n};var Vc=Bo.geom.polygon.prototype=[];Vc.area=function(){for(var n,t=-1,e=this.length,r=this[e-1],u=0;++t<e;)n=r,r=this[t],u+=n[1]*r[0]-n[0]*r[1];return.5*u},Vc.centroid=function(n){var t,e,r=-1,u=this.length,i=0,o=0,a=this[u-1];for(arguments.length||(n=-1/(6*this.area()));++r<u;)t=a,a=this[r],e=t[0]*a[1]-a[0]*t[1],i+=(t[0]+a[0])*e,o+=(t[1]+a[1])*e;return[i*n,o*n]},Vc.clip=function(n){for(var t,e,r,u,i,o,a=Je(n),c=-1,s=this.length-Je(this),l=this[s-1];++c<s;){for(t=n.slice(),n.length=0,u=this[c],i=t[(r=t.length-a)-1],e=-1;++e<r;)o=t[e],Be(o,l,u)?(Be(i,l,u)||n.push(We(i,o,l,u)),n.push(o)):Be(i,l,u)&&n.push(We(i,o,l,u)),i=o;a&&n.push(n[0]),l=u}return n};var Xc,$c,Bc,Wc,Jc,Gc=[],Kc=[];ur.prototype.prepare=function(){for(var n,t=this.edges,e=t.length;e--;)n=t[e].edge,n.b&&n.a||t.splice(e,1);return t.sort(or),t.length},dr.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},mr.prototype={insert:function(n,t){var e,r,u;if(n){if(t.P=n,t.N=n.N,n.N&&(n.N.P=t),n.N=t,n.R){for(n=n.R;n.L;)n=n.L;n.L=t}else n.R=t;e=n}else this._?(n=_r(this._),t.P=null,t.N=n,n.P=n.L=t,e=n):(t.P=t.N=null,this._=t,e=null);for(t.L=t.R=null,t.U=e,t.C=!0,n=t;e&&e.C;)r=e.U,e===r.L?(u=r.R,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.R&&(xr(this,e),n=e,e=n.U),e.C=!1,r.C=!0,Mr(this,r))):(u=r.L,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.L&&(Mr(this,e),n=e,e=n.U),e.C=!1,r.C=!0,xr(this,r))),e=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var t,e,r,u=n.U,i=n.L,o=n.R;if(e=i?o?_r(o):i:o,u?u.L===n?u.L=e:u.R=e:this._=e,i&&o?(r=e.C,e.C=n.C,e.L=i,i.U=e,e!==o?(u=e.U,e.U=n.U,n=e.R,u.L=n,e.R=o,o.U=e):(e.U=u,u=e,n=e.R)):(r=n.C,n=e),n&&(n.U=u),!r){if(n&&n.C)return n.C=!1,void 0;do{if(n===this._)break;if(n===u.L){if(t=u.R,t.C&&(t.C=!1,u.C=!0,xr(this,u),t=u.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,Mr(this,t),t=u.R),t.C=u.C,u.C=t.R.C=!1,xr(this,u),n=this._;break}}else if(t=u.L,t.C&&(t.C=!1,u.C=!0,Mr(this,u),t=u.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,xr(this,t),t=u.L),t.C=u.C,u.C=t.L.C=!1,Mr(this,u),n=this._;break}t.C=!0,n=u,u=u.U}while(!n.C);n&&(n.C=!1)}}},Bo.geom.voronoi=function(n){function t(n){var t=new Array(n.length),r=a[0][0],u=a[0][1],i=a[1][0],o=a[1][1];return br(e(n),a).cells.forEach(function(e,a){var c=e.edges,s=e.site,l=t[a]=c.length?c.map(function(n){var t=n.start();return[t.x,t.y]}):s.x>=r&&s.x<=i&&s.y>=u&&s.y<=o?[[r,o],[i,o],[i,u],[r,u]]:[];l.point=n[a]}),t}function e(n){return n.map(function(n,t){return{x:Math.round(i(n,t)/Na)*Na,y:Math.round(o(n,t)/Na)*Na,i:t}})}var r=Ve,u=Xe,i=r,o=u,a=Qc;return n?t(n):(t.links=function(n){return br(e(n)).edges.filter(function(n){return n.l&&n.r}).map(function(t){return{source:n[t.l.i],target:n[t.r.i]}})},t.triangles=function(n){var t=[];return br(e(n)).cells.forEach(function(e,r){for(var u,i,o=e.site,a=e.edges.sort(or),c=-1,s=a.length,l=a[s-1].edge,f=l.l===o?l.r:l.l;++c<s;)u=l,i=f,l=a[c].edge,f=l.l===o?l.r:l.l,r<i.i&&r<f.i&&Sr(o,i,f)<0&&t.push([n[r],n[i.i],n[f.i]])}),t},t.x=function(n){return arguments.length?(i=vt(r=n),t):r},t.y=function(n){return arguments.length?(o=vt(u=n),t):u},t.clipExtent=function(n){return arguments.length?(a=null==n?Qc:n,t):a===Qc?null:a},t.size=function(n){return arguments.length?t.clipExtent(n&&[[0,0],n]):a===Qc?null:a&&a[1]},t)};var Qc=[[-1e6,-1e6],[1e6,1e6]];Bo.geom.delaunay=function(n){return Bo.geom.voronoi().triangles(n)},Bo.geom.quadtree=function(n,t,e,r,u){function i(n){function i(n,t,e,r,u,i,o,a){if(!isNaN(e)&&!isNaN(r))if(n.leaf){var c=n.x,l=n.y;if(null!=c)if(ca(c-e)+ca(l-r)<.01)s(n,t,e,r,u,i,o,a);else{var f=n.point;n.x=n.y=n.point=null,s(n,f,c,l,u,i,o,a),s(n,t,e,r,u,i,o,a)}else n.x=e,n.y=r,n.point=t}else s(n,t,e,r,u,i,o,a)}function s(n,t,e,r,u,o,a,c){var s=.5*(u+a),l=.5*(o+c),f=e>=s,h=r>=l,g=(h<<1)+f;n.leaf=!1,n=n.nodes[g]||(n.nodes[g]=Ar()),f?u=s:a=s,h?o=l:c=l,i(n,t,e,r,u,o,a,c)}var l,f,h,g,p,v,d,m,y,x=vt(a),M=vt(c);if(null!=t)v=t,d=e,m=r,y=u;else if(m=y=-(v=d=1/0),f=[],h=[],p=n.length,o)for(g=0;p>g;++g)l=n[g],l.x<v&&(v=l.x),l.y<d&&(d=l.y),l.x>m&&(m=l.x),l.y>y&&(y=l.y),f.push(l.x),h.push(l.y);else for(g=0;p>g;++g){var _=+x(l=n[g],g),b=+M(l,g);v>_&&(v=_),d>b&&(d=b),_>m&&(m=_),b>y&&(y=b),f.push(_),h.push(b)}var w=m-v,S=y-d;w>S?y=d+w:m=v+S;var k=Ar();if(k.add=function(n){i(k,n,+x(n,++g),+M(n,g),v,d,m,y)},k.visit=function(n){Cr(n,k,v,d,m,y)},g=-1,null==t){for(;++g<p;)i(k,n[g],f[g],h[g],v,d,m,y);--g}else n.forEach(k.add);return f=h=n=l=null,k}var o,a=Ve,c=Xe;return(o=arguments.length)?(a=kr,c=Er,3===o&&(u=e,r=t,e=t=0),i(n)):(i.x=function(n){return arguments.length?(a=n,i):a},i.y=function(n){return arguments.length?(c=n,i):c},i.extent=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=+n[0][0],e=+n[0][1],r=+n[1][0],u=+n[1][1]),i):null==t?null:[[t,e],[r,u]]},i.size=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=e=0,r=+n[0],u=+n[1]),i):null==t?null:[r-t,u-e]},i)},Bo.interpolateRgb=Nr,Bo.interpolateObject=Lr,Bo.interpolateNumber=Tr,Bo.interpolateString=qr;var ns=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;Bo.interpolate=zr,Bo.interpolators=[function(n,t){var e=typeof t;return("string"===e?$a.has(t)||/^(#|rgb\(|hsl\()/.test(t)?Nr:qr:t instanceof V?Nr:"object"===e?Array.isArray(t)?Rr:Lr:Tr)(n,t)}],Bo.interpolateArray=Rr;var ts=function(){return dt},es=Bo.map({linear:ts,poly:Or,quad:function(){return jr},cubic:function(){return Hr},sin:function(){return Yr},exp:function(){return Ir},circle:function(){return Zr},elastic:Vr,back:Xr,bounce:function(){return $r}}),rs=Bo.map({"in":dt,out:Pr,"in-out":Ur,"out-in":function(n){return Ur(Pr(n))}});Bo.ease=function(n){var t=n.indexOf("-"),e=t>=0?n.substring(0,t):n,r=t>=0?n.substring(t+1):"in";return e=es.get(e)||ts,r=rs.get(r)||dt,Dr(r(e.apply(null,Wo.call(arguments,1))))},Bo.interpolateHcl=Br,Bo.interpolateHsl=Wr,Bo.interpolateLab=Jr,Bo.interpolateRound=Gr,Bo.transform=function(n){var t=Go.createElementNS(Bo.ns.prefix.svg,"g");return(Bo.transform=function(n){if(null!=n){t.setAttribute("transform",n);var e=t.transform.baseVal.consolidate()}return new Kr(e?e.matrix:us)})(n)},Kr.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var us={a:1,b:0,c:0,d:1,e:0,f:0};Bo.interpolateTransform=eu,Bo.layout={},Bo.layout.bundle=function(){return function(n){for(var t=[],e=-1,r=n.length;++e<r;)t.push(iu(n[e]));return t}},Bo.layout.chord=function(){function n(){var n,s,f,h,g,p={},v=[],d=Bo.range(i),m=[];for(e=[],r=[],n=0,h=-1;++h<i;){for(s=0,g=-1;++g<i;)s+=u[h][g];v.push(s),m.push(Bo.range(i)),n+=s}for(o&&d.sort(function(n,t){return o(v[n],v[t])}),a&&m.forEach(function(n,t){n.sort(function(n,e){return a(u[t][n],u[t][e])})}),n=(Aa-l*i)/n,s=0,h=-1;++h<i;){for(f=s,g=-1;++g<i;){var y=d[h],x=m[y][g],M=u[y][x],_=s,b=s+=M*n;p[y+"-"+x]={index:y,subindex:x,startAngle:_,endAngle:b,value:M}}r[y]={index:y,startAngle:f,endAngle:s,value:(s-f)/n},s+=l}for(h=-1;++h<i;)for(g=h-1;++g<i;){var w=p[h+"-"+g],S=p[g+"-"+h];(w.value||S.value)&&e.push(w.value<S.value?{source:S,target:w}:{source:w,target:S})}c&&t()}function t(){e.sort(function(n,t){return c((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,u,i,o,a,c,s={},l=0;return s.matrix=function(n){return arguments.length?(i=(u=n)&&u.length,e=r=null,s):u},s.padding=function(n){return arguments.length?(l=n,e=r=null,s):l},s.sortGroups=function(n){return arguments.length?(o=n,e=r=null,s):o},s.sortSubgroups=function(n){return arguments.length?(a=n,e=null,s):a},s.sortChords=function(n){return arguments.length?(c=n,e&&t(),s):c},s.chords=function(){return e||n(),e},s.groups=function(){return r||n(),r},s},Bo.layout.force=function(){function n(n){return function(t,e,r,u){if(t.point!==n){var i=t.cx-n.x,o=t.cy-n.y,a=1/Math.sqrt(i*i+o*o);if(v>(u-e)*a){var c=t.charge*a*a;return n.px-=i*c,n.py-=o*c,!0}if(t.point&&isFinite(a)){var c=t.pointCharge*a*a;n.px-=i*c,n.py-=o*c}}return!t.charge}}function t(n){n.px=Bo.event.x,n.py=Bo.event.y,a.resume()}var e,r,u,i,o,a={},c=Bo.dispatch("start","tick","end"),s=[1,1],l=.9,f=is,h=os,g=-30,p=.1,v=.8,d=[],m=[];return a.tick=function(){if((r*=.99)<.005)return c.end({type:"end",alpha:r=0}),!0;var t,e,a,f,h,v,y,x,M,_=d.length,b=m.length;for(e=0;b>e;++e)a=m[e],f=a.source,h=a.target,x=h.x-f.x,M=h.y-f.y,(v=x*x+M*M)&&(v=r*i[e]*((v=Math.sqrt(v))-u[e])/v,x*=v,M*=v,h.x-=x*(y=f.weight/(h.weight+f.weight)),h.y-=M*y,f.x+=x*(y=1-y),f.y+=M*y);if((y=r*p)&&(x=s[0]/2,M=s[1]/2,e=-1,y))for(;++e<_;)a=d[e],a.x+=(x-a.x)*y,a.y+=(M-a.y)*y;if(g)for(hu(t=Bo.geom.quadtree(d),r,o),e=-1;++e<_;)(a=d[e]).fixed||t.visit(n(a));for(e=-1;++e<_;)a=d[e],a.fixed?(a.x=a.px,a.y=a.py):(a.x-=(a.px-(a.px=a.x))*l,a.y-=(a.py-(a.py=a.y))*l);c.tick({type:"tick",alpha:r})},a.nodes=function(n){return arguments.length?(d=n,a):d},a.links=function(n){return arguments.length?(m=n,a):m},a.size=function(n){return arguments.length?(s=n,a):s},a.linkDistance=function(n){return arguments.length?(f="function"==typeof n?n:+n,a):f},a.distance=a.linkDistance,a.linkStrength=function(n){return arguments.length?(h="function"==typeof n?n:+n,a):h},a.friction=function(n){return arguments.length?(l=+n,a):l},a.charge=function(n){return arguments.length?(g="function"==typeof n?n:+n,a):g},a.gravity=function(n){return arguments.length?(p=+n,a):p},a.theta=function(n){return arguments.length?(v=+n,a):v},a.alpha=function(n){return arguments.length?(n=+n,r?r=n>0?n:0:n>0&&(c.start({type:"start",alpha:r=n}),Bo.timer(a.tick)),a):r},a.start=function(){function n(n,r){if(!e){for(e=new Array(c),a=0;c>a;++a)e[a]=[];for(a=0;s>a;++a){var u=m[a];e[u.source.index].push(u.target),e[u.target.index].push(u.source)}}for(var i,o=e[t],a=-1,s=o.length;++a<s;)if(!isNaN(i=o[a][n]))return i;return Math.random()*r}var t,e,r,c=d.length,l=m.length,p=s[0],v=s[1];for(t=0;c>t;++t)(r=d[t]).index=t,r.weight=0;for(t=0;l>t;++t)r=m[t],"number"==typeof r.source&&(r.source=d[r.source]),"number"==typeof r.target&&(r.target=d[r.target]),++r.source.weight,++r.target.weight;for(t=0;c>t;++t)r=d[t],isNaN(r.x)&&(r.x=n("x",p)),isNaN(r.y)&&(r.y=n("y",v)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(u=[],"function"==typeof f)for(t=0;l>t;++t)u[t]=+f.call(this,m[t],t);else for(t=0;l>t;++t)u[t]=f;if(i=[],"function"==typeof h)for(t=0;l>t;++t)i[t]=+h.call(this,m[t],t);else for(t=0;l>t;++t)i[t]=h;if(o=[],"function"==typeof g)for(t=0;c>t;++t)o[t]=+g.call(this,d[t],t);else for(t=0;c>t;++t)o[t]=g;return a.resume()},a.resume=function(){return a.alpha(.1)},a.stop=function(){return a.alpha(0)},a.drag=function(){return e||(e=Bo.behavior.drag().origin(dt).on("dragstart.force",cu).on("drag.force",t).on("dragend.force",su)),arguments.length?(this.on("mouseover.force",lu).on("mouseout.force",fu).call(e),void 0):e},Bo.rebind(a,c,"on")};var is=20,os=1;Bo.layout.hierarchy=function(){function n(t,o,a){var c=u.call(e,t,o);if(t.depth=o,a.push(t),c&&(s=c.length)){for(var s,l,f=-1,h=t.children=new Array(s),g=0,p=o+1;++f<s;)l=h[f]=n(c[f],p,a),l.parent=t,g+=l.value;r&&h.sort(r),i&&(t.value=g)}else delete t.children,i&&(t.value=+i.call(e,t,o)||0);return t}function t(n,r){var u=n.children,o=0;if(u&&(a=u.length))for(var a,c=-1,s=r+1;++c<a;)o+=t(u[c],s);else i&&(o=+i.call(e,n,r)||0);return i&&(n.value=o),o}function e(t){var e=[];return n(t,0,e),e}var r=du,u=pu,i=vu;return e.sort=function(n){return arguments.length?(r=n,e):r},e.children=function(n){return arguments.length?(u=n,e):u},e.value=function(n){return arguments.length?(i=n,e):i},e.revalue=function(n){return t(n,0),n},e},Bo.layout.partition=function(){function n(t,e,r,u){var i=t.children;if(t.x=e,t.y=t.depth*u,t.dx=r,t.dy=u,i&&(o=i.length)){var o,a,c,s=-1;for(r=t.value?r/t.value:0;++s<o;)n(a=i[s],e,c=a.value*r,u),e+=c}}function t(n){var e=n.children,r=0;if(e&&(u=e.length))for(var u,i=-1;++i<u;)r=Math.max(r,t(e[i]));return 1+r}function e(e,i){var o=r.call(this,e,i);return n(o[0],0,u[0],u[1]/t(o[0])),o}var r=Bo.layout.hierarchy(),u=[1,1];return e.size=function(n){return arguments.length?(u=n,e):u},gu(e,r)},Bo.layout.pie=function(){function n(i){var o=i.map(function(e,r){return+t.call(n,e,r)}),a=+("function"==typeof r?r.apply(this,arguments):r),c=(("function"==typeof u?u.apply(this,arguments):u)-a)/Bo.sum(o),s=Bo.range(i.length);null!=e&&s.sort(e===as?function(n,t){return o[t]-o[n]}:function(n,t){return e(i[n],i[t])});var l=[];return s.forEach(function(n){var t;l[n]={data:i[n],value:t=o[n],startAngle:a,endAngle:a+=t*c}}),l}var t=Number,e=as,r=0,u=Aa;return n.value=function(e){return arguments.length?(t=e,n):t},n.sort=function(t){return arguments.length?(e=t,n):e},n.startAngle=function(t){return arguments.length?(r=t,n):r},n.endAngle=function(t){return arguments.length?(u=t,n):u},n};var as={};Bo.layout.stack=function(){function n(a,c){var s=a.map(function(e,r){return t.call(n,e,r)}),l=s.map(function(t){return t.map(function(t,e){return[i.call(n,t,e),o.call(n,t,e)]})}),f=e.call(n,l,c);s=Bo.permute(s,f),l=Bo.permute(l,f);var h,g,p,v=r.call(n,l,c),d=s.length,m=s[0].length;for(g=0;m>g;++g)for(u.call(n,s[0][g],p=v[g],l[0][g][1]),h=1;d>h;++h)u.call(n,s[h][g],p+=l[h-1][g][1],l[h][g][1]);return a}var t=dt,e=_u,r=bu,u=Mu,i=yu,o=xu;return n.values=function(e){return arguments.length?(t=e,n):t},n.order=function(t){return arguments.length?(e="function"==typeof t?t:cs.get(t)||_u,n):e},n.offset=function(t){return arguments.length?(r="function"==typeof t?t:ss.get(t)||bu,n):r},n.x=function(t){return arguments.length?(i=t,n):i},n.y=function(t){return arguments.length?(o=t,n):o},n.out=function(t){return arguments.length?(u=t,n):u},n};var cs=Bo.map({"inside-out":function(n){var t,e,r=n.length,u=n.map(wu),i=n.map(Su),o=Bo.range(r).sort(function(n,t){return u[n]-u[t]}),a=0,c=0,s=[],l=[];for(t=0;r>t;++t)e=o[t],c>a?(a+=i[e],s.push(e)):(c+=i[e],l.push(e));return l.reverse().concat(s)},reverse:function(n){return Bo.range(n.length).reverse()},"default":_u}),ss=Bo.map({silhouette:function(n){var t,e,r,u=n.length,i=n[0].length,o=[],a=0,c=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];r>a&&(a=r),o.push(r)}for(e=0;i>e;++e)c[e]=(a-o[e])/2;return c},wiggle:function(n){var t,e,r,u,i,o,a,c,s,l=n.length,f=n[0],h=f.length,g=[];for(g[0]=c=s=0,e=1;h>e;++e){for(t=0,u=0;l>t;++t)u+=n[t][e][1];for(t=0,i=0,a=f[e][0]-f[e-1][0];l>t;++t){for(r=0,o=(n[t][e][1]-n[t][e-1][1])/(2*a);t>r;++r)o+=(n[r][e][1]-n[r][e-1][1])/a;i+=o*n[t][e][1]}g[e]=c-=u?i/u*a:0,s>c&&(s=c)}for(e=0;h>e;++e)g[e]-=s;return g},expand:function(n){var t,e,r,u=n.length,i=n[0].length,o=1/u,a=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];if(r)for(t=0;u>t;t++)n[t][e][1]/=r;else for(t=0;u>t;t++)n[t][e][1]=o}for(e=0;i>e;++e)a[e]=0;return a},zero:bu});Bo.layout.histogram=function(){function n(n,i){for(var o,a,c=[],s=n.map(e,this),l=r.call(this,s,i),f=u.call(this,l,s,i),i=-1,h=s.length,g=f.length-1,p=t?1:1/h;++i<g;)o=c[i]=[],o.dx=f[i+1]-(o.x=f[i]),o.y=0;if(g>0)for(i=-1;++i<h;)a=s[i],a>=l[0]&&a<=l[1]&&(o=c[Bo.bisect(f,a,1,g)-1],o.y+=p,o.push(n[i]));return c}var t=!0,e=Number,r=Cu,u=Eu;return n.value=function(t){return arguments.length?(e=t,n):e},n.range=function(t){return arguments.length?(r=vt(t),n):r},n.bins=function(t){return arguments.length?(u="number"==typeof t?function(n){return Au(n,t)}:vt(t),n):u},n.frequency=function(e){return arguments.length?(t=!!e,n):t},n},Bo.layout.tree=function(){function n(n,i){function o(n,t){var r=n.children,u=n._tree;if(r&&(i=r.length)){for(var i,a,s,l=r[0],f=l,h=-1;++h<i;)s=r[h],o(s,a),f=c(s,a,f),a=s;Uu(n);var g=.5*(l._tree.prelim+s._tree.prelim);t?(u.prelim=t._tree.prelim+e(n,t),u.mod=u.prelim-g):u.prelim=g}else t&&(u.prelim=t._tree.prelim+e(n,t))}function a(n,t){n.x=n._tree.prelim+t;var e=n.children;if(e&&(r=e.length)){var r,u=-1;for(t+=n._tree.mod;++u<r;)a(e[u],t)}}function c(n,t,r){if(t){for(var u,i=n,o=n,a=t,c=n.parent.children[0],s=i._tree.mod,l=o._tree.mod,f=a._tree.mod,h=c._tree.mod;a=Tu(a),i=Lu(i),a&&i;)c=Lu(c),o=Tu(o),o._tree.ancestor=n,u=a._tree.prelim+f-i._tree.prelim-s+e(a,i),u>0&&(ju(Hu(a,n,r),n,u),s+=u,l+=u),f+=a._tree.mod,s+=i._tree.mod,h+=c._tree.mod,l+=o._tree.mod;a&&!Tu(o)&&(o._tree.thread=a,o._tree.mod+=f-l),i&&!Lu(c)&&(c._tree.thread=i,c._tree.mod+=s-h,r=n)}return r}var s=t.call(this,n,i),l=s[0];Pu(l,function(n,t){n._tree={ancestor:n,prelim:0,mod:0,change:0,shift:0,number:t?t._tree.number+1:0}}),o(l),a(l,-l._tree.prelim);var f=qu(l,Ru),h=qu(l,zu),g=qu(l,Du),p=f.x-e(f,h)/2,v=h.x+e(h,f)/2,d=g.depth||1;return Pu(l,u?function(n){n.x*=r[0],n.y=n.depth*r[1],delete n._tree}:function(n){n.x=(n.x-p)/(v-p)*r[0],n.y=n.depth/d*r[1],delete n._tree}),s}var t=Bo.layout.hierarchy().sort(null).value(null),e=Nu,r=[1,1],u=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(u=null==(r=t),n):u?null:r},n.nodeSize=function(t){return arguments.length?(u=null!=(r=t),n):u?r:null},gu(n,t)},Bo.layout.pack=function(){function n(n,i){var o=e.call(this,n,i),a=o[0],c=u[0],s=u[1],l=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(a.x=a.y=0,Pu(a,function(n){n.r=+l(n.value)}),Pu(a,Zu),r){var f=r*(t?1:Math.max(2*a.r/c,2*a.r/s))/2;Pu(a,function(n){n.r+=f}),Pu(a,Zu),Pu(a,function(n){n.r-=f})}return $u(a,c/2,s/2,t?1:1/Math.max(2*a.r/c,2*a.r/s)),o}var t,e=Bo.layout.hierarchy().sort(Fu),r=0,u=[1,1];return n.size=function(t){return arguments.length?(u=t,n):u},n.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,n):t},n.padding=function(t){return arguments.length?(r=+t,n):r},gu(n,e)},Bo.layout.cluster=function(){function n(n,i){var o,a=t.call(this,n,i),c=a[0],s=0;Pu(c,function(n){var t=n.children;t&&t.length?(n.x=Ju(t),n.y=Wu(t)):(n.x=o?s+=e(n,o):0,n.y=0,o=n)});var l=Gu(c),f=Ku(c),h=l.x-e(l,f)/2,g=f.x+e(f,l)/2;return Pu(c,u?function(n){n.x=(n.x-c.x)*r[0],n.y=(c.y-n.y)*r[1]}:function(n){n.x=(n.x-h)/(g-h)*r[0],n.y=(1-(c.y?n.y/c.y:1))*r[1]}),a}var t=Bo.layout.hierarchy().sort(null).value(null),e=Nu,r=[1,1],u=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(u=null==(r=t),n):u?null:r},n.nodeSize=function(t){return arguments.length?(u=null!=(r=t),n):u?r:null},gu(n,t)},Bo.layout.treemap=function(){function n(n,t){for(var e,r,u=-1,i=n.length;++u<i;)r=(e=n[u]).value*(0>t?0:t),e.area=isNaN(r)||0>=r?0:r}function t(e){var i=e.children;if(i&&i.length){var o,a,c,s=f(e),l=[],h=i.slice(),p=1/0,v="slice"===g?s.dx:"dice"===g?s.dy:"slice-dice"===g?1&e.depth?s.dy:s.dx:Math.min(s.dx,s.dy);for(n(h,s.dx*s.dy/e.value),l.area=0;(c=h.length)>0;)l.push(o=h[c-1]),l.area+=o.area,"squarify"!==g||(a=r(l,v))<=p?(h.pop(),p=a):(l.area-=l.pop().area,u(l,v,s,!1),v=Math.min(s.dx,s.dy),l.length=l.area=0,p=1/0);l.length&&(u(l,v,s,!0),l.length=l.area=0),i.forEach(t)}}function e(t){var r=t.children;if(r&&r.length){var i,o=f(t),a=r.slice(),c=[];for(n(a,o.dx*o.dy/t.value),c.area=0;i=a.pop();)c.push(i),c.area+=i.area,null!=i.z&&(u(c,i.z?o.dx:o.dy,o,!a.length),c.length=c.area=0);r.forEach(e)}}function r(n,t){for(var e,r=n.area,u=0,i=1/0,o=-1,a=n.length;++o<a;)(e=n[o].area)&&(i>e&&(i=e),e>u&&(u=e));return r*=r,t*=t,r?Math.max(t*u*p/r,r/(t*i*p)):1/0}function u(n,t,e,r){var u,i=-1,o=n.length,a=e.x,s=e.y,l=t?c(n.area/t):0;if(t==e.dx){for((r||l>e.dy)&&(l=e.dy);++i<o;)u=n[i],u.x=a,u.y=s,u.dy=l,a+=u.dx=Math.min(e.x+e.dx-a,l?c(u.area/l):0);u.z=!0,u.dx+=e.x+e.dx-a,e.y+=l,e.dy-=l}else{for((r||l>e.dx)&&(l=e.dx);++i<o;)u=n[i],u.x=a,u.y=s,u.dx=l,s+=u.dy=Math.min(e.y+e.dy-s,l?c(u.area/l):0);u.z=!1,u.dy+=e.y+e.dy-s,e.x+=l,e.dx-=l}}function i(r){var u=o||a(r),i=u[0];return i.x=0,i.y=0,i.dx=s[0],i.dy=s[1],o&&a.revalue(i),n([i],i.dx*i.dy/i.value),(o?e:t)(i),h&&(o=u),u}var o,a=Bo.layout.hierarchy(),c=Math.round,s=[1,1],l=null,f=Qu,h=!1,g="squarify",p=.5*(1+Math.sqrt(5));return i.size=function(n){return arguments.length?(s=n,i):s},i.padding=function(n){function t(t){var e=n.call(i,t,t.depth);return null==e?Qu(t):ni(t,"number"==typeof e?[e,e,e,e]:e)}function e(t){return ni(t,n)}if(!arguments.length)return l;var r;return f=null==(l=n)?Qu:"function"==(r=typeof n)?t:"number"===r?(n=[n,n,n,n],e):e,i},i.round=function(n){return arguments.length?(c=n?Math.round:Number,i):c!=Number},i.sticky=function(n){return arguments.length?(h=n,o=null,i):h},i.ratio=function(n){return arguments.length?(p=n,i):p},i.mode=function(n){return arguments.length?(g=n+"",i):g},gu(i,a)},Bo.random={normal:function(n,t){var e=arguments.length;return 2>e&&(t=1),1>e&&(n=0),function(){var e,r,u;do e=2*Math.random()-1,r=2*Math.random()-1,u=e*e+r*r;while(!u||u>1);return n+t*e*Math.sqrt(-2*Math.log(u)/u)}},logNormal:function(){var n=Bo.random.normal.apply(Bo,arguments);return function(){return Math.exp(n())}},bates:function(n){var t=Bo.random.irwinHall(n);return function(){return t()/n}},irwinHall:function(n){return function(){for(var t=0,e=0;n>e;e++)t+=Math.random();return t}}},Bo.scale={};var ls={floor:dt,ceil:dt};Bo.scale.linear=function(){return ai([0,1],[0,1],zr,!1)};var fs={s:1,g:1,p:1,r:1,e:1};Bo.scale.log=function(){return vi(Bo.scale.linear().domain([0,1]),10,!0,[1,10])};var hs=Bo.format(".0e"),gs={floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};Bo.scale.pow=function(){return di(Bo.scale.linear(),1,[0,1])},Bo.scale.sqrt=function(){return Bo.scale.pow().exponent(.5)},Bo.scale.ordinal=function(){return yi([],{t:"range",a:[[]]})},Bo.scale.category10=function(){return Bo.scale.ordinal().range(ps)},Bo.scale.category20=function(){return Bo.scale.ordinal().range(vs)},Bo.scale.category20b=function(){return Bo.scale.ordinal().range(ds)},Bo.scale.category20c=function(){return Bo.scale.ordinal().range(ms)};var ps=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(ot),vs=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(ot),ds=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(ot),ms=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(ot);Bo.scale.quantile=function(){return xi([],[])},Bo.scale.quantize=function(){return Mi(0,1,[0,1])},Bo.scale.threshold=function(){return _i([.5],[0,1])},Bo.scale.identity=function(){return bi([0,1])},Bo.svg={},Bo.svg.arc=function(){function n(){var n=t.apply(this,arguments),i=e.apply(this,arguments),o=r.apply(this,arguments)+ys,a=u.apply(this,arguments)+ys,c=(o>a&&(c=o,o=a,a=c),a-o),s=Ea>c?"0":"1",l=Math.cos(o),f=Math.sin(o),h=Math.cos(a),g=Math.sin(a);return c>=xs?n?"M0,"+i+"A"+i+","+i+" 0 1,1 0,"+-i+"A"+i+","+i+" 0 1,1 0,"+i+"M0,"+n+"A"+n+","+n+" 0 1,0 0,"+-n+"A"+n+","+n+" 0 1,0 0,"+n+"Z":"M0,"+i+"A"+i+","+i+" 0 1,1 0,"+-i+"A"+i+","+i+" 0 1,1 0,"+i+"Z":n?"M"+i*l+","+i*f+"A"+i+","+i+" 0 "+s+",1 "+i*h+","+i*g+"L"+n*h+","+n*g+"A"+n+","+n+" 0 "+s+",0 "+n*l+","+n*f+"Z":"M"+i*l+","+i*f+"A"+i+","+i+" 0 "+s+",1 "+i*h+","+i*g+"L0,0"+"Z"}var t=wi,e=Si,r=ki,u=Ei;return n.innerRadius=function(e){return arguments.length?(t=vt(e),n):t},n.outerRadius=function(t){return arguments.length?(e=vt(t),n):e},n.startAngle=function(t){return arguments.length?(r=vt(t),n):r},n.endAngle=function(t){return arguments.length?(u=vt(t),n):u},n.centroid=function(){var n=(t.apply(this,arguments)+e.apply(this,arguments))/2,i=(r.apply(this,arguments)+u.apply(this,arguments))/2+ys;return[Math.cos(i)*n,Math.sin(i)*n]},n};var ys=-Ca,xs=Aa-Na;Bo.svg.line=function(){return Ai(dt)};var Ms=Bo.map({linear:Ci,"linear-closed":Ni,step:Li,"step-before":Ti,"step-after":qi,basis:ji,"basis-open":Hi,"basis-closed":Fi,bundle:Oi,cardinal:Di,"cardinal-open":zi,"cardinal-closed":Ri,monotone:$i});Ms.forEach(function(n,t){t.key=n,t.closed=/-closed$/.test(n)});var _s=[0,2/3,1/3,0],bs=[0,1/3,2/3,0],ws=[0,1/6,2/3,1/6];Bo.svg.line.radial=function(){var n=Ai(Bi);return n.radius=n.x,delete n.x,n.angle=n.y,delete n.y,n},Ti.reverse=qi,qi.reverse=Ti,Bo.svg.area=function(){return Wi(dt)},Bo.svg.area.radial=function(){var n=Wi(Bi);return n.radius=n.x,delete n.x,n.innerRadius=n.x0,delete n.x0,n.outerRadius=n.x1,delete n.x1,n.angle=n.y,delete n.y,n.startAngle=n.y0,delete n.y0,n.endAngle=n.y1,delete n.y1,n},Bo.svg.chord=function(){function n(n,a){var c=t(this,i,n,a),s=t(this,o,n,a);return"M"+c.p0+r(c.r,c.p1,c.a1-c.a0)+(e(c,s)?u(c.r,c.p1,c.r,c.p0):u(c.r,c.p1,s.r,s.p0)+r(s.r,s.p1,s.a1-s.a0)+u(s.r,s.p1,c.r,c.p0))+"Z"}function t(n,t,e,r){var u=t.call(n,e,r),i=a.call(n,u,r),o=c.call(n,u,r)+ys,l=s.call(n,u,r)+ys;return{r:i,a0:o,a1:l,p0:[i*Math.cos(o),i*Math.sin(o)],p1:[i*Math.cos(l),i*Math.sin(l)]}}function e(n,t){return n.a0==t.a0&&n.a1==t.a1}function r(n,t,e){return"A"+n+","+n+" 0 "+ +(e>Ea)+",1 "+t}function u(n,t,e,r){return"Q 0,0 "+r}var i=De,o=Pe,a=Ji,c=ki,s=Ei;return n.radius=function(t){return arguments.length?(a=vt(t),n):a},n.source=function(t){return arguments.length?(i=vt(t),n):i},n.target=function(t){return arguments.length?(o=vt(t),n):o},n.startAngle=function(t){return arguments.length?(c=vt(t),n):c},n.endAngle=function(t){return arguments.length?(s=vt(t),n):s},n},Bo.svg.diagonal=function(){function n(n,u){var i=t.call(this,n,u),o=e.call(this,n,u),a=(i.y+o.y)/2,c=[i,{x:i.x,y:a},{x:o.x,y:a},o];return c=c.map(r),"M"+c[0]+"C"+c[1]+" "+c[2]+" "+c[3]}var t=De,e=Pe,r=Gi;return n.source=function(e){return arguments.length?(t=vt(e),n):t},n.target=function(t){return arguments.length?(e=vt(t),n):e},n.projection=function(t){return arguments.length?(r=t,n):r},n},Bo.svg.diagonal.radial=function(){var n=Bo.svg.diagonal(),t=Gi,e=n.projection;return n.projection=function(n){return arguments.length?e(Ki(t=n)):t},n},Bo.svg.symbol=function(){function n(n,r){return(Ss.get(t.call(this,n,r))||to)(e.call(this,n,r))}var t=no,e=Qi;return n.type=function(e){return arguments.length?(t=vt(e),n):t},n.size=function(t){return arguments.length?(e=vt(t),n):e},n};var Ss=Bo.map({circle:to,cross:function(n){var t=Math.sqrt(n/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(n){var t=Math.sqrt(n/(2*Cs)),e=t*Cs;return"M0,"+-t+"L"+e+",0"+" 0,"+t+" "+-e+",0"+"Z"},square:function(n){var t=Math.sqrt(n)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"
},"triangle-down":function(n){var t=Math.sqrt(n/As),e=t*As/2;return"M0,"+e+"L"+t+","+-e+" "+-t+","+-e+"Z"},"triangle-up":function(n){var t=Math.sqrt(n/As),e=t*As/2;return"M0,"+-e+"L"+t+","+e+" "+-t+","+e+"Z"}});Bo.svg.symbolTypes=Ss.keys();var ks,Es,As=Math.sqrt(3),Cs=Math.tan(30*Ta),Ns=[],Ls=0;Ns.call=ya.call,Ns.empty=ya.empty,Ns.node=ya.node,Ns.size=ya.size,Bo.transition=function(n){return arguments.length?ks?n.transition():n:_a.transition()},Bo.transition.prototype=Ns,Ns.select=function(n){var t,e,r,u=this.id,i=[];n=v(n);for(var o=-1,a=this.length;++o<a;){i.push(t=[]);for(var c=this[o],s=-1,l=c.length;++s<l;)(r=c[s])&&(e=n.call(r,r.__data__,s,o))?("__data__"in r&&(e.__data__=r.__data__),io(e,s,u,r.__transition__[u]),t.push(e)):t.push(null)}return eo(i,u)},Ns.selectAll=function(n){var t,e,r,u,i,o=this.id,a=[];n=d(n);for(var c=-1,s=this.length;++c<s;)for(var l=this[c],f=-1,h=l.length;++f<h;)if(r=l[f]){i=r.__transition__[o],e=n.call(r,r.__data__,f,c),a.push(t=[]);for(var g=-1,p=e.length;++g<p;)(u=e[g])&&io(u,g,o,i),t.push(u)}return eo(a,o)},Ns.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=A(n));for(var i=0,o=this.length;o>i;i++){u.push(t=[]);for(var e=this[i],a=0,c=e.length;c>a;a++)(r=e[a])&&n.call(r,r.__data__,a,i)&&t.push(r)}return eo(u,this.id)},Ns.tween=function(n,t){var e=this.id;return arguments.length<2?this.node().__transition__[e].tween.get(n):N(this,null==t?function(t){t.__transition__[e].tween.remove(n)}:function(r){r.__transition__[e].tween.set(n,t)})},Ns.attr=function(n,t){function e(){this.removeAttribute(a)}function r(){this.removeAttributeNS(a.space,a.local)}function u(n){return null==n?e:(n+="",function(){var t,e=this.getAttribute(a);return e!==n&&(t=o(e,n),function(n){this.setAttribute(a,t(n))})})}function i(n){return null==n?r:(n+="",function(){var t,e=this.getAttributeNS(a.space,a.local);return e!==n&&(t=o(e,n),function(n){this.setAttributeNS(a.space,a.local,t(n))})})}if(arguments.length<2){for(t in n)this.attr(t,n[t]);return this}var o="transform"==n?eu:zr,a=Bo.ns.qualify(n);return ro(this,"attr."+n,t,a.local?i:u)},Ns.attrTween=function(n,t){function e(n,e){var r=t.call(this,n,e,this.getAttribute(u));return r&&function(n){this.setAttribute(u,r(n))}}function r(n,e){var r=t.call(this,n,e,this.getAttributeNS(u.space,u.local));return r&&function(n){this.setAttributeNS(u.space,u.local,r(n))}}var u=Bo.ns.qualify(n);return this.tween("attr."+n,u.local?r:e)},Ns.style=function(n,t,e){function r(){this.style.removeProperty(n)}function u(t){return null==t?r:(t+="",function(){var r,u=Qo.getComputedStyle(this,null).getPropertyValue(n);return u!==t&&(r=zr(u,t),function(t){this.style.setProperty(n,r(t),e)})})}var i=arguments.length;if(3>i){if("string"!=typeof n){2>i&&(t="");for(e in n)this.style(e,n[e],t);return this}e=""}return ro(this,"style."+n,t,u)},Ns.styleTween=function(n,t,e){function r(r,u){var i=t.call(this,r,u,Qo.getComputedStyle(this,null).getPropertyValue(n));return i&&function(t){this.style.setProperty(n,i(t),e)}}return arguments.length<3&&(e=""),this.tween("style."+n,r)},Ns.text=function(n){return ro(this,"text",n,uo)},Ns.remove=function(){return this.each("end.transition",function(){var n;this.__transition__.count<2&&(n=this.parentNode)&&n.removeChild(this)})},Ns.ease=function(n){var t=this.id;return arguments.length<1?this.node().__transition__[t].ease:("function"!=typeof n&&(n=Bo.ease.apply(Bo,arguments)),N(this,function(e){e.__transition__[t].ease=n}))},Ns.delay=function(n){var t=this.id;return N(this,"function"==typeof n?function(e,r,u){e.__transition__[t].delay=+n.call(e,e.__data__,r,u)}:(n=+n,function(e){e.__transition__[t].delay=n}))},Ns.duration=function(n){var t=this.id;return N(this,"function"==typeof n?function(e,r,u){e.__transition__[t].duration=Math.max(1,n.call(e,e.__data__,r,u))}:(n=Math.max(1,n),function(e){e.__transition__[t].duration=n}))},Ns.each=function(n,t){var e=this.id;if(arguments.length<2){var r=Es,u=ks;ks=e,N(this,function(t,r,u){Es=t.__transition__[e],n.call(t,t.__data__,r,u)}),Es=r,ks=u}else N(this,function(r){var u=r.__transition__[e];(u.event||(u.event=Bo.dispatch("start","end"))).on(n,t)});return this},Ns.transition=function(){for(var n,t,e,r,u=this.id,i=++Ls,o=[],a=0,c=this.length;c>a;a++){o.push(n=[]);for(var t=this[a],s=0,l=t.length;l>s;s++)(e=t[s])&&(r=Object.create(e.__transition__[u]),r.delay+=r.duration,io(e,s,i,r)),n.push(e)}return eo(o,i)},Bo.svg.axis=function(){function n(n){n.each(function(){var n,s=Bo.select(this),l=this.__chart__||e,f=this.__chart__=e.copy(),h=null==c?f.ticks?f.ticks.apply(f,a):f.domain():c,g=null==t?f.tickFormat?f.tickFormat.apply(f,a):dt:t,p=s.selectAll(".tick").data(h,f),v=p.enter().insert("g",".domain").attr("class","tick").style("opacity",Na),d=Bo.transition(p.exit()).style("opacity",Na).remove(),m=Bo.transition(p).style("opacity",1),y=ei(f),x=s.selectAll(".domain").data([0]),M=(x.enter().append("path").attr("class","domain"),Bo.transition(x));v.append("line"),v.append("text");var _=v.select("line"),b=m.select("line"),w=p.select("text").text(g),S=v.select("text"),k=m.select("text");switch(r){case"bottom":n=oo,_.attr("y2",u),S.attr("y",Math.max(u,0)+o),b.attr("x2",0).attr("y2",u),k.attr("x",0).attr("y",Math.max(u,0)+o),w.attr("dy",".71em").style("text-anchor","middle"),M.attr("d","M"+y[0]+","+i+"V0H"+y[1]+"V"+i);break;case"top":n=oo,_.attr("y2",-u),S.attr("y",-(Math.max(u,0)+o)),b.attr("x2",0).attr("y2",-u),k.attr("x",0).attr("y",-(Math.max(u,0)+o)),w.attr("dy","0em").style("text-anchor","middle"),M.attr("d","M"+y[0]+","+-i+"V0H"+y[1]+"V"+-i);break;case"left":n=ao,_.attr("x2",-u),S.attr("x",-(Math.max(u,0)+o)),b.attr("x2",-u).attr("y2",0),k.attr("x",-(Math.max(u,0)+o)).attr("y",0),w.attr("dy",".32em").style("text-anchor","end"),M.attr("d","M"+-i+","+y[0]+"H0V"+y[1]+"H"+-i);break;case"right":n=ao,_.attr("x2",u),S.attr("x",Math.max(u,0)+o),b.attr("x2",u).attr("y2",0),k.attr("x",Math.max(u,0)+o).attr("y",0),w.attr("dy",".32em").style("text-anchor","start"),M.attr("d","M"+i+","+y[0]+"H0V"+y[1]+"H"+i)}if(f.rangeBand){var E=f,A=E.rangeBand()/2;l=f=function(n){return E(n)+A}}else l.rangeBand?l=f:d.call(n,f);v.call(n,l),m.call(n,f)})}var t,e=Bo.scale.linear(),r=Ts,u=6,i=6,o=3,a=[10],c=null;return n.scale=function(t){return arguments.length?(e=t,n):e},n.orient=function(t){return arguments.length?(r=t in qs?t+"":Ts,n):r},n.ticks=function(){return arguments.length?(a=arguments,n):a},n.tickValues=function(t){return arguments.length?(c=t,n):c},n.tickFormat=function(e){return arguments.length?(t=e,n):t},n.tickSize=function(t){var e=arguments.length;return e?(u=+t,i=+arguments[e-1],n):u},n.innerTickSize=function(t){return arguments.length?(u=+t,n):u},n.outerTickSize=function(t){return arguments.length?(i=+t,n):i},n.tickPadding=function(t){return arguments.length?(o=+t,n):o},n.tickSubdivide=function(){return arguments.length&&n},n};var Ts="bottom",qs={top:1,right:1,bottom:1,left:1};Bo.svg.brush=function(){function n(i){i.each(function(){var i=Bo.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",u).on("touchstart.brush",u),o=i.selectAll(".background").data([0]);o.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),i.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var a=i.selectAll(".resize").data(d,dt);a.exit().remove(),a.enter().append("g").attr("class",function(n){return"resize "+n}).style("cursor",function(n){return zs[n]}).append("rect").attr("x",function(n){return/[ew]$/.test(n)?-3:null}).attr("y",function(n){return/^[ns]/.test(n)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),a.style("display",n.empty()?"none":null);var l,f=Bo.transition(i),h=Bo.transition(o);c&&(l=ei(c),h.attr("x",l[0]).attr("width",l[1]-l[0]),e(f)),s&&(l=ei(s),h.attr("y",l[0]).attr("height",l[1]-l[0]),r(f)),t(f)})}function t(n){n.selectAll(".resize").attr("transform",function(n){return"translate("+l[+/e$/.test(n)]+","+h[+/^s/.test(n)]+")"})}function e(n){n.select(".extent").attr("x",l[0]),n.selectAll(".extent,.n>rect,.s>rect").attr("width",l[1]-l[0])}function r(n){n.select(".extent").attr("y",h[0]),n.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function u(){function u(){32==Bo.event.keyCode&&(C||(x=null,L[0]-=l[1],L[1]-=h[1],C=2),f())}function g(){32==Bo.event.keyCode&&2==C&&(L[0]+=l[1],L[1]+=h[1],C=0,f())}function d(){var n=Bo.mouse(_),u=!1;M&&(n[0]+=M[0],n[1]+=M[1]),C||(Bo.event.altKey?(x||(x=[(l[0]+l[1])/2,(h[0]+h[1])/2]),L[0]=l[+(n[0]<x[0])],L[1]=h[+(n[1]<x[1])]):x=null),E&&m(n,c,0)&&(e(S),u=!0),A&&m(n,s,1)&&(r(S),u=!0),u&&(t(S),w({type:"brush",mode:C?"move":"resize"}))}function m(n,t,e){var r,u,a=ei(t),c=a[0],s=a[1],f=L[e],g=e?h:l,d=g[1]-g[0];return C&&(c-=f,s-=d+f),r=(e?v:p)?Math.max(c,Math.min(s,n[e])):n[e],C?u=(r+=f)+d:(x&&(f=Math.max(c,Math.min(s,2*x[e]-r))),r>f?(u=r,r=f):u=f),g[0]!=r||g[1]!=u?(e?o=null:i=null,g[0]=r,g[1]=u,!0):void 0}function y(){d(),S.style("pointer-events","all").selectAll(".resize").style("display",n.empty()?"none":null),Bo.select("body").style("cursor",null),T.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),N(),w({type:"brushend"})}var x,M,_=this,b=Bo.select(Bo.event.target),w=a.of(_,arguments),S=Bo.select(_),k=b.datum(),E=!/^(n|s)$/.test(k)&&c,A=!/^(e|w)$/.test(k)&&s,C=b.classed("extent"),N=P(),L=Bo.mouse(_),T=Bo.select(Qo).on("keydown.brush",u).on("keyup.brush",g);if(Bo.event.changedTouches?T.on("touchmove.brush",d).on("touchend.brush",y):T.on("mousemove.brush",d).on("mouseup.brush",y),S.interrupt().selectAll("*").interrupt(),C)L[0]=l[0]-L[0],L[1]=h[0]-L[1];else if(k){var q=+/w$/.test(k),z=+/^n/.test(k);M=[l[1-q]-L[0],h[1-z]-L[1]],L[0]=l[q],L[1]=h[z]}else Bo.event.altKey&&(x=L.slice());S.style("pointer-events","none").selectAll(".resize").style("display",null),Bo.select("body").style("cursor",b.style("cursor")),w({type:"brushstart"}),d()}var i,o,a=g(n,"brushstart","brush","brushend"),c=null,s=null,l=[0,0],h=[0,0],p=!0,v=!0,d=Rs[0];return n.event=function(n){n.each(function(){var n=a.of(this,arguments),t={x:l,y:h,i:i,j:o},e=this.__chart__||t;this.__chart__=t,ks?Bo.select(this).transition().each("start.brush",function(){i=e.i,o=e.j,l=e.x,h=e.y,n({type:"brushstart"})}).tween("brush:brush",function(){var e=Rr(l,t.x),r=Rr(h,t.y);return i=o=null,function(u){l=t.x=e(u),h=t.y=r(u),n({type:"brush",mode:"resize"})}}).each("end.brush",function(){i=t.i,o=t.j,n({type:"brush",mode:"resize"}),n({type:"brushend"})}):(n({type:"brushstart"}),n({type:"brush",mode:"resize"}),n({type:"brushend"}))})},n.x=function(t){return arguments.length?(c=t,d=Rs[!c<<1|!s],n):c},n.y=function(t){return arguments.length?(s=t,d=Rs[!c<<1|!s],n):s},n.clamp=function(t){return arguments.length?(c&&s?(p=!!t[0],v=!!t[1]):c?p=!!t:s&&(v=!!t),n):c&&s?[p,v]:c?p:s?v:null},n.extent=function(t){var e,r,u,a,f;return arguments.length?(c&&(e=t[0],r=t[1],s&&(e=e[0],r=r[0]),i=[e,r],c.invert&&(e=c(e),r=c(r)),e>r&&(f=e,e=r,r=f),(e!=l[0]||r!=l[1])&&(l=[e,r])),s&&(u=t[0],a=t[1],c&&(u=u[1],a=a[1]),o=[u,a],s.invert&&(u=s(u),a=s(a)),u>a&&(f=u,u=a,a=f),(u!=h[0]||a!=h[1])&&(h=[u,a])),n):(c&&(i?(e=i[0],r=i[1]):(e=l[0],r=l[1],c.invert&&(e=c.invert(e),r=c.invert(r)),e>r&&(f=e,e=r,r=f))),s&&(o?(u=o[0],a=o[1]):(u=h[0],a=h[1],s.invert&&(u=s.invert(u),a=s.invert(a)),u>a&&(f=u,u=a,a=f))),c&&s?[[e,u],[r,a]]:c?[e,r]:s&&[u,a])},n.clear=function(){return n.empty()||(l=[0,0],h=[0,0],i=o=null),n},n.empty=function(){return!!c&&l[0]==l[1]||!!s&&h[0]==h[1]},Bo.rebind(n,a,"on")};var zs={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Rs=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Ds=Bo.time={},Ps=Date,Us=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];co.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){js.setUTCDate.apply(this._,arguments)},setDay:function(){js.setUTCDay.apply(this._,arguments)},setFullYear:function(){js.setUTCFullYear.apply(this._,arguments)},setHours:function(){js.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){js.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){js.setUTCMinutes.apply(this._,arguments)},setMonth:function(){js.setUTCMonth.apply(this._,arguments)},setSeconds:function(){js.setUTCSeconds.apply(this._,arguments)},setTime:function(){js.setTime.apply(this._,arguments)}};var js=Date.prototype,Hs="%a %b %e %X %Y",Fs="%m/%d/%Y",Os="%H:%M:%S",Ys=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],Is=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],Zs=["January","February","March","April","May","June","July","August","September","October","November","December"],Vs=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];Ds.year=so(function(n){return n=Ds.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),Ds.years=Ds.year.range,Ds.years.utc=Ds.year.utc.range,Ds.day=so(function(n){var t=new Ps(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),Ds.days=Ds.day.range,Ds.days.utc=Ds.day.utc.range,Ds.dayOfYear=function(n){var t=Ds.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},Us.forEach(function(n,t){n=n.toLowerCase(),t=7-t;var e=Ds[n]=so(function(n){return(n=Ds.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=Ds.year(n).getDay();return Math.floor((Ds.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});Ds[n+"s"]=e.range,Ds[n+"s"].utc=e.utc.range,Ds[n+"OfYear"]=function(n){var e=Ds.year(n).getDay();return Math.floor((Ds.dayOfYear(n)+(e+t)%7)/7)}}),Ds.week=Ds.sunday,Ds.weeks=Ds.sunday.range,Ds.weeks.utc=Ds.sunday.utc.range,Ds.weekOfYear=Ds.sundayOfYear,Ds.format=fo;var Xs=go(Ys),$s=po(Ys),Bs=go(Is),Ws=po(Is),Js=go(Zs),Gs=po(Zs),Ks=go(Vs),Qs=po(Vs),nl=/^%/,tl={"-":"",_:" ",0:"0"},el={a:function(n){return Is[n.getDay()]},A:function(n){return Ys[n.getDay()]},b:function(n){return Vs[n.getMonth()]},B:function(n){return Zs[n.getMonth()]},c:fo(Hs),d:function(n,t){return vo(n.getDate(),t,2)},e:function(n,t){return vo(n.getDate(),t,2)},H:function(n,t){return vo(n.getHours(),t,2)},I:function(n,t){return vo(n.getHours()%12||12,t,2)},j:function(n,t){return vo(1+Ds.dayOfYear(n),t,3)},L:function(n,t){return vo(n.getMilliseconds(),t,3)},m:function(n,t){return vo(n.getMonth()+1,t,2)},M:function(n,t){return vo(n.getMinutes(),t,2)},p:function(n){return n.getHours()>=12?"PM":"AM"},S:function(n,t){return vo(n.getSeconds(),t,2)},U:function(n,t){return vo(Ds.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return vo(Ds.mondayOfYear(n),t,2)},x:fo(Fs),X:fo(Os),y:function(n,t){return vo(n.getFullYear()%100,t,2)},Y:function(n,t){return vo(n.getFullYear()%1e4,t,4)},Z:Ho,"%":function(){return"%"}},rl={a:mo,A:yo,b:bo,B:wo,c:So,d:qo,e:qo,H:Ro,I:Ro,j:zo,L:Uo,m:To,M:Do,p:jo,S:Po,U:Mo,w:xo,W:_o,x:ko,X:Eo,y:Co,Y:Ao,Z:No,"%":Fo},ul=/^\s*\d+/,il=Bo.map({am:0,pm:1});fo.utc=Oo;var ol=Oo("%Y-%m-%dT%H:%M:%S.%LZ");fo.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?Yo:ol,Yo.parse=function(n){var t=new Date(n);return isNaN(t)?null:t},Yo.toString=ol.toString,Ds.second=so(function(n){return new Ps(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),Ds.seconds=Ds.second.range,Ds.seconds.utc=Ds.second.utc.range,Ds.minute=so(function(n){return new Ps(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),Ds.minutes=Ds.minute.range,Ds.minutes.utc=Ds.minute.utc.range,Ds.hour=so(function(n){var t=n.getTimezoneOffset()/60;return new Ps(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),Ds.hours=Ds.hour.range,Ds.hours.utc=Ds.hour.utc.range,Ds.month=so(function(n){return n=Ds.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),Ds.months=Ds.month.range,Ds.months.utc=Ds.month.utc.range;var al=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],cl=[[Ds.second,1],[Ds.second,5],[Ds.second,15],[Ds.second,30],[Ds.minute,1],[Ds.minute,5],[Ds.minute,15],[Ds.minute,30],[Ds.hour,1],[Ds.hour,3],[Ds.hour,6],[Ds.hour,12],[Ds.day,1],[Ds.day,2],[Ds.week,1],[Ds.month,1],[Ds.month,3],[Ds.year,1]],sl=[[fo("%Y"),Vt],[fo("%B"),function(n){return n.getMonth()}],[fo("%b %d"),function(n){return 1!=n.getDate()}],[fo("%a %d"),function(n){return n.getDay()&&1!=n.getDate()}],[fo("%I %p"),function(n){return n.getHours()}],[fo("%I:%M"),function(n){return n.getMinutes()}],[fo(":%S"),function(n){return n.getSeconds()}],[fo(".%L"),function(n){return n.getMilliseconds()}]],ll=Vo(sl);cl.year=Ds.year,Ds.scale=function(){return Io(Bo.scale.linear(),cl,ll)};var fl={range:function(n,t,e){return Bo.range(+n,+t,e).map(Zo)},floor:dt,ceil:dt},hl=cl.map(function(n){return[n[0].utc,n[1]]}),gl=[[Oo("%Y"),Vt],[Oo("%B"),function(n){return n.getUTCMonth()}],[Oo("%b %d"),function(n){return 1!=n.getUTCDate()}],[Oo("%a %d"),function(n){return n.getUTCDay()&&1!=n.getUTCDate()}],[Oo("%I %p"),function(n){return n.getUTCHours()}],[Oo("%I:%M"),function(n){return n.getUTCMinutes()}],[Oo(":%S"),function(n){return n.getUTCSeconds()}],[Oo(".%L"),function(n){return n.getUTCMilliseconds()}]],pl=Vo(gl);return hl.year=Ds.year.utc,Ds.scale.utc=function(){return Io(Bo.scale.linear(),hl,pl)},Bo.text=mt(function(n){return n.responseText}),Bo.json=function(n,t){return yt(n,"application/json",Xo,t)},Bo.html=function(n,t){return yt(n,"text/html",$o,t)},Bo.xml=mt(function(n){return n.responseXML}),Bo}();
//Define the global Chart Variable as a class.
var Chart = function(context){

	var chart = this;
	
	
	//Easing functions adapted from Robert Penner's easing equations
	//http://www.robertpenner.com/easing/
	
	var animationOptions = {
		linear : function (t){
			return t;
		},
		easeInQuad: function (t) {
			return t*t;
		},
		easeOutQuad: function (t) {
			return -1 *t*(t-2);
		},
		easeInOutQuad: function (t) {
			if ((t/=1/2) < 1) return 1/2*t*t;
			return -1/2 * ((--t)*(t-2) - 1);
		},
		easeInCubic: function (t) {
			return t*t*t;
		},
		easeOutCubic: function (t) {
			return 1*((t=t/1-1)*t*t + 1);
		},
		easeInOutCubic: function (t) {
			if ((t/=1/2) < 1) return 1/2*t*t*t;
			return 1/2*((t-=2)*t*t + 2);
		},
		easeInQuart: function (t) {
			return t*t*t*t;
		},
		easeOutQuart: function (t) {
			return -1 * ((t=t/1-1)*t*t*t - 1);
		},
		easeInOutQuart: function (t) {
			if ((t/=1/2) < 1) return 1/2*t*t*t*t;
			return -1/2 * ((t-=2)*t*t*t - 2);
		},
		easeInQuint: function (t) {
			return 1*(t/=1)*t*t*t*t;
		},
		easeOutQuint: function (t) {
			return 1*((t=t/1-1)*t*t*t*t + 1);
		},
		easeInOutQuint: function (t) {
			if ((t/=1/2) < 1) return 1/2*t*t*t*t*t;
			return 1/2*((t-=2)*t*t*t*t + 2);
		},
		easeInSine: function (t) {
			return -1 * Math.cos(t/1 * (Math.PI/2)) + 1;
		},
		easeOutSine: function (t) {
			return 1 * Math.sin(t/1 * (Math.PI/2));
		},
		easeInOutSine: function (t) {
			return -1/2 * (Math.cos(Math.PI*t/1) - 1);
		},
		easeInExpo: function (t) {
			return (t==0) ? 1 : 1 * Math.pow(2, 10 * (t/1 - 1));
		},
		easeOutExpo: function (t) {
			return (t==1) ? 1 : 1 * (-Math.pow(2, -10 * t/1) + 1);
		},
		easeInOutExpo: function (t) {
			if (t==0) return 0;
			if (t==1) return 1;
			if ((t/=1/2) < 1) return 1/2 * Math.pow(2, 10 * (t - 1));
			return 1/2 * (-Math.pow(2, -10 * --t) + 2);
			},
		easeInCirc: function (t) {
			if (t>=1) return t;
			return -1 * (Math.sqrt(1 - (t/=1)*t) - 1);
		},
		easeOutCirc: function (t) {
			return 1 * Math.sqrt(1 - (t=t/1-1)*t);
		},
		easeInOutCirc: function (t) {
			if ((t/=1/2) < 1) return -1/2 * (Math.sqrt(1 - t*t) - 1);
			return 1/2 * (Math.sqrt(1 - (t-=2)*t) + 1);
		},
		easeInElastic: function (t) {
			var s=1.70158;var p=0;var a=1;
			if (t==0) return 0;  if ((t/=1)==1) return 1;  if (!p) p=1*.3;
			if (a < Math.abs(1)) { a=1; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (1/a);
			return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p ));
		},
		easeOutElastic: function (t) {
			var s=1.70158;var p=0;var a=1;
			if (t==0) return 0;  if ((t/=1)==1) return 1;  if (!p) p=1*.3;
			if (a < Math.abs(1)) { a=1; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (1/a);
			return a*Math.pow(2,-10*t) * Math.sin( (t*1-s)*(2*Math.PI)/p ) + 1;
		},
		easeInOutElastic: function (t) {
			var s=1.70158;var p=0;var a=1;
			if (t==0) return 0;  if ((t/=1/2)==2) return 1;  if (!p) p=1*(.3*1.5);
			if (a < Math.abs(1)) { a=1; var s=p/4; }
			else var s = p/(2*Math.PI) * Math.asin (1/a);
			if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p ));
			return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p )*.5 + 1;
		},
		easeInBack: function (t) {
			var s = 1.70158;
			return 1*(t/=1)*t*((s+1)*t - s);
		},
		easeOutBack: function (t) {
			var s = 1.70158;
			return 1*((t=t/1-1)*t*((s+1)*t + s) + 1);
		},
		easeInOutBack: function (t) {
			var s = 1.70158; 
			if ((t/=1/2) < 1) return 1/2*(t*t*(((s*=(1.525))+1)*t - s));
			return 1/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2);
		},
		easeInBounce: function (t) {
			return 1 - animationOptions.easeOutBounce (1-t);
		},
		easeOutBounce: function (t) {
			if ((t/=1) < (1/2.75)) {
				return 1*(7.5625*t*t);
			} else if (t < (2/2.75)) {
				return 1*(7.5625*(t-=(1.5/2.75))*t + .75);
			} else if (t < (2.5/2.75)) {
				return 1*(7.5625*(t-=(2.25/2.75))*t + .9375);
			} else {
				return 1*(7.5625*(t-=(2.625/2.75))*t + .984375);
			}
		},
		easeInOutBounce: function (t) {
			if (t < 1/2) return animationOptions.easeInBounce (t*2) * .5;
			return animationOptions.easeOutBounce (t*2-1) * .5 + 1*.5;
		}
	};

	//Variables global to the chart
	var width = context.canvas.width;
	var height = context.canvas.height;


	//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.
	if (window.devicePixelRatio) {
		context.canvas.style.width = width + "px";
		context.canvas.style.height = height + "px";
		context.canvas.height = height * window.devicePixelRatio;
		context.canvas.width = width * window.devicePixelRatio;
		context.scale(window.devicePixelRatio, window.devicePixelRatio);
	}

	this.PolarArea = function(data,options){
	
		chart.PolarArea.defaults = {
			scaleOverlay : true,
			scaleOverride : false,
			scaleSteps : null,
			scaleStepWidth : null,
			scaleStartValue : null,
			scaleShowLine : true,
			scaleLineColor : "rgba(0,0,0,.1)",
			scaleLineWidth : 1,
			scaleShowLabels : true,
			scaleLabel : "<%=value%>",
			scaleFontFamily : "'Arial'",
			scaleFontSize : 12,
			scaleFontStyle : "normal",
			scaleFontColor : "#666",
			scaleShowLabelBackdrop : true,
			scaleBackdropColor : "rgba(255,255,255,0.75)",
			scaleBackdropPaddingY : 2,
			scaleBackdropPaddingX : 2,
			segmentShowStroke : true,
			segmentStrokeColor : "#fff",
			segmentStrokeWidth : 2,
			animation : true,
			animationSteps : 100,
			animationEasing : "easeOutBounce",
			animateRotate : true,
			animateScale : false,
			onAnimationComplete : null
		};
		
		var config = (options)? mergeChartConfig(chart.PolarArea.defaults,options) : chart.PolarArea.defaults;
		
		return new PolarArea(data,config,context);
	};

	this.Radar = function(data,options){
	
		chart.Radar.defaults = {
			scaleOverlay : false,
			scaleOverride : false,
			scaleSteps : null,
			scaleStepWidth : null,
			scaleStartValue : null,
			scaleShowLine : true,
			scaleLineColor : "rgba(0,0,0,.1)",
			scaleLineWidth : 1,
			scaleShowLabels : false,
			scaleLabel : "<%=value%>",
			scaleFontFamily : "'Arial'",
			scaleFontSize : 12,
			scaleFontStyle : "normal",
			scaleFontColor : "#666",
			scaleShowLabelBackdrop : true,
			scaleBackdropColor : "rgba(255,255,255,0.75)",
			scaleBackdropPaddingY : 2,
			scaleBackdropPaddingX : 2,
			angleShowLineOut : true,
			angleLineColor : "rgba(0,0,0,.1)",
			angleLineWidth : 1,			
			pointLabelFontFamily : "'Arial'",
			pointLabelFontStyle : "normal",
			pointLabelFontSize : 12,
			pointLabelFontColor : "#666",
			pointDot : true,
			pointDotRadius : 3,
			pointDotStrokeWidth : 1,
			datasetStroke : true,
			datasetStrokeWidth : 2,
			datasetFill : true,
			animation : true,
			animationSteps : 60,
			animationEasing : "easeOutQuart",
			onAnimationComplete : null
		};
		
		var config = (options)? mergeChartConfig(chart.Radar.defaults,options) : chart.Radar.defaults;

		return new Radar(data,config,context);
	};
	
	this.Pie = function(data,options){
		chart.Pie.defaults = {
			segmentShowStroke : true,
			segmentStrokeColor : "#fff",
			segmentStrokeWidth : 2,
			animation : true,
			animationSteps : 100,
			animationEasing : "easeOutBounce",
			animateRotate : true,
			animateScale : false,
			onAnimationComplete : null
		};		

		var config = (options)? mergeChartConfig(chart.Pie.defaults,options) : chart.Pie.defaults;
		
		return new Pie(data,config,context);				
	};
	
	this.Doughnut = function(data,options){
	
		chart.Doughnut.defaults = {
			segmentShowStroke : true,
			segmentStrokeColor : "#fff",
			segmentStrokeWidth : 2,
			percentageInnerCutout : 50,
			animation : true,
			animationSteps : 100,
			animationEasing : "easeOutBounce",
			animateRotate : true,
			animateScale : false,
			onAnimationComplete : null
		};		

		var config = (options)? mergeChartConfig(chart.Doughnut.defaults,options) : chart.Doughnut.defaults;
		
		return new Doughnut(data,config,context);			
		
	};

	this.Line = function(data,options){
	
		chart.Line.defaults = {
			scaleOverlay : false,
			scaleOverride : false,
			scaleSteps : null,
			scaleStepWidth : null,
			scaleStartValue : null,
			scaleLineColor : "rgba(0,0,0,.1)",
			scaleLineWidth : 1,
			scaleShowLabels : true,
			scaleLabel : "<%=value%>",
			scaleFontFamily : "'Arial'",
			scaleFontSize : 12,
			scaleFontStyle : "normal",
			scaleFontColor : "#666",
			scaleShowGridLines : true,
			scaleGridLineColor : "rgba(0,0,0,.05)",
			scaleGridLineWidth : 1,
			bezierCurve : true,
			pointDot : true,
			pointDotRadius : 4,
			pointDotStrokeWidth : 2,
			datasetStroke : true,
			datasetStrokeWidth : 2,
			datasetFill : true,
			animation : true,
			animationSteps : 60,
			animationEasing : "easeOutQuart",
			onAnimationComplete : null
		};		
		var config = (options) ? mergeChartConfig(chart.Line.defaults,options) : chart.Line.defaults;
		
		return new Line(data,config,context);
	}
	
	this.Bar = function(data,options){
		chart.Bar.defaults = {
			scaleOverlay : false,
			scaleOverride : false,
			scaleSteps : null,
			scaleStepWidth : null,
			scaleStartValue : null,
			scaleLineColor : "rgba(0,0,0,.1)",
			scaleLineWidth : 1,
			scaleShowLabels : true,
			scaleLabel : "<%=value%>",
			scaleFontFamily : "'Arial'",
			scaleFontSize : 12,
			scaleFontStyle : "normal",
			scaleFontColor : "#666",
			scaleShowGridLines : true,
			scaleGridLineColor : "rgba(0,0,0,.05)",
			scaleGridLineWidth : 1,
			barShowStroke : true,
			barStrokeWidth : 2,
			barValueSpacing : 5,
			barDatasetSpacing : 1,
			animation : true,
			animationSteps : 60,
			animationEasing : "easeOutQuart",
			onAnimationComplete : null
		};		
		var config = (options) ? mergeChartConfig(chart.Bar.defaults,options) : chart.Bar.defaults;
		
		return new Bar(data,config,context);		
	}
	
	var clear = function(c){
		c.clearRect(0, 0, width, height);
	};

	var PolarArea = function(data,config,ctx){
		var maxSize, scaleHop, calculatedScale, labelHeight, scaleHeight, valueBounds, labelTemplateString;		
		
		
		calculateDrawingSizes();
		
		valueBounds = getValueBounds();

		labelTemplateString = (config.scaleShowLabels)? config.scaleLabel : null;

		//Check and set the scale
		if (!config.scaleOverride){
			
			calculatedScale = calculateScale(scaleHeight,valueBounds.maxSteps,valueBounds.minSteps,valueBounds.maxValue,valueBounds.minValue,labelTemplateString);
		}
		else {
			calculatedScale = {
				steps : config.scaleSteps,
				stepValue : config.scaleStepWidth,
				graphMin : config.scaleStartValue,
				labels : []
			}
			for (var i=0; i<calculatedScale.steps; i++){
				if(labelTemplateString){
				calculatedScale.labels.push(tmpl(labelTemplateString,{value:(config.scaleStartValue + (config.scaleStepWidth * i)).toFixed(getDecimalPlaces (config.scaleStepWidth))}));
				}
			}
		}
		
		scaleHop = maxSize/(calculatedScale.steps);

		//Wrap in an animation loop wrapper
		animationLoop(config,drawScale,drawAllSegments,ctx);

		function calculateDrawingSizes(){
			maxSize = (Min([width,height])/2);
			//Remove whatever is larger - the font size or line width.
			
			maxSize -= Max([config.scaleFontSize*0.5,config.scaleLineWidth*0.5]);
			
			labelHeight = config.scaleFontSize*2;
			//If we're drawing the backdrop - add the Y padding to the label height and remove from drawing region.
			if (config.scaleShowLabelBackdrop){
				labelHeight += (2 * config.scaleBackdropPaddingY);
				maxSize -= config.scaleBackdropPaddingY*1.5;
			}
			
			scaleHeight = maxSize;
			//If the label height is less than 5, set it to 5 so we don't have lines on top of each other.
			labelHeight = Default(labelHeight,5);
		}
		function drawScale(){
			for (var i=0; i<calculatedScale.steps; i++){
				//If the line object is there
				if (config.scaleShowLine){
					ctx.beginPath();
					ctx.arc(width/2, height/2, scaleHop * (i + 1), 0, (Math.PI * 2), true);
					ctx.strokeStyle = config.scaleLineColor;
					ctx.lineWidth = config.scaleLineWidth;
					ctx.stroke();
				}

				if (config.scaleShowLabels){
					ctx.textAlign = "center";
					ctx.font = config.scaleFontStyle + " " + config.scaleFontSize + "px " + config.scaleFontFamily;
 					var label =  calculatedScale.labels[i];
					//If the backdrop object is within the font object
					if (config.scaleShowLabelBackdrop){
						var textWidth = ctx.measureText(label).width;
						ctx.fillStyle = config.scaleBackdropColor;
						ctx.beginPath();
						ctx.rect(
							Math.round(width/2 - textWidth/2 - config.scaleBackdropPaddingX),     //X
							Math.round(height/2 - (scaleHop * (i + 1)) - config.scaleFontSize*0.5 - config.scaleBackdropPaddingY),//Y
							Math.round(textWidth + (config.scaleBackdropPaddingX*2)), //Width
							Math.round(config.scaleFontSize + (config.scaleBackdropPaddingY*2)) //Height
						);
						ctx.fill();
					}
					ctx.textBaseline = "middle";
					ctx.fillStyle = config.scaleFontColor;
					ctx.fillText(label,width/2,height/2 - (scaleHop * (i + 1)));
				}
			}
		}
		function drawAllSegments(animationDecimal){
			var startAngle = -Math.PI/2,
			angleStep = (Math.PI*2)/data.length,
			scaleAnimation = 1,
			rotateAnimation = 1;
			if (config.animation) {
				if (config.animateScale) {
					scaleAnimation = animationDecimal;
				}
				if (config.animateRotate){
					rotateAnimation = animationDecimal;
				}
			}

			for (var i=0; i<data.length; i++){

				ctx.beginPath();
				ctx.arc(width/2,height/2,scaleAnimation * calculateOffset(data[i].value,calculatedScale,scaleHop),startAngle, startAngle + rotateAnimation*angleStep, false);
				ctx.lineTo(width/2,height/2);
				ctx.closePath();
				ctx.fillStyle = data[i].color;
				ctx.fill();

				if(config.segmentShowStroke){
					ctx.strokeStyle = config.segmentStrokeColor;
					ctx.lineWidth = config.segmentStrokeWidth;
					ctx.stroke();
				}
				startAngle += rotateAnimation*angleStep;
			}
		}
		function getValueBounds() {
			var upperValue = Number.MIN_VALUE;
			var lowerValue = Number.MAX_VALUE;
			for (var i=0; i<data.length; i++){
				if (data[i].value > upperValue) {upperValue = data[i].value;}
				if (data[i].value < lowerValue) {lowerValue = data[i].value;}
			};

			var maxSteps = Math.floor((scaleHeight / (labelHeight*0.66)));
			var minSteps = Math.floor((scaleHeight / labelHeight*0.5));
			
			return {
				maxValue : upperValue,
				minValue : lowerValue,
				maxSteps : maxSteps,
				minSteps : minSteps
			};
			

		}
	}

	var Radar = function (data,config,ctx) {
		var maxSize, scaleHop, calculatedScale, labelHeight, scaleHeight, valueBounds, labelTemplateString;	
			
		//If no labels are defined set to an empty array, so referencing length for looping doesn't blow up.
		if (!data.labels) data.labels = [];
		
		calculateDrawingSizes();

		var valueBounds = getValueBounds();

		labelTemplateString = (config.scaleShowLabels)? config.scaleLabel : null;

		//Check and set the scale
		if (!config.scaleOverride){
			
			calculatedScale = calculateScale(scaleHeight,valueBounds.maxSteps,valueBounds.minSteps,valueBounds.maxValue,valueBounds.minValue,labelTemplateString);
		}
		else {
			calculatedScale = {
				steps : config.scaleSteps,
				stepValue : config.scaleStepWidth,
				graphMin : config.scaleStartValue,
				labels : config.labels
			}
			for (var i=0; i<calculatedScale.steps; i++){
				if(labelTemplateString){
				calculatedScale.labels.push(tmpl(labelTemplateString,{value:(config.scaleStartValue + (config.scaleStepWidth * i)).toFixed(getDecimalPlaces (config.scaleStepWidth))}));
				}
			}
		}
		
		scaleHop = maxSize/(calculatedScale.steps);
		
		animationLoop(config,drawScale,drawAllDataPoints,ctx);
		
		//Radar specific functions.
		function drawAllDataPoints(animationDecimal){
			var rotationDegree = (2*Math.PI)/data.datasets[0].data.length;

			ctx.save();
			//translate to the centre of the canvas.
			ctx.translate(width/2,height/2);
			ctx.rotate(rotationDegree);				
			//We accept multiple data sets for radar charts, so show loop through each set
			for (var i=0; i<data.datasets.length; i++){
				ctx.beginPath();

				ctx.moveTo(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[0],calculatedScale,scaleHop)));
				for (var j=1; j<data.datasets[i].data.length; j++){
					ctx.rotate(rotationDegree);	
					ctx.lineTo(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[j],calculatedScale,scaleHop)));
			
				}
				ctx.closePath();
				
				
				ctx.fillStyle = data.datasets[i].fillColor;
				ctx.strokeStyle = data.datasets[i].strokeColor;
				ctx.lineWidth = config.datasetStrokeWidth;
				ctx.fill();
				ctx.stroke();
				
								
				if (config.pointDot){
					ctx.fillStyle = data.datasets[i].pointColor;
					ctx.strokeStyle = data.datasets[i].pointStrokeColor;
					ctx.lineWidth = config.pointDotStrokeWidth;
					for (var k=0; k<data.datasets[i].data.length; k++){
						ctx.rotate(rotationDegree);
						ctx.beginPath();
						ctx.arc(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[k],calculatedScale,scaleHop)),config.pointDotRadius,2*Math.PI,false);
						ctx.fill();
						ctx.stroke();
					}					
					
				}
				
			}
			ctx.restore();
			
			
		}
		function drawScale(){
			var rotationDegree = (2*Math.PI)/data.datasets[0].data.length;
			ctx.save();
		    ctx.translate(width / 2, height / 2);	
			
			if (config.angleShowLineOut){
				ctx.strokeStyle = config.angleLineColor;		    	    
				ctx.lineWidth = config.angleLineWidth;
				for (var h=0; h<data.datasets[0].data.length; h++){
					
				    ctx.rotate(rotationDegree);
					ctx.beginPath();
					ctx.moveTo(0,0);
					ctx.lineTo(0,-maxSize);
					ctx.stroke();
				}
			}

			for (var i=0; i<calculatedScale.steps; i++){
				ctx.beginPath();
				
				if(config.scaleShowLine){
					ctx.strokeStyle = config.scaleLineColor;
					ctx.lineWidth = config.scaleLineWidth;
					ctx.moveTo(0,-scaleHop * (i+1));					
					for (var j=0; j<data.datasets[0].data.length; j++){
					    ctx.rotate(rotationDegree);
						ctx.lineTo(0,-scaleHop * (i+1));
					}
					ctx.closePath();
					ctx.stroke();			
							
				}
				
				if (config.scaleShowLabels){				
					ctx.textAlign = 'center';
					ctx.font = config.scaleFontStyle + " " + config.scaleFontSize+"px " + config.scaleFontFamily; 
					ctx.textBaseline = "middle";
					
					if (config.scaleShowLabelBackdrop){
						var textWidth = ctx.measureText(calculatedScale.labels[i]).width;
						ctx.fillStyle = config.scaleBackdropColor;
						ctx.beginPath();
						ctx.rect(
							Math.round(- textWidth/2 - config.scaleBackdropPaddingX),     //X
							Math.round((-scaleHop * (i + 1)) - config.scaleFontSize*0.5 - config.scaleBackdropPaddingY),//Y
							Math.round(textWidth + (config.scaleBackdropPaddingX*2)), //Width
							Math.round(config.scaleFontSize + (config.scaleBackdropPaddingY*2)) //Height
						);
						ctx.fill();
					}						
					ctx.fillStyle = config.scaleFontColor;
					ctx.fillText(calculatedScale.labels[i],0,-scaleHop*(i+1));
				}

			}
			for (var k=0; k<data.labels.length; k++){				
			ctx.font = config.pointLabelFontStyle + " " + config.pointLabelFontSize+"px " + config.pointLabelFontFamily;
			ctx.fillStyle = config.pointLabelFontColor;
				var opposite = Math.sin(rotationDegree*k) * (maxSize + config.pointLabelFontSize);
				var adjacent = Math.cos(rotationDegree*k) * (maxSize + config.pointLabelFontSize);
				
				if(rotationDegree*k == Math.PI || rotationDegree*k == 0){
					ctx.textAlign = "center";
				}
				else if(rotationDegree*k > Math.PI){
					ctx.textAlign = "right";
				}
				else{
					ctx.textAlign = "left";
				}
				
				ctx.textBaseline = "middle";
				
				ctx.fillText(data.labels[k],opposite,-adjacent);
				
			}
			ctx.restore();
		};
		function calculateDrawingSizes(){
			maxSize = (Min([width,height])/2);

			labelHeight = config.scaleFontSize*2;
			
			var labelLength = 0;
			for (var i=0; i<data.labels.length; i++){
				ctx.font = config.pointLabelFontStyle + " " + config.pointLabelFontSize+"px " + config.pointLabelFontFamily;
				var textMeasurement = ctx.measureText(data.labels[i]).width;
				if(textMeasurement>labelLength) labelLength = textMeasurement;
			}
			
			//Figure out whats the largest - the height of the text or the width of what's there, and minus it from the maximum usable size.
			maxSize -= Max([labelLength,((config.pointLabelFontSize/2)*1.5)]);				
			
			maxSize -= config.pointLabelFontSize;
			maxSize = CapValue(maxSize, null, 0);
			scaleHeight = maxSize;
			//If the label height is less than 5, set it to 5 so we don't have lines on top of each other.
			labelHeight = Default(labelHeight,5);
		};
		function getValueBounds() {
			var upperValue = Number.MIN_VALUE;
			var lowerValue = Number.MAX_VALUE;
			
			for (var i=0; i<data.datasets.length; i++){
				for (var j=0; j<data.datasets[i].data.length; j++){
					if (data.datasets[i].data[j] > upperValue){upperValue = data.datasets[i].data[j]}
					if (data.datasets[i].data[j] < lowerValue){lowerValue = data.datasets[i].data[j]}
				}
			}

			var maxSteps = Math.floor((scaleHeight / (labelHeight*0.66)));
			var minSteps = Math.floor((scaleHeight / labelHeight*0.5));
			
			return {
				maxValue : upperValue,
				minValue : lowerValue,
				maxSteps : maxSteps,
				minSteps : minSteps
			};
			

		}
	}

	var Pie = function(data,config,ctx){
		var segmentTotal = 0;
		
		//In case we have a canvas that is not a square. Minus 5 pixels as padding round the edge.
		var pieRadius = Min([height/2,width/2]) - 5;
		
		for (var i=0; i<data.length; i++){
			segmentTotal += data[i].value;
		}
		
		
		animationLoop(config,null,drawPieSegments,ctx);
				
		function drawPieSegments (animationDecimal){
			var cumulativeAngle = -Math.PI/2,
			scaleAnimation = 1,
			rotateAnimation = 1;
			if (config.animation) {
				if (config.animateScale) {
					scaleAnimation = animationDecimal;
				}
				if (config.animateRotate){
					rotateAnimation = animationDecimal;
				}
			}
			for (var i=0; i<data.length; i++){
				var segmentAngle = rotateAnimation * ((data[i].value/segmentTotal) * (Math.PI*2));
				ctx.beginPath();
				ctx.arc(width/2,height/2,scaleAnimation * pieRadius,cumulativeAngle,cumulativeAngle + segmentAngle);
				ctx.lineTo(width/2,height/2);
				ctx.closePath();
				ctx.fillStyle = data[i].color;
				ctx.fill();
				
				if(config.segmentShowStroke){
					ctx.lineWidth = config.segmentStrokeWidth;
					ctx.strokeStyle = config.segmentStrokeColor;
					ctx.stroke();
				}
				cumulativeAngle += segmentAngle;
			}			
		}		
	}

	var Doughnut = function(data,config,ctx){
		var segmentTotal = 0;
		
		//In case we have a canvas that is not a square. Minus 5 pixels as padding round the edge.
		var doughnutRadius = Min([height/2,width/2]) - 5;
		
		var cutoutRadius = doughnutRadius * (config.percentageInnerCutout/100);
		
		for (var i=0; i<data.length; i++){
			segmentTotal += data[i].value;
		}
		
		
		animationLoop(config,null,drawPieSegments,ctx);
		
		
		function drawPieSegments (animationDecimal){
			var cumulativeAngle = -Math.PI/2,
			scaleAnimation = 1,
			rotateAnimation = 1;
			if (config.animation) {
				if (config.animateScale) {
					scaleAnimation = animationDecimal;
				}
				if (config.animateRotate){
					rotateAnimation = animationDecimal;
				}
			}
			for (var i=0; i<data.length; i++){
				var segmentAngle = rotateAnimation * ((data[i].value/segmentTotal) * (Math.PI*2));
				ctx.beginPath();
				ctx.arc(width/2,height/2,scaleAnimation * doughnutRadius,cumulativeAngle,cumulativeAngle + segmentAngle,false);
				ctx.arc(width/2,height/2,scaleAnimation * cutoutRadius,cumulativeAngle + segmentAngle,cumulativeAngle,true);
				ctx.closePath();
				ctx.fillStyle = data[i].color;
				ctx.fill();
				
				if(config.segmentShowStroke){
					ctx.lineWidth = config.segmentStrokeWidth;
					ctx.strokeStyle = config.segmentStrokeColor;
					ctx.stroke();
				}
				cumulativeAngle += segmentAngle;
			}			
		}			
		
		
		
	}

	var Line = function(data,config,ctx){
		var maxSize, scaleHop, calculatedScale, labelHeight, scaleHeight, valueBounds, labelTemplateString, valueHop,widestXLabel, xAxisLength,yAxisPosX,xAxisPosY, rotateLabels = 0;
			
		calculateDrawingSizes();
		
		valueBounds = getValueBounds();
		//Check and set the scale
		labelTemplateString = (config.scaleShowLabels)? config.scaleLabel : "";
		if (!config.scaleOverride){
			
			calculatedScale = calculateScale(scaleHeight,valueBounds.maxSteps,valueBounds.minSteps,valueBounds.maxValue,valueBounds.minValue,labelTemplateString);
		}
		else {
			calculatedScale = {
				steps : config.scaleSteps,
				stepValue : config.scaleStepWidth,
				graphMin : config.scaleStartValue,
				labels : []
			}
			for (var i=0; i<calculatedScale.steps; i++){
				if(labelTemplateString){
				calculatedScale.labels.push(tmpl(labelTemplateString,{value:(config.scaleStartValue + (config.scaleStepWidth * i)).toFixed(getDecimalPlaces (config.scaleStepWidth))}));
				}
			}
		}
		
		scaleHop = Math.floor(scaleHeight/calculatedScale.steps);
		calculateXAxisSize();
		animationLoop(config,drawScale,drawLines,ctx);		
		
		function drawLines(animPc){
			for (var i=0; i<data.datasets.length; i++){
				ctx.strokeStyle = data.datasets[i].strokeColor;
				ctx.lineWidth = config.datasetStrokeWidth;
				ctx.beginPath();
				ctx.moveTo(yAxisPosX, xAxisPosY - animPc*(calculateOffset(data.datasets[i].data[0],calculatedScale,scaleHop)))

				for (var j=1; j<data.datasets[i].data.length; j++){
					if (config.bezierCurve){
						ctx.bezierCurveTo(xPos(j-0.5),yPos(i,j-1),xPos(j-0.5),yPos(i,j),xPos(j),yPos(i,j));
					}
					else{
						ctx.lineTo(xPos(j),yPos(i,j));
					}
				}
				ctx.stroke();
				if (config.datasetFill){
					ctx.lineTo(yAxisPosX + (valueHop*(data.datasets[i].data.length-1)),xAxisPosY);
					ctx.lineTo(yAxisPosX,xAxisPosY);
					ctx.closePath();
					ctx.fillStyle = data.datasets[i].fillColor;
					ctx.fill();
				}
				else{
					ctx.closePath();
				}
				if(config.pointDot){
					ctx.fillStyle = data.datasets[i].pointColor;
					ctx.strokeStyle = data.datasets[i].pointStrokeColor;
					ctx.lineWidth = config.pointDotStrokeWidth;
					for (var k=0; k<data.datasets[i].data.length; k++){
						ctx.beginPath();
						ctx.arc(yAxisPosX + (valueHop *k),xAxisPosY - animPc*(calculateOffset(data.datasets[i].data[k],calculatedScale,scaleHop)),config.pointDotRadius,0,Math.PI*2,true);
						ctx.fill();
						ctx.stroke();
					}
				}
			}
			
			function yPos(dataSet,iteration){
				return xAxisPosY - animPc*(calculateOffset(data.datasets[dataSet].data[iteration],calculatedScale,scaleHop));			
			}
			function xPos(iteration){
				return yAxisPosX + (valueHop * iteration);
			}
		}
		function drawScale(){
			//X axis line
			ctx.lineWidth = config.scaleLineWidth;
			ctx.strokeStyle = config.scaleLineColor;
			ctx.beginPath();
			ctx.moveTo(width-widestXLabel/2+5,xAxisPosY);
			ctx.lineTo(width-(widestXLabel/2)-xAxisLength-5,xAxisPosY);
			ctx.stroke();
			
			
			if (rotateLabels > 0){
				ctx.save();
				ctx.textAlign = "right";
			}
			else{
				ctx.textAlign = "center";
			}
			ctx.fillStyle = config.scaleFontColor;
			for (var i=0; i<data.labels.length; i++){
				ctx.save();
				if (rotateLabels > 0){
					ctx.translate(yAxisPosX + i*valueHop,xAxisPosY + config.scaleFontSize);
					ctx.rotate(-(rotateLabels * (Math.PI/180)));
					ctx.fillText(data.labels[i], 0,0);
					ctx.restore();
				}
				
				else{
					ctx.fillText(data.labels[i], yAxisPosX + i*valueHop,xAxisPosY + config.scaleFontSize+3);					
				}

				ctx.beginPath();
				ctx.moveTo(yAxisPosX + i * valueHop, xAxisPosY+3);
				
				//Check i isnt 0, so we dont go over the Y axis twice.
				if(config.scaleShowGridLines && i>0){
					ctx.lineWidth = config.scaleGridLineWidth;
					ctx.strokeStyle = config.scaleGridLineColor;					
					ctx.lineTo(yAxisPosX + i * valueHop, 5);
				}
				else{
					ctx.lineTo(yAxisPosX + i * valueHop, xAxisPosY+3);				
				}
				ctx.stroke();
			}
			
			//Y axis
			ctx.lineWidth = config.scaleLineWidth;
			ctx.strokeStyle = config.scaleLineColor;
			ctx.beginPath();
			ctx.moveTo(yAxisPosX,xAxisPosY+5);
			ctx.lineTo(yAxisPosX,5);
			ctx.stroke();
			
			ctx.textAlign = "right";
			ctx.textBaseline = "middle";
			for (var j=0; j<calculatedScale.steps; j++){
				ctx.beginPath();
				ctx.moveTo(yAxisPosX-3,xAxisPosY - ((j+1) * scaleHop));
				if (config.scaleShowGridLines){
					ctx.lineWidth = config.scaleGridLineWidth;
					ctx.strokeStyle = config.scaleGridLineColor;
					ctx.lineTo(yAxisPosX + xAxisLength + 5,xAxisPosY - ((j+1) * scaleHop));					
				}
				else{
					ctx.lineTo(yAxisPosX-0.5,xAxisPosY - ((j+1) * scaleHop));
				}
				
				ctx.stroke();
				
				if (config.scaleShowLabels){
					ctx.fillText(calculatedScale.labels[j],yAxisPosX-8,xAxisPosY - ((j+1) * scaleHop));
				}
			}
			
			
		}
		function calculateXAxisSize(){
			var longestText = 1;
			//if we are showing the labels
			if (config.scaleShowLabels){
				ctx.font = config.scaleFontStyle + " " + config.scaleFontSize+"px " + config.scaleFontFamily;
				for (var i=0; i<calculatedScale.labels.length; i++){
					var measuredText = ctx.measureText(calculatedScale.labels[i]).width;
					longestText = (measuredText > longestText)? measuredText : longestText;
				}
				//Add a little extra padding from the y axis
				longestText +=10;
			}
			xAxisLength = width - longestText - widestXLabel;
			valueHop = Math.floor(xAxisLength/(data.labels.length-1));	
				
			yAxisPosX = width-widestXLabel/2-xAxisLength;
			xAxisPosY = scaleHeight + config.scaleFontSize/2;				
		}		
		function calculateDrawingSizes(){
			maxSize = height;

			//Need to check the X axis first - measure the length of each text metric, and figure out if we need to rotate by 45 degrees.
			ctx.font = config.scaleFontStyle + " " + config.scaleFontSize+"px " + config.scaleFontFamily;
			widestXLabel = 1;
			for (var i=0; i<data.labels.length; i++){
				var textLength = ctx.measureText(data.labels[i]).width;
				//If the text length is longer - make that equal to longest text!
				widestXLabel = (textLength > widestXLabel)? textLength : widestXLabel;
			}
			if (width/data.labels.length < widestXLabel){
				rotateLabels = 45;
				if (width/data.labels.length < Math.cos(rotateLabels) * widestXLabel){
					rotateLabels = 90;
					maxSize -= widestXLabel; 
				}
				else{
					maxSize -= Math.sin(rotateLabels) * widestXLabel;
				}
			}
			else{
				maxSize -= config.scaleFontSize;
			}
			
			//Add a little padding between the x line and the text
			maxSize -= 5;
			
			
			labelHeight = config.scaleFontSize;
			
			maxSize -= labelHeight;
			//Set 5 pixels greater than the font size to allow for a little padding from the X axis.
			
			scaleHeight = maxSize;
			
			//Then get the area above we can safely draw on.
			
		}		
		function getValueBounds() {
			var upperValue = Number.MIN_VALUE;
			var lowerValue = Number.MAX_VALUE;
			for (var i=0; i<data.datasets.length; i++){
				for (var j=0; j<data.datasets[i].data.length; j++){
					if ( data.datasets[i].data[j] > upperValue) { upperValue = data.datasets[i].data[j] };
					if ( data.datasets[i].data[j] < lowerValue) { lowerValue = data.datasets[i].data[j] };
				}
			};
	
			var maxSteps = Math.floor((scaleHeight / (labelHeight*0.66)));
			var minSteps = Math.floor((scaleHeight / labelHeight*0.5));
			
			return {
				maxValue : upperValue,
				minValue : lowerValue,
				maxSteps : maxSteps,
				minSteps : minSteps
			};
			
	
		}

		
	}
	
	var Bar = function(data,config,ctx){
		var maxSize, scaleHop, calculatedScale, labelHeight, scaleHeight, valueBounds, labelTemplateString, valueHop,widestXLabel, xAxisLength,yAxisPosX,xAxisPosY,barWidth, rotateLabels = 0;
			
		calculateDrawingSizes();
		
		valueBounds = getValueBounds();
		//Check and set the scale
		labelTemplateString = (config.scaleShowLabels)? config.scaleLabel : "";
		if (!config.scaleOverride){
			
			calculatedScale = calculateScale(scaleHeight,valueBounds.maxSteps,valueBounds.minSteps,valueBounds.maxValue,valueBounds.minValue,labelTemplateString);
		}
		else {
			calculatedScale = {
				steps : config.scaleSteps,
				stepValue : config.scaleStepWidth,
				graphMin : config.scaleStartValue,
				labels : []
			}
			for (var i=0; i<calculatedScale.steps; i++){
				if(labelTemplateString){
				calculatedScale.labels.push(tmpl(labelTemplateString,{value:(config.scaleStartValue + (config.scaleStepWidth * i)).toFixed(getDecimalPlaces (config.scaleStepWidth))}));
				}
			}
		}
		
		scaleHop = Math.floor(scaleHeight/calculatedScale.steps);
		calculateXAxisSize();
		animationLoop(config,drawScale,drawBars,ctx);		
		
		function drawBars(animPc){
			ctx.lineWidth = config.barStrokeWidth;
			for (var i=0; i<data.datasets.length; i++){
					ctx.fillStyle = data.datasets[i].fillColor;
					ctx.strokeStyle = data.datasets[i].strokeColor;
				for (var j=0; j<data.datasets[i].data.length; j++){
					var barOffset = yAxisPosX + config.barValueSpacing + valueHop*j + barWidth*i + config.barDatasetSpacing*i + config.barStrokeWidth*i;
					
					ctx.beginPath();
					ctx.moveTo(barOffset, xAxisPosY);
					ctx.lineTo(barOffset, xAxisPosY - animPc*calculateOffset(data.datasets[i].data[j],calculatedScale,scaleHop)+(config.barStrokeWidth/2));
					ctx.lineTo(barOffset + barWidth, xAxisPosY - animPc*calculateOffset(data.datasets[i].data[j],calculatedScale,scaleHop)+(config.barStrokeWidth/2));
					ctx.lineTo(barOffset + barWidth, xAxisPosY);
					if(config.barShowStroke){
						ctx.stroke();
					}
					ctx.closePath();
					ctx.fill();
				}
			}
			
		}
		function drawScale(){
			//X axis line
			ctx.lineWidth = config.scaleLineWidth;
			ctx.strokeStyle = config.scaleLineColor;
			ctx.beginPath();
			ctx.moveTo(width-widestXLabel/2+5,xAxisPosY);
			ctx.lineTo(width-(widestXLabel/2)-xAxisLength-5,xAxisPosY);
			ctx.stroke();
			
			
			if (rotateLabels > 0){
				ctx.save();
				ctx.textAlign = "right";
			}
			else{
				ctx.textAlign = "center";
			}
			ctx.fillStyle = config.scaleFontColor;
			for (var i=0; i<data.labels.length; i++){
				ctx.save();
				if (rotateLabels > 0){
					ctx.translate(yAxisPosX + i*valueHop,xAxisPosY + config.scaleFontSize);
					ctx.rotate(-(rotateLabels * (Math.PI/180)));
					ctx.fillText(data.labels[i], 0,0);
					ctx.restore();
				}
				
				else{
					ctx.fillText(data.labels[i], yAxisPosX + i*valueHop + valueHop/2,xAxisPosY + config.scaleFontSize+3);					
				}

				ctx.beginPath();
				ctx.moveTo(yAxisPosX + (i+1) * valueHop, xAxisPosY+3);
				
				//Check i isnt 0, so we dont go over the Y axis twice.
					ctx.lineWidth = config.scaleGridLineWidth;
					ctx.strokeStyle = config.scaleGridLineColor;					
					ctx.lineTo(yAxisPosX + (i+1) * valueHop, 5);
				ctx.stroke();
			}
			
			//Y axis
			ctx.lineWidth = config.scaleLineWidth;
			ctx.strokeStyle = config.scaleLineColor;
			ctx.beginPath();
			ctx.moveTo(yAxisPosX,xAxisPosY+5);
			ctx.lineTo(yAxisPosX,5);
			ctx.stroke();
			
			ctx.textAlign = "right";
			ctx.textBaseline = "middle";
			for (var j=0; j<calculatedScale.steps; j++){
				ctx.beginPath();
				ctx.moveTo(yAxisPosX-3,xAxisPosY - ((j+1) * scaleHop));
				if (config.scaleShowGridLines){
					ctx.lineWidth = config.scaleGridLineWidth;
					ctx.strokeStyle = config.scaleGridLineColor;
					ctx.lineTo(yAxisPosX + xAxisLength + 5,xAxisPosY - ((j+1) * scaleHop));					
				}
				else{
					ctx.lineTo(yAxisPosX-0.5,xAxisPosY - ((j+1) * scaleHop));
				}
				
				ctx.stroke();
				if (config.scaleShowLabels){
					ctx.fillText(calculatedScale.labels[j],yAxisPosX-8,xAxisPosY - ((j+1) * scaleHop));
				}
			}
			
			
		}
		function calculateXAxisSize(){
			var longestText = 1;
			//if we are showing the labels
			if (config.scaleShowLabels){
				ctx.font = config.scaleFontStyle + " " + config.scaleFontSize+"px " + config.scaleFontFamily;
				for (var i=0; i<calculatedScale.labels.length; i++){
					var measuredText = ctx.measureText(calculatedScale.labels[i]).width;
					longestText = (measuredText > longestText)? measuredText : longestText;
				}
				//Add a little extra padding from the y axis
				longestText +=10;
			}
			xAxisLength = width - longestText - widestXLabel;
			valueHop = Math.floor(xAxisLength/(data.labels.length));	
			
			barWidth = (valueHop - config.scaleGridLineWidth*2 - (config.barValueSpacing*2) - (config.barDatasetSpacing*data.datasets.length-1) - ((config.barStrokeWidth/2)*data.datasets.length-1))/data.datasets.length;
			
			yAxisPosX = width-widestXLabel/2-xAxisLength;
			xAxisPosY = scaleHeight + config.scaleFontSize/2;				
		}		
		function calculateDrawingSizes(){
			maxSize = height;

			//Need to check the X axis first - measure the length of each text metric, and figure out if we need to rotate by 45 degrees.
			ctx.font = config.scaleFontStyle + " " + config.scaleFontSize+"px " + config.scaleFontFamily;
			widestXLabel = 1;
			for (var i=0; i<data.labels.length; i++){
				var textLength = ctx.measureText(data.labels[i]).width;
				//If the text length is longer - make that equal to longest text!
				widestXLabel = (textLength > widestXLabel)? textLength : widestXLabel;
			}
			if (width/data.labels.length < widestXLabel){
				rotateLabels = 45;
				if (width/data.labels.length < Math.cos(rotateLabels) * widestXLabel){
					rotateLabels = 90;
					maxSize -= widestXLabel; 
				}
				else{
					maxSize -= Math.sin(rotateLabels) * widestXLabel;
				}
			}
			else{
				maxSize -= config.scaleFontSize;
			}
			
			//Add a little padding between the x line and the text
			maxSize -= 5;
			
			
			labelHeight = config.scaleFontSize;
			
			maxSize -= labelHeight;
			//Set 5 pixels greater than the font size to allow for a little padding from the X axis.
			
			scaleHeight = maxSize;
			
			//Then get the area above we can safely draw on.
			
		}		
		function getValueBounds() {
			var upperValue = Number.MIN_VALUE;
			var lowerValue = Number.MAX_VALUE;
			for (var i=0; i<data.datasets.length; i++){
				for (var j=0; j<data.datasets[i].data.length; j++){
					if ( data.datasets[i].data[j] > upperValue) { upperValue = data.datasets[i].data[j] };
					if ( data.datasets[i].data[j] < lowerValue) { lowerValue = data.datasets[i].data[j] };
				}
			};
	
			var maxSteps = Math.floor((scaleHeight / (labelHeight*0.66)));
			var minSteps = Math.floor((scaleHeight / labelHeight*0.5));
			
			return {
				maxValue : upperValue,
				minValue : lowerValue,
				maxSteps : maxSteps,
				minSteps : minSteps
			};
			
	
		}
	}
	
	function calculateOffset(val,calculatedScale,scaleHop){
		var outerValue = calculatedScale.steps * calculatedScale.stepValue;
		var adjustedValue = val - calculatedScale.graphMin;
		var scalingFactor = CapValue(adjustedValue/outerValue,1,0);
		return (scaleHop*calculatedScale.steps) * scalingFactor;
	}
	
	function animationLoop(config,drawScale,drawData,ctx){
		var animFrameAmount = (config.animation)? 1/CapValue(config.animationSteps,Number.MAX_VALUE,1) : 1,
			easingFunction = animationOptions[config.animationEasing],
			percentAnimComplete =(config.animation)? 0 : 1;
		
	
		
		if (typeof drawScale !== "function") drawScale = function(){};
		
		requestAnimFrame(animLoop);
		
		function animateFrame(){
			var easeAdjustedAnimationPercent =(config.animation)? CapValue(easingFunction(percentAnimComplete),null,0) : 1;
			clear(ctx);
			if(config.scaleOverlay){
				drawData(easeAdjustedAnimationPercent);
				drawScale();
			} else {
				drawScale();
				drawData(easeAdjustedAnimationPercent);
			}				
		}
		function animLoop(){
			//We need to check if the animation is incomplete (less than 1), or complete (1).
				percentAnimComplete += animFrameAmount;
				animateFrame();	
				//Stop the loop continuing forever
				if (percentAnimComplete <= 1){
					requestAnimFrame(animLoop);
				}
				else{
					if (typeof config.onAnimationComplete == "function") config.onAnimationComplete();
				}
			
		}		
		
	}

	//Declare global functions to be called within this namespace here.
	
	
	// shim layer with setTimeout fallback
	var requestAnimFrame = (function(){
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) {
				window.setTimeout(callback, 1000 / 60);
			};
	})();

	function calculateScale(drawingHeight,maxSteps,minSteps,maxValue,minValue,labelTemplateString){
			var graphMin,graphMax,graphRange,stepValue,numberOfSteps,valueRange,rangeOrderOfMagnitude,decimalNum;
			
			valueRange = maxValue - minValue;
			
			rangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange);

        	graphMin = Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);
            
            graphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);
            
            graphRange = graphMax - graphMin;
            
            stepValue = Math.pow(10, rangeOrderOfMagnitude);
            
	        numberOfSteps = Math.round(graphRange / stepValue);
	        
	        //Compare number of steps to the max and min for that size graph, and add in half steps if need be.	        
	        while(numberOfSteps < minSteps || numberOfSteps > maxSteps) {
	        	if (numberOfSteps < minSteps){
			        stepValue /= 2;
			        numberOfSteps = Math.round(graphRange/stepValue);
		        }
		        else{
			        stepValue *=2;
			        numberOfSteps = Math.round(graphRange/stepValue);
		        }
	        };
	        

	        
	        //Create an array of all the labels by interpolating the string.
	        
	        var labels = [];
	        
	        if(labelTemplateString){
		        //Fix floating point errors by setting to fixed the on the same decimal as the stepValue.
		        for (var i=1; i<numberOfSteps+1; i++){
		        	labels.push(tmpl(labelTemplateString,{value:(graphMin + (stepValue*i)).toFixed(getDecimalPlaces (stepValue))}));
		        }
	        }
		
	        return {
		        steps : numberOfSteps,
				stepValue : stepValue,
				graphMin : graphMin,
				labels : labels		        
		        
	        }
		
			function calculateOrderOfMagnitude(val){
			  return Math.floor(Math.log(val) / Math.LN10);
			}		


	}
	
	//Max value from array
	function Max( array ){
		return Math.max.apply( Math, array );
	};
	//Min value from array
	function Min( array ){
		return Math.min.apply( Math, array );
	};
	//Default if undefined
	function Default(userDeclared,valueIfFalse){
		if(!userDeclared){
			return valueIfFalse;
		} else {
			return userDeclared;
		}
	};
	//Is a number function
	function isNumber(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	}
	//Apply cap a value at a high or low number
	function CapValue(valueToCap, maxValue, minValue){
		if(isNumber(maxValue)) {
			if( valueToCap > maxValue ) {
				return maxValue;
			}
		}
		if(isNumber(minValue)){
			if ( valueToCap < minValue ){
				return minValue;
			}
		}
		return valueToCap;
	}
	function getDecimalPlaces (num){
		var numberOfDecimalPlaces;
		if (num%1!=0){
			return num.toString().split(".")[1].length
		}
		else{
			return 0;
		}
		
	} 
	
	function mergeChartConfig(defaults,userDefined){
		var returnObj = {};
	    for (var attrname in defaults) { returnObj[attrname] = defaults[attrname]; }
	    for (var attrname in userDefined) { returnObj[attrname] = userDefined[attrname]; }
	    return returnObj;
	}
	
	//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/
	  var cache = {};
	 
	  function tmpl(str, data){
	    // Figure out if we're getting a template, or if we need to
	    // load the template - and be sure to cache the result.
	    var fn = !/\W/.test(str) ?
	      cache[str] = cache[str] ||
	        tmpl(document.getElementById(str).innerHTML) :
	     
	      // Generate a reusable function that will serve as a template
	      // generator (and which will be cached).
	      new Function("obj",
	        "var p=[],print=function(){p.push.apply(p,arguments);};" +
	       
	        // Introduce the data as local variables using with(){}
	        "with(obj){p.push('" +
	       
	        // Convert the template into pure JavaScript
	        str
	          .replace(/[\r\t\n]/g, " ")
	          .split("<%").join("\t")
	          .replace(/((^|%>)[^\t]*)'/g, "$1\r")
	          .replace(/\t=(.*?)%>/g, "',$1,'")
	          .split("\t").join("');")
	          .split("%>").join("p.push('")
	          .split("\r").join("\\'")
	      + "');}return p.join('');");
	   
	    // Provide some basic currying to the user
	    return data ? fn( data ) : fn;
	  };
}



;
gps = gps || {};
gps.charts = gps.charts || {};
gps.charts.spiderChart = {
  draw: function(id, d, m, options) {
    var cfg = {
      radius: 3.5, //radio of each bullets.
      w: 600,
      h: 600,
      factor: 1,
      factorLegend: 0.95,
      levels: 5,
      clockWise: true,
      defaultMaxValue: 1, // max value of axis, put 0 if it's dynamic
      maxValue: 0,
      radians: 2 * Math.PI, //angle of all the graph
      opacityArea: 0.5,
      opacityMarker: 0.5,
      ToRight: -25, //legend
      ToBottom: -5,
      TranslateX: 75,
      TranslateY: 35,
      ExtraWidthX: 150,
      ExtraWidthY: 100,
      color: d3.scale.category10(),
      enableMarker: options.enableMarker,
      textAxesCustomSpacing: options.textAxesCustomSpacing
    };

    function toClockWise(data) {
      var firstElem; 
      _.each(data, function(item, index) {
        firstElem = data[index].shift();
        data[index].reverse();
        data[index].unshift(firstElem);
      });
    }

    if (cfg.clockWise) {
      toClockWise(d);
      toClockWise(m);
    }

    if ('undefined' !== typeof options) {
      for (var i in options) {
        if ('undefined' !== typeof options[i]) {
          cfg[i] = options[i];
        }
      }
    }
    cfg.maxValue = cfg.defaultMaxValue ||
      Math.max(cfg.maxValue, d3.max(d, function(i) {
        return d3.max(i.map(function(o) {
          return o.value;
        }));
      }));
    var allAxis = (d[0].map(function(i, j) {
      return i.axis;
    }));
    var total  = allAxis.length;
    var radius = cfg.factor * Math.min(cfg.w / 2, cfg.h / 2);
    var format = d3.format('%');
    d3.select(id).select("svg").remove();

    var g = d3.select(id)
      .append("svg")
        .attr("width", cfg.w + cfg.ExtraWidthX)
        .attr("height", cfg.h + cfg.ExtraWidthY)
        .append("g")
          .attr("transform", "translate(" + cfg.TranslateX + "," + cfg.TranslateY + ")");


    // Filling Maturity Level
    if (cfg.enableMarker) {
      m.forEach(function(y, x) {
        dataValues = [];
        g.selectAll(".nodes")
          .data(y, function(j, i) {
            if (cfg.maxValue !== 0) {
              dataValues.push([
                cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
                cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
              ]);
            } else {
              dataValues.push([0, 0]);
            }
          });
        dataValues.push(dataValues[0]);
        g.selectAll(".area")
          .data([dataValues])
          .enter()
          .append("polygon")
          .attr("class", "radar-chart-serie" + series)
          .style("stroke-width", "2px")
          .style("stroke", y[0].color)
          .attr("points", function(d) {
            var str = "";
            for (var pti = 0; pti < d.length; pti++) {
              str = str + d[pti][0] + "," + d[pti][1] + " ";
            }
            return str;
          })
          .style("fill", y[0].color)
          .style("fill-opacity", cfg.opacityMarker);

        series++;
      });
      series = 0;
    }

    //Circular segments
    var levelFactor,
    calculateX1 = function(d, i) {
      return levelFactor * (1 - cfg.factor * Math.sin(i * cfg.radians / total));
    },
    calculateY1 = function(d, i) {
      return levelFactor * (1 - cfg.factor * Math.cos(i * cfg.radians / total));
    },
    calculateX2 = function(d, i) {
      return levelFactor * (1 - cfg.factor * Math.sin((i + 1) * cfg.radians / total));
    },
    calculateY2 = function(d, i) {
      return levelFactor * (1 - cfg.factor * Math.cos((i + 1) * cfg.radians / total));
    };
    for (var j = 0; j < cfg.levels - 1; j++) {
      levelFactor = cfg.factor * radius * ((j + 2) / cfg.levels);
      g.selectAll(".levels")
        .data(allAxis)
        .enter()
        .append("svg:line")
        .attr("x1", calculateX1)
        .attr("y1", calculateY1)
        .attr("x2", calculateX2)
        .attr("y2", calculateY2)
        .attr("class", "line")
        .style("stroke", "grey")
        .style("stroke-opacity", "0.75")
        .style("stroke-width", "0.3px")
        .attr("transform", "translate(" + (cfg.w / 2 - levelFactor) + ", " + (cfg.h / 2 - levelFactor) + ")");
    }

    //Text indicating at what % each level is
    var calculateX = function(d) {
      return levelFactor * (1 - cfg.factor * Math.sin(0));
    },
    calculateY = function(d) {
      return levelFactor * (1 - cfg.factor * Math.cos(0));
    },
    constructText = function(j) {
      if (cfg.maxValue >= 0.10) {
        return format((j + 1) * cfg.maxValue / cfg.levels);

      } else if (cfg.maxValue < 5 && cfg.maxValue > 0) {
        return (((j + 1) * cfg.maxValue / cfg.levels) * 100).toFixed(2) + '%';

      } else {
        return format((j + 1) * 0.1);
      }
    };
    for (j = 0; j < cfg.levels; j++) {
      levelFactor = cfg.factor * radius * ((j + 1) / cfg.levels);
      g.selectAll(".levels")
        .data([1]) //dummy data
        .enter()
        .append("svg:text")
        .attr("x", calculateX)
        .attr("y", calculateY)
        .attr("class", "legend")
        .style("font-family", "sans-serif")
        .style("font-size", "10px")
        .attr("transform", "translate(" + (cfg.w / 2 - levelFactor + cfg.ToRight) + ", " + (cfg.h / 2 - levelFactor + cfg.ToBottom) + ")")
        .attr("fill", "#737373")
        .text(constructText(j));
    }

    series = 0;

    var axis = g.selectAll(".axis")
      .data(allAxis)
      .enter()
      .append("g")
      .attr("class", "axis");

    axis.append("line")
      .attr("x1", cfg.w / 2)
      .attr("y1", cfg.h / 2)
      .attr("x2", function(d, i) {
        return cfg.w / 2 * (1 - cfg.factor * Math.sin(i * cfg.radians / total));
      })
      .attr("y2", function(d, i) {
        return cfg.h / 2 * (1 - cfg.factor * Math.cos(i * cfg.radians / total));
      })
      .attr("class", "line")
      .style("stroke", "grey")
      .style("stroke-width", "1px");

    var text = axis.append("text")
      .attr("class", "legend")
      .style("font-family", "sans-serif")
      .style("font-size", "11px")
      .attr("text-anchor", "middle")
      .attr("x", function(d, i) {
        return cfg.w / 2 * (1 - cfg.factorLegend * Math.sin(i * cfg.radians / total)) - 60 * Math.sin(i * cfg.radians / total);
      })
      .attr("y", function(d, i) {
        return cfg.h / 2 * (1 - Math.cos(i * cfg.radians / total)) - 20 * Math.cos(i * cfg.radians / total);
      })
      .attr("transform", function(d, i) {
        var x = $(this).attr('x');

        if (Math.abs(cfg.w / 2 - x) < 10) {
          return 'translate(2, -22)';
        } else if (x > cfg.w / 2) {
          return 'translate(20, -19)';
        } else {
          return 'translate(-15, -19)';
        }
      });

    text.append("tspan")
      .text(function(d) {
        var index = d.indexOf(' ');
        return (index > 0 ? d.slice(0, index) : d);
      })
      .attr("dy", "1.5em")
      .attr("x", function(d, i) {
      return cfg.w / 2 * (1 - cfg.factorLegend * Math.sin(i * cfg.radians / total)) - (cfg.textAxesCustomSpacing ? cfg.textAxesCustomSpacing : 60) * Math.sin(i * cfg.radians / total);
      })
      .attr("y", function(d, i) {
        return cfg.h / 2 * (1 - Math.cos(i * cfg.radians / total)) - (cfg.textAxesCustomSpacing ? cfg.textAxesCustomSpacing/3 : 20) * Math.cos(i * cfg.radians / total);
      });

    text.append("tspan")
      .text(function(d) {
        var index = d.indexOf(' ');
        return (index > 0 ? d.slice(index + 1) : '');
      })
      .attr("dy", "2.5em")
      .attr("x", function(d, i) {
        return cfg.w / 2 * (1 - cfg.factorLegend * Math.sin(i * cfg.radians / total)) - 60 * Math.sin(i * cfg.radians / total);
      })
      .attr("y", function(d, i) {
        return cfg.h / 2 * (1 - Math.cos(i * cfg.radians / total)) - 20 * Math.cos(i * cfg.radians / total);
      });

    // Filling Area Assessment
    d.forEach(function(y, x) {
      dataValues = [];
      g.selectAll(".nodes")
        .data(y, function(j, i) {
          if (cfg.maxValue !== 0) {
            dataValues.push([
              cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
              cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
            ]);
          } else {
            dataValues.push([0, 0]);
          }
        });

      var str = "";
      dataValues.push(dataValues[0]);
      g.selectAll(".area")
        .data([dataValues])
        .enter()
        .append("polygon")
          .attr("class", "radar-chart-serie" + series)
          .style("stroke-width", "2px")
          .style("stroke", y[0].color)
          .attr("points", function(d) {
            for (var pti = 0; pti < d.length; pti++) {
              str = str + d[pti][0] + "," + d[pti][1] + " ";
            }
          return str;
          })
          .style("fill", y[0].color)
          .style('fill-opacity', cfg.opacityArea);

      series++;
    });
    series = 0;

    /* We define the variable here to reference it in mouseover and mouseout but
     * we draw the tooltips at last because they have to be on top of all components
     * to show correctly.
     */
    var toolTipconfig;
    // Points in area
    d.forEach(function(y, x) {
      g.selectAll(".nodes")
        .data(y).enter()
        .append("svg:circle")
          .attr("class", "radar-chart-serie" + series)
          .attr('r', cfg.radius)
          .attr('alt', function(j) {
            return Math.max(j.value, 0);
          })
          .attr("cx", function(j, i) {
            if (cfg.maxValue !== 0) {
              dataValues.push([
                cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
                cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
              ]);
            return cfg.w / 2 * (1 - (Math.max(j.value, 0) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total));
          } else {
            dataValues.push([0, 0]);
            return 250;
          }
         })
          .attr("cy", function(j, i) {
            if (cfg.maxValue === 0) {
              return 250;
            }
            return cfg.h / 2 * (1 - (Math.max(j.value, 0) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total));
          })
          .attr('data-id', function(j) {
            return j.axis;
          })
          .style('fill', y[0].color).style('fill-opacity', 0.9)
          .on('mouseover', function(d) {
            var xPositionOfEndPointCircle = parseFloat(d3.select(this).attr('cx'));
            var yPositionOfEndPointCircle = parseFloat(d3.select(this).attr('cy'));
            // We positionate the tooltip a bit to the right and a bit to the top of the endpoint.
            toolTipconfig.x = xPositionOfEndPointCircle + 5;
            toolTipconfig.y = yPositionOfEndPointCircle - 25;
            toolTipconfig.value = format(d.value);

            showTooltip(toolTipconfig);
          })
          .on('mouseout', function(d) {
            hideTooltip(toolTipconfig);
          });


      series++;
    });

    // Here is where we actually create the tooltip component.
    var constructedTooltip = constructTooltip(g);
    toolTipconfig = {
      constructedTooltip: constructedTooltip
    };

  }
};

/**
 * This function construct the tooltip container and the text that will show the information of it.
 * @param {object} svgContainer - The container to append the tooltip.
 * @return {object} it returns the tooltip container, and the text component constructed.
 */
function constructTooltip(svgContainer) {
  // Draws the tooltip cloud container.
  var tooltipContainer = svgContainer.append('path')
    .attr('fill', 'black')
    .style('opacity', 0)
    .style('filter', '');

  // Draws the text that shows the information.
  var tooltip = svgContainer.append('text')
    .attr('fill', 'white')
    .style('opacity', 0)
    .style('font-family', 'sans-serif')
    .style('font-size', '13px');

  // Filter to create the dropshadow effect in the tooltip.
  var dropShadow = svgContainer.append('filter')
    .attr('id', 'dropshadow');

  // The actual blur of the dropshadow.
  var blur = dropShadow.append('feGaussianBlur')
    .attr('in', 'SourceAlpha')
    .attr('stdDeviation', '1');

  // Where would be positioned the shadow and its opacity (the slope attribute)
  var offset = dropShadow.append('feOffset')
    .attr('dx', '1')
    .attr('dy', '1')
    .attr('result', 'offsetblur')
    .attr('slope', '0.5');

  var mergeOffset = dropShadow.append('feMerge');

  // container for the blur effect.
  mergeOffset.append('feMergeNode');
  // container for the element that we are applying the filter.
  mergeOffset.append('feMergeNode')
    .attr('in', 'SourceGraphic');

  return {
    tooltipContainer: tooltipContainer,
    tooltip: tooltip
  };
}

/**
 * This function takes the container and the text and draw them depending on the
 * configurations parameters.
 * @param {object} config - config.x and config.y positions for the tooltip, config.d contains the data to show
 * config.constructedTooltip contains the construction of the tooltip component to use.
 * @return {void}
 */
function showTooltip(config) {
  var x                              = config.x,
    y                                = config.y,
    value                            = config.value,
    tooltipContainer                 = config.constructedTooltip.tooltipContainer,
    tooltip                          = config.constructedTooltip.tooltip,
    pixelsToAddDependingOnCharacters = 0,
    paddingLeft                      = 0,
    paddingRight                     = 0;

  // This is basically to calculate the width of the tooltip container depending on
  // the text length (it adapts).
  if (value.length > 4) {
    pixelsToAddDependingOnCharacters = (value.length - 4) * 5;
  }
  if (pixelsToAddDependingOnCharacters !== 0) {
    paddingLeft = (pixelsToAddDependingOnCharacters + value.length) / 2;
    paddingRight = (pixelsToAddDependingOnCharacters + value.length) / 2;
  }

  tooltipContainer
    .attr('d', function() {
      return 'M' + (+x - 20 - paddingLeft) + ',' + (+y - 15) + ' L' + (+x + 20 + paddingRight) + ',' + (+y - 15) + ' L' + (+x + 20 + paddingRight) + ',' + (+y + 5) + ' L' + (+x - paddingRight) + ',' + (+y + 5) + ' L' + (x - 5 - paddingLeft) + ',' + (+y + 10) + ' L' + (+x - 10 - paddingLeft) + ',' + (+y + 5) + ' L' + (+x - 20 - paddingLeft) + ',' + (+y + 5) + ' Z';
    })
    .transition(200)
      .style('opacity', 1)
      .style('filter', 'url(#dropshadow)');

  tooltip
    .attr('x', x)
    .attr('y', y)
    .attr('class', 'tooltip-text')
    .text(value)
    .transition(200)
      .style('opacity', 1);
}

/**
 * This function hides the showed tooltip.
 * @param {object} config - config.constructedTooltip contains the reference of the tooltip components to hide.
 * @return {void}
 */
function hideTooltip(config) {
  config.constructedTooltip.tooltipContainer
    /* We have to destroy the previous d attribute or it will stay there hidden and
     * block the mouseover event of other components.
     */
    .attr('d', function() {
      return 'M0,0';
    })
    .transition(200)
      .style('opacity', 0)
      .style('filter', 'url(#dropshadow)');

  config.constructedTooltip.tooltip
    // Same as comment above.
    .attr('x', 0)
    .attr('y', 0)
    .transition(200)
      .style('opacity', 0);
}

/** Style example:

 <style>
 body {
      overflow: hidden;
      margin: 0;
      font-size: 14px;
      font-family: "Helvetica Neue", Helvetica;
    }

 #chart {
      position: absolute;
      top: 50px;
      left: 100px;
    }
 </style>

 **/
/** use example:
 var w = 400,
 h = 400;

 var colorscale = d3.scale.category10();

 //Legend titles
 var LegendOptions = ['Smartphone','Tablet'];

 //Data
 var d = [
 [
 {axis:"Email",value:0.59},
 {axis:"Social Networks",value:0.56},
 {axis:"Internet Banking",value:0.42},
 {axis:"News Sportsites",value:0.34},
 {axis:"Search Engine",value:0.48},
 {axis:"View Shopping sites",value:0.14},
 {axis:"Paying Online",value:0.11}
 ],[
 {axis:"Email",value:0.48},
 {axis:"Social Networks",value:0.41},
 {axis:"Internet Banking",value:0.27},
 {axis:"News Sportsites",value:0.28},
 {axis:"Search Engine",value:0.46},
 {axis:"View Shopping sites",value:0.29},
 {axis:"Paying Online",value:1.00}
 ],
 [
 {axis:"Email",value:0.18},
 {axis:"Social Networks",value:0.11},
 {axis:"Internet Banking",value:0.27},
 {axis:"News Sportsites",value:0.18},
 {axis:"Search Engine",value:0.46},
 {axis:"View Shopping sites",value:0.29},
 {axis:"Paying Online",value:1.00}
 ]];
 //Options for the Radar chart, other than default
 var mycfg = {
  w: w,
  h: h,
  maxValue: 0.6,
  levels: 6,
  ExtraWidthX: 300
}

 //Call function to draw the Radar chart
 //Will expect that data is in %'s
 RadarChart.draw("#chart", d, mycfg);*/

gps.charts.barChart = {

  /**
   * Container id and the data.
   * @param id
   * @param data
   */
  draw: function(id, data, options) {

    var cfg = {
      darkerColor: 80, // Darkness of the last color of Gradient
      opacityBarMaturity: 0.7,
      enableLevelMarkers: options.enableMarker,
      rangeX: 20,
      separation: 10
    };

    var format = d3.format('%');

    if (data[0].values.length != 1)
      cfg.separation = 1;

    var axis = [];
    for (var i = 0; i < data.length; i++) {
      for (var j = 0; j < data[i].values.length; j++) {
        if (axis.indexOf(data[i].values[j].axis) == -1) {
          axis.push(data[i].values[j].axis);
        }
      }
    }

    var margin = {
        top: 20,
        right: 16,
        bottom: 30,
        left: 180
      },
      width = 715 - margin.left - margin.right,
      height = 520 - margin.top - margin.bottom;

    var heightVar = 20;
    var x0 = d3.scale.ordinal()
      .rangeBands([0, height + heightVar], 0.1, 1);

    var Y__ = d3.scale.ordinal(); //ordenable..
    

    var x_ = d3.scale.linear() //porcentage values
      .domain([-30, 0, 120])
      .range([-30, 0, width]);

    var color = d3.scale.ordinal()
      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

    var xAxis = d3.svg.axis()
      .scale(x_)
      .orient("bottom")
      .tickValues(d3.range(20, 110, cfg.rangeX))
      .tickFormat(function(d) {
        return d + "%";
      })
      .tickSize(0)
      .tickPadding(17);

    var yAxis = d3.svg.axis()
      .scale(x0)
      .orient("left")
      .tickSize(0)
      .tickPadding(35);

    function make_x_axis() {
      return d3.svg.axis()
        .scale(x_)
        .orient("bottom")
        .ticks(100 / cfg.rangeX);
    }

    var svg = d3.select(id).append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var grid = svg.append("g")
      .attr("class", "grid")
      .attr("transform", "translate(0," + height + ")")
      .call(make_x_axis()
        .tickSize(-height, 0, 0)
        .tickFormat("")
      );

    x0.domain(data.map(function(d) {
      return d.name;
    })); //list of assessments.
    Y__.domain(axis).rangeRoundBands([0, x0.rangeBand()]); //list of disciplines.

    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

    // we set yPosition only to use it later to know where to place the tooltips.
    var state = svg.selectAll(".state")
      .data(data)
      .enter()
      .append("g")
        .attr("class", "g")
        .attr("transform", function(d) {
          return "translate(0," + x0(d.name) + ")";
        })
        .attr("yPosition", function(d) {
          return x0(d.name);
        });

    var rect = state.selectAll("rect");  
    var gradients = {};
    i = 0;

    function makeGradient(color) {
      var url;
      if (gradients[color]) {
        url = gradients[color];
      } else {
        var gradient = svg
          .append("linearGradient")
            .attr("y1", "0%")
            .attr("y2", "50%")
            .attr("x1", "0")
            .attr("x2", "0")
            .attr("id", "gradient" + i)
            .attr('gradientUnits', 'userSpaceOnUse');

        gradient
          .append("stop")
            .attr("offset", "0")
            .attr('stop-color', color);

        gradient
          .append("stop")
            .attr("offset", "0.3")
            .attr('stop-color', gps.util.getDarkColor(color, cfg.darkerColor));

        url = "url(#gradient" + i++ +")";
        gradients[color] = url;
      }
      return url;
    }

    var toolTipconfig;
    // Original Bar Chart
    rect.data(function(d) {
        return d.values;
      })
      .enter().append("rect")
      .attr('height', function() {
        return Y__.rangeBand() - cfg.separation;
      })
      .attr("rx", 0)
      .attr("ry", 0)
      .style("stroke-width", 5)
      .style('fill', function(d) {
        return makeGradient(d.color);
      })
      .attr("x", 0.5)
      .attr("y", function(d) {
        return Y__(d.axis);
      })
      .attr("width", 0)
      .on('mouseover', function(d) {
        var xPositionOfEndPointBar = parseFloat(d3.select(this).attr('width'));
        /* yPosition comes from the g container where bars are, 
         * Y__(d.axis) return the y position where the bar is respecting the container
         * and we substract the height to show it on top of the endpoint of the bar */
        var yPositionOfBar = parseFloat(d3.select(this.parentNode).attr('yPosition')) + Y__(d.axis) - d3.select(this).attr('height');
        toolTipconfig.x = xPositionOfEndPointBar + 5;
        toolTipconfig.y = yPositionOfBar;
        toolTipconfig.value = format(d.value / 100);

        showTooltip(toolTipconfig);
      })
      .on('mouseout', function(d) {
        hideTooltip(toolTipconfig);
      })
      .transition()
        .duration(1000)
        .delay(function(d, i) {
          return i * 385;
        })
        .attr("width", function(d) {
          return x_(d.value);
        })
        .ease("elastic");


    var constructedTooltip = constructTooltip(svg);
    toolTipconfig = {
      constructedTooltip: constructedTooltip
    };

    // Maturity markers components.
    if (cfg.enableLevelMarkers) {
      // We only get the values for the keys that match a maturity marker level name.
      var levels = ["novice", "foundational", "mastery"],
        currentLevels = _.intersection(levels, Object.keys(data[0]));

      // While we iterate each level name we enter() and draw paths depending on 
      // maturity markers data.
      _.each(currentLevels, function(level) {
        rect.data(function(d) {
            // We get the number of bars (assessment to be shown in the graph) to later
            // know the height of the maturity markers components.
            d[level][0].numberOfBars = d[level].length;
            // We only need the first object of the array, the rest is redundant data
            // before it wasn't redundant data, but now that the way of how we paint
            // maturity markers changed is redundant.
            d[level].splice(1, 2);
            return d[level];
          })
          .enter()
          .append('path')
            .attr('d', function(d, i) {
              var x = x_(d.value) - x_(d.range),
                  y = Y__(d.axis);
  
              if (x_(d.range) < 5) {
                // Draw doubled arrow + line component.
                return 'M' + (+x - 5) + ',' + (y) + ' L' + (+x + 6) + ',' + y + ' L' + (+x + 2) + ',' + (+y + 5) + ' L' + (+x + 2) + ',' + (+(Y__.rangeBand() * d.numberOfBars) - 6) + ' L' + (+x + 6) + ',' + (+(Y__.rangeBand() * d.numberOfBars - 1)) + ' L' + (+x - 5) + ',' + (+(Y__.rangeBand() * d.numberOfBars - 1)) + ' L' + x + ', ' + (+(Y__.rangeBand() * d.numberOfBars - 6)) + 'L' + x + ',' + (+y + 5) + ' Z';
              } else if (x_(d.range) >= 5) {
                // Draw rectangle component.
                return 'M' + (x_(d.value)) + ',' + (y) + ' L' + (+(x_(d.range) + x_(d.value))) + ',' + (y) + ' L' + (+(x_(d.range) + x_(d.value))) + ',' + (+(+Y__.rangeBand() * d.numberOfBars) - 1) + ' L' + (x_(d.value)) + ',' + (+(+Y__.rangeBand() * d.numberOfBars) - 1) + ' Z';
              }
              return '';
            })
            .style("fill", function(d) {
              return d.color;
            })
            // We set opacity to 0 to change it with the transition later.
            .style("opacity", function(d, i) {
              return 0;
            })
            // We add this attribute just to be able to use it in the transition as
            // a reference value to know if it is a double arrow component or a rectangle.
            .attr('range', function(d) {
              return d.range;
            })
            .on('mouseover', function(d) {
              var xPositionOfMaturityMarker = parseFloat(x_(d.value));
              var yPoisitionOfMaturityMarker = parseFloat(d3.select(this.parentNode).attr('yPosition'));
              /* We use the half of the range to move the tooltip to the middle of the maturity marker.
               * For y we simply substract the height of a single bar and it will be on top of the maturity marker. */
              toolTipconfig.x = xPositionOfMaturityMarker + x_(d.range) / 2;
              toolTipconfig.y = yPoisitionOfMaturityMarker - (+Y__.rangeBand());
              toolTipconfig.value = format(d.range / 100) + ' - ' + format(d.value / 100);
  
              showTooltip(toolTipconfig);
            })
            .on('mouseout', function(d) {
              hideTooltip(toolTipconfig);
            })
            .transition()
              .duration(1000)
          // Depending on the range value it sets opacity to 1 or cfg.opacityBarMaturity
          // this is because double arrow component use an opacity of 1 and rectangles use 
          // cfg.opacityBarMaturity.
              .styleTween("opacity", function() {
                if (x_(this.getAttribute('range')) < 5) {
                  return d3.interpolate('0', '1');
                } else if (x_(this.getAttribute('range')) >= 5) {
                  return d3.interpolate('0', cfg.opacityBarMaturity);
                }
              });
      });
    }
  }
};



(function donutChart() {
  var config = {};

  function setDefaultConfiguration () {
    config = {
      width: 144,
      height: 94,
      radius: 47,
      innerRadius: 39,
      transitionsDuration: 1000,
      transitionsDelay: 250,
      percentageTextSize: '1.6rem',
      infoTextSize: '0.7rem'
    };
  }

  setDefaultConfiguration();

  var arc;
  var pie;

  /* this function modifies the config object in case new dimensions come in the data
   * parameter otherwise it just set them to defaul dimensions.
   */

  function modifyConfigDependingOnData (data) {
      if(data && data[0].biggerDimension){
      config.width +=  data[0].biggerDimension;
      config.height += data[0].biggerDimension;
      config.radius += data[0].biggerDimension/2;
      config.innerRadius += data[0].biggerDimension/2.2;
      config.percentageTextSize = ''+ (+(+(config.percentageTextSize.substring(0, config.percentageTextSize.indexOf('r')))) + (data[0].biggerDimension / 100)) + 'rem';
      config.infoTextSize = (+(+(config.infoTextSize.substring(0, config.infoTextSize.indexOf('r')))) + (data[0].biggerDimension / 100)) + 'rem';
    } else{
      setDefaultConfiguration();
    }
  }

  // Here we create the big circle (the outer one)
  function createBigCircle(svg) {
    svg
      .append('circle')
        .attr('cx', config.radius)
        .attr('cy', config.radius)
        .attr('r', config.radius)
        .attr('class', 'pie-graph-big-circle');
  }

  // Here we give dimensions to the svg and create a g container
  function createChartContainer(svg, data) {
    return svg
      .data([data])
      .append('g')
        .attr('width', config.width)
        .attr('height', config.height)
        .attr('class', 'pie-graph-axis')
        .attr('transform', 'translate(' + config.radius + ',' + config.radius + ')');
  }

  // We draw the arc in here, give it an smoot transition and the correct color depending on the data.
  function drawChartArcs(visualization, data) {
    // Here we use the helper function of d3 to draw arcs easier
    arc = d3.svg.arc()
      .outerRadius(config.radius + 0.8)
      .innerRadius(config.innerRadius);

    // Another helper function of d3 to bind the data to the arcs
    pie = d3.layout.pie()
      .value(function(d) {
        return d.value;
      });

    var arcs = visualization.selectAll('g')
      .data(pie)
      .enter()
      .append('g');

    arcs.append('path')
      .attr('fill', function(d, i) {
        return data[i].color;
      })
      .each(function(d) {
        d.endAngle = 0;
      })
      .attr('d', arc)
      .transition()
        .duration(config.transitionsDuration)
        .delay(config.transitionsDelay)
        .ease('elastic')
        .call(arcTween, this);
  }

  // This help us achieve the arcs transitions.
  function arcTween(transition) {
    transition.attrTween('d', function(d) {
      var interpolate = d3.interpolate(0, 360 * (d.value / 100) * Math.PI / 180);
      return function(t) {
        d.endAngle = interpolate(t);
        return arc(d);
      };
    });
  }

  // This is the small circle, the one with the text in the middle.
  function createSmallCircle(visualization) {
    visualization
      .append('circle')
        .attr('cx', 0)
        .attr('cy', 0)
        .attr('r', config.innerRadius)
        .attr('class', 'pie-graph-small-circle');
  }

  // This is the percentage text, it appears with the same transition as the path/arcs
  function drawPercentageText(visualization, data) {
    visualization.append('text')
      .data(data)
      .attr('font-family', 'sans-serif')
      .attr('font-size', '0px')
      .attr('fill', 'white')
      .attr('text-anchor', 'middle')
      .text(function(d) {
        return d.value + '%';
      })
      .transition()
        .attr('font-size', config.percentageTextSize)
        .duration(config.transitionsDuration)
        .delay(config.transitionsDelay)
        .ease('elastic');
  }

  // Same as text above but this text is intended for informative text words like "Current"
  function drawInformativeText(visualization, data) {
    visualization.append('text')
      .data(data)
      .attr('font-family', 'sans-serif')
      .attr('font-size', '0px')
      .attr('fill', 'white')
      .attr('text-anchor', 'middle')
      .attr('y', data[0].biggerDimension? 16 + data[0].biggerDimension / 5 : 16)
      .text(function(d) {
        return d.middleText;
      })
      .transition()
        .attr('font-size', config.infoTextSize)
        .duration(config.transitionsDelay)
        .delay(config.transitionsDelay)
        .ease('elastic');

  }

  gps.charts.donutChart = {
    /**
     * A d3 function that draws a donut chart.
     * example of usage: gps.charts.donutChart.draw('.donut-chart-container', [{value: 67, color: '#FDCD00', middleText: 'TARGET'}]);
     * @param {String} container - the container selector where this chart will be appended, in case
     * the selector matches more than 1 element it will draw the chart in each one. Ex: '.pie-chart-container'.
     * @param {Array} data - data param should bring: data.value, indicating the value that the donut chart
     * will have, data.color, indicating the color of the bar indicator of the donut chart, data.middleText
     * indicating the text that will appear in the middle of the donut chart and an optional data.biggerDimension to
     * indicate how bigger the donut chart should be (it has an standard dimension, so if you pass 10 for example
     * it would be 10px bigger than the standard).
     * ex: data = [{value: 25, color: '#FDCD00', middleText: 'TARGET', biggerDimension: 10}]
     * @return {void}.
     */
    draw: function(container, data) {

      var svg = d3.selectAll(container)
        .append('svg')
          .attr('class', 'pie-chart-container');

        modifyConfigDependingOnData(data)
        createBigCircle(svg);
        vis = createChartContainer(svg, data);
        drawChartArcs(vis, data);
        createSmallCircle(vis);
        drawPercentageText(vis, data);
        drawInformativeText(vis, data);
        modifyConfigDependingOnData()

    }
  };
})();

(function lineChart() {
  var config = {
    width: 400,
    height: 130,
    padding: 25,
    radius: 6,
    innerRadius: 4,
    circleWidth: 12,
    circleHeight: 12,
    circleColor: '#32A4E0',
    textHorizontalPosition: 4,
    textVerticalPosition: 12,
    axisStrokeWidth: 1,
    topLineColor: "#FEE580",
    botLineColor: '#DADADA',
    transitionDuration: 1500
  };

  /**
   * Function to divide the data in equals column depending in the incoming lenght of data.
   * @param {object} data - data object to get the length.
   * @return {object} data - data object with the new information for the positions of the column.
   */
  function divideDataPerColumns(data) {
    data = _.filter(data, function(d) {
      return d.value !== -1;
    });

    var index = 0;
    var multiplier = -1;

    return _.map(data, function(d) {
      return {
        value: d.value,
        column: 12.5*(++index + (++multiplier))
      };
    });
    // This implementation is more flexible and dynamic, but we need to adjust
    // the data correctly with the column above of this graph in the trend report.
    /*var numberOfColumns     = data ? data.length : 0,
        spaceBetweenColumns = 100 / numberOfColumns,
        number              = 0;

    data = _.filter(data, function(d) {
      return d.value !== -1;
    });

    return _.map(data, function(d) {
      return {
        value: d.value,
        column: spaceBetweenColumns * (number++)
      };
    });*/
  }

  /**
   * Function that creates the containers for the line chart, the chart has an standard width but
   * it adapts depending on the containers width.
   * @param {String} container - selector of the container where this chart will be appended.
   * @return {void}.
   */
  function createContainers(container) {
    config.width = $(container).width();
    config.height = $(container).height();
    return d3.select(container)
      .append('svg')
        .attr('width', config.width)
        .attr('height', config.height)
        .attr('class', 'line-chart-container')
        .append('g')
          .attr('width', config.width)
          .attr('height', config.height);
  }

  /**
   * Function that creates d3 scales and axes.
   * @param {object} data - data object we calculate the max y axis with this.
   * @return {object} object - it returns o.yScale, o.yAxis, o.xScale, o.xAxis .
   */
  function createScaleAndAxes(data) {
   var max = d3.max(data, function(d) {
       return d.value;
     });

    var yScale = d3.scale.linear()
      .domain([max < 100? 100 : max, 0])
      .range([config.padding, config.height - config.padding]);

    var yAxis = d3.svg.axis()
      .scale(yScale)
      .tickFormat('')
      .orient('left');

    var xScale = d3.scale.linear() //porcentage values
      .domain([0, 100])
      .range([config.padding, config.width]);

    var xAxis = d3.svg.axis()
      .scale(xScale)
      .tickFormat('')
      .orient('bottom');

    return {
      yScale: yScale,
      yAxis: yAxis,
      xScale: xScale,
      xAxis: xAxis
    };
  }

  /**
   * Function that draw the axes.
   * @param {object} svg - svg container where we are going to draw the axes.
   * @param {object} axes - object where it comes the yAxis and xAxis to use for draw them.
   * @return {void}.
   */
  function drawAxes(svg, axes) {
    svg.append('g')
      .attr("transform", "translate(" + config.padding + ",0)")
      .call(axes.yAxis)
        .attr('fill', 'white')
        .attr('class', 'line-chart-y-axis');

    svg.append('g')
      .attr("transform", "translate("+ config.padding +"," + config.height + ")")
      .call(axes.xAxis)
        .attr('fill', 'white')
        .attr('class', 'line-chart-x-axis');
  }

  /**
   * Function to draw the top and bot decorator lines.
   * @param {object} svg - svg container where we are goint to draw the lines.
   * @return {void}.
   */
  function drawTopAndBotLines(svg) {
    svg.append('path')
      .attr('d', function() {
        return "M"+ config.padding +"," + config.padding + " L" + config.width + "," + config.padding + "";
      })
      .attr('stroke', config.topLineColor)
      .attr('stroke-width', config.axisStrokeWidth)
      .attr('class', 'line-chart-top-decorator-line');

    svg.append('path')
      .attr('d', function() {
        return "M"+ config.padding +"," + (+config.height - config.padding) + " L" + config.width + "," + (+config.height - config.padding);
      })
      .attr('stroke', config.botLineColor)
      .attr('stroke-width', config.axisStrokeWidth)
      .attr('class', 'line-chart-bot-decorator-line');
  }

  /**
   * Function that draws the lines that make the union between pointer.
   * @param {object} data - data to draw the lines.
   * @param {object} svg - svg container where we are going to draw the lines.
   * @param {object} sclaes - object that contains the yScale and xScale to positionate the lines.
   * @return {void}.
   */
  function drawPointersUnion(data, svg, scales) {
    var path             = '',
        durationFunction = function(i) {
      return 500 + i * config.transitionDuration;
    };

    for (var i = 0; i < data.length; i++) {
      if (i === 0) {
        path = 'M' + (+scales.xScale(data[i].column)) + ',' + (+scales.yScale(data[i].value));
      } else {
        path += ' L' + (+scales.xScale(data[i].column)) + ',' + (+scales.yScale(data[i].value));
        svg.append('path')
          .attr('d', path)
          .attr('stroke-width', '' + config.axisStrokeWidth)
          .attr('stroke', config.circleColor)
          .attr('fill', 'none')
          .attr('opacity', 0)
          .attr('class', 'line-chart-pointer-union-component')
          .transition()
            .duration(durationFunction(i))
            .attr('opacity', 1);

      }
    }
  }

  /**
   * Function to draw the pointers that mark the incoming data in the chart.
   * @param {object} data - the data for draw the pointers.
   * @param {object} svg - the svg container where the pointers are going to be draw.
   * @param {object} scales - an object containing the yScale and xScale to calculate the position
   * of the pointers correctly.
   * @return {void}.
   */
  function drawPointers(data, svg, scales) {
    svg.selectAll('.line-chart-pointer')
      .data(data)
      .enter()
      .append('circle')
        .attr('width', config.circleWidth)
        .attr('height', config.circleHeight)
        .attr('r', config.radius)
        .attr('cx', function(d) {
          return scales.xScale(d.column);
        })
        .attr('cy', function(d) {
          return scales.yScale(d.value);
        })
        .attr('fill', config.circleColor)
        .attr('opacity', 0)
        .attr('class', 'line-chart-pointer-outer-circle')
        .transition()
          .duration(function(d,i){
            return 500+i*config.transitionDuration;
          })
          .attr('opacity', 1);
  }

  /**
   * Function that draws the white circle of the pointers.
   * @param {object} data - the data for draw the pointers.
   * @param {object} svg - the svg container where the pointers are going to be draw.
   * @param {object} scales - an object containing the yScale and xScale to calculate the position
   * @return {void}.
   */
  function drawPointersInnerCircle(data, svg, scales) {
    svg.selectAll('.line-chart-pointer-inner-circle')
      .data(data)
      .enter()
      .append('circle')
        .attr('width', config.circleWidth)
        .attr('height', config.circleHeight)
        .attr('r', config.innerRadius)
        .attr('cx', function(d) {
          return scales.xScale(d.column);
        })
        .attr('cy', function(d) {
          return scales.yScale(d.value);
        })
        .attr('fill', 'white')
        .attr('opacity', 0)
        .attr('class', 'line-chart-pointer-inner-circle')
        .transition()
          .duration(function(d,i){
            return 500+i*config.transitionDuration;
          })
          .attr('opacity', 1);
  }

  /**
   * Function that draws the upper text of the pointers.
   * @param {object} data - object to obtain what to show in the text.
   * @param {object} svg - svg container where the text are going to be draw.
   * @param {object} scales - object containing the yScale and x Scale to know the position
   * where to draw the texts.
   * @return {void}.
   */
  function drawPointersText(data, svg, scales) {
    var textClass = 'line-chart-pointer-text';
    svg.selectAll('.'+textClass)
      .data(data)
      .enter()
      .append('text')
        .attr('x', function(d) {
          return scales.xScale(d.column) + config.textHorizontalPosition;
        })
        .attr('y', function(d) {
          return scales.yScale(d.value) - config.textVerticalPosition;
        })
        .text(function(d) {
          return d.value + "%";
        })
        .attr('opacity', 0)
        .attr('class', textClass)
        .transition()
          .duration(function(d,i){
            return 500+i*config.transitionDuration;
          })
          .attr('opacity', 1);
  }

  gps.charts.lineChart = {

    /**
     * Function that draws a line chart, the data object should be an array of object like this:
     * [{value:0},{value:50},{value:100},{value:-1}], the object with -1 value is a helper object
     * it just indicates that the columns for the chart are 4 instead of 3 (3 real values), so if we want
     * represent 2 values in a 8 columns chart we pass 2 real objects and 6 objects with -1 values.
     * @param {String} container - selector where the line chart will be appended.
     * @param {object} data - data object explained in the description.
     * @return {void}.
     */
    draw: function(container, data) {
      data = divideDataPerColumns(data);

      var svg           = createContainers(container),
          scalesAndAxes = createScaleAndAxes(data, svg);

      drawAxes(svg, scalesAndAxes);
      drawTopAndBotLines(svg);
      drawPointersUnion(data, svg, scalesAndAxes);
      drawPointers(data, svg, scalesAndAxes);
      drawPointersInnerCircle(data, svg, scalesAndAxes);
      drawPointersText(data, svg, scalesAndAxes);
    },
  };
}.call());

/**
 * we should use it in this way:

 <style>

 .chart rect {
  fill: steelblue;
}

 .chart text {
  fill: blue;
  font: 10px sans-serif;
  text-anchor: middle;
}

 .axis text {
  font: 10px sans-serif;
}

 .axis path,
 .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

 </style>

var data21 = [
 {name: "Locke",    value:  [7,1,5]},
 {name: "Reyes",    value:  [7,2,7]},
 {name: "Ford",     value:  [7,3,3]},
 {name: "Jarrah",   value:  [3,4,14]},
 {name: "Shephard", value:  [7,5,23]},
 {name: "Kwon",     value:  [16,6,18]}
 ];

 barChart.draw("containerID",data21);

 */
;
//    Burry.js Storage v0.1

//    (c) 2012 Yiorgis Gozadinos, Riot AS.
//    Burry.js is distributed under the MIT license.
//    http://github.com/ggozad/burry.js

// AMD/global registrations
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], function () {
            return factory();
        });
    } else {
        // Browser globals
        root.Burry = factory();
    }
}(this, function () {

    // Construct a new Burry store with an optional `namespace` and an optional default `ttl`.
    var Burry = {

        Store: function (ns, default_ttl) {
            var stores = Burry.stores();
            if (ns) {
                this._CACHE_SUFFIX = this._CACHE_SUFFIX + ns;
                this._EXPIRY_KEY = this._EXPIRY_KEY + ns;
                if (stores.indexOf(ns) === -1)
                    stores.push(ns);
            }
            localStorage.setItem('_burry_stores_', JSON.stringify(stores));
            this.default_ttl = default_ttl;
        },

        // Time resolution in minutes
        _EXPIRY_UNITS: 60 * 1000,

        // Calculate the time since Epoch in minutes
        _mEpoch: function () {
            return Math.floor((new Date().getTime())/Burry._EXPIRY_UNITS);
        },

        stores: function () {
            var stores = localStorage.getItem('_burry_stores_');
            if (stores) {
                stores = JSON.parse(stores);
            } else {
                stores = [''];
            }
            return stores;
        },

        // Checks for localStorage & JSON support.
        isSupported: function () {
            // If this has been called before we already know.
            if (Burry._isSupported) return Burry._isSupported;

            try {
                localStorage.setItem('_burry_', '_burry_');
                localStorage.removeItem('_burry_');
            } catch (e) {
                return Burry._isSupported = false;
            }
            if (!JSON) {
                return Burry._isSupported = false;
            }
            return Burry._isSupported = true;
        },

        flushExpired: function () {
            var i, match, key, val, ns,
                remove = [],
                now = Burry._mEpoch();

            for (i=0; i< localStorage.length; i++) {
                key = localStorage.key(i);
                match = key.match(/(.+)-_burry_exp_(.*)/);
                if (match) {
                    val = localStorage.getItem(key);
                    if (val < now) {
                        key = match[1]; ns = match[2];
                        remove.push(key + Burry.Store.prototype._CACHE_SUFFIX + ns);
                        remove.push(key + Burry.Store.prototype._EXPIRY_KEY + ns);
                    }
                }
            }
            for (i=0; i< remove.length; i++) {
                localStorage.removeItem(remove[i]);
            }
        }
    };

    // Instance methods

    Burry.Store.prototype = {

        // Suffix to all keys in the cache
        _CACHE_SUFFIX: '-_burry_',

        // Key used to store expiration data
        _EXPIRY_KEY: '-_burry_exp_',

        // Return the internally used suffixed key.
        _internalKey: function (key) {
            return key + this._CACHE_SUFFIX;
        },

        // Return the internally used suffixed expiration key.
        _expirationKey: function (key) {
            return key + this._EXPIRY_KEY;
        },

        // Check if a key is a valid internal key
        _isInternalKey: function (key) {
            if (key.slice(-this._CACHE_SUFFIX.length) === this._CACHE_SUFFIX)
                return key.slice(0, -this._CACHE_SUFFIX.length);
            return false;
        },

        // Check if a key is a valid expiration key
        _isExpirationKey: function (key) {
            if (key.slice(-this._EXPIRY_KEY.length) === this._EXPIRY_KEY)
                return key.slice(0, -this._EXPIRY_KEY.length);
            return false;
        },

        // Returns in how many minutes after Epoch the key expires,
        // or `undefined` if it does not expire.
        _expiresOn: function (key) {
            var expires = localStorage.getItem(this._expirationKey(key));
            if (expires) {
                return parseInt(expires, 10);
            }
        },

        // Parse the value of a key as an integer.
        _getCounter: function (bkey) {
            var value = localStorage.getItem(bkey);
            if (value === null) return 0;

            return parseInt(value, 10);
        },

        // Returns the value of `key` from the cache, `undefined` if the `key` has
        // expired or is not stored.
        get: function (key) {
            var value = localStorage.getItem(this._internalKey(key));
            if (value === null) {
                return undefined;
            }
            if (this.hasExpired(key)) {
                this.remove(key);
                return undefined;
            }
            try {
                value = JSON.parse(value);
            } catch (e) {
                return undefined;
            }
            return value;
        },

        // Sets a `key`/`value` on the cache. Optionally, sets the expiration in `ttl` minutes.
        set: function (key, value, ttl) {
            var i, bkey, expires = {};
            ttl = ttl || this.default_ttl;
            if (ttl) ttl = parseInt(ttl, 10);
            if (typeof key === undefined || typeof value === undefined) return;
            value = JSON.stringify(value);
            try {
                localStorage.setItem(this._internalKey(key), value);
                if (ttl) {
                    localStorage.setItem(this._expirationKey(key), Burry._mEpoch() + ttl);
                } else {
                    localStorage.removeItem(this._expirationKey(key));
                }
            } catch (e) {
                if (e.name === 'QUOTA_EXCEEDED_ERR' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                    // No space left on localStorage, let's flush expired items and try agagin.
                    Burry.flushExpired();
                    try {
                        localStorage.setItem(this._internalKey(key), value);
                        if (ttl) {
                            localStorage.setItem(this._expirationKey(key), Burry._mEpoch() + ttl);
                        } else {
                            localStorage.removeItem(this._expirationKey(key));
                        }
                    }
                    catch (e) {
                        // Oh well. Let's forget about it.
                    }
                }
            }
        },

        // Sets a `key`/`value` on the cache as does **set** but only if the key does not already exist or has expired.
        add: function (key, value, ttl) {
            if (localStorage.getItem(this._internalKey(key)) === null || this.hasExpired(key)) {
                this.set(key, value, ttl);
            }
        },

        // Sets a `key`/`value` on the cache as does **set** but only if the key already exist and has not expired.
        replace: function (key, value, ttl) {
            if (localStorage.getItem(this._internalKey(key)) !== null && !this.hasExpired(key)) {
                this.set(key, value, ttl);
            }
        },

        // Removes an item from the cache.
        remove: function (key) {
            localStorage.removeItem(this._internalKey(key));
            localStorage.removeItem(this._expirationKey(key));
        },

        // Increments the integer value of `key` by 1
        incr: function (key) {
            var bkey = this._internalKey(key),
                value = this._getCounter(bkey);
            value++;
            localStorage.setItem(bkey, value);
        },

        // Decrements the integer value of `key` by 1
        decr: function (key) {
            var bkey = this._internalKey(key),
                value = this._getCounter(bkey);
            value--;
            localStorage.setItem(bkey, value);
        },

        // Returns whether `key` has expired.
        hasExpired: function (key) {
            var expireson = this._expiresOn(key);
            if (expireson && (expireson < Burry._mEpoch())) {
                return true;
            }
            return false;
        },

        // Returns a list of all the cached keys
        keys: function () {
            var i, bkey, key, results = [];
            for (i=0; i < localStorage.length ; i++) {
                bkey = localStorage.key(i);
                key = this._isInternalKey(bkey);
                if (key) {
                    results.push(key);
                }
            }
            return results;
        },

        // Returns an object with all the expirable keys. The values are the ttl
        // in minutes since Epoch.
        expirableKeys: function () {
            var i, bkey, key, results = {};
            for (i=0; i < localStorage.length ; i++) {
                bkey = localStorage.key(i);
                key = this._isExpirationKey(bkey);
                if (key) {
                    results[key] = parseInt(localStorage.getItem(bkey), 10);
                }
            }
            return results;
        },

        // Removes all Burry items from `localStorage`.
        flush: function () {
            var i, key, remove = [];
            for (i=0; i < localStorage.length ; i++) {
                key = localStorage.key(i);
                if (this._isInternalKey(key) || this._isExpirationKey(key)) {
                    remove.push(key);
                }
            }
            for (i=0; i<remove.length; i++)
                localStorage.removeItem(remove[i]);
        },

        // Removes all expired items.
        flushExpired: function () {
            var expirable = this.expirableKeys(), now = Burry._mEpoch(), key, val;
            for (key in expirable) {
                val = expirable[key];
                if (val < now) this.remove(key);
            }
        }
    };

    return Burry;
}));
//     Backbone.js 1.1.1

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

    // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore'), $;
    try { $ = require('jquery'); } catch(e) {}
    factory(root, exports, _, $);

    // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.1';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

          // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
    !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
        .replace(optionalParam, '(?:$1)?')
        .replace(namedParam, function(match, optional) {
          return optional ? match : '([^/?]+)';
        })
        .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?(.*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

          // Or if we've started out with a hash-based route, but we're currently
          // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

        // If hash changes haven't been explicitly disabled, update the hash
        // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

        // If you've told us that you explicitly don't want fallback hashchange-
        // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));
// Backbone.ModelBinder v1.0.5
// (c) 2013 Bart Wood
// Distributed Under MIT License

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['underscore', 'jquery', 'backbone'], factory);
    } else {
        // Browser globals
        factory(_, jQuery, Backbone);
    }
}(function(_, $, Backbone){

    if(!Backbone){
        throw 'Please include Backbone.js before Backbone.ModelBinder.js';
    }

    Backbone.ModelBinder = function(){
        _.bindAll.apply(_, [this].concat(_.functions(this)));
    };

    // Static setter for class level options
    Backbone.ModelBinder.SetOptions = function(options){
        Backbone.ModelBinder.options = options;
    };

    // Current version of the library.
    Backbone.ModelBinder.VERSION = '1.0.5';
    Backbone.ModelBinder.Constants = {};
    Backbone.ModelBinder.Constants.ModelToView = 'ModelToView';
    Backbone.ModelBinder.Constants.ViewToModel = 'ViewToModel';

    _.extend(Backbone.ModelBinder.prototype, {

        bind:function (model, rootEl, attributeBindings, options) {
            this.unbind();

            this._model = model;
            this._rootEl = rootEl;
            this._setOptions(options);

            if (!this._model) this._throwException('model must be specified');
            if (!this._rootEl) this._throwException('rootEl must be specified');

            if(attributeBindings){
                // Create a deep clone of the attribute bindings
                this._attributeBindings = $.extend(true, {}, attributeBindings);

                this._initializeAttributeBindings();
                this._initializeElBindings();
            }
            else {
                this._initializeDefaultBindings();
            }

            this._bindModelToView();
            this._bindViewToModel();
        },

        bindCustomTriggers: function (model, rootEl, triggers, attributeBindings, modelSetOptions) {
            this._triggers = triggers;
            this.bind(model, rootEl, attributeBindings, modelSetOptions);
        },

        unbind:function () {
            this._unbindModelToView();
            this._unbindViewToModel();

            if(this._attributeBindings){
                delete this._attributeBindings;
                this._attributeBindings = undefined;
            }
        },

        _setOptions: function(options){
            this._options = _.extend({
                boundAttribute: 'name'
            }, Backbone.ModelBinder.options, options);

            // initialize default options
            if(!this._options['modelSetOptions']){
                this._options['modelSetOptions'] = {};
            }
            this._options['modelSetOptions'].changeSource = 'ModelBinder';

            if(!this._options['changeTriggers']){
                this._options['changeTriggers'] = {'': 'change', '[contenteditable]': 'blur'};
            }

            if(!this._options['initialCopyDirection']){
                this._options['initialCopyDirection'] = Backbone.ModelBinder.Constants.ModelToView;
            }
        },

        // Converts the input bindings, which might just be empty or strings, to binding objects
        _initializeAttributeBindings:function () {
            var attributeBindingKey, inputBinding, attributeBinding, elementBindingCount, elementBinding;

            for (attributeBindingKey in this._attributeBindings) {
                inputBinding = this._attributeBindings[attributeBindingKey];

                if (_.isString(inputBinding)) {
                    attributeBinding = {elementBindings: [{selector: inputBinding}]};
                }
                else if (_.isArray(inputBinding)) {
                    attributeBinding = {elementBindings: inputBinding};
                }
                else if(_.isObject(inputBinding)){
                    attributeBinding = {elementBindings: [inputBinding]};
                }
                else {
                    this._throwException('Unsupported type passed to Model Binder ' + attributeBinding);
                }

                // Add a linkage from the element binding back to the attribute binding
                for(elementBindingCount = 0; elementBindingCount < attributeBinding.elementBindings.length; elementBindingCount++){
                    elementBinding = attributeBinding.elementBindings[elementBindingCount];
                    elementBinding.attributeBinding = attributeBinding;
                }

                attributeBinding.attributeName = attributeBindingKey;
                this._attributeBindings[attributeBindingKey] = attributeBinding;
            }
        },

        // If the bindings are not specified, the default binding is performed on the specified attribute, name by default
        _initializeDefaultBindings: function(){
            var elCount, elsWithAttribute, matchedEl, name, attributeBinding;

            this._attributeBindings = {};
            elsWithAttribute = $('[' + this._options['boundAttribute'] + ']', this._rootEl);

            for(elCount = 0; elCount < elsWithAttribute.length; elCount++){
                matchedEl = elsWithAttribute[elCount];
                name = $(matchedEl).attr(this._options['boundAttribute']);

                // For elements like radio buttons we only want a single attribute binding with possibly multiple element bindings
                if(!this._attributeBindings[name]){
                    attributeBinding =  {attributeName: name};
                    attributeBinding.elementBindings = [{attributeBinding: attributeBinding, boundEls: [matchedEl]}];
                    this._attributeBindings[name] = attributeBinding;
                }
                else{
                    this._attributeBindings[name].elementBindings.push({attributeBinding: this._attributeBindings[name], boundEls: [matchedEl]});
                }
            }
        },

        _initializeElBindings:function () {
            var bindingKey, attributeBinding, bindingCount, elementBinding, foundEls, elCount, el;
            for (bindingKey in this._attributeBindings) {
                attributeBinding = this._attributeBindings[bindingKey];

                for (bindingCount = 0; bindingCount < attributeBinding.elementBindings.length; bindingCount++) {
                    elementBinding = attributeBinding.elementBindings[bindingCount];
                    if (elementBinding.selector === '') {
                        foundEls = $(this._rootEl);
                    }
                    else {
                        foundEls = $(elementBinding.selector, this._rootEl);
                    }

                    if (foundEls.length === 0) {
                        this._throwException('Bad binding found. No elements returned for binding selector ' + elementBinding.selector);
                    }
                    else {
                        elementBinding.boundEls = [];
                        for (elCount = 0; elCount < foundEls.length; elCount++) {
                            el = foundEls[elCount];
                            elementBinding.boundEls.push(el);
                        }
                    }
                }
            }
        },

        _bindModelToView: function () {
            this._model.on('change', this._onModelChange, this);

            if(this._options['initialCopyDirection'] === Backbone.ModelBinder.Constants.ModelToView){
                this.copyModelAttributesToView();
            }
        },

        // attributesToCopy is an optional parameter - if empty, all attributes
        // that are bound will be copied.  Otherwise, only attributeBindings specified
        // in the attributesToCopy are copied.
        copyModelAttributesToView: function(attributesToCopy){
            var attributeName, attributeBinding;

            for (attributeName in this._attributeBindings) {
                if(attributesToCopy === undefined || _.indexOf(attributesToCopy, attributeName) !== -1){
                    attributeBinding = this._attributeBindings[attributeName];
                    this._copyModelToView(attributeBinding);
                }
            }
        },

        copyViewValuesToModel: function(){
            var bindingKey, attributeBinding, bindingCount, elementBinding, elCount, el;
            for (bindingKey in this._attributeBindings) {
                attributeBinding = this._attributeBindings[bindingKey];

                for (bindingCount = 0; bindingCount < attributeBinding.elementBindings.length; bindingCount++) {
                    elementBinding = attributeBinding.elementBindings[bindingCount];

                    if(this._isBindingUserEditable(elementBinding)){
                        if(this._isBindingRadioGroup(elementBinding)){
                            el = this._getRadioButtonGroupCheckedEl(elementBinding);
                            if(el){
                                this._copyViewToModel(elementBinding, el);
                            }
                        }
                        else {
                            for(elCount = 0; elCount < elementBinding.boundEls.length; elCount++){
                                el = $(elementBinding.boundEls[elCount]);
                                if(this._isElUserEditable(el)){
                                    this._copyViewToModel(elementBinding, el);
                                }
                            }
                        }
                    }
                }
            }
        },

        _unbindModelToView: function(){
            if(this._model){
                this._model.off('change', this._onModelChange);
                this._model = undefined;
            }
        },

        _bindViewToModel: function () {
            _.each(this._options['changeTriggers'], function (event, selector) {
                $(this._rootEl).delegate(selector, event, this._onElChanged);
            }, this);

            if(this._options['initialCopyDirection'] === Backbone.ModelBinder.Constants.ViewToModel){
                this.copyViewValuesToModel();
            }
        },

        _unbindViewToModel: function () {
            if(this._options && this._options['changeTriggers']){
                _.each(this._options['changeTriggers'], function (event, selector) {
                    $(this._rootEl).undelegate(selector, event, this._onElChanged);
                }, this);
            }
        },

        _onElChanged:function (event) {
            var el, elBindings, elBindingCount, elBinding;

            el = $(event.target)[0];
            elBindings = this._getElBindings(el);

            for(elBindingCount = 0; elBindingCount < elBindings.length; elBindingCount++){
                elBinding = elBindings[elBindingCount];
                if (this._isBindingUserEditable(elBinding)) {
                    this._copyViewToModel(elBinding, el);
                }
            }
        },

        _isBindingUserEditable: function(elBinding){
            return elBinding.elAttribute === undefined ||
                elBinding.elAttribute === 'text' ||
                elBinding.elAttribute === 'html';
        },

        _isElUserEditable: function(el){
            var isContentEditable = el.attr('contenteditable');
            return isContentEditable || el.is('input') || el.is('select') || el.is('textarea');
        },

        _isBindingRadioGroup: function(elBinding){
            var elCount, el;
            var isAllRadioButtons = elBinding.boundEls.length > 0;
            for(elCount = 0; elCount < elBinding.boundEls.length; elCount++){
                el = $(elBinding.boundEls[elCount]);
                if(el.attr('type') !== 'radio'){
                    isAllRadioButtons = false;
                    break;
                }
            }

            return isAllRadioButtons;
        },

        _getRadioButtonGroupCheckedEl: function(elBinding){
            var elCount, el;
            for(elCount = 0; elCount < elBinding.boundEls.length; elCount++){
                el = $(elBinding.boundEls[elCount]);
                if(el.attr('type') === 'radio' && el.attr('checked')){
                    return el;
                }
            }

            return undefined;
        },

        _getElBindings:function (findEl) {
            var attributeName, attributeBinding, elementBindingCount, elementBinding, boundElCount, boundEl;
            var elBindings = [];

            for (attributeName in this._attributeBindings) {
                attributeBinding = this._attributeBindings[attributeName];

                for (elementBindingCount = 0; elementBindingCount < attributeBinding.elementBindings.length; elementBindingCount++) {
                    elementBinding = attributeBinding.elementBindings[elementBindingCount];

                    for (boundElCount = 0; boundElCount < elementBinding.boundEls.length; boundElCount++) {
                        boundEl = elementBinding.boundEls[boundElCount];

                        if (boundEl === findEl) {
                            elBindings.push(elementBinding);
                        }
                    }
                }
            }

            return elBindings;
        },

        _onModelChange:function () {
            var changedAttribute, attributeBinding;

            for (changedAttribute in this._model.changedAttributes()) {
                attributeBinding = this._attributeBindings[changedAttribute];

                if (attributeBinding) {
                    this._copyModelToView(attributeBinding);
                }
            }
        },

        _copyModelToView:function (attributeBinding) {
            var elementBindingCount, elementBinding, boundElCount, boundEl, value, convertedValue;

            value = this._model.get(attributeBinding.attributeName);

            for (elementBindingCount = 0; elementBindingCount < attributeBinding.elementBindings.length; elementBindingCount++) {
                elementBinding = attributeBinding.elementBindings[elementBindingCount];

                for (boundElCount = 0; boundElCount < elementBinding.boundEls.length; boundElCount++) {
                    boundEl = elementBinding.boundEls[boundElCount];

                    if(!boundEl._isSetting){
                        convertedValue = this._getConvertedValue(Backbone.ModelBinder.Constants.ModelToView, elementBinding, value);
                        this._setEl($(boundEl), elementBinding, convertedValue);
                    }
                }
            }
        },

        _setEl: function (el, elementBinding, convertedValue) {
            if (elementBinding.elAttribute) {
                this._setElAttribute(el, elementBinding, convertedValue);
            }
            else {
                this._setElValue(el, convertedValue);
            }
        },

        _setElAttribute:function (el, elementBinding, convertedValue) {
            switch (elementBinding.elAttribute) {
                case 'html':
                    el.html(convertedValue);
                    break;
                case 'text':
                    el.text(convertedValue);
                    break;
                case 'enabled':
                    el.prop('disabled', !convertedValue);
                    break;
                case 'displayed':
                    el[convertedValue ? 'show' : 'hide']();
                    break;
                case 'hidden':
                    el[convertedValue ? 'hide' : 'show']();
                    break;
                case 'css':
                    el.css(elementBinding.cssAttribute, convertedValue);
                    break;
                case 'class':
                    var previousValue = this._model.previous(elementBinding.attributeBinding.attributeName);
                    var currentValue = this._model.get(elementBinding.attributeBinding.attributeName);
                    // is current value is now defined then remove the class the may have been set for the undefined value
                    if(!_.isUndefined(previousValue) || !_.isUndefined(currentValue)){
                        previousValue = this._getConvertedValue(Backbone.ModelBinder.Constants.ModelToView, elementBinding, previousValue);
                        el.removeClass(previousValue);
                    }

                    if(convertedValue){
                        el.addClass(convertedValue);
                    }
                    break;
                default:
                    el.attr(elementBinding.elAttribute, convertedValue);
            }
        },

        _setElValue:function (el, convertedValue) {
            if(el.attr('type')){
                switch (el.attr('type')) {
                    case 'radio':
                        el.prop('checked', el.val() === convertedValue);
                        break;
                    case 'checkbox':
                         el.prop('checked', !!convertedValue);
                        break;
                    case 'file':
                        break;
                    default:
                        el.val(convertedValue);
                }
            }
            else if(el.is('input') || el.is('select') || el.is('textarea')){
                el.val(convertedValue || (convertedValue === 0 ? '0' : ''));
            }
            else {
                el.text(convertedValue || (convertedValue === 0 ? '0' : ''));
            }
        },

        _copyViewToModel: function (elementBinding, el) {
            var result, value, convertedValue;

            if (!el._isSetting) {

                el._isSetting = true;
                result = this._setModel(elementBinding, $(el));
                el._isSetting = false;

                if(result && elementBinding.converter){
                    value = this._model.get(elementBinding.attributeBinding.attributeName);
                    convertedValue = this._getConvertedValue(Backbone.ModelBinder.Constants.ModelToView, elementBinding, value);
                    this._setEl($(el), elementBinding, convertedValue);
                }
            }
        },

        _getElValue: function(elementBinding, el){
            switch (el.attr('type')) {
                case 'checkbox':
                    return el.prop('checked') ? true : false;
                default:
                    if(el.attr('contenteditable') !== undefined){
                        return el.html();
                    }
                    else {
                        return el.val();
                    }
            }
        },

        _setModel: function (elementBinding, el) {
            var data = {};
            var elVal = this._getElValue(elementBinding, el);
            elVal = this._getConvertedValue(Backbone.ModelBinder.Constants.ViewToModel, elementBinding, elVal);
            data[elementBinding.attributeBinding.attributeName] = elVal;
            return this._model.set(data,  this._options['modelSetOptions']);
        },

        _getConvertedValue: function (direction, elementBinding, value) {

            if (elementBinding.converter) {
                value = elementBinding.converter(direction, value, elementBinding.attributeBinding.attributeName, this._model, elementBinding.boundEls);
            }
            else if(this._options['converter']){
                value = this._options['converter'](direction, value, elementBinding.attributeBinding.attributeName, this._model, elementBinding.boundEls);
            }

            return value;
        },

        _throwException: function(message){
            if(this._options.suppressThrows){
                if(typeof(console) !== 'undefined' && console.error){
                    console.error(message);
                }
            }
            else {
                throw message;
            }
        }
    });

    Backbone.ModelBinder.CollectionConverter = function(collection){
        this._collection = collection;

        if(!this._collection){
            throw 'Collection must be defined';
        }
        _.bindAll(this, 'convert');
    };

    _.extend(Backbone.ModelBinder.CollectionConverter.prototype, {
        convert: function(direction, value){
            if (direction === Backbone.ModelBinder.Constants.ModelToView) {
                return value ? value.id : undefined;
            }
            else {
                return this._collection.get(value);
            }
        }
    });

    // A static helper function to create a default set of bindings that you can customize before calling the bind() function
    // rootEl - where to find all of the bound elements
    // attributeType - probably 'name' or 'id' in most cases
    // converter(optional) - the default converter you want applied to all your bindings
    // elAttribute(optional) - the default elAttribute you want applied to all your bindings
    Backbone.ModelBinder.createDefaultBindings = function(rootEl, attributeType, converter, elAttribute){
        var foundEls, elCount, foundEl, attributeName;
        var bindings = {};

        foundEls = $('[' + attributeType + ']', rootEl);

        for(elCount = 0; elCount < foundEls.length; elCount++){
            foundEl = foundEls[elCount];
            attributeName = $(foundEl).attr(attributeType);

            if(!bindings[attributeName]){
                var attributeBinding =  {selector: '[' + attributeType + '="' + attributeName + '"]'};
                bindings[attributeName] = attributeBinding;

                if(converter){
                    bindings[attributeName].converter = converter;
                }

                if(elAttribute){
                    bindings[attributeName].elAttribute = elAttribute;
                }
            }
        }

        return bindings;
    };

    // Helps you to combine 2 sets of bindings
    Backbone.ModelBinder.combineBindings = function(destination, source){
        _.each(source, function(value, key){
            var elementBinding = {selector: value.selector};

            if(value.converter){
                elementBinding.converter = value.converter;
            }

            if(value.elAttribute){
                elementBinding.elAttribute = value.elAttribute;
            }

            if(!destination[key]){
                destination[key] = elementBinding;
            }
            else {
                destination[key] = [destination[key], elementBinding];
            }
        });

        return destination;
    };


    return Backbone.ModelBinder;

}));
// Backbone.CollectionBinder v1.0.5
// (c) 2013 Bart Wood
// Distributed Under MIT License

(function(_, $, Backbone){

    if(!Backbone){
        throw 'Please include Backbone.js before Backbone.ModelBinder.js';
    }

    if(!Backbone.ModelBinder){
        throw 'Please include Backbone.ModelBinder.js before Backbone.CollectionBinder.js';
    }

    Backbone.CollectionBinder = function(elManagerFactory, options){
        _.bindAll.apply(_, [this].concat(_.functions(this)));
        this._elManagers = {};

        this._elManagerFactory = elManagerFactory;
        if(!this._elManagerFactory) throw 'elManagerFactory must be defined.';

        // Let the factory just use the trigger function on the view binder
        this._elManagerFactory.trigger = this.trigger;

        this._options = _.extend({}, Backbone.CollectionBinder.options, options);
    };

    // Static setter for class level options
    Backbone.CollectionBinder.SetOptions = function(options){
        Backbone.CollectionBinder.options = options;
    };

    Backbone.CollectionBinder.VERSION = '1.0.5';

    _.extend(Backbone.CollectionBinder.prototype, Backbone.Events, {
        bind: function(collection, parentEl){
            this.unbind();

            if(!collection) throw 'collection must be defined';
            if(!parentEl) throw 'parentEl must be defined';

            this._collection = collection;
            this._elManagerFactory._setParentEl(parentEl);

            this._onCollectionReset();

            this._collection.on('add', this._onCollectionAdd, this);
            this._collection.on('remove', this._onCollectionRemove, this);
            this._collection.on('reset', this._onCollectionReset, this);
            this._collection.on('sort', this._onCollectionSort, this);
        },

        unbind: function(){
            if(this._collection !== undefined){
                this._collection.off('add', this._onCollectionAdd);
                this._collection.off('remove', this._onCollectionRemove);
                this._collection.off('reset', this._onCollectionReset);
                this._collection.off('sort', this._onCollectionSort);
            }

            this._removeAllElManagers();
        },

        getManagerForEl: function(el){
            var i, elManager, elManagers = _.values(this._elManagers);

            for(i = 0; i < elManagers.length; i++){
                elManager = elManagers[i];

                if(elManager.isElContained(el)){
                    return elManager;
                }
            }

            return undefined;
        },

        getManagerForModel: function(model){
           return this._elManagers[_.isObject(model)? model.cid : model];
        },

        _onCollectionAdd: function(model){
            this._elManagers[model.cid] = this._elManagerFactory.makeElManager(model);
            this._elManagers[model.cid].createEl();

            if(this._options['autoSort']){
                this.sortRootEls();
            }
        },

        _onCollectionRemove: function(model){
            this._removeElManager(model);
        },

        _onCollectionReset: function(){
            this._removeAllElManagers();

            this._collection.each(function(model){
                this._onCollectionAdd(model);
            }, this);

            this.trigger('elsReset', this._collection);
        },

        _onCollectionSort: function() {
            if(this._options['autoSort']){
                this.sortRootEls();
            }
        },

        _removeAllElManagers: function(){
            _.each(this._elManagers, function(elManager){
                elManager.removeEl();
                delete this._elManagers[elManager._model.cid];
            }, this);

            delete this._elManagers;
            this._elManagers = {};
        },

        _removeElManager: function(model){
            if(this._elManagers[model.cid] !== undefined){
                this._elManagers[model.cid].removeEl();
                delete this._elManagers[model.cid];
            }
        },

        sortRootEls: function(){
            this._collection.each(function(model, modelIndex){
                var modelElManager = this.getManagerForModel(model);
                if(modelElManager){
                    var modelEl = modelElManager.getEl();
                    var currentRootEls = $(this._elManagerFactory._getParentEl()).children();

                    if(currentRootEls[modelIndex] !== modelEl[0]){
                        modelEl.detach();
                        modelEl.insertBefore(currentRootEls[modelIndex]);
                    }
                }
            }, this);
        }
    });

    // The ElManagerFactory is used for els that are just html templates
    // elHtml - how the model's html will be rendered.  Must have a single root element (div,span).
    // bindings (optional) - either a string which is the binding attribute (name, id, data-name, etc.) or a normal bindings hash
    Backbone.CollectionBinder.ElManagerFactory = function(elHtml, bindings){
        _.bindAll.apply(_, [this].concat(_.functions(this)));

        this._elHtml = elHtml;
        this._bindings = bindings;

        if(!_.isFunction(this._elHtml) && ! _.isString(this._elHtml)) throw 'elHtml must be a compliled template or an html string';
    };

    _.extend(Backbone.CollectionBinder.ElManagerFactory.prototype, {
        _setParentEl: function(parentEl){
            this._parentEl = parentEl;
        },

        _getParentEl: function(){
            return this._parentEl;
        },

        makeElManager: function(model){

            var elManager = {
                _model: model,

                createEl: function(){
                    this._el = _.isFunction(this._elHtml) ? $(this._elHtml({model: this._model.toJSON()})) : $(this._elHtml);
                    $(this._parentEl).append(this._el);

                    if(this._bindings){
                        if(_.isString(this._bindings)){
                            this._modelBinder = new Backbone.ModelBinder();
                            this._modelBinder.bind(this._model, this._el, Backbone.ModelBinder.createDefaultBindings(this._el, this._bindings));
                        }
                        else if(_.isObject(this._bindings)){
                            this._modelBinder = new Backbone.ModelBinder();
                            this._modelBinder.bind(this._model, this._el, this._bindings);
                        }
                        else {
                            throw 'Unsupported bindings type, please use a boolean or a bindings hash';
                        }
                    }

                    this.trigger('elCreated', this._model, this._el);
                },

                removeEl: function(){
                    if(this._modelBinder !== undefined){
                        this._modelBinder.unbind();
                    }

                    this._el.remove();
                    this.trigger('elRemoved', this._model, this._el);
                },

                isElContained: function(findEl){
                    return this._el === findEl || $(this._el).has(findEl).length > 0;
                },

                getModel: function(){
                    return this._model;
                },

                getEl: function(){
                    return this._el;
                }
            };

            _.extend(elManager, this);
            return elManager;
        }
    });


    // The ViewManagerFactory is used for els that are created and owned by backbone views.
    // There is no bindings option because the view made by the viewCreator should take care of any binding
    // viewCreator - a callback that will create backbone view instances for a model passed to the callback
    Backbone.CollectionBinder.ViewManagerFactory = function(viewCreator){
        _.bindAll.apply(_, [this].concat(_.functions(this)));
        this._viewCreator = viewCreator;

        if(!_.isFunction(this._viewCreator)) throw 'viewCreator must be a valid function that accepts a model and returns a backbone view';
    };

    _.extend(Backbone.CollectionBinder.ViewManagerFactory.prototype, {
        _setParentEl: function(parentEl){
            this._parentEl = parentEl;
        },

        _getParentEl: function(){
            return this._parentEl;
        },

        makeElManager: function(model){
            var elManager = {

                _model: model,

                createEl: function(){
                    this._view = this._viewCreator(model);
                    $(this._parentEl).append(this._view.render(this._model).el);

                    this.trigger('elCreated', this._model, this._view);
                },

                removeEl: function(){
                    if(this._view.close !== undefined){
                        this._view.close();
                    }
                    else {
                        this._view.$el.remove();
                        console.log('warning, you should implement a close() function for your view, you might end up with zombies');
                    }

                    this.trigger('elRemoved', this._model, this._view);
                },

                isElContained: function(findEl){
                    return this._view.el === findEl || this._view.$el.has(findEl).length > 0;
                },

                getModel: function(){
                    return this._model;
                },

                getView: function(){
                    return this._view;
                },

                getEl: function(){
                    return this._view.$el;
                }
            };

            _.extend(elManager, this);

            return elManager;
        }
    });

}).call(this, _, jQuery, Backbone);
//    Backbone.cachingSync v0.1

//    (c) 2012 Yiorgis Gozadinos.
//    Backbone.cachingSync is distributed under the MIT license.
//    http://github.com/ggozad/Backbone.cachingSync

// AMD/global registrations
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery', 'underscore', 'backbone', 'burry'], function ($, _, Backbone, Burry) {
            return (root.Backbone.cachingSync = factory($, _, Backbone, Burry));
        });
    } else {
        // Browser globals
        root.Backbone.cachingSync = factory(root.$, root._, root.Backbone, root.Burry);
    }
}(this, function ($, _, Backbone, Burry) {

    // **Backbone.cachingSync** provides `localStorage` caching for your models/collections.
    // In order to use it assign your model/collection's **sync** function to a wrapped
    // version. For instance `Collection.sync = Backbone.cachingSync(Backbone.sync, 'mycollection');`
    // will cache sync operations in the `mycollection` localStorage store.
    // Parameters are: `wrapped` the original sync function you are wrapping,
    // `ns`, the namespace you want your Store to have,
    // `default_ttl`, a default time-to-live for the cache in minutes.
    var cachingSync = function (wrapped, ns, default_ttl) {

        // Create the `Burry.Store`
        var burry = new Burry.Store(ns, default_ttl);

        // **get** caches *read* operations on a model. If the model is cached,
        // it will resolve immediately with the updated attributes, triggering a `change`
        // event when the server *read* gets resolved. If no cache exists, the operation resolves
        // normally (i.e. when the server *read* resolves).
        function get (model, options) {
            var item = burry.get(model.id),
                d = $.Deferred(),
                updated = {},
                wp;

            wp = wrapped('read', model, options).done(function (attrs) {
                model.set(attrs);
                burry.set(model.id, model.toJSON());
            });

            if (typeof item !== 'undefined') {
                _.each(item, function (value, key) {
                    if (model.get(key) !== value) updated[key] = value;
                });
                d.resolve(updated);
            } else {
                wp.done(d.resolve).fail(d.reject);
            }

            return d.promise();
        }

        // **gets** behaves similarly to **get** except it applies to collections.
        function gets (collection, options) {
            var ids = burry.get('__ids__'),
                d = $.Deferred(),
                wp;

            wp = wrapped('read', collection, options).done(function (models) {
                _.each(models, function (model) { burry.set(model.id, model); });
                burry.set('__ids__', _.pluck(models, 'id'));
                collection.reset(models);
            });

            if (typeof ids !== 'undefined') {
                d.resolve(_.map(ids, function (id) {
                    json = burry.get(id);
                    json.id = id;
                    return json;
                }));
            } else {
                wp.done(d.resolve).fail(d.reject);
            }

            return d.promise();
        }

        // **create** saves a model on the server, and when the server save is resolved,
        // the model (and potentially its collection) is cached.
        function create (model, options) {
            return wrapped('create', model, options)
                .done(function (newmodel) {
                    burry.set(newmodel.id, newmodel.attributes);
                    if (model.collection)
                        burry.set('__ids__', _(model.collection.models).chain()
                            .pluck('id')
                            .union([newmodel.id])
                            .without(undefined).value());

                }).promise();
        }

        // **update** resolves immediately by caching the model. Additionally it calls the wrapped sync
        // to perform a server-side save, which if it fails reverts the cache.
        function update (model, options) {
            var old = burry.get(model.id);
            burry.set(model.id, model.attributes);
            return wrapped('update', model, options)
                .fail(function () {
                    if (old) {
                        burry.set(model.id, old);
                    } else {
                        burry.remove(model.id);
                    }
                })
                .promise();
        }

        // **destroy** removes immediately the model from the cache. Additionally it calls the wrapped sync
        // to perform a server-side delete, which if it fails reverts the cache.
        function destroy (model, options) {
            var old = burry.get(model.id);
            burry.remove(model.id);
            return wrapped('destroy', model, options)
                .fail(function () { if (old) burry.set(model.id, old); })
                .promise();
        }

        // The actual wrapping sync function
        return function (method, model, options) {
            var p;
            options = options || {};
            switch (method) {
                case 'read':    p = typeof model.id !== 'undefined' ? get(model, options) : gets(model, options); break;
                case 'create':  p = create(model, options); break;
                case 'update':  p = update(model, options); break;
                case 'delete':  p = destroy(model, options); break;
            }

            // Fallback for old-style callbacks.
            if (options.success) p.done(options.success);
            if (options.error) p.fail(options.error);

            return p;
        };
    };

    return cachingSync;


}));
var BackendlessBB = {};

var DOMAIN_PROTOCOL = 'http:';
var DOMAIN_API_URL = 'api.backendless.com';
var DEFAULT_APP_VERSION = 'v1';
var DEFAULT_USER_STORAGE_NAME = 'BackendlessBBUser';

BackendlessBB.init = function (appId, secretKey, appVersion, userStorageName) {
  if (!appId || !secretKey)
    throw new Error('Application Id and Secret Key must be specified');

  appVersion = appVersion || DEFAULT_APP_VERSION;
  userStorageName = userStorageName || DEFAULT_USER_STORAGE_NAME;

  $.ajaxSettings.headers = {
    'application-id': appId,
    'secret-key': secretKey
  };

  var BASE_API_URL = DOMAIN_PROTOCOL + '//' + DOMAIN_API_URL + '/' + appVersion;
  var USER_API_URL = BASE_API_URL + '/users/';
  var BASE_DATA_URL = BASE_API_URL + '/data/';

  var MAX_ITEMS_PER_PAGE = 100;

  // Remove __meta property from server response
  function removeMetadata ( response ) {

    if ( response.__meta ) {

      delete response.__meta;
    }

    _.each( response, function( value ) {

      if ( _.isObject(value) || _.isArray(value) ) {
        removeMetadata( value );
      }
    });

  };

  var Model = Backbone.Model.extend({

    schemaName: null,

    idAttribute: 'objectId',

    expend: 3,

    filteringBy: null,

    relationsString: '*',

    items: null,
    hasData: false,

    urlRoot: function () {
      return this.schemaName ? BASE_DATA_URL + this.schemaName : null;
    },

    constructor: function (attributes, options) {
      this.options = options || {};
      this.schemaName = this.schemaName || this.options.schemaName;

      if (this.schemaName) {
        this._baseUrl = BASE_DATA_URL + this.schemaName;
      }

      Backbone.Model.apply(this, arguments);

      this.set( '___class', this.schemaName, { silent: true });
    },

    parse: function ( response ) {

      removeMetadata( response );

      this.hasData && this._getIgnoredRemote(response);

      return response;
    },

    fetch: function (options) {
      options = options || {};

      if (this.schemaName) {
        this._buildQueryOptions();
      }

      return Backbone.Model.prototype.fetch.call(this, options);
    },

    sync: function(method, model, options) {
      options.remote_ignore && this.remoteIgnore(options.remote_ignore, options.update);

      Backbone.sync(method, model, options);
    },

    addRelationship: function (name, value, options) {
      var result;

      if (_.isArray(value)) {
        result = this.get(name) || [];

        _.each(value, function (model) {
          result.push(relationshipWrapper(model))
        }, this);

      } else if (_.isObject(value)) {
        result = relationshipWrapper(value);
      }

      this.save(name, result, options);

      function relationshipWrapper(model) {
        return _.extend({
          ___class: model.schemaName
        }, model.toJSON());
      }
    },

    removeRelationship: function (name, options) {
      var values = this.get(name);
      var success = options.success;
      var notDoneYet = 0;

      options.success = function (model, resp) {
        if (notDoneYet == 0) {
          success && success(model, resp);

          this.set(name, null);
        }
      };

      if (_.isArray(values)) {
        notDoneYet = values.length;

        _.each(values, function (value) {
          notDoneYet--;

          destroyRelationship(value);
        }, this);

      } else if (_.isObject(values)) {
        destroyRelationship(values);
      }

      function destroyRelationship(value) {
        var model = new Model(value, {schemaName: value['___class']});

        model.destroy(options);
      }
    },

    removeChild: function (name, objectID, options) {
      var values = this.get(name),
      val = _.findWhere( values, {objectId: objectID}),
      model = new Model(val, {schemaName: val['___class']});

      model.destroy(options);
    },

    remoteIgnore: function(values, update){
      this.items = this.items || {};

      if(!update) {
        this.responseKey = _.last(values);
        this.items[this.responseKey] = this._previousAttributes[this.responseKey];
        values.pop();
      }

      _.each(values, function(key) {
        this.items[key] =  this.get(key);
        this.unset(key);
      }, this);

      this.hasData = true;
    },

    _getIgnoredRemote: function(response){
      var fromResponse, value;

      for (var key in this.items){
        value = this.items[key] || [];

        if( key === this.responseKey ) {
          fromResponse = response[this.responseKey] || [];

          _.each(fromResponse, function(rel){
            if(rel instanceof Backbone.Model){
              rel = rel.toJSON();
            }
          });

          if( _.isArray(value) ) {
            value = value.concat(fromResponse)
          }
          else {
            value = fromResponse
          }
          response[this.responseKey] = value;
        }

        this.set(key, value);
      }

      delete this.items;
      this.hasData = false;
    },

    _buildQueryOptions: function (options) {
      var countItemsPerPage = this.pageSize || MAX_ITEMS_PER_PAGE,
          currentOffset = 0;

      var urlParams = [
            'loadRelations=' + this.relationsString,
            'pageSize=' + countItemsPerPage,
            'offset=' + currentOffset
      ];

      /*var sortString = this._getSortingString();
      if (sortString)
        urlParams.push('sortBy=' + sortString);*/

      var filterString = this._getFilteringString();
      if (filterString)
        urlParams.push('where=' + filterString);

      this.url = _.result(this, 'url');
      this.url += (this.url.indexOf('?') == -1) ? '?' : '&';
      this.url += urlParams.join('&');

      return options
    },

    _getFilteringString: function () {
      /*var filters = _.result(this, 'filteringBy');

      if (!_.isString(filters)) {
        var result;

        var computeFilterItem = function (item) {
          var itemOrder = item.order;
          var order = _.isString(item.order) ? "'" + itemOrder + "'" : itemOrder;

          return '(' + item.prop + order + ')';
        };

        if (_.isArray(filters)) {
          result = _.reduce(filters, function (memo, filterItem, index) {
            var prefix = index > 0 ? filterItem.prefix || 'and' : '';

            return memo + prefix + computeFilterItem(filterItem);
          }, '');

        } else if (_.isObject(filters))
          result = computeFilterItem(filters);
      }

      return result || filters;*/

      return this.filteringBy;
    }
  });

  var Collection = Backbone.Collection.extend({
    schemaName: null,

    pageSize: null,
    currentPage: 0,

    filteringBy: null,
    sortingBy: null,

    relationsString: '*',
    expend: 3,

    constructor: function (models, options) {
      this.options = options || {};
      this.schemaName = this.schemaName || this.options.schemaName || (new this.model()).schemaName;

      if (this.schemaName) {
        !this.url && (this.url = BASE_DATA_URL + this.schemaName);
        this._baseUrl = this.url;

        this.model = (this.model || Model).extend({schemaName: this.schemaName});
      }

      Backbone.Collection.apply(this, arguments);
    },

    parse: function ( response ) {

      removeMetadata( response );

      return response;
    },

    filterBy: function (filter) {
      this.filteringBy = filter;

      this.reset(null, {silent: true});
      this.fetch();
    },

    orderBy: function (sort) {
      this.sortingBy = sort;

      this.reset(null, {silent: true});
      this.fetch();
    },

    fetch: function (options) {
      options = options || {};

      if (this.schemaName) {
        options = this._buildQueryOptions(options);

        if (!this.pageSize) {
          options.remove = this.currentPage == 0;
          options.reset = false;

          options = this._getFullFillingOptions(options);
        }
      }

      return Backbone.Collection.prototype.fetch.call(this, options);
    },

    parse: function (resp) {
      var result = resp;

      if (this.schemaName) {
        this.url = this._baseUrl;
        this.totalObjects = resp.totalObjects;

        result = resp.data;
      }

      return result;
    },

    createRecursively: function(models, index, options) {

      if(index == 0) {

        models[index].save( models[index].toJSON(), {
          success: function(model, result) {

            options.success(model, result);
          },
          error: function(model,error) {

            options.error(model, error);
          }
        })
      }
      else {

        models[index].save( models[index].toJSON(), {
          success: function(model, result) {

            index = index - 1;
            this.createRecursively( models, index, options );
          }.bind(this),
          error: function(model,error) {

            options.error(model, error);
          }
        })
      }
    },

    createAll: function(options) {

      this.createRecursively(this.models, this.models.length - 1, options)
      //this.each(function(model){model.save()})
    },

    _getFullFillingOptions: function (options) {
      var success = options.success,
      error = options.error;

      options.success = _.bind(function (resp) {

        if (this.models.length < (this.totalObjects || 0)) {
          this.currentPage++;
          this.fetch({
            success: success,
            error: error
          });
        }
        else {
          this.trigger('reset', this.models);
          this.currentPage = 0;
          if (success) success(this, resp, options);
        }

      }, this);

      return options;
    },

    _getFilteringString: function () {
      var filters = _.result(this, 'filteringBy');

      if (!_.isString(filters)) {
        var result;

        var computeFilterItem = function (item) {
          var itemOrder = item.order;
          var order = _.isString(item.order) ? "'" + itemOrder + "'" : itemOrder;

          return '(' + item.prop + order + ')';
        };

        if (_.isArray(filters)) {
          result = _.reduce(filters, function (memo, filterItem, index) {
            var prefix = index > 0 ? filterItem.prefix || 'and' : '';

            return memo + prefix + computeFilterItem(filterItem);
          }, '');

        } else if (_.isObject(filters))
          result = computeFilterItem(filters);
      }

      return result || filters;
    },

    _getSortingString: function () {
      var sorts = _.result(this, 'sortingBy');

      if (!_.isString(sorts)) {
        var result;

        var computeSortItem = function (sortItem) {
          return sortItem.field + ' ' + sortItem.dir;
        };

        if (_.isArray(sorts)) {
          result = _.reduce(sorts,function (memo, order) {
            return memo.concat(computeSortItem(order));
          }, []).join(',');

        } else if (_.isObject(sorts))
          result = computeSortItem(sorts);
      }

      return result || sorts;
    },

    _getRelationsString: function () {
      //TODO add ability of build relations string

      return this.relationsString;
    },

    _buildQueryOptions: function (options, offset) {
      var countItemsPerPage = this.pageSize || MAX_ITEMS_PER_PAGE,
      currentOffset = offset ? offset : this.currentPage * countItemsPerPage;

      var urlParams = [
        'loadRelations=' + this._getRelationsString(),
        'pageSize=' + countItemsPerPage,
        'offset=' + currentOffset
      ];

      var sortString = this._getSortingString();
      if (sortString)
        urlParams.push('sortBy=' + sortString);

      var filterString = this._getFilteringString();
      if (filterString)
        urlParams.push('where=' + filterString);

      this.url = _.result(this, 'url');
      this.url += (this.url.indexOf('?') == -1) ? '?' : '&';
      this.url += urlParams.join('&');

      return options
    }

  });

  var View = Backbone.View.extend({

  });


  var User = Model.extend({
    _userToken: null,
    activityInfo: null,
    roles: null,
    schemaName:'Users',

    initialize: function () {
      //this.on('change', this.updateUserStorage);

      this.load();
    },

    load: function (complete) {
      var that = this, userData = this._getUserStorage();

      $.ajaxSetup({
        statusCode: {
          401: function () {
            that.removeUserSessionData();
            if(gps.router) {
              //redirect to login view
              gps.router.navigate("", {trigger: true});
            }
          }
        }
      });

      function done() {
        //that.trigger('loaded');

        complete && complete(that.toJSON());
      }

      if (userData) {
        this._updateUserTokenInAjaxHeaders(userData['user-token']);
        this._verifyUserSession(userData, {async: false, success: done, error: done});

      } else done();
    },

    register: function (data, options) {
      this._setUserUrl('register');
      //this._updateUserTokenInAjaxHeaders();

      this.save(data, _.extend({silent: true}, options));
    },

    login: function (login, pass, options) {
      var that = this;
      var attr = {login: login, password: pass};

      if (_.isObject(login)) {
        attr = login;
        options = pass;
      }

      options = options || {};

      this._setUserUrl('login');
      this.removeUserSessionData();

      function success(model) {
        options.success && options.success(model);

        //that.trigger('logged');
      }

      this.save(attr,
        {
          silent: true,
          error: options.error,
          success: function (model, resp) {
            that.clear({silent: true});

            that._setUserStorage(resp);
            that._updateUserTokenInAjaxHeaders(resp['user-token']);

            that._verifyUserSession(resp, {success: success, error: options.error});
          }});
    },

    logout: function (options) {
      options || (options = {});

      this._setUserUrl('logout');

      var success = _.bind(function () {
        this.removeUserSessionData();
        //this.trigger('logout');

        options.success && options.success();
      }, this);

      var error = function () {
        options.error && options.error(arguments);
      };

      var complete = function (resp) {
        resp.status == 200 ? success() : error(resp)
      };

      this.fetch({complete: complete});
    },

    update: function (data, options) {
      //if (this.isAuthorized()) {
        this._setUserUrl(this.id);

        this.save(data || {}, options);
      //}
    },

    setUserRoles: function (options) {
      options || (options = {});

      this._setUserUrl('userroles');

      var success = options.success;

      options.success = _.bind(function (model, resp) {
        this.roles = resp;

        success && success(model, resp, options);
      }, this);

      this.fetch(options);
    },

    removeUserSessionData: function () {
      this.clear({silent: true});

      this._removeUserStorage();
      this._updateUserTokenInAjaxHeaders();
    },

    isAuthorized: function () {

      return !this.isNew();
    },

    updateUserStorage: function () {
      var userData = _.extend({'user-token': this._userToken}, this.activityInfo, this.toJSON());

      this._setUserStorage(userData);
    },

    _updateUserTokenInAjaxHeaders: function (token) {
      var headers = $.ajaxSettings.headers;

      if (token)
        headers['user-token'] = token;
      else
        delete headers['user-token'];
    },

    _verifyUserSession: function (userData, options) {
      options || (options = {});

      var success = options.success, error = options.error;

      options.success = _.bind(function (model, resp) {
        this._userToken = userData['user-token'];

        this.activityInfo = {
          lastLogin: userData.lastLogin,
          created: userData.created,
          updated: userData.updated
        };

        this.set(_.omit(userData, ['user-token', 'lastLogin', 'created', 'updated']), {silent: true});

        success && success(model, resp, options);
      }, this);

      options.error = _.bind(function (model, resp) {
        this.removeUserSessionData();

        error && error(model, resp, options);
      }, this);

      this.setUserRoles(options);
    },

    _setUserUrl: function (action) {

      this.url = USER_API_URL + action;
    },

    _getUserStorage: function () {
      var user = localStorage.getItem(userStorageName);

      return user ? JSON.parse(user) : null;
    },

    _setUserStorage: function (data) {

      _.isObject(data) && localStorage.setItem(userStorageName, JSON.stringify(data));
    },

    _removeUserStorage: function () {

      localStorage.removeItem(userStorageName);
    },

    clear: function () {
      this.activityInfo = null;
      this.roles = null;

      BackendlessBB.Model.prototype.clear.apply(this, arguments);
    },

    parse: function () {
    }
  });

  this.Model = Model;
  this.Collection = Collection;
  this.View = View;

  this.User = User;
};
(function(h){h.deparam=function(i,j){var d={},k={"true":!0,"false":!1,"null":null};h.each(i.replace(/\+/g," ").split("&"),function(i,l){var m;var a=l.split("="),c=decodeURIComponent(a[0]),g=d,f=0,b=c.split("]["),e=b.length-1;/\[/.test(b[0])&&/\]$/.test(b[e])?(b[e]=b[e].replace(/\]$/,""),b=b.shift().split("[").concat(b),e=b.length-1):e=0;if(2===a.length)if(a=decodeURIComponent(a[1]),j&&(a=a&&!isNaN(a)?+a:"undefined"===a?void 0:void 0!==k[a]?k[a]:a),e)for(;f<=e;f++)c=""===b[f]?g.length:b[f],m=g[c]=
f<e?g[c]||(b[f+1]&&isNaN(b[f+1])?{}:[]):a,g=m;else h.isArray(d[c])?d[c].push(a):d[c]=void 0!==d[c]?[d[c],a]:a;else c&&(d[c]=j?void 0:"")});return d}})(jQuery);
(function(h){h.deparam=function(i,j){var d={},k={"true":!0,"false":!1,"null":null};h.each(i.replace(/\+/g," ").split("&"),function(i,l){var m;var a=l.split("="),c=decodeURIComponent(a[0]),g=d,f=0,b=c.split("]["),e=b.length-1;/\[/.test(b[0])&&/\]$/.test(b[e])?(b[e]=b[e].replace(/\]$/,""),b=b.shift().split("[").concat(b),e=b.length-1):e=0;if(2===a.length)if(a=decodeURIComponent(a[1]),j&&(a=a&&!isNaN(a)?+a:"undefined"===a?void 0:void 0!==k[a]?k[a]:a),e)for(;f<=e;f++)c=""===b[f]?g.length:b[f],m=g[c]=
f<e?g[c]||(b[f+1]&&isNaN(b[f+1])?{}:[]):a,g=m;else h.isArray(d[c])?d[c].push(a):d[c]=void 0!==d[c]?[d[c],a]:a;else c&&(d[c]=j?void 0:"")});return d}})(jQuery);
/*

Copyright (C) 2011 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

// lib/handlebars/base.js

/*jshint eqnull:true*/

this.Handlebars = {};

(function(Handlebars) {

Handlebars.VERSION = "1.0.0-rc.3";
Handlebars.COMPILER_REVISION = 2;

Handlebars.REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '>= 1.0.0-rc.3'
};

Handlebars.helpers  = {};
Handlebars.partials = {};

Handlebars.registerHelper = function(name, fn, inverse) {
  if(inverse) { fn.not = inverse; }
  this.helpers[name] = fn;
};

Handlebars.registerPartial = function(name, str) {
  this.partials[name] = str;
};

Handlebars.registerHelper('helperMissing', function(arg) {
  if(arguments.length === 2) {
    return undefined;
  } else {
    throw new Error("Could not find property '" + arg + "'");
  }
});

var toString = Object.prototype.toString, functionType = "[object Function]";

Handlebars.registerHelper('blockHelperMissing', function(context, options) {
  var inverse = options.inverse || function() {}, fn = options.fn;


  var ret = "";
  var type = toString.call(context);

  if(type === functionType) { context = context.call(this); }

  if(context === true) {
    return fn(this);
  } else if(context === false || context == null) {
    return inverse(this);
  } else if(type === "[object Array]") {
    if(context.length > 0) {
      return Handlebars.helpers.each(context, options);
    } else {
      return inverse(this);
    }
  } else {
    return fn(context);
  }
});

Handlebars.K = function() {};

Handlebars.createFrame = Object.create || function(object) {
  Handlebars.K.prototype = object;
  var obj = new Handlebars.K();
  Handlebars.K.prototype = null;
  return obj;
};

Handlebars.logger = {
  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,

  methodMap: {0: 'debug', 1: 'info', 2: 'warn', 3: 'error'},

  // can be overridden in the host environment
  log: function(level, obj) {
    if (Handlebars.logger.level <= level) {
      var method = Handlebars.logger.methodMap[level];
      if (typeof console !== 'undefined' && console[method]) {
        console[method].call(console, obj);
      }
    }
  }
};

Handlebars.log = function(level, obj) { Handlebars.logger.log(level, obj); };

Handlebars.registerHelper('each', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  var i = 0, ret = "", data;

  if (options.data) {
    data = Handlebars.createFrame(options.data);
  }

  if(context && typeof context === 'object') {
    if(context instanceof Array){
      for(var j = context.length; i<j; i++) {
        if (data) { data.index = i; }
        ret = ret + fn(context[i], { data: data });
      }
    } else {
      for(var key in context) {
        if(context.hasOwnProperty(key)) {
          if(data) { data.key = key; }
          ret = ret + fn(context[key], {data: data});
          i++;
        }
      }
    }
  }

  if(i === 0){
    ret = inverse(this);
  }

  return ret;
});

Handlebars.registerHelper('if', function(context, options) {
  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if(!context || Handlebars.Utils.isEmpty(context)) {
    return options.inverse(this);
  } else {
    return options.fn(this);
  }
});

Handlebars.registerHelper('unless', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  options.fn = inverse;
  options.inverse = fn;

  return Handlebars.helpers['if'].call(this, context, options);
});

Handlebars.registerHelper('with', function(context, options) {
  return options.fn(context);
});

Handlebars.registerHelper('log', function(context, options) {
  var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
  Handlebars.log(level, context);
});

}(this.Handlebars));
;
// lib/handlebars/compiler/parser.js
/* Jison generated parser */
var handlebars = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"simpleInverse":6,"statements":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"OPEN_PARTIAL":24,"partialName":25,"params":26,"hash":27,"DATA":28,"param":29,"STRING":30,"INTEGER":31,"BOOLEAN":32,"hashSegments":33,"hashSegment":34,"ID":35,"EQUALS":36,"PARTIAL_NAME":37,"pathSegments":38,"SEP":39,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"OPEN_PARTIAL",28:"DATA",30:"STRING",31:"INTEGER",32:"BOOLEAN",35:"ID",36:"EQUALS",37:"PARTIAL_NAME",39:"SEP"},
productions_: [0,[3,2],[4,2],[4,3],[4,2],[4,1],[4,1],[4,0],[7,1],[7,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[6,2],[17,3],[17,2],[17,2],[17,1],[17,1],[26,2],[26,1],[29,1],[29,1],[29,1],[29,1],[29,1],[27,1],[33,2],[33,1],[34,3],[34,3],[34,3],[34,3],[34,3],[25,1],[21,1],[38,3],[38,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1];
break;
case 2: this.$ = new yy.ProgramNode([], $$[$0]);
break;
case 3: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]);
break;
case 4: this.$ = new yy.ProgramNode($$[$0-1], []);
break;
case 5: this.$ = new yy.ProgramNode($$[$0]);
break;
case 6: this.$ = new yy.ProgramNode([], []);
break;
case 7: this.$ = new yy.ProgramNode([]);
break;
case 8: this.$ = [$$[$0]];
break;
case 9: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 10: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]);
break;
case 11: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]);
break;
case 12: this.$ = $$[$0];
break;
case 13: this.$ = $$[$0];
break;
case 14: this.$ = new yy.ContentNode($$[$0]);
break;
case 15: this.$ = new yy.CommentNode($$[$0]);
break;
case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
break;
case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
break;
case 18: this.$ = $$[$0-1];
break;
case 19: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
break;
case 20: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true);
break;
case 21: this.$ = new yy.PartialNode($$[$0-1]);
break;
case 22: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]);
break;
case 23:
break;
case 24: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]];
break;
case 25: this.$ = [[$$[$0-1]].concat($$[$0]), null];
break;
case 26: this.$ = [[$$[$0-1]], $$[$0]];
break;
case 27: this.$ = [[$$[$0]], null];
break;
case 28: this.$ = [[new yy.DataNode($$[$0])], null];
break;
case 29: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 30: this.$ = [$$[$0]];
break;
case 31: this.$ = $$[$0];
break;
case 32: this.$ = new yy.StringNode($$[$0]);
break;
case 33: this.$ = new yy.IntegerNode($$[$0]);
break;
case 34: this.$ = new yy.BooleanNode($$[$0]);
break;
case 35: this.$ = new yy.DataNode($$[$0]);
break;
case 36: this.$ = new yy.HashNode($$[$0]);
break;
case 37: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 38: this.$ = [$$[$0]];
break;
case 39: this.$ = [$$[$0-2], $$[$0]];
break;
case 40: this.$ = [$$[$0-2], new yy.StringNode($$[$0])];
break;
case 41: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])];
break;
case 42: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])];
break;
case 43: this.$ = [$$[$0-2], new yy.DataNode($$[$0])];
break;
case 44: this.$ = new yy.PartialNameNode($$[$0]);
break;
case 45: this.$ = new yy.IdNode($$[$0]);
break;
case 46: $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 47: this.$ = [$$[$0]];
break;
}
},
table: [{3:1,4:2,5:[2,7],6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],22:[1,14],23:[1,15],24:[1,16]},{1:[3]},{5:[1,17]},{5:[2,6],7:18,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,6],22:[1,14],23:[1,15],24:[1,16]},{5:[2,5],6:20,8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,5],22:[1,14],23:[1,15],24:[1,16]},{17:23,18:[1,22],21:24,28:[1,25],35:[1,27],38:26},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8]},{4:28,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],24:[1,16]},{4:29,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],24:[1,16]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15]},{17:30,21:24,28:[1,25],35:[1,27],38:26},{17:31,21:24,28:[1,25],35:[1,27],38:26},{17:32,21:24,28:[1,25],35:[1,27],38:26},{25:33,37:[1,34]},{1:[2,1]},{5:[2,2],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,2],22:[1,14],23:[1,15],24:[1,16]},{17:23,21:24,28:[1,25],35:[1,27],38:26},{5:[2,4],7:35,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,4],22:[1,14],23:[1,15],24:[1,16]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9]},{5:[2,23],14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],24:[2,23]},{18:[1,36]},{18:[2,27],21:41,26:37,27:38,28:[1,45],29:39,30:[1,42],31:[1,43],32:[1,44],33:40,34:46,35:[1,47],38:26},{18:[2,28]},{18:[2,45],28:[2,45],30:[2,45],31:[2,45],32:[2,45],35:[2,45],39:[1,48]},{18:[2,47],28:[2,47],30:[2,47],31:[2,47],32:[2,47],35:[2,47],39:[2,47]},{10:49,20:[1,50]},{10:51,20:[1,50]},{18:[1,52]},{18:[1,53]},{18:[1,54]},{18:[1,55],21:56,35:[1,27],38:26},{18:[2,44],35:[2,44]},{5:[2,3],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,3],22:[1,14],23:[1,15],24:[1,16]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17]},{18:[2,25],21:41,27:57,28:[1,45],29:58,30:[1,42],31:[1,43],32:[1,44],33:40,34:46,35:[1,47],38:26},{18:[2,26]},{18:[2,30],28:[2,30],30:[2,30],31:[2,30],32:[2,30],35:[2,30]},{18:[2,36],34:59,35:[1,60]},{18:[2,31],28:[2,31],30:[2,31],31:[2,31],32:[2,31],35:[2,31]},{18:[2,32],28:[2,32],30:[2,32],31:[2,32],32:[2,32],35:[2,32]},{18:[2,33],28:[2,33],30:[2,33],31:[2,33],32:[2,33],35:[2,33]},{18:[2,34],28:[2,34],30:[2,34],31:[2,34],32:[2,34],35:[2,34]},{18:[2,35],28:[2,35],30:[2,35],31:[2,35],32:[2,35],35:[2,35]},{18:[2,38],35:[2,38]},{18:[2,47],28:[2,47],30:[2,47],31:[2,47],32:[2,47],35:[2,47],36:[1,61],39:[2,47]},{35:[1,62]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10]},{21:63,35:[1,27],38:26},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11]},{14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],24:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],24:[2,21]},{18:[1,64]},{18:[2,24]},{18:[2,29],28:[2,29],30:[2,29],31:[2,29],32:[2,29],35:[2,29]},{18:[2,37],35:[2,37]},{36:[1,61]},{21:65,28:[1,69],30:[1,66],31:[1,67],32:[1,68],35:[1,27],38:26},{18:[2,46],28:[2,46],30:[2,46],31:[2,46],32:[2,46],35:[2,46],39:[2,46]},{18:[1,70]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],24:[2,22]},{18:[2,39],35:[2,39]},{18:[2,40],35:[2,40]},{18:[2,41],35:[2,41]},{18:[2,42],35:[2,42]},{18:[2,43],35:[2,43]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18]}],
defaultActions: {17:[2,1],25:[2,28],38:[2,26],57:[2,24]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:
                                   if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1), this.begin("emu");
                                   if(yy_.yytext) return 14;

break;
case 1: return 14;
break;
case 2:
                                   if(yy_.yytext.slice(-1) !== "\\") this.popState();
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1);
                                   return 14;

break;
case 3: yy_.yytext = yy_.yytext.substr(0, yy_.yyleng-4); this.popState(); return 15;
break;
case 4: this.begin("par"); return 24;
break;
case 5: return 16;
break;
case 6: return 20;
break;
case 7: return 19;
break;
case 8: return 19;
break;
case 9: return 23;
break;
case 10: return 23;
break;
case 11: this.popState(); this.begin('com');
break;
case 12: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.popState(); return 15;
break;
case 13: return 22;
break;
case 14: return 36;
break;
case 15: return 35;
break;
case 16: return 35;
break;
case 17: return 39;
break;
case 18: /*ignore whitespace*/
break;
case 19: this.popState(); return 18;
break;
case 20: this.popState(); return 18;
break;
case 21: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 30;
break;
case 22: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\'/g,"'"); return 30;
break;
case 23: yy_.yytext = yy_.yytext.substr(1); return 28;
break;
case 24: return 32;
break;
case 25: return 32;
break;
case 26: return 31;
break;
case 27: return 35;
break;
case 28: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 35;
break;
case 29: return 'INVALID';
break;
case 30: /*ignore whitespace*/
break;
case 31: this.popState(); return 37;
break;
case 32: return 5;
break;
}
};
lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[} ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@[a-zA-Z]+)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:[0-9]+(?=[}\s]))/,/^(?:[a-zA-Z0-9_$-]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:\s+)/,/^(?:[a-zA-Z0-9_$-/]+)/,/^(?:$)/];
lexer.conditions = {"mu":{"rules":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32],"inclusive":false},"emu":{"rules":[2],"inclusive":false},"com":{"rules":[3],"inclusive":false},"par":{"rules":[30,31],"inclusive":false},"INITIAL":{"rules":[0,1,32],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();;
// lib/handlebars/compiler/base.js
Handlebars.Parser = handlebars;

Handlebars.parse = function(input) {

  // Just return if an already-compile AST was passed in.
  if(input.constructor === Handlebars.AST.ProgramNode) { return input; }

  Handlebars.Parser.yy = Handlebars.AST;
  return Handlebars.Parser.parse(input);
};

Handlebars.print = function(ast) {
  return new Handlebars.PrintVisitor().accept(ast);
};;
// lib/handlebars/compiler/ast.js
(function() {

  Handlebars.AST = {};

  Handlebars.AST.ProgramNode = function(statements, inverse) {
    this.type = "program";
    this.statements = statements;
    if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
  };

  Handlebars.AST.MustacheNode = function(rawParams, hash, unescaped) {
    this.type = "mustache";
    this.escaped = !unescaped;
    this.hash = hash;

    var id = this.id = rawParams[0];
    var params = this.params = rawParams.slice(1);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var eligibleHelper = this.eligibleHelper = id.isSimple;

    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    this.isHelper = eligibleHelper && (params.length || hash);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
  };

  Handlebars.AST.PartialNode = function(partialName, context) {
    this.type         = "partial";
    this.partialName  = partialName;
    this.context      = context;
  };

  var verifyMatch = function(open, close) {
    if(open.original !== close.original) {
      throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
    }
  };

  Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
    verifyMatch(mustache.id, close);
    this.type = "block";
    this.mustache = mustache;
    this.program  = program;
    this.inverse  = inverse;

    if (this.inverse && !this.program) {
      this.isInverse = true;
    }
  };

  Handlebars.AST.ContentNode = function(string) {
    this.type = "content";
    this.string = string;
  };

  Handlebars.AST.HashNode = function(pairs) {
    this.type = "hash";
    this.pairs = pairs;
  };

  Handlebars.AST.IdNode = function(parts) {
    this.type = "ID";
    this.original = parts.join(".");

    var dig = [], depth = 0;

    for(var i=0,l=parts.length; i<l; i++) {
      var part = parts[i];

      if (part === ".." || part === "." || part === "this") {
        if (dig.length > 0) { throw new Handlebars.Exception("Invalid path: " + this.original); }
        else if (part === "..") { depth++; }
        else { this.isScoped = true; }
      }
      else { dig.push(part); }
    }

    this.parts    = dig;
    this.string   = dig.join('.');
    this.depth    = depth;

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

    this.stringModeValue = this.string;
  };

  Handlebars.AST.PartialNameNode = function(name) {
    this.type = "PARTIAL_NAME";
    this.name = name;
  };

  Handlebars.AST.DataNode = function(id) {
    this.type = "DATA";
    this.id = id;
  };

  Handlebars.AST.StringNode = function(string) {
    this.type = "STRING";
    this.string = string;
    this.stringModeValue = string;
  };

  Handlebars.AST.IntegerNode = function(integer) {
    this.type = "INTEGER";
    this.integer = integer;
    this.stringModeValue = Number(integer);
  };

  Handlebars.AST.BooleanNode = function(bool) {
    this.type = "BOOLEAN";
    this.bool = bool;
    this.stringModeValue = bool === "true";
  };

  Handlebars.AST.CommentNode = function(comment) {
    this.type = "comment";
    this.comment = comment;
  };

})();;
// lib/handlebars/utils.js

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

Handlebars.Exception = function(message) {
  var tmp = Error.prototype.constructor.apply(this, arguments);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }
};
Handlebars.Exception.prototype = new Error();

// Build out our basic SafeString type
Handlebars.SafeString = function(string) {
  this.string = string;
};
Handlebars.SafeString.prototype.toString = function() {
  return this.string.toString();
};

(function() {
  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  var escapeChar = function(chr) {
    return escape[chr] || "&amp;";
  };

  Handlebars.Utils = {
    escapeExpression: function(string) {
      // don't escape SafeStrings, since they're already safe
      if (string instanceof Handlebars.SafeString) {
        return string.toString();
      } else if (string == null || string === false) {
        return "";
      }

      if(!possible.test(string)) { return string; }
      return string.replace(badChars, escapeChar);
    },

    isEmpty: function(value) {
      if (!value && value !== 0) {
        return true;
      } else if(Object.prototype.toString.call(value) === "[object Array]" && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
  };
})();;
// lib/handlebars/compiler/compiler.js

/*jshint eqnull:true*/
Handlebars.Compiler = function() {};
Handlebars.JavaScriptCompiler = function() {};

(function(Compiler, JavaScriptCompiler) {
  // the foundHelper register will disambiguate helper lookup from finding a
  // function in a context. This is necessary for mustache compatibility, which
  // requires that context functions in blocks are evaluated by blockHelperMissing,
  // and then proceed as if the resulting value was provided to blockHelperMissing.

  Compiler.prototype = {
    compiler: Compiler,

    disassemble: function() {
      var opcodes = this.opcodes, opcode, out = [], params, param;

      for (var i=0, l=opcodes.length; i<l; i++) {
        opcode = opcodes[i];

        if (opcode.opcode === 'DECLARE') {
          out.push("DECLARE " + opcode.name + "=" + opcode.value);
        } else {
          params = [];
          for (var j=0; j<opcode.args.length; j++) {
            param = opcode.args[j];
            if (typeof param === "string") {
              param = "\"" + param.replace("\n", "\\n") + "\"";
            }
            params.push(param);
          }
          out.push(opcode.opcode + " " + params.join(" "));
        }
      }

      return out.join("\n");
    },
    equals: function(other) {
      var len = this.opcodes.length;
      if (other.opcodes.length !== len) {
        return false;
      }

      for (var i = 0; i < len; i++) {
        var opcode = this.opcodes[i],
            otherOpcode = other.opcodes[i];
        if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {
          return false;
        }
        for (var j = 0; j < opcode.args.length; j++) {
          if (opcode.args[j] !== otherOpcode.args[j]) {
            return false;
          }
        }
      }
      return true;
    },

    guid: 0,

    compile: function(program, options) {
      this.children = [];
      this.depths = {list: []};
      this.options = options;

      // These changes will propagate to the other compiler components
      var knownHelpers = this.options.knownHelpers;
      this.options.knownHelpers = {
        'helperMissing': true,
        'blockHelperMissing': true,
        'each': true,
        'if': true,
        'unless': true,
        'with': true,
        'log': true
      };
      if (knownHelpers) {
        for (var name in knownHelpers) {
          this.options.knownHelpers[name] = knownHelpers[name];
        }
      }

      return this.program(program);
    },

    accept: function(node) {
      return this[node.type](node);
    },

    program: function(program) {
      var statements = program.statements, statement;
      this.opcodes = [];

      for(var i=0, l=statements.length; i<l; i++) {
        statement = statements[i];
        this[statement.type](statement);
      }
      this.isSimple = l === 1;

      this.depths.list = this.depths.list.sort(function(a, b) {
        return a - b;
      });

      return this;
    },

    compileProgram: function(program) {
      var result = new this.compiler().compile(program, this.options);
      var guid = this.guid++, depth;

      this.usePartial = this.usePartial || result.usePartial;

      this.children[guid] = result;

      for(var i=0, l=result.depths.list.length; i<l; i++) {
        depth = result.depths.list[i];

        if(depth < 2) { continue; }
        else { this.addDepth(depth - 1); }
      }

      return guid;
    },

    block: function(block) {
      var mustache = block.mustache,
          program = block.program,
          inverse = block.inverse;

      if (program) {
        program = this.compileProgram(program);
      }

      if (inverse) {
        inverse = this.compileProgram(inverse);
      }

      var type = this.classifyMustache(mustache);

      if (type === "helper") {
        this.helperMustache(mustache, program, inverse);
      } else if (type === "simple") {
        this.simpleMustache(mustache);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('emptyHash');
        this.opcode('blockValue');
      } else {
        this.ambiguousMustache(mustache, program, inverse);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('emptyHash');
        this.opcode('ambiguousBlockValue');
      }

      this.opcode('append');
    },

    hash: function(hash) {
      var pairs = hash.pairs, pair, val;

      this.opcode('pushHash');

      for(var i=0, l=pairs.length; i<l; i++) {
        pair = pairs[i];
        val  = pair[1];

        if (this.options.stringParams) {
          this.opcode('pushStringParam', val.stringModeValue, val.type);
        } else {
          this.accept(val);
        }

        this.opcode('assignToHash', pair[0]);
      }
      this.opcode('popHash');
    },

    partial: function(partial) {
      var partialName = partial.partialName;
      this.usePartial = true;

      if(partial.context) {
        this.ID(partial.context);
      } else {
        this.opcode('push', 'depth0');
      }

      this.opcode('invokePartial', partialName.name);
      this.opcode('append');
    },

    content: function(content) {
      this.opcode('appendContent', content.string);
    },

    mustache: function(mustache) {
      var options = this.options;
      var type = this.classifyMustache(mustache);

      if (type === "simple") {
        this.simpleMustache(mustache);
      } else if (type === "helper") {
        this.helperMustache(mustache);
      } else {
        this.ambiguousMustache(mustache);
      }

      if(mustache.escaped && !options.noEscape) {
        this.opcode('appendEscaped');
      } else {
        this.opcode('append');
      }
    },

    ambiguousMustache: function(mustache, program, inverse) {
      var id = mustache.id,
          name = id.parts[0],
          isBlock = program != null || inverse != null;

      this.opcode('getContext', id.depth);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      this.opcode('invokeAmbiguous', name, isBlock);
    },

    simpleMustache: function(mustache) {
      var id = mustache.id;

      if (id.type === 'DATA') {
        this.DATA(id);
      } else if (id.parts.length) {
        this.ID(id);
      } else {
        // Simplified ID for `this`
        this.addDepth(id.depth);
        this.opcode('getContext', id.depth);
        this.opcode('pushContext');
      }

      this.opcode('resolvePossibleLambda');
    },

    helperMustache: function(mustache, program, inverse) {
      var params = this.setupFullMustacheParams(mustache, program, inverse),
          name = mustache.id.parts[0];

      if (this.options.knownHelpers[name]) {
        this.opcode('invokeKnownHelper', params.length, name);
      } else if (this.knownHelpersOnly) {
        throw new Error("You specified knownHelpersOnly, but used the unknown helper " + name);
      } else {
        this.opcode('invokeHelper', params.length, name);
      }
    },

    ID: function(id) {
      this.addDepth(id.depth);
      this.opcode('getContext', id.depth);

      var name = id.parts[0];
      if (!name) {
        this.opcode('pushContext');
      } else {
        this.opcode('lookupOnContext', id.parts[0]);
      }

      for(var i=1, l=id.parts.length; i<l; i++) {
        this.opcode('lookup', id.parts[i]);
      }
    },

    DATA: function(data) {
      this.options.data = true;
      this.opcode('lookupData', data.id);
    },

    STRING: function(string) {
      this.opcode('pushString', string.string);
    },

    INTEGER: function(integer) {
      this.opcode('pushLiteral', integer.integer);
    },

    BOOLEAN: function(bool) {
      this.opcode('pushLiteral', bool.bool);
    },

    comment: function() {},

    // HELPERS
    opcode: function(name) {
      this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
    },

    declare: function(name, value) {
      this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
    },

    addDepth: function(depth) {
      if(isNaN(depth)) { throw new Error("EWOT"); }
      if(depth === 0) { return; }

      if(!this.depths[depth]) {
        this.depths[depth] = true;
        this.depths.list.push(depth);
      }
    },

    classifyMustache: function(mustache) {
      var isHelper   = mustache.isHelper;
      var isEligible = mustache.eligibleHelper;
      var options    = this.options;

      // if ambiguous, we can possibly resolve the ambiguity now
      if (isEligible && !isHelper) {
        var name = mustache.id.parts[0];

        if (options.knownHelpers[name]) {
          isHelper = true;
        } else if (options.knownHelpersOnly) {
          isEligible = false;
        }
      }

      if (isHelper) { return "helper"; }
      else if (isEligible) { return "ambiguous"; }
      else { return "simple"; }
    },

    pushParams: function(params) {
      var i = params.length, param;

      while(i--) {
        param = params[i];

        if(this.options.stringParams) {
          if(param.depth) {
            this.addDepth(param.depth);
          }

          this.opcode('getContext', param.depth || 0);
          this.opcode('pushStringParam', param.stringModeValue, param.type);
        } else {
          this[param.type](param);
        }
      }
    },

    setupMustacheParams: function(mustache) {
      var params = mustache.params;
      this.pushParams(params);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('emptyHash');
      }

      return params;
    },

    // this will replace setupMustacheParams when we're done
    setupFullMustacheParams: function(mustache, program, inverse) {
      var params = mustache.params;
      this.pushParams(params);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('emptyHash');
      }

      return params;
    }
  };

  var Literal = function(value) {
    this.value = value;
  };

  JavaScriptCompiler.prototype = {
    // PUBLIC API: You can override these methods in a subclass to provide
    // alternative compiled forms for name lookup and buffering semantics
    nameLookup: function(parent, name /* , type*/) {
      if (/^[0-9]+$/.test(name)) {
        return parent + "[" + name + "]";
      } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
        return parent + "." + name;
      }
      else {
        return parent + "['" + name + "']";
      }
    },

    appendToBuffer: function(string) {
      if (this.environment.isSimple) {
        return "return " + string + ";";
      } else {
        return {
          appendToBuffer: true,
          content: string,
          toString: function() { return "buffer += " + string + ";"; }
        };
      }
    },

    initializeBuffer: function() {
      return this.quotedString("");
    },

    namespace: "Handlebars",
    // END PUBLIC API

    compile: function(environment, options, context, asObject) {
      this.environment = environment;
      this.options = options || {};

      Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");

      this.name = this.environment.name;
      this.isChild = !!context;
      this.context = context || {
        programs: [],
        environments: [],
        aliases: { }
      };

      this.preamble();

      this.stackSlot = 0;
      this.stackVars = [];
      this.registers = { list: [] };
      this.compileStack = [];
      this.inlineStack = [];

      this.compileChildren(environment, options);

      var opcodes = environment.opcodes, opcode;

      this.i = 0;

      for(l=opcodes.length; this.i<l; this.i++) {
        opcode = opcodes[this.i];

        if(opcode.opcode === 'DECLARE') {
          this[opcode.name] = opcode.value;
        } else {
          this[opcode.opcode].apply(this, opcode.args);
        }
      }

      return this.createFunctionContext(asObject);
    },

    nextOpcode: function() {
      var opcodes = this.environment.opcodes;
      return opcodes[this.i + 1];
    },

    eat: function() {
      this.i = this.i + 1;
    },

    preamble: function() {
      var out = [];

      if (!this.isChild) {
        var namespace = this.namespace;
        var copies = "helpers = helpers || " + namespace + ".helpers;";
        if (this.environment.usePartial) { copies = copies + " partials = partials || " + namespace + ".partials;"; }
        if (this.options.data) { copies = copies + " data = data || {};"; }
        out.push(copies);
      } else {
        out.push('');
      }

      if (!this.environment.isSimple) {
        out.push(", buffer = " + this.initializeBuffer());
      } else {
        out.push("");
      }

      // track the last context pushed into place to allow skipping the
      // getContext opcode when it would be a noop
      this.lastContext = 0;
      this.source = out;
    },

    createFunctionContext: function(asObject) {
      var locals = this.stackVars.concat(this.registers.list);

      if(locals.length > 0) {
        this.source[1] = this.source[1] + ", " + locals.join(", ");
      }

      // Generate minimizer alias mappings
      if (!this.isChild) {
        for (var alias in this.context.aliases) {
          this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
        }
      }

      if (this.source[1]) {
        this.source[1] = "var " + this.source[1].substring(2) + ";";
      }

      // Merge children
      if (!this.isChild) {
        this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
      }

      if (!this.environment.isSimple) {
        this.source.push("return buffer;");
      }

      var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

      for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
        params.push("depth" + this.environment.depths.list[i]);
      }

      // Perform a second pass over the output to merge content when possible
      var source = this.mergeSource();

      if (!this.isChild) {
        var revision = Handlebars.COMPILER_REVISION,
            versions = Handlebars.REVISION_CHANGES[revision];
        source = "this.compilerInfo = ["+revision+",'"+versions+"'];\n"+source;
      }

      if (asObject) {
        params.push(source);

        return Function.apply(this, params);
      } else {
        var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + source + '}';
        Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
        return functionSource;
      }
    },
    mergeSource: function() {
      // WARN: We are not handling the case where buffer is still populated as the source should
      // not have buffer append operations as their final action.
      var source = '',
          buffer;
      for (var i = 0, len = this.source.length; i < len; i++) {
        var line = this.source[i];
        if (line.appendToBuffer) {
          if (buffer) {
            buffer = buffer + '\n    + ' + line.content;
          } else {
            buffer = line.content;
          }
        } else {
          if (buffer) {
            source += 'buffer += ' + buffer + ';\n  ';
            buffer = undefined;
          }
          source += line + '\n  ';
        }
      }
      return source;
    },

    // [blockValue]
    //
    // On stack, before: hash, inverse, program, value
    // On stack, after: return value of blockHelperMissing
    //
    // The purpose of this opcode is to take a block of the form
    // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
    // replace it on the stack with the result of properly
    // invoking blockHelperMissing.
    blockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      this.replaceStack(function(current) {
        params.splice(1, 0, current);
        return "blockHelperMissing.call(" + params.join(", ") + ")";
      });
    },

    // [ambiguousBlockValue]
    //
    // On stack, before: hash, inverse, program, value
    // Compiler value, before: lastHelper=value of last found helper, if any
    // On stack, after, if no lastHelper: same as [blockValue]
    // On stack, after, if lastHelper: value
    ambiguousBlockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      var current = this.topStack();
      params.splice(1, 0, current);

      // Use the options value generated from the invocation
      params[params.length-1] = 'options';

      this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
    },

    // [appendContent]
    //
    // On stack, before: ...
    // On stack, after: ...
    //
    // Appends the string value of `content` to the current buffer
    appendContent: function(content) {
      this.source.push(this.appendToBuffer(this.quotedString(content)));
    },

    // [append]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Coerces `value` to a String and appends it to the current buffer.
    //
    // If `value` is truthy, or 0, it is coerced into a string and appended
    // Otherwise, the empty string is appended
    append: function() {
      // Force anything that is inlined onto the stack so we don't have duplication
      // when we examine local
      this.flushInline();
      var local = this.popStack();
      this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
      if (this.environment.isSimple) {
        this.source.push("else { " + this.appendToBuffer("''") + " }");
      }
    },

    // [appendEscaped]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Escape `value` and append it to the buffer
    appendEscaped: function() {
      this.context.aliases.escapeExpression = 'this.escapeExpression';

      this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
    },

    // [getContext]
    //
    // On stack, before: ...
    // On stack, after: ...
    // Compiler value, after: lastContext=depth
    //
    // Set the value of the `lastContext` compiler value to the depth
    getContext: function(depth) {
      if(this.lastContext !== depth) {
        this.lastContext = depth;
      }
    },

    // [lookupOnContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext[name], ...
    //
    // Looks up the value of `name` on the current context and pushes
    // it onto the stack.
    lookupOnContext: function(name) {
      this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));
    },

    // [pushContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext, ...
    //
    // Pushes the value of the current context onto the stack.
    pushContext: function() {
      this.pushStackLiteral('depth' + this.lastContext);
    },

    // [resolvePossibleLambda]
    //
    // On stack, before: value, ...
    // On stack, after: resolved value, ...
    //
    // If the `value` is a lambda, replace it on the stack by
    // the return value of the lambda
    resolvePossibleLambda: function() {
      this.context.aliases.functionType = '"function"';

      this.replaceStack(function(current) {
        return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
      });
    },

    // [lookup]
    //
    // On stack, before: value, ...
    // On stack, after: value[name], ...
    //
    // Replace the value on the stack with the result of looking
    // up `name` on `value`
    lookup: function(name) {
      this.replaceStack(function(current) {
        return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
      });
    },

    // [lookupData]
    //
    // On stack, before: ...
    // On stack, after: data[id], ...
    //
    // Push the result of looking up `id` on the current data
    lookupData: function(id) {
      this.push(this.nameLookup('data', id, 'data'));
    },

    // [pushStringParam]
    //
    // On stack, before: ...
    // On stack, after: string, currentContext, ...
    //
    // This opcode is designed for use in string mode, which
    // provides the string value of a parameter along with its
    // depth rather than resolving it immediately.
    pushStringParam: function(string, type) {
      this.pushStackLiteral('depth' + this.lastContext);

      this.pushString(type);

      if (typeof string === 'string') {
        this.pushString(string);
      } else {
        this.pushStackLiteral(string);
      }
    },

    emptyHash: function() {
      this.pushStackLiteral('{}');

      if (this.options.stringParams) {
        this.register('hashTypes', '{}');
      }
    },
    pushHash: function() {
      this.hash = {values: [], types: []};
    },
    popHash: function() {
      var hash = this.hash;
      this.hash = undefined;

      if (this.options.stringParams) {
        this.register('hashTypes', '{' + hash.types.join(',') + '}');
      }
      this.push('{\n    ' + hash.values.join(',\n    ') + '\n  }');
    },

    // [pushString]
    //
    // On stack, before: ...
    // On stack, after: quotedString(string), ...
    //
    // Push a quoted version of `string` onto the stack
    pushString: function(string) {
      this.pushStackLiteral(this.quotedString(string));
    },

    // [push]
    //
    // On stack, before: ...
    // On stack, after: expr, ...
    //
    // Push an expression onto the stack
    push: function(expr) {
      this.inlineStack.push(expr);
      return expr;
    },

    // [pushLiteral]
    //
    // On stack, before: ...
    // On stack, after: value, ...
    //
    // Pushes a value onto the stack. This operation prevents
    // the compiler from creating a temporary variable to hold
    // it.
    pushLiteral: function(value) {
      this.pushStackLiteral(value);
    },

    // [pushProgram]
    //
    // On stack, before: ...
    // On stack, after: program(guid), ...
    //
    // Push a program expression onto the stack. This takes
    // a compile-time guid and converts it into a runtime-accessible
    // expression.
    pushProgram: function(guid) {
      if (guid != null) {
        this.pushStackLiteral(this.programExpression(guid));
      } else {
        this.pushStackLiteral(null);
      }
    },

    // [invokeHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // Pops off the helper's parameters, invokes the helper,
    // and pushes the helper's return value onto the stack.
    //
    // If the helper is not found, `helperMissing` is called.
    invokeHelper: function(paramSize, name) {
      this.context.aliases.helperMissing = 'helpers.helperMissing';

      var helper = this.lastHelper = this.setupHelper(paramSize, name, true);

      this.push(helper.name);
      this.replaceStack(function(name) {
        return name + ' ? ' + name + '.call(' +
            helper.callParams + ") " + ": helperMissing.call(" +
            helper.helperMissingParams + ")";
      });
    },

    // [invokeKnownHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // This operation is used when the helper is known to exist,
    // so a `helperMissing` fallback is not required.
    invokeKnownHelper: function(paramSize, name) {
      var helper = this.setupHelper(paramSize, name);
      this.push(helper.name + ".call(" + helper.callParams + ")");
    },

    // [invokeAmbiguous]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of disambiguation
    //
    // This operation is used when an expression like `{{foo}}`
    // is provided, but we don't know at compile-time whether it
    // is a helper or a path.
    //
    // This operation emits more code than the other options,
    // and can be avoided by passing the `knownHelpers` and
    // `knownHelpersOnly` flags at compile-time.
    invokeAmbiguous: function(name, helperCall) {
      this.context.aliases.functionType = '"function"';

      this.pushStackLiteral('{}');    // Hash value
      var helper = this.setupHelper(0, name, helperCall);

      var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

      var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
      var nextStack = this.nextStack();

      this.source.push('if (' + nextStack + ' = ' + helperName + ') { ' + nextStack + ' = ' + nextStack + '.call(' + helper.callParams + '); }');
      this.source.push('else { ' + nextStack + ' = ' + nonHelper + '; ' + nextStack + ' = typeof ' + nextStack + ' === functionType ? ' + nextStack + '.apply(depth0) : ' + nextStack + '; }');
    },

    // [invokePartial]
    //
    // On stack, before: context, ...
    // On stack after: result of partial invocation
    //
    // This operation pops off a context, invokes a partial with that context,
    // and pushes the result of the invocation back.
    invokePartial: function(name) {
      var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

      if (this.options.data) {
        params.push("data");
      }

      this.context.aliases.self = "this";
      this.push("self.invokePartial(" + params.join(", ") + ")");
    },

    // [assignToHash]
    //
    // On stack, before: value, hash, ...
    // On stack, after: hash, ...
    //
    // Pops a value and hash off the stack, assigns `hash[key] = value`
    // and pushes the hash back onto the stack.
    assignToHash: function(key) {
      var value = this.popStack(),
          type;

      if (this.options.stringParams) {
        type = this.popStack();
        this.popStack();
      }

      var hash = this.hash;
      if (type) {
        hash.types.push("'" + key + "': " + type);
      }
      hash.values.push("'" + key + "': (" + value + ")");
    },

    // HELPERS

    compiler: JavaScriptCompiler,

    compileChildren: function(environment, options) {
      var children = environment.children, child, compiler;

      for(var i=0, l=children.length; i<l; i++) {
        child = children[i];
        compiler = new this.compiler();

        var index = this.matchExistingProgram(child);

        if (index == null) {
          this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
          index = this.context.programs.length;
          child.index = index;
          child.name = 'program' + index;
          this.context.programs[index] = compiler.compile(child, options, this.context);
          this.context.environments[index] = child;
        } else {
          child.index = index;
          child.name = 'program' + index;
        }
      }
    },
    matchExistingProgram: function(child) {
      for (var i = 0, len = this.context.environments.length; i < len; i++) {
        var environment = this.context.environments[i];
        if (environment && environment.equals(child)) {
          return i;
        }
      }
    },

    programExpression: function(guid) {
      this.context.aliases.self = "this";

      if(guid == null) {
        return "self.noop";
      }

      var child = this.environment.children[guid],
          depths = child.depths.list, depth;

      var programParams = [child.index, child.name, "data"];

      for(var i=0, l = depths.length; i<l; i++) {
        depth = depths[i];

        if(depth === 1) { programParams.push("depth0"); }
        else { programParams.push("depth" + (depth - 1)); }
      }

      if(depths.length === 0) {
        return "self.program(" + programParams.join(", ") + ")";
      } else {
        programParams.shift();
        return "self.programWithDepth(" + programParams.join(", ") + ")";
      }
    },

    register: function(name, val) {
      this.useRegister(name);
      this.source.push(name + " = " + val + ";");
    },

    useRegister: function(name) {
      if(!this.registers[name]) {
        this.registers[name] = true;
        this.registers.list.push(name);
      }
    },

    pushStackLiteral: function(item) {
      return this.push(new Literal(item));
    },

    pushStack: function(item) {
      this.flushInline();

      var stack = this.incrStack();
      if (item) {
        this.source.push(stack + " = " + item + ";");
      }
      this.compileStack.push(stack);
      return stack;
    },

    replaceStack: function(callback) {
      var prefix = '',
          inline = this.isInline(),
          stack;

      // If we are currently inline then we want to merge the inline statement into the
      // replacement statement via ','
      if (inline) {
        var top = this.popStack(true);

        if (top instanceof Literal) {
          // Literals do not need to be inlined
          stack = top.value;
        } else {
          // Get or create the current stack name for use by the inline
          var name = this.stackSlot ? this.topStackName() : this.incrStack();

          prefix = '(' + this.push(name) + ' = ' + top + '),';
          stack = this.topStack();
        }
      } else {
        stack = this.topStack();
      }

      var item = callback.call(this, stack);

      if (inline) {
        if (this.inlineStack.length || this.compileStack.length) {
          this.popStack();
        }
        this.push('(' + prefix + item + ')');
      } else {
        // Prevent modification of the context depth variable. Through replaceStack
        if (!/^stack/.test(stack)) {
          stack = this.nextStack();
        }

        this.source.push(stack + " = (" + prefix + item + ");");
      }
      return stack;
    },

    nextStack: function() {
      return this.pushStack();
    },

    incrStack: function() {
      this.stackSlot++;
      if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
      return this.topStackName();
    },
    topStackName: function() {
      return "stack" + this.stackSlot;
    },
    flushInline: function() {
      var inlineStack = this.inlineStack;
      if (inlineStack.length) {
        this.inlineStack = [];
        for (var i = 0, len = inlineStack.length; i < len; i++) {
          var entry = inlineStack[i];
          if (entry instanceof Literal) {
            this.compileStack.push(entry);
          } else {
            this.pushStack(entry);
          }
        }
      }
    },
    isInline: function() {
      return this.inlineStack.length;
    },

    popStack: function(wrapped) {
      var inline = this.isInline(),
          item = (inline ? this.inlineStack : this.compileStack).pop();

      if (!wrapped && (item instanceof Literal)) {
        return item.value;
      } else {
        if (!inline) {
          this.stackSlot--;
        }
        return item;
      }
    },

    topStack: function(wrapped) {
      var stack = (this.isInline() ? this.inlineStack : this.compileStack),
          item = stack[stack.length - 1];

      if (!wrapped && (item instanceof Literal)) {
        return item.value;
      } else {
        return item;
      }
    },

    quotedString: function(str) {
      return '"' + str
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r') + '"';
    },

    setupHelper: function(paramSize, name, missingParams) {
      var params = [];
      this.setupParams(paramSize, params, missingParams);
      var foundHelper = this.nameLookup('helpers', name, 'helper');

      return {
        params: params,
        name: foundHelper,
        callParams: ["depth0"].concat(params).join(", "),
        helperMissingParams: missingParams && ["depth0", this.quotedString(name)].concat(params).join(", ")
      };
    },

    // the params and contexts arguments are passed in arrays
    // to fill in
    setupParams: function(paramSize, params, useRegister) {
      var options = [], contexts = [], types = [], param, inverse, program;

      options.push("hash:" + this.popStack());

      inverse = this.popStack();
      program = this.popStack();

      // Avoid setting fn and inverse if neither are set. This allows
      // helpers to do a check for `if (options.fn)`
      if (program || inverse) {
        if (!program) {
          this.context.aliases.self = "this";
          program = "self.noop";
        }

        if (!inverse) {
         this.context.aliases.self = "this";
          inverse = "self.noop";
        }

        options.push("inverse:" + inverse);
        options.push("fn:" + program);
      }

      for(var i=0; i<paramSize; i++) {
        param = this.popStack();
        params.push(param);

        if(this.options.stringParams) {
          types.push(this.popStack());
          contexts.push(this.popStack());
        }
      }

      if (this.options.stringParams) {
        options.push("contexts:[" + contexts.join(",") + "]");
        options.push("types:[" + types.join(",") + "]");
        options.push("hashTypes:hashTypes");
      }

      if(this.options.data) {
        options.push("data:data");
      }

      options = "{" + options.join(",") + "}";
      if (useRegister) {
        this.register('options', options);
        params.push('options');
      } else {
        params.push(options);
      }
      return params.join(", ");
    }
  };

  var reservedWords = (
    "break else new var" +
    " case finally return void" +
    " catch for switch while" +
    " continue function this with" +
    " default if throw" +
    " delete in try" +
    " do instanceof typeof" +
    " abstract enum int short" +
    " boolean export interface static" +
    " byte extends long super" +
    " char final native synchronized" +
    " class float package throws" +
    " const goto private transient" +
    " debugger implements protected volatile" +
    " double import public let yield"
  ).split(" ");

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for(var i=0, l=reservedWords.length; i<l; i++) {
    compilerWords[reservedWords[i]] = true;
  }

  JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
    if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name)) {
      return true;
    }
    return false;
  };

})(Handlebars.Compiler, Handlebars.JavaScriptCompiler);

Handlebars.precompile = function(input, options) {
  if (!input || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  var ast = Handlebars.parse(input);
  var environment = new Handlebars.Compiler().compile(ast, options);
  return new Handlebars.JavaScriptCompiler().compile(environment, options);
};

Handlebars.compile = function(input, options) {
  if (!input || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  var compiled;
  function compile() {
    var ast = Handlebars.parse(input);
    var environment = new Handlebars.Compiler().compile(ast, options);
    var templateSpec = new Handlebars.JavaScriptCompiler().compile(environment, options, undefined, true);
    return Handlebars.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  return function(context, options) {
    if (!compiled) {
      compiled = compile();
    }
    return compiled.call(this, context, options);
  };
};
;
// lib/handlebars/runtime.js
Handlebars.VM = {
  template: function(templateSpec) {
    // Just add water
    var container = {
      escapeExpression: Handlebars.Utils.escapeExpression,
      invokePartial: Handlebars.VM.invokePartial,
      programs: [],
      program: function(i, fn, data) {
        var programWrapper = this.programs[i];
        if(data) {
          return Handlebars.VM.program(fn, data);
        } else if(programWrapper) {
          return programWrapper;
        } else {
          programWrapper = this.programs[i] = Handlebars.VM.program(fn);
          return programWrapper;
        }
      },
      programWithDepth: Handlebars.VM.programWithDepth,
      noop: Handlebars.VM.noop,
      compilerInfo: null
    };

    return function(context, options) {
      options = options || {};
      var result = templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);

      var compilerInfo = container.compilerInfo || [],
          compilerRevision = compilerInfo[0] || 1,
          currentRevision = Handlebars.COMPILER_REVISION;

      if (compilerRevision !== currentRevision) {
        if (compilerRevision < currentRevision) {
          var runtimeVersions = Handlebars.REVISION_CHANGES[currentRevision],
              compilerVersions = Handlebars.REVISION_CHANGES[compilerRevision];
          throw "Template was precompiled with an older version of Handlebars than the current runtime. "+
                "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").";
        } else {
          // Use the embedded version info since the runtime doesn't know about this revision yet
          throw "Template was precompiled with a newer version of Handlebars than the current runtime. "+
                "Please update your runtime to a newer version ("+compilerInfo[1]+").";
        }
      }

      return result;
    };
  },

  programWithDepth: function(fn, data, $depth) {
    var args = Array.prototype.slice.call(arguments, 2);

    return function(context, options) {
      options = options || {};

      return fn.apply(this, [context, options.data || data].concat(args));
    };
  },
  program: function(fn, data) {
    return function(context, options) {
      options = options || {};

      return fn(context, options.data || data);
    };
  },
  noop: function() { return ""; },
  invokePartial: function(partial, name, context, helpers, partials, data) {
    var options = { helpers: helpers, partials: partials, data: data };

    if(partial === undefined) {
      throw new Handlebars.Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    } else if (!Handlebars.compile) {
      throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    } else {
      partials[name] = Handlebars.compile(partial, {data: data !== undefined});
      return partials[name](context, options);
    }
  }
};

Handlebars.template = Handlebars.VM.template;
;
/*
 QuoJS 2.0.3
 http://quojs.tapquo.com

 Copyright (C) 2011,2012 Javi Jiménez Villar (@soyjavi)

 Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
 */


(function(){var a;a=function(){var e,l,h;l=[];h=function(i,f){i=i||l;i.__proto__=h.prototype;i.selector=f||"";return i};e=function(i){var f;if(i){f=e.getDomainSelector(i);return h(f,i)}else return h()};e.extend=function(i){Array.prototype.slice.call(arguments,1).forEach(function(f){var j,k;k=[];for(j in f)k.push(i[j]=f[j]);return k});return i};h.prototype=e.fn={};return e}();window.Quo=a;"$$"in window||(window.$$=a)}).call(this);(function(){(function(a){var e,l,h,i;e=[];l=Object.prototype;a.toType=function(f){return l.toString.call(f).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()};a.isOwnProperty=function(f,j){return l.hasOwnProperty.call(f,j)};a.getDomainSelector=function(f){var j,k,n;j=null;k=[1,9,11];n=a.toType(f);if(n==="array")j=h(f);else if(n==="string")j=a.query(document,f);else if(k.indexOf(f.nodeType)>=0||f===window)j=[f];return j};a.map=function(f,j){var k,n,o;o=[];k=void 0;if(a.toType(f)==="array")for(k=0;k<f.length;){n=
    j(f[k],k);n!=null&&o.push(n);k++}else for(k in f){n=j(f[k],k);n!=null&&o.push(n)}return i(o)};a.each=function(f,j){var k;k=void 0;if(a.toType(f)==="array")for(k=0;k<f.length;){if(j.call(f[k],k,f[k])===false)break;k++}else for(k in f)if(j.call(f[k],k,f[k])===false)break;return f};a.mix=function(){var f,j,k,n,o;k={};f=0;for(n=arguments.length;f<n;){j=arguments[f];for(o in j)if(a.isOwnProperty(j,o)&&j[o]!==undefined)k[o]=j[o];f++}return k};a.fn.map=function(f){return a.map(this,function(j,k){return f.call(j,
    k,j)})};a.fn.instance=function(f){return this.map(function(){return this[f]})};a.fn.filter=function(f){return a([].filter.call(this,function(j){return j.parentNode&&a.query(j.parentNode,f).indexOf(j)>=0}))};a.fn.forEach=e.forEach;a.fn.indexOf=e.indexOf;h=function(f){return f.filter(function(j){return j!==void 0&&j!==null})};i=function(f){return f.length>0?[].concat.apply([],f):f}})(Quo)}).call(this);(function(){(function(a){a.fn.attr=function(e,l){return a.toType(e)==="string"&&l===void 0?this[0].getAttribute(e):this.each(function(){return this.setAttribute(e,l)})};a.fn.data=function(e,l){return this.attr("data-"+e,l)};a.fn.val=function(e){return a.toType(e)==="string"?this.each(function(){return this.value=e}):this.length>0?this[0].value:null};a.fn.show=function(){return this.style("display","block")};a.fn.hide=function(){return this.style("display","none")};a.fn.height=function(){return this.offset().height};
    a.fn.width=function(){return this.offset().width};a.fn.offset=function(){var e;e=this[0].getBoundingClientRect();return{left:e.left+window.pageXOffset,top:e.top+window.pageYOffset,width:e.width,height:e.height}};a.fn.remove=function(){return this.each(function(){if(this.parentNode!=null)return this.parentNode.removeChild(this)})}})(Quo)}).call(this);(function(){(function(a){var e,l,h,i,f,j,k;h=null;e=/WebKit\/([\d.]+)/;l={Android:/(Android)\s+([\d.]+)/,ipad:/(iPad).*OS\s([\d_]+)/,iphone:/(iPhone\sOS)\s([\d_]+)/,blackberry:/(BlackBerry).*Version\/([\d.]+)/,webos:/(webOS|hpwOS)[\s\/]([\d.]+)/};a.isMobile=function(){h=h||f();return h.isMobile};a.environment=function(){return h=h||f()};a.isOnline=function(){return navigator.onLine};f=function(){var n,o;o=navigator.userAgent;n={};n.browser=i(o);n.os=j(o);n.isMobile=n.os?true:false;n.screen=k();return n};
    i=function(n){var o;return(o=n.match(e))?o[0]:n};j=function(n){var o,q,r;o=void 0;for(q in l)if(r=n.match(l[q])){o={name:q==="iphone"||q==="ipad"?"ios":q,version:r[2].replace("_",".")};break}return o};k=function(){return{width:window.innerWidth,height:window.innerHeight}}})(Quo)}).call(this);(function(){(function(a){a.fn.text=function(e){return e?this.each(function(){return this.textContent=e}):this[0].textContent};a.fn.html=function(e){var l;l=a.toType(e);return l==="string"||l==="number"?this.each(function(){return this.innerHTML=e}):this[0].innerHTML};a.fn.append=function(e){return this.each(function(){var l;if(a.toType(e)==="string"){if(e){l=document.createElement("div");l.innerHTML=e;return this.appendChild(l.firstChild)}}else return this.insertBefore(e)})};a.fn.prepend=function(e){return this.each(function(){var l;
    if(a.toType(e)==="string")return this.innerHTML=e+this.innerHTML;else{l=this.parentNode;return l.insertBefore(e,l.firstChild)}})};a.fn.empty=function(){return this.each(function(){this.innerHTML=null})}})(Quo)}).call(this);(function(){(function(a){var e,l;a.query=function(h,i){var f;f=h.querySelectorAll(i);return f=Array.prototype.slice.call(f)};a.fn.find=function(h){var i;i=void 0;i=this.length===1?Quo.query(this[0],h):this.map(function(){return Quo.query(this,h)});return a(i)};a.fn.parent=function(h){var i;i=h?l(this):this.instance("parentNode");return e(i,h)};a.fn.siblings=function(h){var i;i=this.map(function(f,j){return Array.prototype.slice.call(j.parentNode.children).filter(function(k){return k!==j})});return e(i,
    h)};a.fn.children=function(h){var i;i=this.map(function(){return Array.prototype.slice.call(this.children)});return e(i,h)};a.fn.get=function(h){return h===undefined?this:this[h]};a.fn.first=function(){return a(this[0])};a.fn.last=function(){return a(this[this.length-1])};a.fn.closest=function(h,i){var f,j;j=this[0];f=a(h);for(f.length||(j=null);j&&f.indexOf(j)<0;)j=j!==i&&j!==document&&j.parentNode;return a(j)};a.fn.each=function(h){this.forEach(function(i,f){return h.call(i,f,i)});return this};
    l=function(h){var i;for(i=[];h.length>0;)h=a.map(h,function(f){if((f=f.parentNode)&&f!==document&&i.indexOf(f)<0){i.push(f);return f}});return i};e=function(h,i){return i===undefined?a(h):a(h).filter(i)}})(Quo)}).call(this);(function(){(function(a){var e,l;a.fn.addClass=function(h){return this.each(function(){if(!l(h,this.className)){this.className+=" "+h;return this.className=this.className.trim()}})};a.fn.removeClass=function(h){return this.each(function(){if(l(h,this.className))return this.className=this.className.replace(h," ").replace(/\s+/g," ").trim()})};a.fn.toggleClass=function(h){return this.each(function(){if(l(h,this.className))return this.className=this.className.replace(h," ");else{this.className+=" "+
    h;return this.className=this.className.trim()}})};a.fn.hasClass=function(h){return l(h,this[0].className)};a.fn.style=function(h,i){return i?this.each(function(){return this.style[h]=i}):this[0].style[h]||e(this[0],h)};l=function(h,i){return i.split(/\s+/g).indexOf(h)>=0};e=function(h,i){return document.defaultView.getComputedStyle(h,"")[i]}})(Quo)}).call(this);(function(){(function(a){var e,l,h,i,f,j,k,n,o,q,r;e={TYPE:"GET",MIME:"json"};h={script:"text/javascript, application/javascript",json:"application/json",xml:"application/xml, text/xml",html:"text/html",text:"text/plain"};l=0;a.ajaxSettings={type:e.TYPE,async:true,success:{},error:{},context:null,dataType:e.MIME,headers:{},xhr:function(){return new window.XMLHttpRequest},crossDomain:false,timeout:0};a.ajax=function(d){var c,b,g;b=a.mix(a.ajaxSettings,d);if(b.type===e.TYPE)b.url+=a.serializeParameters(b.data,
    "?");else b.data=a.serializeParameters(b.data);if(i(b.url))return a.jsonp(b);g=b.xhr();g.onreadystatechange=function(){if(g.readyState===4){clearTimeout(c);return o(g,b)}};g.open(b.type,b.url,b.async);n(g,b);if(b.timeout>0)c=setTimeout(function(){return r(g,b)},b.timeout);g.send(b.data);return b.async?g:f(g,b)};a.jsonp=function(d){var c,b,g,m;if(d.async){b="jsonp"+ ++l;g=document.createElement("script");m={abort:function(){a(g).remove();if(b in window)return window[b]={}}};c=void 0;window[b]=function(p){clearTimeout(c);
    a(g).remove();delete window[b];return q(p,m,d)};g.src=d.url.replace(/=\?/,"="+b);a("head").append(g);if(d.timeout>0)c=setTimeout(function(){return r(m,d)},d.timeout);return m}else return console.error("QuoJS.ajax: Unable to make jsonp synchronous call.")};a.get=function(d,c,b,g){return a.ajax({url:d,data:c,success:b,dataType:g})};a.post=function(d,c,b,g){return k("POST",d,c,b,g)};a.put=function(d,c,b,g){return k("PUT",d,c,b,g)};a["delete"]=function(d,c,b,g){return k("DELETE",d,c,b,g)};a.json=function(d,
c,b){return a.ajax({url:d,data:c,success:b,dataType:e.MIME})};a.serializeParameters=function(d,c){var b,g;if(c==null)c="";g=c;for(b in d)if(d.hasOwnProperty(b)){if(g!==c)g+="&";g+=b+"="+d[b]}return g===c?"":g};o=function(d,c){if(d.status===200||d.status===0)c.async&&q(f(d,c),d,c);else j("QuoJS.ajax: Unsuccesful request",d,c)};q=function(d,c,b){b.success.call(b.context,d,c)};j=function(d,c,b){b.error.call(b.context,d,c,b)};n=function(d,c){var b;if(c.contentType)c.headers["Content-Type"]=c.contentType;
    if(c.dataType)c.headers.Accept=h[c.dataType];for(b in c.headers)d.setRequestHeader(b,c.headers[b])};r=function(d,c){d.onreadystatechange={};d.abort();j("QuoJS.ajax: Timeout exceeded",d,c)};k=function(d,c,b,g,m){return a.ajax({type:d,url:c,data:b,success:g,dataType:m,contentType:"application/x-www-form-urlencoded"})};f=function(d,c){var b;if(b=d.responseText)if(c.dataType===e.MIME)try{b=JSON.parse(b)}catch(g){b=g;j("QuoJS.ajax: Parse Error",d,c)}else if(c.dataType==="xml")b=d.responseXML;return b};
    i=function(d){return/=\?/.test(d)}})(Quo)}).call(this);(function(){(function(a){var e,l;e=/complete|loaded|interactive/;l={touch:"touchstart",tap:"tap"};["touch","tap"].forEach(function(h){a.fn[h]=function(i){return a(document.body).delegate(this.selector,l[h],i)};return this});a.fn.on=function(h,i,f){return i===undefined||a.toType(i)==="function"?this.bind(h,i):this.delegate(i,h,f)};a.fn.off=function(h,i,f){return i===undefined||a.toType(i)==="function"?this.unbind(h,i):this.undelegate(i,h,f)};a.fn.ready=function(h){e.test(document.readyState)?h(a):
    a.fn.addEvent(document,"DOMContentLoaded",function(){return h(a)});return this}})(Quo)}).call(this);(function(){(function(a){var e,l,h,i,f,j,k,n,o,q,r;e=1;i={};h={preventDefault:"isDefaultPrevented",stopImmediatePropagation:"isImmediatePropagationStopped",stopPropagation:"isPropagationStopped"};l={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",tap:"click",doubletap:"dblclick",orientationchange:"resize"};a.Event=function(d,c){var b;b=document.createEvent("Events");b.initEvent(d,true,true,null,null,null,null,null,null,null,null,null,null,null,null);if(c){b.pageX=c.x1;b.pageY=c.y1;
    b.toX=c.x2;b.toY=c.y2;b.fingers=c.fingers}return b};a.fn.bind=function(d,c){return this.each(function(){q(this,d,c)})};a.fn.unbind=function(d,c){return this.each(function(){r(this,d,c)})};a.fn.delegate=function(d,c,b){return this.each(function(g,m){q(m,c,b,d,function(p){return function(s){var u,t;if(t=a(s.target).closest(d,m).get(0)){u=a.extend(f(s),{currentTarget:t,liveFired:m});return p.apply(t,[u].concat([].slice.call(arguments,1)))}}})})};a.fn.undelegate=function(d,c,b){return this.each(function(){r(this,
    c,b,d)})};a.fn.trigger=function(d,c){if(a.toType(d)==="string")d=a.Event(d,c);return this.each(function(){this.dispatchEvent(d)})};a.fn.addEvent=function(d,c,b){return d.addEventListener?d.addEventListener(c,b,false):d.attachEvent?d.attachEvent("on"+c,b):d["on"+c]=b};a.fn.removeEvent=function(d,c,b){return d.removeEventListener?d.removeEventListener(c,b,false):d.detachEvent?d.detachEvent("on"+c,b):d["on"+c]=null};q=function(d,c,b,g,m){var p;c=k(c);p=o(d);p=i[p]||(i[p]=[]);m=m&&m(b,c);c={event:c,callback:b,
    selector:g,proxy:j(m,b,d),delegate:m,index:p.length};p.push(c);return a.fn.addEvent(d,c.event,c.proxy)};r=function(d,c,b,g){var m;c=k(c);m=o(d);return n(m,c,b,g).forEach(function(p){delete i[m][p.index];return a.fn.removeEvent(d,p.event,p.proxy)})};o=function(d){return d._id||(d._id=e++)};k=function(d){return(a.isMobile()?d:l[d])||d};j=function(d,c,b){c=d||c;return function(g){var m;m=c.apply(b,[g].concat(g.data));m===false&&g.preventDefault();return m}};n=function(d,c,b,g){return(i[d]||[]).filter(function(m){return m&&
    (!c||m.event===c)&&(!b||m.fn===b)&&(!g||m.selector===g)})};f=function(d){var c;c=a.extend({originalEvent:d},d);a.each(h,function(b,g){c[b]=function(){this[g]=function(){return true};return d[b].apply(d,arguments)};return c[g]=function(){return false}});return c}})(Quo)}).call(this);(function(){(function(a){var e,l,h,i,f,j,k,n,o,q,r,d,c,b;e={};l=void 0;["doubleTap","hold","swipe","swiping","swipeLeft","swipeRight","swipeUp","swipeDown","drag"].forEach(function(g){a.fn[g]=function(m){return this.on(g,m)}});a(document).ready(function(){return n()});n=function(){var g;g=a(document.body);g.bind("touchstart",r);g.bind("touchmove",q);g.bind("touchend",o);return g.bind("touchcancel",i)};r=function(g){var m,p,s;p=Date.now();m=p-(e.last||p);s=h(g);l&&clearTimeout(l);e={el:a(d(s.target)),
    x1:s.pageX,y1:s.pageY,isDoubleTap:m>0&&m<=250?true:false,last:p,fingers:f(g)};return setTimeout(j,650)};q=function(g){var m;m=h(g);e.x2=m.pageX;e.y2=m.pageY;if(k(g))return e.el.trigger("swiping",e)};o=function(g){if(e.isDoubleTap)return b("doubleTap",true);else if(e.x2>0||e.y2>0){if(k(g))if(e.fingers===1){b("swipe",false);g=c(e.x1,e.x2,e.y1,e.y2);b(g,false)}else b("drag",false);return i()}else{e.el&&b("tap");return l=setTimeout(i,250)}};b=function(g,m){e.el.trigger(g,e);return m&&i()};i=function(){e=
{};return clearTimeout(l)};k=function(){return e.el&&(Math.abs(e.x1-e.x2)>30||Math.abs(e.y1-e.y2)>30)};h=function(g){return a.isMobile()?g.touches[0]:g};d=function(g){return"tagName"in g?g:g.parentNode};c=function(g,m,p,s){return Math.abs(g-m)>=Math.abs(p-s)?g-m>0?"swipeLeft":"swipeRight":p-s>0?"swipeUp":"swipeDown"};j=function(){if(e.last&&Date.now()-e.last>=650){b("hold");i()}};f=function(g){return g.touches?g.touches.length:1}})(Quo)}).call(this);






/**
 * FastDom
 *
 * Eliminates layout thrashing
 * by batching DOM read/write
 * interactions.
 *
 * @author Wilson Page <wilsonpage@me.com>
 */

;(function(fastdom){

    'use strict';

    // Normalize rAF
    var raf = window.requestAnimationFrame
        || window.webkitRequestAnimationFrame
        || window.mozRequestAnimationFrame
        || window.msRequestAnimationFrame
        || function(cb) { return window.setTimeout(cb, 1000 / 60); };

    // Normalize cAF
    var caf = window.cancelAnimationFrame
        || window.cancelRequestAnimationFrame
        || window.mozCancelAnimationFrame
        || window.mozCancelRequestAnimationFrame
        || window.webkitCancelAnimationFrame
        || window.webkitCancelRequestAnimationFrame
        || window.msCancelAnimationFrame
        || window.msCancelRequestAnimationFrame
        || function(id) { window.clearTimeout(id); };

    /**
     * Creates a fresh
     * FastDom instance.
     *
     * @constructor
     */
    function FastDom() {
        this.frames = [];
        this.lastId = 0;

        // Placing the rAF method
        // on the instance allows
        // us to replace it with
        // a stub for testing.
        this.raf = raf;

        this.batch = {
            hash: {},
            read: [],
            write: [],
            mode: null
        };
    }

    /**
     * Adds a job to the
     * write batch and schedules
     * a new frame if need be.
     *
     * @param  {Function} fn
     * @api public
     */
    FastDom.prototype.read = function(fn, ctx) {
        var job = this.add('read', fn, ctx);
        var id = job.id;

        // Add this job to the read queue
        this.batch.read.push(job.id);

        // We should *not* schedule a new frame if:
        // 1. We're 'reading'
        // 2. A frame is already scheduled
        var doesntNeedFrame = this.batch.mode === 'reading'
            || this.batch.scheduled;

        // If a frame isn't needed, return
        if (doesntNeedFrame) return id;

        // Schedule a new
        // frame, then return
        this.scheduleBatch();
        return id;
    };

    /**
     * Adds a job to the
     * write batch and schedules
     * a new frame if need be.
     *
     * @param  {Function} fn
     * @api public
     */
    FastDom.prototype.write = function(fn, ctx) {
        var job = this.add('write', fn, ctx);
        var mode = this.batch.mode;
        var id = job.id;

        // Push the job id into the queue
        this.batch.write.push(job.id);

        // We should *not* schedule a new frame if:
        // 1. We are 'writing'
        // 2. We are 'reading'
        // 3. A frame is already scheduled.
        var doesntNeedFrame = mode === 'writing'
            || mode === 'reading'
            || this.batch.scheduled;

        // If a frame isn't needed, return
        if (doesntNeedFrame) return id;

        // Schedule a new
        // frame, then return
        this.scheduleBatch();
        return id;
    };

    /**
     * Defers the given job
     * by the number of frames
     * specified.
     *
     * If no frames are given
     * then the job is run in
     * the next free frame.
     *
     * @param  {Number}   frame
     * @param  {Function} fn
     * @api public
     */
    FastDom.prototype.defer = function(frame, fn, ctx) {

        // Accepts two arguments
        if (typeof frame === 'function') {
            ctx = fn;
            fn = frame;
            frame = 1;
        }

        var self = this;
        var index = frame - 1;

        return this.schedule(index, function() {
            self.run({
                fn: fn,
                ctx: ctx
            });
        });
    };

    /**
     * Clears a scheduled 'read',
     * 'write' or 'defer' job.
     *
     * @param  {Number} id
     * @api public
     */
    FastDom.prototype.clear = function(id) {

        // Defer jobs are cleared differently
        if (typeof id === 'function') {
            return this.clearFrame(id);
        }

        var job = this.batch.hash[id];
        if (!job) return;

        var list = this.batch[job.type];
        var index = list.indexOf(id);

        // Clear references
        delete this.batch.hash[id];
        if (~index) list.splice(index, 1);
    };

    /**
     * Clears a scheduled frame.
     *
     * @param  {Function} frame
     * @api private
     */
    FastDom.prototype.clearFrame = function(frame) {
        var index = this.frames.indexOf(frame);
        if (~index) this.frames.splice(index, 1);
    };

    /**
     * Schedules a new read/write
     * batch if one isn't pending.
     *
     * @api private
     */
    FastDom.prototype.scheduleBatch = function() {
        var self = this;

        // Schedule batch for next frame
        this.schedule(0, function() {
            self.batch.scheduled = false;
            self.runBatch();
        });

        // Set flag to indicate
        // a frame has been scheduled
        this.batch.scheduled = true;
    };

    /**
     * Generates a unique
     * id for a job.
     *
     * @return {Number}
     * @api private
     */
    FastDom.prototype.uniqueId = function() {
        return ++this.lastId;
    };

    /**
     * Calls each job in
     * the list passed.
     *
     * If a context has been
     * stored on the function
     * then it is used, else the
     * current `this` is used.
     *
     * @param  {Array} list
     * @api private
     */
    FastDom.prototype.flush = function(list) {
        var id;

        while (id = list.shift()) {
            this.run(this.batch.hash[id]);
        }
    };

    /**
     * Runs any 'read' jobs followed
     * by any 'write' jobs.
     *
     * We run this inside a try catch
     * so that if any jobs error, we
     * are able to recover and continue
     * to flush the batch until it's empty.
     *
     * @api private
     */
    FastDom.prototype.runBatch = function() {
        try {

            // Set the mode to 'reading',
            // then empty all read jobs
            this.batch.mode = 'reading';
            this.flush(this.batch.read);

            // Set the mode to 'writing'
            // then empty all write jobs
            this.batch.mode = 'writing';
            this.flush(this.batch.write);

            this.batch.mode = null;

        } catch (e) {
            this.runBatch();
            throw e;
        }
    };

    /**
     * Adds a new job to
     * the given batch.
     *
     * @param {Array}   list
     * @param {Function} fn
     * @param {Object}   ctx
     * @returns {Number} id
     * @api private
     */
    FastDom.prototype.add = function(type, fn, ctx) {
        var id = this.uniqueId();
        return this.batch.hash[id] = {
            id: id,
            fn: fn,
            ctx: ctx,
            type: type
        };
    };

    /**
     * Runs a given job.
     *
     * Applications using FastDom
     * have the options of setting
     * `fastdom.onError`.
     *
     * This will catch any
     * errors that may throw
     * inside callbacks, which
     * is useful as often DOM
     * nodes have been removed
     * since a job was scheduled.
     *
     * Example:
     *
     *   fastdom.onError = function(e) {
   *     // Runs when jobs error
   *   };
     *
     * @param  {Object} job
     * @api private
     */
    FastDom.prototype.run = function(job){
        var ctx = job.ctx || this;
        var fn = job.fn;

        // Clear reference to the job
        delete this.batch.hash[job.id];

        // If no `onError` handler
        // has been registered, just
        // run the job normally.
        if (!this.onError) {
            return fn.call(ctx);
        }

        // If an `onError` handler
        // has been registered, catch
        // errors that throw inside
        // callbacks, and run the
        // handler instead.
        try { fn.call(ctx); } catch (e) {
            this.onError(e);
        }
    };

    /**
     * Starts of a rAF loop
     * to empty the frame queue.
     *
     * @api private
     */
    FastDom.prototype.loop = function() {
        var self = this;
        var raf = this.raf;

        // Don't start more than one loop
        if (this.looping) return;

        raf(function frame() {
            var fn = self.frames.shift();

            // If no more frames,
            // stop looping
            if (!self.frames.length) {
                self.looping = false;

                // Otherwise, schedule the
                // next frame
            } else {
                raf(frame);
            }

            // Run the frame.  Note that
            // this may throw an error
            // in user code, but all
            // fastdom tasks are dealt
            // with already so the code
            // will continue to iterate
            if (fn) fn();
        });

        this.looping = true;
    };

    /**
     * Adds a function to
     * a specified index
     * of the frame queue.
     *
     * @param  {Number}   index
     * @param  {Function} fn
     * @return {Function}
     */
    FastDom.prototype.schedule = function(index, fn) {

        // Make sure this slot
        // hasn't already been
        // taken. If it has, try
        // re-scheduling for the next slot
        if (this.frames[index]) {
            return this.schedule(index + 1, fn);
        }

        // Start the rAF
        // loop to empty
        // the frame queue
        this.loop();

        // Insert this function into
        // the frames queue and return
        return this.frames[index] = fn;
    };

    // We only ever want there to be
    // one instance of FastDom in an app
    fastdom = fastdom || new FastDom();

    /**
     * Expose 'fastdom'
     */

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = fastdom;
    } else if (typeof define === 'function' && define.amd) {
        define(function(){ return fastdom; });
    } else {
        window['fastdom'] = fastdom;
    }

})(window.fastdom);
//fgnass.github.com/spin.js#v1.3.2
(function(t,e){if(typeof exports=="object")module.exports=e();else if(typeof define=="function"&&define.amd)define(e);else t.Spinner=e()})(this,function(){"use strict";var t=["webkit","Moz","ms","O"],e={},i;function o(t,e){var i=document.createElement(t||"div"),o;for(o in e)i[o]=e[o];return i}function n(t){for(var e=1,i=arguments.length;e<i;e++)t.appendChild(arguments[e]);return t}var r=function(){var t=o("style",{type:"text/css"});n(document.getElementsByTagName("head")[0],t);return t.sheet||t.styleSheet}();function s(t,o,n,s){var a=["opacity",o,~~(t*100),n,s].join("-"),f=.01+n/s*100,l=Math.max(1-(1-t)/o*(100-f),t),u=i.substring(0,i.indexOf("Animation")).toLowerCase(),d=u&&"-"+u+"-"||"";if(!e[a]){r.insertRule("@"+d+"keyframes "+a+"{"+"0%{opacity:"+l+"}"+f+"%{opacity:"+t+"}"+(f+.01)+"%{opacity:1}"+(f+o)%100+"%{opacity:"+t+"}"+"100%{opacity:"+l+"}"+"}",r.cssRules.length);e[a]=1}return a}function a(e,i){var o=e.style,n,r;i=i.charAt(0).toUpperCase()+i.slice(1);for(r=0;r<t.length;r++){n=t[r]+i;if(o[n]!==undefined)return n}if(o[i]!==undefined)return i}function f(t,e){for(var i in e)t.style[a(t,i)||i]=e[i];return t}function l(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var o in i)if(t[o]===undefined)t[o]=i[o]}return t}function u(t){var e={x:t.offsetLeft,y:t.offsetTop};while(t=t.offsetParent)e.x+=t.offsetLeft,e.y+=t.offsetTop;return e}function d(t,e){return typeof t=="string"?t:t[e%t.length]}var p={lines:12,length:7,width:5,radius:10,rotate:0,corners:1,color:"#000",direction:1,speed:1,trail:100,opacity:1/4,fps:20,zIndex:2e9,className:"spinner",top:"auto",left:"auto",position:"relative"};function c(t){if(typeof this=="undefined")return new c(t);this.opts=l(t||{},c.defaults,p)}c.defaults={};l(c.prototype,{spin:function(t){this.stop();var e=this,n=e.opts,r=e.el=f(o(0,{className:n.className}),{position:n.position,width:0,zIndex:n.zIndex}),s=n.radius+n.length+n.width,a,l;if(t){t.insertBefore(r,t.firstChild||null);l=u(t);a=u(r);f(r,{left:(n.left=="auto"?l.x-a.x+(t.offsetWidth>>1):parseInt(n.left,10)+s)+"px",top:(n.top=="auto"?l.y-a.y+(t.offsetHeight>>1):parseInt(n.top,10)+s)+"px"})}r.setAttribute("role","progressbar");e.lines(r,e.opts);if(!i){var d=0,p=(n.lines-1)*(1-n.direction)/2,c,h=n.fps,m=h/n.speed,y=(1-n.opacity)/(m*n.trail/100),g=m/n.lines;(function v(){d++;for(var t=0;t<n.lines;t++){c=Math.max(1-(d+(n.lines-t)*g)%m*y,n.opacity);e.opacity(r,t*n.direction+p,c,n)}e.timeout=e.el&&setTimeout(v,~~(1e3/h))})()}return e},stop:function(){var t=this.el;if(t){clearTimeout(this.timeout);if(t.parentNode)t.parentNode.removeChild(t);this.el=undefined}return this},lines:function(t,e){var r=0,a=(e.lines-1)*(1-e.direction)/2,l;function u(t,i){return f(o(),{position:"absolute",width:e.length+e.width+"px",height:e.width+"px",background:t,boxShadow:i,transformOrigin:"left",transform:"rotate("+~~(360/e.lines*r+e.rotate)+"deg) translate("+e.radius+"px"+",0)",borderRadius:(e.corners*e.width>>1)+"px"})}for(;r<e.lines;r++){l=f(o(),{position:"absolute",top:1+~(e.width/2)+"px",transform:e.hwaccel?"translate3d(0,0,0)":"",opacity:e.opacity,animation:i&&s(e.opacity,e.trail,a+r*e.direction,e.lines)+" "+1/e.speed+"s linear infinite"});if(e.shadow)n(l,f(u("#000","0 0 4px "+"#000"),{top:2+"px"}));n(t,n(l,u(d(e.color,r),"0 0 1px rgba(0,0,0,.1)")))}return t},opacity:function(t,e,i){if(e<t.childNodes.length)t.childNodes[e].style.opacity=i}});function h(){function t(t,e){return o("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',e)}r.addRule(".spin-vml","behavior:url(#default#VML)");c.prototype.lines=function(e,i){var o=i.length+i.width,r=2*o;function s(){return f(t("group",{coordsize:r+" "+r,coordorigin:-o+" "+-o}),{width:r,height:r})}var a=-(i.width+i.length)*2+"px",l=f(s(),{position:"absolute",top:a,left:a}),u;function p(e,r,a){n(l,n(f(s(),{rotation:360/i.lines*e+"deg",left:~~r}),n(f(t("roundrect",{arcsize:i.corners}),{width:o,height:i.width,left:i.radius,top:-i.width>>1,filter:a}),t("fill",{color:d(i.color,e),opacity:i.opacity}),t("stroke",{opacity:0}))))}if(i.shadow)for(u=1;u<=i.lines;u++)p(u,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(u=1;u<=i.lines;u++)p(u);return n(e,l)};c.prototype.opacity=function(t,e,i,o){var n=t.firstChild;o=o.shadow&&o.lines||0;if(n&&e+o<n.childNodes.length){n=n.childNodes[e+o];n=n&&n.firstChild;n=n&&n.firstChild;if(n)n.opacity=i}}}var m=f(o("group"),{behavior:"url(#default#VML)"});if(!a(m,"transform")&&m.adj)h();else i=a(m,"animation");return c});
(function($) {
	$.fn.spin = function(opts, color) {
		var presets = {
			"tiny": { lines: 8, length: 2, width: 2, radius: 3 },
			"small": { lines: 8, length: 4, width: 3, radius: 5 },
			"large": { lines: 10, length: 8, width: 4, radius: 8 },
        };
		if (Spinner) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data();

				if (data.spinner) {
					data.spinner.stop();
					delete data.spinner;
				}
				if (opts !== false) {
					if (typeof opts === "string") {
						if (opts in presets) {
							opts = presets[opts];
						} else {
							opts = {};
						}
						if (color) {
							opts.color = color;
						}
					}
					data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
				}
			});
		} else {
			throw "Spinner class not available.";
		}
	};
})(jQuery);
/*! Overthrow v.0.1.0. An overflow:auto polyfill for responsive design. (c) 2012: Scott Jehl, Filament Group, Inc. http://filamentgroup.github.com/Overthrow/license.txt */

(function( w, undefined ){
	
	var doc = w.document,
		docElem = doc.documentElement,
		classtext = "overthrow-enabled",
	
		// Touch events are used in the polyfill, and thus are a prerequisite
		canBeFilledWithPoly = "ontouchmove" in doc,
		
		// The following attempts to determine whether the browser has native overflow support
		// so we can enable it but not polyfill
		overflowProbablyAlreadyWorks = 
			// Features-first. iOS5 overflow scrolling property check - no UA needed here. thanks Apple :)
			"WebkitOverflowScrolling" in docElem.style ||
			// Touch events aren't supported and screen width is greater than X
			// ...basically, this is a loose "desktop browser" check. 
			// It may wrongly opt-in very large tablets with no touch support.
			( !canBeFilledWithPoly && w.screen.width > 1200 ) ||
			// Hang on to your hats.
			// Whitelist some popular, overflow-supporting mobile browsers for now and the future
			// These browsers are known to get overlow support right, but give us no way of detecting it.
			(function(){
				var ua = w.navigator.userAgent,
					// Webkit crosses platforms, and the browsers on our list run at least version 534
					webkit = ua.match( /AppleWebKit\/([0-9]+)/ ),
					wkversion = webkit && webkit[1],
					wkLte534 = webkit && wkversion >= 534;
					
				return (
					/* Android 3+ with webkit gte 534
					~: Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13 */
					ua.match( /Android ([0-9]+)/ ) && RegExp.$1 >= 3 && wkLte534 ||
					/* Blackberry 7+ with webkit gte 534
					~: Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en-US) AppleWebKit/534.11+ (KHTML, like Gecko) Version/7.0.0 Mobile Safari/534.11+ */
					ua.match( / Version\/([0-9]+)/ ) && RegExp.$1 >= 0 && w.blackberry && wkLte534 ||
					/* Blackberry Playbook with webkit gte 534
					~: Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/0.0.1 Safari/534.8+ */   
					ua.indexOf( /PlayBook/ ) > -1 && RegExp.$1 >= 0 && wkLte534 ||
					/* Firefox Mobile (Fennec) 4 and up
					~: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:2.1.1) Gecko/ Firefox/4.0.2pre Fennec/4.0. */
					ua.match( /Fennec\/([0-9]+)/ ) && RegExp.$1 >= 4 ||
					/* WebOS 3 and up (TouchPad too)
					~: Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.48 Safari/534.6 TouchPad/1.0 */
					ua.match( /wOSBrowser\/([0-9]+)/ ) && RegExp.$1 >= 233 && wkLte534 ||
					/* Nokia Browser N8
					~: Mozilla/5.0 (Symbian/3; Series60/5.2 NokiaN8-00/012.002; Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/533.4 (KHTML, like Gecko) NokiaBrowser/7.3.0 Mobile Safari/533.4 3gpp-gba 
					~: Note: the N9 doesn't have native overflow with one-finger touch. wtf */
					ua.match( /NokiaBrowser\/([0-9\.]+)/ ) && parseFloat(RegExp.$1) === 7.3 && webkit && wkversion >= 533
				);
			})(),
			
		// Easing can use any of Robert Penner's equations (http://www.robertpenner.com/easing_terms_of_use.html). By default, overthrow includes ease-out-cubic
		// arguments: t = current iteration, b = initial value, c = end value, d = total iterations
		// use w.overthrow.easing to provide a custom function externally, or pass an easing function as a callback to the toss method
		defaultEasing = function (t, b, c, d) {
			return c*((t=t/d-1)*t*t + 1) + b;
		},	
			
		enabled = false,
		
		// Keeper of intervals
		timeKeeper,
				
		/* toss scrolls and element with easing
		
		// elem is the element to scroll
		// options hash:
			* left is the desired horizontal scroll. Default is "+0". For relative distances, pass a string with "+" or "-" in front.
			* top is the desired vertical scroll. Default is "+0". For relative distances, pass a string with "+" or "-" in front.
			* duration is the number of milliseconds the throw will take. Default is 100.
			* easing is an optional custom easing function. Default is w.overthrow.easing. Must follow the easing function signature 
		*/
		toss = function( elem, options ){
			var i = 0,
				sLeft = elem.scrollLeft,
				sTop = elem.scrollTop,
				// Toss defaults
				o = {
					top: "+0",
					left: "+0",
					duration: 100,
					easing: w.overthrow.easing
				},
				endLeft, endTop;
			
			// Mixin based on predefined defaults
			if( options ){
				for( var j in o ){
					if( options[ j ] !== undefined ){
						o[ j ] = options[ j ];
					}
				}
			}
			
			// Convert relative values to ints
			// First the left val
			if( typeof o.left === "string" ){
				o.left = parseFloat( o.left );
				endLeft = o.left + sLeft;
			}
			else {
				endLeft = o.left;
				o.left = o.left - sLeft;
			}
			// Then the top val
			if( typeof o.top === "string" ){
				o.top = parseFloat( o.top );
				endTop = o.top + sTop;
			}
			else {
				endTop = o.top;
				o.top = o.top - sTop;
			}

			timeKeeper = setInterval(function(){					
				if( i++ < o.duration ){
					elem.scrollLeft = o.easing( i, sLeft, o.left, o.duration );
					elem.scrollTop = o.easing( i, sTop, o.top, o.duration );
				}
				else{
					if( endLeft !== elem.scrollLeft ){
						elem.scrollLeft = endLeft;
					}
					if( endTop !== elem.scrollTop ){
						elem.scrollTop = endTop;
					}
					intercept();
				}
			}, 1 );
			
			// Return the values, post-mixin, with end values specified
			return { top: endTop, left: endLeft, duration: o.duration, easing: o.easing };
		},
		
		// find closest overthrow (elem or a parent)
		closest = function( target, ascend ){
			return !ascend && target.className && target.className.indexOf( "overthrow" ) > -1 && target || closest( target.parentNode );
		},
				
		// Intercept any throw in progress
		intercept = function(){
			clearInterval( timeKeeper );
		},
			
		// Enable and potentially polyfill overflow
		enable = function(){
				
			// If it's on, 
			if( enabled ){
				return;
			}
			// It's on.
			enabled = true;
				
			// If overflowProbablyAlreadyWorks or at least the element canBeFilledWithPoly, add a class to cue CSS that assumes overflow scrolling will work (setting height on elements and such)
			if( overflowProbablyAlreadyWorks || canBeFilledWithPoly ){
				docElem.className += " " + classtext;
			}
				
			// Destroy everything later. If you want to.
			w.overthrow.forget = function(){
				// Strip the class name from docElem
				docElem.className = docElem.className.replace( classtext, "" );
				// Remove touch binding (check for method support since this part isn't qualified by touch support like the rest)
				if( doc.removeEventListener ){
					doc.removeEventListener( "touchstart", start, false );
				}
				// reset easing to default
				w.overthrow.easing = defaultEasing;
				
				// Let 'em know
				enabled = false;
			};
	
			// If overflowProbablyAlreadyWorks or it doesn't look like the browser canBeFilledWithPoly, our job is done here. Exit viewport left.
			if( overflowProbablyAlreadyWorks || !canBeFilledWithPoly ){
				return;
			}

			// Fill 'er up!
			// From here down, all logic is associated with touch scroll handling
				// elem references the overthrow element in use
			var elem,
				
				// The last several Y values are kept here
				lastTops = [],
		
				// The last several X values are kept here
				lastLefts = [],
				
				// lastDown will be true if the last scroll direction was down, false if it was up
				lastDown,
				
				// lastRight will be true if the last scroll direction was right, false if it was left
				lastRight,
				
				// For a new gesture, or change in direction, reset the values from last scroll
				resetVertTracking = function(){
					lastTops = [];
					lastDown = null;
				},
				
				resetHorTracking = function(){
					lastLefts = [];
					lastRight = null;
				},
				
				// After releasing touchend, throw the overthrow element, depending on momentum
				finishScroll = function(){
					// Come up with a distance and duration based on how 
					// Multipliers are tweaked to a comfortable balance across platforms
					var top = ( lastTops[ 0 ] - lastTops[ lastTops.length -1 ] ) * 8,
						left = ( lastLefts[ 0 ] - lastLefts[ lastLefts.length -1 ] ) * 8,
						duration = Math.max( Math.abs( left ), Math.abs( top ) ) / 8;
					
					// Make top and left relative-style strings (positive vals need "+" prefix)
					top = ( top > 0 ? "+" : "" ) + top;
					left = ( left > 0 ? "+" : "" ) + left;
					
					// Make sure there's a significant amount of throw involved, otherwise, just stay still
					if( !isNaN( duration ) && duration > 0 && ( Math.abs( left ) > 80 || Math.abs( top ) > 80 ) ){
						toss( elem, { left: left, top: top, duration: duration } );
					}
				},
			
				// On webkit, touch events hardly trickle through textareas and inputs
				// Disabling CSS pointer events makes sure they do, but it also makes the controls innaccessible
				// Toggling pointer events at the right moments seems to do the trick
				// Thanks Thomas Bachem http://stackoverflow.com/a/5798681 for the following
				inputs,
				setPointers = function( val ){
					inputs = elem.querySelectorAll( "textarea, input" );
					for( var i = 0, il = inputs.length; i < il; i++ ) {
						inputs[ i ].style.pointerEvents = val;
					}
				},
				
				// For nested overthrows, changeScrollTarget restarts a touch event cycle on a parent or child overthrow
				changeScrollTarget = function( startEvent, ascend ){
					if( doc.createEvent ){
						var newTarget = ( !ascend || ascend === undefined ) && elem.parentNode || elem.touchchild || elem,
							tEnd;
								
						if( newTarget !== elem ){
							tEnd = doc.createEvent( "HTMLEvents" );
							tEnd.initEvent( "touchend", true, true );
							elem.dispatchEvent( tEnd );
							newTarget.touchchild = elem;
							elem = newTarget;
							newTarget.dispatchEvent( startEvent );
						}
					}
				},
				
				// Touchstart handler
				// On touchstart, touchmove and touchend are freshly bound, and all three share a bunch of vars set by touchstart
				// Touchend unbinds them again, until next time
				start = function( e ){
					
					// Stop any throw in progress
					intercept();
					
					// Reset the distance and direction tracking
					resetVertTracking();
					resetHorTracking();
						
					elem = closest( e.target );
						
					if( !elem || elem === docElem || e.touches.length > 1 ){
						return;
					}			

					setPointers( "none" );
					var touchStartE = e,
						scrollT = elem.scrollTop,
						scrollL = elem.scrollLeft,
						height = elem.offsetHeight,
						width = elem.offsetWidth,
						startY = e.touches[ 0 ].pageY,
						startX = e.touches[ 0 ].pageX,
						scrollHeight = elem.scrollHeight,
						scrollWidth = elem.scrollWidth,
					
						// Touchmove handler
						move = function( e ){
						
							var ty = scrollT + startY - e.touches[ 0 ].pageY,
								tx = scrollL + startX - e.touches[ 0 ].pageX,
								down = ty >= ( lastTops.length ? lastTops[ 0 ] : 0 ),
								right = tx >= ( lastLefts.length ? lastLefts[ 0 ] : 0 );
								
							// If there's room to scroll the current container, prevent the default window scroll
							if( ( ty > 0 && ty < scrollHeight - height ) || ( tx > 0 && tx < scrollWidth - width ) ){
								e.preventDefault();
							}
							// This bubbling is dumb. Needs a rethink.
							else {
								changeScrollTarget( touchStartE );
							}
							
							// If down and lastDown are inequal, the y scroll has changed direction. Reset tracking.
							if( lastDown && down !== lastDown ){
								resetVertTracking();
							}
							
							// If right and lastRight are inequal, the x scroll has changed direction. Reset tracking.
							if( lastRight && right !== lastRight ){
								resetHorTracking();
							}
							
							// remember the last direction in which we were headed
							lastDown = down;
							lastRight = right;							
							
							// set the container's scroll
							elem.scrollTop = ty;
							elem.scrollLeft = tx;
						
							lastTops.unshift( ty );
							lastLefts.unshift( tx );
						
							if( lastTops.length > 3 ){
								lastTops.pop();
							}
							if( lastLefts.length > 3 ){
								lastLefts.pop();
							}
						},
					
						// Touchend handler
						end = function( e ){
							// Apply momentum based easing for a graceful finish
							finishScroll();	
							// Bring the pointers back
							setPointers( "auto" );
							setTimeout( function(){
								setPointers( "none" );
							}, 450 );
							elem.removeEventListener( "touchmove", move, false );
							elem.removeEventListener( "touchend", end, false );
						};
					
					elem.addEventListener( "touchmove", move, false );
					elem.addEventListener( "touchend", end, false );
				};
				
			// Bind to touch, handle move and end within
			doc.addEventListener( "touchstart", start, false );
		};
		
	// Expose overthrow API
	w.overthrow = {
		set: enable,
		forget: function(){},
		easing: defaultEasing,
		toss: toss,
		intercept: intercept,
		closest: closest,
		support: overflowProbablyAlreadyWorks ? "native" : canBeFilledWithPoly && "polyfilled" || "none"
	};
	
	// Auto-init
	enable();
		
})( this );
//! moment.js
//! version : 2.8.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(a){function b(a,b,c){switch(arguments.length){case 2:return null!=a?a:b;case 3:return null!=a?a:null!=b?b:c;default:throw new Error("Implement me")}}function c(a,b){return zb.call(a,b)}function d(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function e(a){tb.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+a)}function f(a,b){var c=!0;return m(function(){return c&&(e(a),c=!1),b.apply(this,arguments)},b)}function g(a,b){qc[a]||(e(b),qc[a]=!0)}function h(a,b){return function(c){return p(a.call(this,c),b)}}function i(a,b){return function(c){return this.localeData().ordinal(a.call(this,c),b)}}function j(){}function k(a,b){b!==!1&&F(a),n(this,a),this._d=new Date(+a._d)}function l(a){var b=y(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=tb.localeData(),this._bubble()}function m(a,b){for(var d in b)c(b,d)&&(a[d]=b[d]);return c(b,"toString")&&(a.toString=b.toString),c(b,"valueOf")&&(a.valueOf=b.valueOf),a}function n(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=b._pf),"undefined"!=typeof b._locale&&(a._locale=b._locale),Ib.length>0)for(c in Ib)d=Ib[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function o(a){return 0>a?Math.ceil(a):Math.floor(a)}function p(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function q(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function r(a,b){var c;return b=K(b,a),a.isBefore(b)?c=q(a,b):(c=q(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function s(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(g(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=tb.duration(c,d),t(this,e,a),this}}function t(a,b,c,d){var e=b._milliseconds,f=b._days,g=b._months;d=null==d?!0:d,e&&a._d.setTime(+a._d+e*c),f&&nb(a,"Date",mb(a,"Date")+f*c),g&&lb(a,mb(a,"Month")+g*c),d&&tb.updateOffset(a,f||g)}function u(a){return"[object Array]"===Object.prototype.toString.call(a)}function v(a){return"[object Date]"===Object.prototype.toString.call(a)||a instanceof Date}function w(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&A(a[d])!==A(b[d]))&&g++;return g+f}function x(a){if(a){var b=a.toLowerCase().replace(/(.)s$/,"$1");a=jc[a]||kc[b]||b}return a}function y(a){var b,d,e={};for(d in a)c(a,d)&&(b=x(d),b&&(e[b]=a[d]));return e}function z(b){var c,d;if(0===b.indexOf("week"))c=7,d="day";else{if(0!==b.indexOf("month"))return;c=12,d="month"}tb[b]=function(e,f){var g,h,i=tb._locale[b],j=[];if("number"==typeof e&&(f=e,e=a),h=function(a){var b=tb().utc().set(d,a);return i.call(tb._locale,b,e||"")},null!=f)return h(f);for(g=0;c>g;g++)j.push(h(g));return j}}function A(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function B(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function C(a,b,c){return hb(tb([a,11,31+b-c]),b,c).week}function D(a){return E(a)?366:365}function E(a){return a%4===0&&a%100!==0||a%400===0}function F(a){var b;a._a&&-2===a._pf.overflow&&(b=a._a[Bb]<0||a._a[Bb]>11?Bb:a._a[Cb]<1||a._a[Cb]>B(a._a[Ab],a._a[Bb])?Cb:a._a[Db]<0||a._a[Db]>23?Db:a._a[Eb]<0||a._a[Eb]>59?Eb:a._a[Fb]<0||a._a[Fb]>59?Fb:a._a[Gb]<0||a._a[Gb]>999?Gb:-1,a._pf._overflowDayOfYear&&(Ab>b||b>Cb)&&(b=Cb),a._pf.overflow=b)}function G(a){return null==a._isValid&&(a._isValid=!isNaN(a._d.getTime())&&a._pf.overflow<0&&!a._pf.empty&&!a._pf.invalidMonth&&!a._pf.nullInput&&!a._pf.invalidFormat&&!a._pf.userInvalidated,a._strict&&(a._isValid=a._isValid&&0===a._pf.charsLeftOver&&0===a._pf.unusedTokens.length)),a._isValid}function H(a){return a?a.toLowerCase().replace("_","-"):a}function I(a){for(var b,c,d,e,f=0;f<a.length;){for(e=H(a[f]).split("-"),b=e.length,c=H(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=J(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&w(e,c,!0)>=b-1)break;b--}f++}return null}function J(a){var b=null;if(!Hb[a]&&Jb)try{b=tb.locale(),require("./locale/"+a),tb.locale(b)}catch(c){}return Hb[a]}function K(a,b){return b._isUTC?tb(a).zone(b._offset||0):tb(a).local()}function L(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function M(a){var b,c,d=a.match(Nb);for(b=0,c=d.length;c>b;b++)d[b]=pc[d[b]]?pc[d[b]]:L(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function N(a,b){return a.isValid()?(b=O(b,a.localeData()),lc[b]||(lc[b]=M(b)),lc[b](a)):a.localeData().invalidDate()}function O(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Ob.lastIndex=0;d>=0&&Ob.test(a);)a=a.replace(Ob,c),Ob.lastIndex=0,d-=1;return a}function P(a,b){var c,d=b._strict;switch(a){case"Q":return Zb;case"DDDD":return _b;case"YYYY":case"GGGG":case"gggg":return d?ac:Rb;case"Y":case"G":case"g":return cc;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return d?bc:Sb;case"S":if(d)return Zb;case"SS":if(d)return $b;case"SSS":if(d)return _b;case"DDD":return Qb;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Ub;case"a":case"A":return b._locale._meridiemParse;case"X":return Xb;case"Z":case"ZZ":return Vb;case"T":return Wb;case"SSSS":return Tb;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return d?$b:Pb;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Pb;case"Do":return Yb;default:return c=new RegExp(Y(X(a.replace("\\","")),"i"))}}function Q(a){a=a||"";var b=a.match(Vb)||[],c=b[b.length-1]||[],d=(c+"").match(hc)||["-",0,0],e=+(60*d[1])+A(d[2]);return"+"===d[0]?-e:e}function R(a,b,c){var d,e=c._a;switch(a){case"Q":null!=b&&(e[Bb]=3*(A(b)-1));break;case"M":case"MM":null!=b&&(e[Bb]=A(b)-1);break;case"MMM":case"MMMM":d=c._locale.monthsParse(b),null!=d?e[Bb]=d:c._pf.invalidMonth=b;break;case"D":case"DD":null!=b&&(e[Cb]=A(b));break;case"Do":null!=b&&(e[Cb]=A(parseInt(b,10)));break;case"DDD":case"DDDD":null!=b&&(c._dayOfYear=A(b));break;case"YY":e[Ab]=tb.parseTwoDigitYear(b);break;case"YYYY":case"YYYYY":case"YYYYYY":e[Ab]=A(b);break;case"a":case"A":c._isPm=c._locale.isPM(b);break;case"H":case"HH":case"h":case"hh":e[Db]=A(b);break;case"m":case"mm":e[Eb]=A(b);break;case"s":case"ss":e[Fb]=A(b);break;case"S":case"SS":case"SSS":case"SSSS":e[Gb]=A(1e3*("0."+b));break;case"X":c._d=new Date(1e3*parseFloat(b));break;case"Z":case"ZZ":c._useUTC=!0,c._tzm=Q(b);break;case"dd":case"ddd":case"dddd":d=c._locale.weekdaysParse(b),null!=d?(c._w=c._w||{},c._w.d=d):c._pf.invalidWeekday=b;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":a=a.substr(0,1);case"gggg":case"GGGG":case"GGGGG":a=a.substr(0,2),b&&(c._w=c._w||{},c._w[a]=A(b));break;case"gg":case"GG":c._w=c._w||{},c._w[a]=tb.parseTwoDigitYear(b)}}function S(a){var c,d,e,f,g,h,i;c=a._w,null!=c.GG||null!=c.W||null!=c.E?(g=1,h=4,d=b(c.GG,a._a[Ab],hb(tb(),1,4).year),e=b(c.W,1),f=b(c.E,1)):(g=a._locale._week.dow,h=a._locale._week.doy,d=b(c.gg,a._a[Ab],hb(tb(),g,h).year),e=b(c.w,1),null!=c.d?(f=c.d,g>f&&++e):f=null!=c.e?c.e+g:g),i=ib(d,e,f,h,g),a._a[Ab]=i.year,a._dayOfYear=i.dayOfYear}function T(a){var c,d,e,f,g=[];if(!a._d){for(e=V(a),a._w&&null==a._a[Cb]&&null==a._a[Bb]&&S(a),a._dayOfYear&&(f=b(a._a[Ab],e[Ab]),a._dayOfYear>D(f)&&(a._pf._overflowDayOfYear=!0),d=db(f,0,a._dayOfYear),a._a[Bb]=d.getUTCMonth(),a._a[Cb]=d.getUTCDate()),c=0;3>c&&null==a._a[c];++c)a._a[c]=g[c]=e[c];for(;7>c;c++)a._a[c]=g[c]=null==a._a[c]?2===c?1:0:a._a[c];a._d=(a._useUTC?db:cb).apply(null,g),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()+a._tzm)}}function U(a){var b;a._d||(b=y(a._i),a._a=[b.year,b.month,b.day,b.hour,b.minute,b.second,b.millisecond],T(a))}function V(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function W(a){if(a._f===tb.ISO_8601)return void $(a);a._a=[],a._pf.empty=!0;var b,c,d,e,f,g=""+a._i,h=g.length,i=0;for(d=O(a._f,a._locale).match(Nb)||[],b=0;b<d.length;b++)e=d[b],c=(g.match(P(e,a))||[])[0],c&&(f=g.substr(0,g.indexOf(c)),f.length>0&&a._pf.unusedInput.push(f),g=g.slice(g.indexOf(c)+c.length),i+=c.length),pc[e]?(c?a._pf.empty=!1:a._pf.unusedTokens.push(e),R(e,c,a)):a._strict&&!c&&a._pf.unusedTokens.push(e);a._pf.charsLeftOver=h-i,g.length>0&&a._pf.unusedInput.push(g),a._isPm&&a._a[Db]<12&&(a._a[Db]+=12),a._isPm===!1&&12===a._a[Db]&&(a._a[Db]=0),T(a),F(a)}function X(a){return a.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e})}function Y(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function Z(a){var b,c,e,f,g;if(0===a._f.length)return a._pf.invalidFormat=!0,void(a._d=new Date(0/0));for(f=0;f<a._f.length;f++)g=0,b=n({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._pf=d(),b._f=a._f[f],W(b),G(b)&&(g+=b._pf.charsLeftOver,g+=10*b._pf.unusedTokens.length,b._pf.score=g,(null==e||e>g)&&(e=g,c=b));m(a,c||b)}function $(a){var b,c,d=a._i,e=dc.exec(d);if(e){for(a._pf.iso=!0,b=0,c=fc.length;c>b;b++)if(fc[b][1].exec(d)){a._f=fc[b][0]+(e[6]||" ");break}for(b=0,c=gc.length;c>b;b++)if(gc[b][1].exec(d)){a._f+=gc[b][0];break}d.match(Vb)&&(a._f+="Z"),W(a)}else a._isValid=!1}function _(a){$(a),a._isValid===!1&&(delete a._isValid,tb.createFromInputFallback(a))}function ab(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function bb(b){var c,d=b._i;d===a?b._d=new Date:v(d)?b._d=new Date(+d):null!==(c=Kb.exec(d))?b._d=new Date(+c[1]):"string"==typeof d?_(b):u(d)?(b._a=ab(d.slice(0),function(a){return parseInt(a,10)}),T(b)):"object"==typeof d?U(b):"number"==typeof d?b._d=new Date(d):tb.createFromInputFallback(b)}function cb(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function db(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function eb(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function fb(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function gb(a,b,c){var d=tb.duration(a).abs(),e=yb(d.as("s")),f=yb(d.as("m")),g=yb(d.as("h")),h=yb(d.as("d")),i=yb(d.as("M")),j=yb(d.as("y")),k=e<mc.s&&["s",e]||1===f&&["m"]||f<mc.m&&["mm",f]||1===g&&["h"]||g<mc.h&&["hh",g]||1===h&&["d"]||h<mc.d&&["dd",h]||1===i&&["M"]||i<mc.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,fb.apply({},k)}function hb(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=tb(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ib(a,b,c,d,e){var f,g,h=db(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:D(a-1)+g}}function jb(b){var c=b._i,d=b._f;return b._locale=b._locale||tb.localeData(b._l),null===c||d===a&&""===c?tb.invalid({nullInput:!0}):("string"==typeof c&&(b._i=c=b._locale.preparse(c)),tb.isMoment(c)?new k(c,!0):(d?u(d)?Z(b):W(b):bb(b),new k(b)))}function kb(a,b){var c,d;if(1===b.length&&u(b[0])&&(b=b[0]),!b.length)return tb();for(c=b[0],d=1;d<b.length;++d)b[d][a](c)&&(c=b[d]);return c}function lb(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),B(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function mb(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function nb(a,b,c){return"Month"===b?lb(a,c):a._d["set"+(a._isUTC?"UTC":"")+b](c)}function ob(a,b){return function(c){return null!=c?(nb(this,a,c),tb.updateOffset(this,b),this):mb(this,a)}}function pb(a){return 400*a/146097}function qb(a){return 146097*a/400}function rb(a){tb.duration.fn[a]=function(){return this._data[a]}}function sb(a){"undefined"==typeof ender&&(ub=xb.moment,xb.moment=a?f("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",tb):tb)}for(var tb,ub,vb,wb="2.8.3",xb="undefined"!=typeof global?global:this,yb=Math.round,zb=Object.prototype.hasOwnProperty,Ab=0,Bb=1,Cb=2,Db=3,Eb=4,Fb=5,Gb=6,Hb={},Ib=[],Jb="undefined"!=typeof module&&module.exports,Kb=/^\/?Date\((\-?\d+)/i,Lb=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Mb=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Nb=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,Ob=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,Pb=/\d\d?/,Qb=/\d{1,3}/,Rb=/\d{1,4}/,Sb=/[+\-]?\d{1,6}/,Tb=/\d+/,Ub=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Vb=/Z|[\+\-]\d\d:?\d\d/gi,Wb=/T/i,Xb=/[\+\-]?\d+(\.\d{1,3})?/,Yb=/\d{1,2}/,Zb=/\d/,$b=/\d\d/,_b=/\d{3}/,ac=/\d{4}/,bc=/[+-]?\d{6}/,cc=/[+-]?\d+/,dc=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ec="YYYY-MM-DDTHH:mm:ssZ",fc=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],gc=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],hc=/([\+\-]|\d\d)/gi,ic=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),jc={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},kc={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},lc={},mc={s:45,m:45,h:22,d:26,M:11},nc="DDD w W M D d".split(" "),oc="M D H h m s w W".split(" "),pc={M:function(){return this.month()+1},MMM:function(a){return this.localeData().monthsShort(this,a)},MMMM:function(a){return this.localeData().months(this,a)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(a){return this.localeData().weekdaysMin(this,a)},ddd:function(a){return this.localeData().weekdaysShort(this,a)},dddd:function(a){return this.localeData().weekdays(this,a)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return p(this.year()%100,2)},YYYY:function(){return p(this.year(),4)},YYYYY:function(){return p(this.year(),5)},YYYYYY:function(){var a=this.year(),b=a>=0?"+":"-";return b+p(Math.abs(a),6)},gg:function(){return p(this.weekYear()%100,2)},gggg:function(){return p(this.weekYear(),4)},ggggg:function(){return p(this.weekYear(),5)},GG:function(){return p(this.isoWeekYear()%100,2)},GGGG:function(){return p(this.isoWeekYear(),4)},GGGGG:function(){return p(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return A(this.milliseconds()/100)},SS:function(){return p(A(this.milliseconds()/10),2)},SSS:function(){return p(this.milliseconds(),3)},SSSS:function(){return p(this.milliseconds(),3)},Z:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+p(A(a/60),2)+":"+p(A(a)%60,2)},ZZ:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+p(A(a/60),2)+p(A(a)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()},Q:function(){return this.quarter()}},qc={},rc=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];nc.length;)vb=nc.pop(),pc[vb+"o"]=i(pc[vb],vb);for(;oc.length;)vb=oc.pop(),pc[vb+vb]=h(pc[vb],2);pc.DDDD=h(pc.DDD,3),m(j.prototype,{set:function(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(a){return this._months[a.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(a){return this._monthsShort[a.month()]},monthsParse:function(a){var b,c,d;for(this._monthsParse||(this._monthsParse=[]),b=0;12>b;b++)if(this._monthsParse[b]||(c=tb.utc([2e3,b]),d="^"+this.months(c,"")+"|^"+this.monthsShort(c,""),this._monthsParse[b]=new RegExp(d.replace(".",""),"i")),this._monthsParse[b].test(a))return b},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(a){return this._weekdays[a.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(a){return this._weekdaysShort[a.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(a){return this._weekdaysMin[a.day()]},weekdaysParse:function(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=tb([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b},isPM:function(a){return"p"===(a+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(a,b){var c=this._calendar[a];return"function"==typeof c?c.apply(b):c},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)},pastFuture:function(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)},ordinal:function(a){return this._ordinal.replace("%d",a)},_ordinal:"%d",preparse:function(a){return a},postformat:function(a){return a},week:function(a){return hb(a,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),tb=function(b,c,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._i=b,g._f=c,g._l=e,g._strict=f,g._isUTC=!1,g._pf=d(),jb(g)},tb.suppressDeprecationWarnings=!1,tb.createFromInputFallback=f("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i)}),tb.min=function(){var a=[].slice.call(arguments,0);return kb("isBefore",a)},tb.max=function(){var a=[].slice.call(arguments,0);return kb("isAfter",a)},tb.utc=function(b,c,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._useUTC=!0,g._isUTC=!0,g._l=e,g._i=b,g._f=c,g._strict=f,g._pf=d(),jb(g).utc()},tb.unix=function(a){return tb(1e3*a)},tb.duration=function(a,b){var d,e,f,g,h=a,i=null;return tb.isDuration(a)?h={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(h={},b?h[b]=a:h.milliseconds=a):(i=Lb.exec(a))?(d="-"===i[1]?-1:1,h={y:0,d:A(i[Cb])*d,h:A(i[Db])*d,m:A(i[Eb])*d,s:A(i[Fb])*d,ms:A(i[Gb])*d}):(i=Mb.exec(a))?(d="-"===i[1]?-1:1,f=function(a){var b=a&&parseFloat(a.replace(",","."));return(isNaN(b)?0:b)*d},h={y:f(i[2]),M:f(i[3]),d:f(i[4]),h:f(i[5]),m:f(i[6]),s:f(i[7]),w:f(i[8])}):"object"==typeof h&&("from"in h||"to"in h)&&(g=r(tb(h.from),tb(h.to)),h={},h.ms=g.milliseconds,h.M=g.months),e=new l(h),tb.isDuration(a)&&c(a,"_locale")&&(e._locale=a._locale),e},tb.version=wb,tb.defaultFormat=ec,tb.ISO_8601=function(){},tb.momentProperties=Ib,tb.updateOffset=function(){},tb.relativeTimeThreshold=function(b,c){return mc[b]===a?!1:c===a?mc[b]:(mc[b]=c,!0)},tb.lang=f("moment.lang is deprecated. Use moment.locale instead.",function(a,b){return tb.locale(a,b)}),tb.locale=function(a,b){var c;return a&&(c="undefined"!=typeof b?tb.defineLocale(a,b):tb.localeData(a),c&&(tb.duration._locale=tb._locale=c)),tb._locale._abbr},tb.defineLocale=function(a,b){return null!==b?(b.abbr=a,Hb[a]||(Hb[a]=new j),Hb[a].set(b),tb.locale(a),Hb[a]):(delete Hb[a],null)},tb.langData=f("moment.langData is deprecated. Use moment.localeData instead.",function(a){return tb.localeData(a)}),tb.localeData=function(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return tb._locale;if(!u(a)){if(b=J(a))return b;a=[a]}return I(a)},tb.isMoment=function(a){return a instanceof k||null!=a&&c(a,"_isAMomentObject")},tb.isDuration=function(a){return a instanceof l};for(vb=rc.length-1;vb>=0;--vb)z(rc[vb]);tb.normalizeUnits=function(a){return x(a)},tb.invalid=function(a){var b=tb.utc(0/0);return null!=a?m(b._pf,a):b._pf.userInvalidated=!0,b},tb.parseZone=function(){return tb.apply(null,arguments).parseZone()},tb.parseTwoDigitYear=function(a){return A(a)+(A(a)>68?1900:2e3)},m(tb.fn=k.prototype,{clone:function(){return tb(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var a=tb(this).utc();return 0<a.year()&&a.year()<=9999?N(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):N(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds()]},isValid:function(){return G(this)},isDSTShifted:function(){return this._a?this.isValid()&&w(this._a,(this._isUTC?tb.utc(this._a):tb(this._a)).toArray())>0:!1},parsingFlags:function(){return m({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(a){return this.zone(0,a)},local:function(a){return this._isUTC&&(this.zone(0,a),this._isUTC=!1,a&&this.add(this._dateTzOffset(),"m")),this},format:function(a){var b=N(this,a||tb.defaultFormat);return this.localeData().postformat(b)},add:s(1,"add"),subtract:s(-1,"subtract"),diff:function(a,b,c){var d,e,f,g=K(a,this),h=6e4*(this.zone()-g.zone());return b=x(b),"year"===b||"month"===b?(d=432e5*(this.daysInMonth()+g.daysInMonth()),e=12*(this.year()-g.year())+(this.month()-g.month()),f=this-tb(this).startOf("month")-(g-tb(g).startOf("month")),f-=6e4*(this.zone()-tb(this).startOf("month").zone()-(g.zone()-tb(g).startOf("month").zone())),e+=f/d,"year"===b&&(e/=12)):(d=this-g,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-h)/864e5:"week"===b?(d-h)/6048e5:d),c?e:o(e)},from:function(a,b){return tb.duration({to:this,from:a}).locale(this.locale()).humanize(!b)},fromNow:function(a){return this.from(tb(),a)},calendar:function(a){var b=a||tb(),c=K(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.localeData().calendar(e,this))},isLeapYear:function(){return E(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=eb(a,this.localeData()),this.add(a-b,"d")):b},month:ob("Month",!0),startOf:function(a){switch(a=x(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a?this.weekday(0):"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(a){return a=x(a),this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")},isAfter:function(a,b){return b=x("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=tb.isMoment(a)?a:tb(a),+this>+a):+this.clone().startOf(b)>+tb(a).startOf(b)},isBefore:function(a,b){return b=x("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=tb.isMoment(a)?a:tb(a),+a>+this):+this.clone().startOf(b)<+tb(a).startOf(b)},isSame:function(a,b){return b=x(b||"millisecond"),"millisecond"===b?(a=tb.isMoment(a)?a:tb(a),+this===+a):+this.clone().startOf(b)===+K(a,this).startOf(b)},min:f("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(a){return a=tb.apply(null,arguments),this>a?this:a}),max:f("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(a){return a=tb.apply(null,arguments),a>this?this:a}),zone:function(a,b){var c,d=this._offset||0;return null==a?this._isUTC?d:this._dateTzOffset():("string"==typeof a&&(a=Q(a)),Math.abs(a)<16&&(a=60*a),!this._isUTC&&b&&(c=this._dateTzOffset()),this._offset=a,this._isUTC=!0,null!=c&&this.subtract(c,"m"),d!==a&&(!b||this._changeInProgress?t(this,tb.duration(d-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,tb.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(a){return a=a?tb(a).zone():0,(this.zone()-a)%60===0},daysInMonth:function(){return B(this.year(),this.month())},dayOfYear:function(a){var b=yb((tb(this).startOf("day")-tb(this).startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")},quarter:function(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)},weekYear:function(a){var b=hb(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")},isoWeekYear:function(a){var b=hb(this,1,4).year;return null==a?b:this.add(a-b,"y")},week:function(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")},isoWeek:function(a){var b=hb(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")},weekday:function(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")},isoWeekday:function(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)},isoWeeksInYear:function(){return C(this.year(),1,4)},weeksInYear:function(){var a=this.localeData()._week;return C(this.year(),a.dow,a.doy)},get:function(a){return a=x(a),this[a]()},set:function(a,b){return a=x(a),"function"==typeof this[a]&&this[a](b),this},locale:function(b){var c;return b===a?this._locale._abbr:(c=tb.localeData(b),null!=c&&(this._locale=c),this)},lang:f("moment().lang() is deprecated. Use moment().localeData() instead.",function(b){return b===a?this.localeData():this.locale(b)}),localeData:function(){return this._locale},_dateTzOffset:function(){return 15*Math.round(this._d.getTimezoneOffset()/15)}}),tb.fn.millisecond=tb.fn.milliseconds=ob("Milliseconds",!1),tb.fn.second=tb.fn.seconds=ob("Seconds",!1),tb.fn.minute=tb.fn.minutes=ob("Minutes",!1),tb.fn.hour=tb.fn.hours=ob("Hours",!0),tb.fn.date=ob("Date",!0),tb.fn.dates=f("dates accessor is deprecated. Use date instead.",ob("Date",!0)),tb.fn.year=ob("FullYear",!0),tb.fn.years=f("years accessor is deprecated. Use year instead.",ob("FullYear",!0)),tb.fn.days=tb.fn.day,tb.fn.months=tb.fn.month,tb.fn.weeks=tb.fn.week,tb.fn.isoWeeks=tb.fn.isoWeek,tb.fn.quarters=tb.fn.quarter,tb.fn.toJSON=tb.fn.toISOString,m(tb.duration.fn=l.prototype,{_bubble:function(){var a,b,c,d=this._milliseconds,e=this._days,f=this._months,g=this._data,h=0;g.milliseconds=d%1e3,a=o(d/1e3),g.seconds=a%60,b=o(a/60),g.minutes=b%60,c=o(b/60),g.hours=c%24,e+=o(c/24),h=o(pb(e)),e-=o(qb(h)),f+=o(e/30),e%=30,h+=o(f/12),f%=12,g.days=e,g.months=f,g.years=h},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return o(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*A(this._months/12)},humanize:function(a){var b=gb(this,!a,this.localeData());return a&&(b=this.localeData().pastFuture(+this,b)),this.localeData().postformat(b)},add:function(a,b){var c=tb.duration(a,b);return this._milliseconds+=c._milliseconds,this._days+=c._days,this._months+=c._months,this._bubble(),this},subtract:function(a,b){var c=tb.duration(a,b);return this._milliseconds-=c._milliseconds,this._days-=c._days,this._months-=c._months,this._bubble(),this},get:function(a){return a=x(a),this[a.toLowerCase()+"s"]()},as:function(a){var b,c;if(a=x(a),"month"===a||"year"===a)return b=this._days+this._milliseconds/864e5,c=this._months+12*pb(b),"month"===a?c:c/12;switch(b=this._days+qb(this._months/12),a){case"week":return b/7+this._milliseconds/6048e5;case"day":return b+this._milliseconds/864e5;case"hour":return 24*b+this._milliseconds/36e5;case"minute":return 24*b*60+this._milliseconds/6e4;case"second":return 24*b*60*60+this._milliseconds/1e3;case"millisecond":return Math.floor(24*b*60*60*1e3)+this._milliseconds;default:throw new Error("Unknown unit "+a)}},lang:tb.fn.lang,locale:tb.fn.locale,toIsoString:f("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var a=Math.abs(this.years()),b=Math.abs(this.months()),c=Math.abs(this.days()),d=Math.abs(this.hours()),e=Math.abs(this.minutes()),f=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"},localeData:function(){return this._locale}}),tb.duration.fn.toString=tb.duration.fn.toISOString;for(vb in ic)c(ic,vb)&&rb(vb.toLowerCase());tb.duration.fn.asMilliseconds=function(){return this.as("ms")},tb.duration.fn.asSeconds=function(){return this.as("s")},tb.duration.fn.asMinutes=function(){return this.as("m")},tb.duration.fn.asHours=function(){return this.as("h")},tb.duration.fn.asDays=function(){return this.as("d")},tb.duration.fn.asWeeks=function(){return this.as("weeks")},tb.duration.fn.asMonths=function(){return this.as("M")},tb.duration.fn.asYears=function(){return this.as("y")},tb.locale("en",{ordinal:function(a){var b=a%10,c=1===A(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";
  return a+c}}),Jb?module.exports=tb:"function"==typeof define&&define.amd?(define("moment",function(a,b,c){return c.config&&c.config()&&c.config().noGlobal===!0&&(xb.moment=ub),tb}),sb(!0)):sb()}).call(this);
var gps = gps || {};
gps.models = {};
gps.collections = {};
gps.views = {};
gps.data = {};
gps.constants = {};
gps.session = {};

gps.constants.VERSION_BUILD = '40.0';
gps.constants.TEST_BUILD = false;

// API settings for production, demo, qa and development
gps.settings = {
  //GPS_Production
  production: {
    appId: 'E9EFC045-C9AB-5955-FFAC-25559DEEC900',
    secretKey: 'B7D0C312-8438-BF6A-FFFF-5A8D0AA1F600',
    version: 'v1'
  },
  //GpsPlatform
  demo: {
    appId: '78BD0212-2B30-F187-FF52-D55D2F180200',
    secretKey: 'F4E94128-FC08-B465-FFBB-EE6CF3182B00',
    version: 'v1'
  },
  //GPS_QA
  qa: {
    appId: '1DEA4B9C-D1E8-EA93-FFCE-0E075182BB00',
    secretKey: '5224DAAF-66A2-21DA-FF6E-8F611BF00500',
    version: 'v1'
  },
  //GPS_Development
  development: {
    appId: '4E9CFA4A-45FF-50A9-FF71-B9B9F62D9500',
    secretKey: '7310E3DB-846B-B513-FF10-7DE29668CA00',
    version: 'v1'
  }
};

if (!gps.constants.TEST_BUILD) {

  gps.defaultEnvName = "production";
} else {

  gps.defaultEnvName = "qa";
  //delete gps.settings.production;
  //delete gps.settings.demo;
}

gps.environment = gps.environment || {};

gps.environment.getCurrEnvName = function(){

  var currentEnv = localStorage.getItem("environment");

  return currentEnv ? currentEnv : gps.defaultEnvName;
};

gps.environment.onProdEnv = function() {

  return (gps.environment.getCurrEnvName() === 'production');
};

gps.environment.changeEnv = function( env ) {
  function doChange() {
    localStorage.clear();
    localStorage.setItem("environment",env);
    window.location.reload();
  }

  // This will force to do a login again.
  gps.controllers.loginController.doLogOut({
    success: function() {
      doChange();
    },
    error: function(model, error) {
      if (error.responseJSON) {
        error.responseJSON.message = 'There was an error trying to change the environment: ' +
          error.responseJSON.message;
      }

      gps.util.showError(model, error);
      doChange();
    }
  });
};

// Backendless Auth Token
var options = gps.settings[ gps.environment.getCurrEnvName() ];
BackendlessBB.init(options.appId, options.secretKey, options.version);
localStorage.setItem("environment",gps.environment.getCurrEnvName());

// Check if we're on Phonegap iPad
var isDevice = navigator.userAgent.indexOf("iPad") != -1;

// Override the alert to use the native iOS one
// This method needs a string, is message is not a string => ipad app crash.
(function() { /* String */

  if (isDevice) {
    alert = function(message, bttnMessage) {
      if (typeof message == "object") {
        message = message.error;
      }
      var buttonMessage = bttnMessage ? bttnMessage : "OK";
      navigator.notification.alert(
        message, {}, 'GPS iPad', buttonMessage
      );
    };
  } // else is going to use the native browser alert function.
})();


/**
 * Is going to print the index of the button starting in one.
 * Override the confirm to use the native iOS one.
 * Also, see how to handle the boolean that it returns
 * so it doesn't affect the current code.
 * @param button
 */
function showConfirmMessage(message, onConfirm, buttons, title) { //'Yes,No'
  var thetitle = title ? title : "GPS iPad";
  if (navigator.notification) {
    navigator.notification.confirm(message, onConfirm, thetitle, buttons);
  } else {
    var confirmed = confirm(message);
    if (confirmed) {
      onConfirm("1");
    } else {
      onConfirm("2");
    }
  }
}

//Override Backbone.View.remove() behavior
Backbone.View = Backbone.View.extend({
  remove: function() {

    this.$el.remove();
    //COMPLETELY UNBIND THE VIEW
    //this.undelegateEvents();

    //this.$el.removeData().unbind();

    this.$el = null;
    delete this.$el;

    this.el = null;
    delete this.el;

    //Remove view from DOM
    //vieww.remove();
    //Backbone.View.prototype.remove.call(this);

    // Empty the element and remove it from
    // the DOM while preserving events
    //$(this.el).empty().detach();

    return this;
  }
});

// Here we take action with backbone views that need to be "unfocussed"
/**
 * @type {Array<function>} - Each function correspond with one
 * Backbone View Method that "unfocuss" the element
 */
gps.session.allToUnfocus = [];

Backbone.on('suscribeToUnfocus', function(unfocusCallback) {
  gps.session.allToUnfocus.push(unfocusCallback);
});

Backbone.on('unsuscribeToUnfocus', function(unfocusCallback) {
  gps.session.allToUnfocus = _.without(gps.session.allToUnfocus, unfocusCallback);
});

Backbone.on('notifyToUnfocus', function(event) {
  _.each(gps.session.allToUnfocus, function(unfocusElement) {
    unfocusElement(event);
  });
});

// Handlebars.js helpers
Handlebars.registerHelper('kanbanStatus', function(options) {

  var id = options.fn(this);

  return !gps.statuses.get(id) || gps.statuses.get(id).get("name");
});

Handlebars.registerHelper('log', function(optionalValue) {
  console.log("\nCurrent Context");
  console.log("====================");
  console.log(this);

  if (arguments.length > 1) {
    console.log("Value");
    console.log("====================");
    console.log(optionalValue);
  }
});

Handlebars.registerHelper('ifequal', function(val1, val2, options) {

  if (val1 === val2) {
    return options.fn(this);
  }

  return options.inverse(this);
});

Handlebars.registerHelper('ifgt', function(val1, val2, options) {
  if (val1 > val2) {
    return options.fn(this);
  }

  return options.inverse(this);
});

Handlebars.registerHelper('breaklines', function(text) {
  text = Handlebars.Utils.escapeExpression(text);
  text = text.toString();
  text = text.replace(/(\r\n|\n|\r)/gm, '<br>');
  return new Handlebars.SafeString(text);
});

Handlebars.registerHelper('formatDate', function(ts) {
  if (typeof ts == 'string') ts = parseInt(ts, 10);

  var date = new Date(ts),
    array = date.toUTCString().split(' '),
    day = parseInt(array[1]),
    daySuffix = 'th';

  switch (day % 10) {
    case 1:
    case 21:
    case 31:
      daySuffix = 'st';
      break;
    case 2:
    case 22:
      daySuffix = 'nd';
      break;
    case 3:
    case 23:
      daySuffix = 'rd';
      break;
    default:
      daySuffix = 'th';
  }

  return (array[2] + ' ' + array[1] + daySuffix + ' ' + array[3]);
});

Handlebars.registerHelper('isNotEmpty', function(data, options){
  if(data.val !== -1){
    return options.fn(this);
  } else {
    return options.inverse(this);
  }
    
});

function isOverall(practice) {
  return practice.name.toLowerCase() === 'overall';
}

Handlebars.registerHelper('isOverall', function(practice, options) {
  if (isOverall(practice)) {
    return options.fn(practice);
  }
});

Handlebars.registerHelper('isNotOverall', function(practice, options) {
  if (!isOverall(practice)) {
    return options.fn(practice);
  }
});

Handlebars.registerHelper('sum', function() {
  var sum = 0,
    v;
  for (var i = 0; i < arguments.length; i++) {
    v = parseFloat(arguments[i]);
    if (!isNaN(v)) sum += v;
  }
  return sum;
});

Handlebars.registerHelper('paintCircle', function(data, index, options){
  if(data.column === index){
    return options.fn(this);
  }else{
    return options.inverse(this);
  }
});



/**
 * this function will serialize to json the inputElements
 * ignoring the names in ignoreElems
 */
function serializeWithDates(inpElements, ignoreElems) {
  var elms = _.map(inpElements, function(elem) {

    if (elem.type == "date") {
      var theValue = elem.valueAsDate ? elem.valueAsDate.getTime() : 1;
      return {
        name: elem.name,
        value: theValue
      };
    } else {
      return {
        name: elem.name,
        value: elem.value
      };
    }
  });

  var o = {};
  $.each(elms, function() {

    if (!ignoreElems || !_.contains(ignoreElems, this.name)) {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }
        o[this.name].push(this.value || "");
      } else {
        o[this.name] = this.value || "";
      }
    }
  });

  return o;
}

// Params to Object
$.fn.serializeObject = function() {
  var o = {};
  var a = this.serializeArray();
  $.each(a, function() {
    if (o[this.name] !== undefined) {
      if (!o[this.name].push) {
        o[this.name] = [o[this.name]];
      }
      o[this.name].push(this.value || "");
    } else {
      o[this.name] = this.value || "";
    }
  });

  return o;
};

// manual version of .sortable('serialize')
function serializeList(container) {
  var str = '',
    els = container.find('li');
  for (var i = 0; i < els.length; ++i) {
    var el = els[i],

      p = el.id.lastIndexOf('_'),
      getIdNumber = el.id.split("_");

    if (p !== -1) {
      if (str !== '') str = str + '&';
      str = str + el.id.substring(0, p) + '[]=' + getIdNumber[1];
    }
  }
  return str;
}

$.isNormalInteger = function(str) {
  var n = ~~Number(str);
  return String(n) === str && n >= 0;
};

// Capitalize strings
String.prototype.capitalize = function() {
  return this.charAt(0).toUpperCase() + this.slice(1);
};

// Get model name in a view with a collection
gps.getModelName = function(collection) {
  var modelName = collection.constructor.prototype.model.prototype.schemaName;

  return modelName.capitalize();
};

// Create loading spinner
var spinner = new Spinner({
  "color": "#FFF",
  "top": "52px",
  "left": "52px"
}).spin($(".spinner-container")[0]);

// Show loading spinner whenever we are making an ajax request is going on
$(document)
  .ajaxStart(function() {
    if (gps.showLoadingMessage) {
      $("body .loading").show();
    }
  })
  .ajaxStop(function() {
    var $spinner = $("body .loading");
    setTimeout(function() {
      $spinner.hide();
    }, 800);
  });

function areTheSameDay(date1, date2) {

  var day = date1.getUTCDate(),
    month = date1.getUTCMonth() + 1,
    year = date1.getUTCFullYear(),
    day2 = date2.getUTCDate(),
    month2 = date2.getUTCMonth() + 1,
    year2 = date2.getUTCFullYear();

  return day === day2 && month === month2 && year === year2;
}

function getSplittedDateInfo(date1) {

  var day = date1.getUTCDate(),
    month = date1.getUTCMonth() + 1,
    year = date1.getUTCFullYear();

  return [day, month, year];
}

function isGratherThan(date1, date2) {

  var day = date1.getUTCDate(),
    month = date1.getUTCMonth() + 1,
    year = date1.getUTCFullYear(),
    day2 = date2.getUTCDate(),
    month2 = date2.getUTCMonth() + 1,
    year2 = date2.getUTCFullYear();

  return year > year2 || year == year2 && month > month2 || year == year2 && month == month2 && day > day2;
}

function destroy_view(vieww) {

  if (!vieww.removed) {

    vieww.undelegateEvents();
    vieww.$el.removeData().unbind();
    vieww.$el.remove();
    Backbone.View.prototype.remove.call(vieww);

    for (var elem in vieww) {
      //Trying to remove all references to objects to avoid memory leacks.
      delete vieww[elem];
    }

    vieww.removed = true;
  }
}

function findAbsolutePosition(obj) {

  var curleft = curtop = 0;
  if (obj.offsetParent) {
    do {
      curleft += obj.offsetLeft;
      curtop += obj.offsetTop;
    }
    while (obj = obj.offsetParent);
  }

  return [curleft, curtop];
}
;
// Handlebars.js partials
Handlebars.registerPartial('impedimentItem', $('#impedimentItemPartial').html());
Handlebars.registerPartial("commentItem", $("#comment-item-template").html());
Handlebars.registerPartial('listClientItem', $('#client-list-item-li').html());
Handlebars.registerPartial('clientHeaderText', $('#client-list-header').html());
Handlebars.registerPartial('headerText', $('#title-box').html());
Handlebars.registerPartial('simple-stat-row', $('#simple-stat-row').html());
Handlebars.registerPartial("listBacklogHeaderItem", $("#backlog-list-header-item").html());
Handlebars.registerPartial("listBacklogItem", $("#backlog-list-item").html());
Handlebars.registerPartial('trendIndexData', $('#trend-indexes-table-item').html());

//used in the Dashboard
Handlebars.registerPartial('impedimentsWidgetCell', $('#impedimentsWidgetCell').html());
Handlebars.registerPartial('improvementPlansStatsBox', $('#improvementPlansStatsBox').html());
Handlebars.registerPartial("impedimentItem", $("#impedimentItemPartial").html());

//used in indexes questions
Handlebars.registerPartial("decoratedPercentageRow", $("#decorated-percentage-row").html());
Handlebars.registerPartial("questionBox", $("#question-box").html());
Handlebars.registerPartial("questionAnswerBox", $("#question-answer-box").html());
Handlebars.registerPartial("questionNote", $("#question-note").html());
Handlebars.registerPartial("questionWebInformation", $("#question-web-information").html());

Handlebars.registerPartial("tabNavigation", $("#tab-navigation").html());
Handlebars.registerPartial("commentSideBarItem", $('#comment-side-bar-item').html());
gps.util = gps.util || {};

gps.util.fetchCollection = function(gpsCol, callback, loadingMessage) {

  if (!loadingMessage){
    gps.showLoadingMessage = false;
  }

  gpsCol.fetch({
    success: function() {
      if (callback){
        callback();
      }
    },

    error: function (model, response) {
      gps.util.showError(model, response);
      console.log("collection fetch Error");
      if (callback) {
        callback();
      }
    }
  });

  gps.showLoadingMessage = true;
}

gps.util.colorHexaToInt = function(color) {
  // get the three colors
  var red = color.substr(1,2),
    green = color.substr(3,2),
    blue = color.substr(5,2),

  // string in hexa to Integer
    intred = parseInt(red, 16),
    intgreen = parseInt(green, 16),
    intblue = parseInt(blue, 16),

    res = [intred, intgreen, intblue];

  return res;
}

gps.util.colorIntToHexa = function(red, green, blue) {
  // integer to string in hexa
  red = red.toString(16);
  green = green.toString(16);
  blue = blue.toString(16);

  // each color has to have two characters
  if (red.length < 2) red = "0" + red;
  if (green.length < 2) green = "0" + green;
  if (blue.length < 2) blue = "0"  + blue;

  return "#" + red + green + blue;
}

gps.util.getDarkColor = function(color, amount) {
  var rgb = gps.util.colorHexaToInt(color),
    intred = rgb[0],
    intgreen = rgb[1],
    intblue = rgb[2];

  if (intred - amount >= 0) intred = intred - amount;
  if (intgreen - amount >= 0) intgreen = intgreen - amount;
  if (intblue - amount >= 0) intblue = intblue - amount;

  return gps.util.colorIntToHexa(intred, intgreen, intblue);
}

gps.util.desaturateColor = function(color) {
  var rgb = gps.util.colorHexaToInt(color),

    r = rgb[0],
    g = rgb[1],
    b = rgb[2],

    intensity = 0.3 * r + 0.59 * g + 0.11 * b,
    k = 0.5;

  r = Math.floor(intensity * k + r * (1 - k));
  g = Math.floor(intensity * k + g * (1 - k));
  b = Math.floor(intensity * k + b * (1 - k));

  return gps.util.colorIntToHexa(r, g, b);
}


/*
 * Useful function when we want to show a DOM element: $item
 * because it's hidden under the scroll of the: $scrollContent
 * toBottom == true =>  show $item at the bottom
 * toBottom == false =>  show $item at the top
 * duration: how long the animation will run, higher values indicate slower animations
 */

gps.util.showEntireItem = function($item, $scrollContent, toBottom, duration, callback){
  duration = duration || 400;

  var posElem = $item.position().top,
    displayHeight = $scrollContent.height();

  if( posElem + $item.height() > displayHeight ) {
    var posScroll = $scrollContent.scrollTop(),
      notItemHeight = toBottom ? $item.innerHeight() - displayHeight : 0;

    // posScroll + posElem -> $item at the top
    // posScroll + posElem + notCommentHeight -> $item at the bottom
    $scrollContent.animate({scrollTop: posScroll + posElem + notItemHeight}, duration);
  }

  callback && callback();
}

/**
 * This method will return a mix of the generalEvents and ipad or computer events
 * Depending on the current device.
 *
 * @param ipadEvents
 * @param computerEvents
 * @param generalEvents
 * @returns {*}
 */
gps.util.getEvents = function(ipadEvents,computerEvents,generalEvents){

  var isDevice = navigator.userAgent.indexOf("iPad") != -1,event_array;

  event_array = isDevice ? ipadEvents : computerEvents;
  for(var index in event_array){
    for (var key in event_array[index]){
      generalEvents[key] = event_array[index][key];
    }
  }

  return generalEvents;
}

gps.util.showError = function(model, error) {
  // login
  if (model.schemaName === 'Users') {

    if (error.responseJSON) {
      if (error.responseJSON.code === 3003) {
        alert('Wrong username / password combination.');
      } else if (error.responseJSON.code === 3006) {
        alert('Username or password is missing.');
      } else if (error.responseJSON.code === 3044) {
        alert('Unable to log in. Multiple login limit for the same user account has been reached.');
      } else if (error.responseJSON.message) {
        alert (error.responseJSON.message);
      }
    } else if (error.status === 404) {
      alert('Unable to log in. There is no connection.');
    } else {
      alert('There was an error trying to login.');
    }
  // rest of models
  } else if (error.responseJSON && error.responseJSON.message) {
    alert(error.responseJSON.message);
  } else if (error.status === 404) {
    alert('Connection has been lost when getting ' + model.schemaName + ' data.');
  } else {
    alert('There was an error associated with ' + model.schemaName + ' data.');
  }
}
;
gps.models.Answer = BackendlessBB.Model.extend({

  schemaName: "answer",

  initialize: function() {
    var isRemote = this.get("objectId");

    if ( isRemote ) {
      this.setRemote( true );
    } else {
      this.setRemote( false );
    }
  },

  setQuestion: function( question ) {

    this.question = question;
    this.set("question_id_st", question.objectId);
  },

  setRemote: function( option ) {
    this.remote = option;
  },

  setBacklogId: function( id ) {
    this.backlogId = id;
  },

  setAssessmentId: function( id ) {
    this.set('assessment_id', id);
    this.assessmentId = id;
  },

  getRemote: function(){
    return this.remote;
  },

  getComment: function(){
    return this.get('comment');
  },

  getQuestionIdSt: function(){
    return this.get('question_id_st');
  }

});

gps.collections.Answers = BackendlessBB.Collection.extend({
  model: gps.models.Answer,

  getAmountComments: function(){
    var amount = 0,
    comment;

    this.each(function(answerGps) {
      comment = answerGps.getComment();

      if (comment && comment.contents) {
        amount++;
      }
    });

    return amount;
  },

  getAllCommentsInfo: function() {
    var comments = [],
        comment, question, practice, discipline,
        questionId, questionAndPractice, result;

    this.each(function(answerGps) {
      comment = answerGps.getComment();

      if(comment && comment.contents) {
        questionId = answerGps.getQuestionIdSt();

        // we look for in the practices, the question with id == questionId
        questionAndPractice = gps.controllers.practiceController.lookForQuestion(questionId);
        if (questionAndPractice) {
          question = questionAndPractice.question;
          practice = questionAndPractice.practice;

          // we get the discipline parent of the practice where the comment is
          discipline = gps.controllers.disciplineController.getDisciplineParent(practice.objectId);

          result = {
            comment: {
              author: comment.username,
              updated_date: comment.updated_date,
              contents: comment.contents
            },
            discipline: {
              name: discipline.name,
              id: discipline.objectId
            },
            practice: {
              name: practice.name,
              id: practice.objectId
            },
            questionTitle: question.title
          };

          comments.push(result);
        }
      }
    });

    comments = _.sortBy(comments, function(dataInfoComment){
      return -dataInfoComment.comment.updated_date;
    });

    return comments;
  }
});
// var answers = gps.currentView.collection.get("f6694396f6744e7db2c2b90cc9e58c85").get("answers");
// var scoreTable = [0, 0, 0.2, 0.4, 0.6, 0.8, 1];

// var results = {
//   disciplines: []
// }

// _(gps.data.disciplines).each(function(discipline) {
//   console.group("Discipline: " + discipline.name);

//   var practiceIds =  discipline.practices
//   var practicesPercentageSum = 0;
//   var practicesAmount = discipline.practices.length;
//   var disciplineTotalPercentage;
//   var practicesResults = []

//   _(practiceIds).each(function(practiceId) {
//     var practice = _(gps.data.practices).findWhere({id: practiceId});

//     console.log("Practice: " + practice.name)

//     var questionsAmount = practice.questions.length;
//     var questionsScoreSum = 0;
//     var practiceTotalPercentage;

//     console.log("-> --%i-- questions", questionsAmount);

//     _(practice.questions).each(function(questionId, position, context){
//        var question =  _(gps.data.questions).findWhere({id: questionId});

//        var answer = _(answers).findWhere({question_id: questionId})
//        var answerScore = answer ? answer.score : 0;

//        if (question.binary && answerScore === 1) {
//          questionsScoreSum += 1;
//        } else {
//          questionsScoreSum += (scoreTable[answerScore]);
//        }

//        console.log("-> Question: " + question.title)
//        console.log("   -> Answer score: " + answerScore)

//     });
//     practiceTotalPercentage = (questionsScoreSum/questionsAmount)*100;
//     practicesPercentageSum += practiceTotalPercentage;
//     console.log("-> *** Practice result: %d% ***", practiceTotalPercentage)

//     practicesResults.push(
//       {
//         practice_id: practiceId,
//         total: practiceTotalPercentage
//       }
//     )
//   })

//   disciplineTotalPercentage = practicesPercentageSum / practicesAmount;

//   console.log("*** This Disciplines practices sum of percentages: %d% ***", practicesPercentageSum)
//   console.log("*** This Disciplines total percentage: %d% ***", disciplineTotalPercentage)

//   results.disciplines.push(
//     {
//       discipline_id: discipline.id,
//       total: disciplineTotalPercentage,
//       practices: practicesResults
//     }
//   )
//   console.groupEnd();
// });




// // http://jsbin.com/etusuk/2/edit

// var results = {"disciplines":[{"discipline_id":1,"total":20,"practices":[{"practice_id":1,"total":100},{"practice_id":2,"total":100},{"practice_id":3,"total":100},{"practice_id":4,"total":100},{"practice_id":5,"total":100},{"practice_id":6,"total":100},{"practice_id":7,"total":100},{"practice_id":8,"total":100},{"practice_id":9,"total":100},{"practice_id":10,"total":100}]},{"discipline_id":2,"total":40,"practices":[{"practice_id":11,"total":0},{"practice_id":12,"total":0},{"practice_id":13,"total":0},{"practice_id":14,"total":0},{"practice_id":15,"total":0},{"practice_id":16,"total":0}]},{"discipline_id":3,"total":60,"practices":[{"practice_id":17,"total":0},{"practice_id":18,"total":0},{"practice_id":19,"total":0},{"practice_id":20,"total":0},{"practice_id":21,"total":0},{"practice_id":22,"total":0},{"practice_id":23,"total":0},{"practice_id":24,"total":0},{"practice_id":25,"total":0}]},{"discipline_id":4,"total":16.369047619047617,"practices":[{"practice_id":26,"total":25},{"practice_id":27,"total":0},{"practice_id":28,"total":25},{"practice_id":29,"total":46.666666666666664},{"practice_id":30,"total":34.285714285714285},{"practice_id":31,"total":0},{"practice_id":32,"total":0},{"practice_id":33,"total":0}]},{"discipline_id":5,"total":0,"practices":[{"practice_id":34,"total":0},{"practice_id":35,"total":0},{"practice_id":36,"total":0},{"practice_id":37,"total":0},{"practice_id":38,"total":0},{"practice_id":39,"total":0},{"practice_id":40,"total":0},{"practice_id":41,"total":0}]},{"discipline_id":6,"total":23.809523809523807,"practices":[{"practice_id":42,"total":33.33333333333333},{"practice_id":43,"total":66.66666666666666},{"practice_id":44,"total":60},{"practice_id":45,"total":0},{"practice_id":46,"total":0},{"practice_id":47,"total":0},{"practice_id":48,"total":6.666666666666667}]},{"discipline_id":7,"total":4.166666666666666,"practices":[{"practice_id":49,"total":0},{"practice_id":50,"total":0},{"practice_id":51,"total":0},{"practice_id":52,"total":0},{"practice_id":53,"total":0},{"practice_id":54,"total":33.33333333333333},{"practice_id":55,"total":0},{"practice_id":56,"total":0}]}]};

// // Disciplines view
// var DisciplinesView = Backbone.View.extend();

// // A discipline details view
// var DisciplineDetailsView = Backbone.View.extend();

// var practicesString = " Practices";

// var radarChartData = {
//   labels : [
//     "Collaborating" + practicesString,
//     "Planning" + practicesString,
//     "Defining" + practicesString,
//     "Developing" + practicesString,
//     "Tracking" + practicesString,
//     "Testing" + practicesString,
//     "Releasing" + practicesString
//   ],

//   datasets: [
//     {
//       fillColor : "rgba(26,158,213, 0.9)",
//       strokeColor : "rgba(0,0,0,0.5)",
//       pointColor : "rgba(220,220,220,0.1)",
//       pointStrokeColor : "#fff",
//       data : _(results.disciplines).pluck("total")
//     }
//   ]
// };

// var myRadar = new Chart($("canvas")[0].getContext("2d"));

// myRadar.Radar(radarChartData, {
//   scaleShowLabels : true,
//   pointLabelFontSize : 11,
//   scaleFontSize : 11,
//   scaleShowLabelBackdrop : false,
//   scaleLineWidth : 1
// });




// // Backup
// <script src="http://documentcloud.github.io/underscore/underscore-min.js"></script>
// <script src="http://documentcloud.github.io/backbone/backbone-min.js"></script>
// <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
// <script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0-rc.3/handlebars.js"></script>
// <script src="http://www.chartjs.org/docs/Chart.js"></script>



// <script id="discipline" type="text/x-handlebars-template">
//   template content
// </script>



// <ul class="disciplines">

//   <li class="discipline">
//     <div class="grid"></div>
//     <ul class="lanes">
//       <li class="lane" style="width: 20%">
//         <h1>Lane title</h2>
//       </li>
//       <li class="lane" style="width: 40%">
//         <h1>Lane title</h2>
//       </li>
//       <li class="lane" style="width: 100%">
//         <h1>Lane title</h2>
//       </li>

//       <div class="percentages">
//         <div class="percent amount-0">0%</div>
//         <div class="percent amount-10">10%</div>
//         <div class="percent amount-20">20%</div>
//         <div class="percent amount-30">30%</div>
//         <div class="percent amount-40">40%</div>
//         <div class="percent amount-50">50%</div>
//         <div class="percent amount-60">60%</div>
//         <div class="percent amount-70">70%</div>
//         <div class="percent amount-80">80%</div>
//         <div class="percent amount-90">90%</div>
//         <div class="percent amount-100">100%</div>
//       </div>

//     </ul>



//   </li>
// </ul>


// <canvas id="radar" width="600" height="600"></canvas>




// ul, li {
//   margin: 0;
//   padding: 0;
// }

// ul.disciplines {
//   padding-left: 60px;
// }

// ul.disciplines li {
//   list-style: none;
//   width: 400px;
//   height: 30px;
// }

// ul.lanes {
//   width: 100%;
//   background: grey;
//   display: block;
// }

// ul.lanes li.lane {
//   position: relative;
//   background: red;
//   list-style: none;
//   margin-bottom: 10px;
// }

// li.lane h1 {
//   padding: 0;
//   margin: 0;
//   margin-left: -60px;
//   font-size: 12px;
// }

// .percentages {
//   position: relative;
//   width: 400px;
//   height: 30px;
//   display: block;
//   background: rgba(255,255,0,0.5);
// }
// .percent {
//   display: inline;
//   position: absolute;
//   font-size: 10px;
// }

// .amount-10 {
//   left: 0%;
// }

// .amount-20 {
//   left: 10%;
// }


// .amount-30 {
//   left: 20%;
// }

// .amount-40 {
//   left: 30%;
// }


// .amount-50 {
//   left: 40%;
// }


// .amount-60 {
//   left: 50%;
// }


// .amount-70 {
//   left: 60%;
// }


// .amount-80 {
//   left: 0%;
// }


// .amount-90 {
//   left: 90%;
// }


// .amount-100 {
//   left: 100%;
// }



// /* var results = {"disciplines":[{"discipline_id":1,"total":20,"practices":[{"practice_id":1,"total":100},{"practice_id":2,"total":100},{"practice_id":3,"total":100},{"practice_id":4,"total":100},{"practice_id":5,"total":100},{"practice_id":6,"total":100},{"practice_id":7,"total":100},{"practice_id":8,"total":100},{"practice_id":9,"total":100},{"practice_id":10,"total":100}]},{"discipline_id":2,"total":40,"practices":[{"practice_id":11,"total":0},{"practice_id":12,"total":0},{"practice_id":13,"total":0},{"practice_id":14,"total":0},{"practice_id":15,"total":0},{"practice_id":16,"total":0}]},{"discipline_id":3,"total":60,"practices":[{"practice_id":17,"total":0},{"practice_id":18,"total":0},{"practice_id":19,"total":0},{"practice_id":20,"total":0},{"practice_id":21,"total":0},{"practice_id":22,"total":0},{"practice_id":23,"total":0},{"practice_id":24,"total":0},{"practice_id":25,"total":0}]},{"discipline_id":4,"total":16.369047619047617,"practices":[{"practice_id":26,"total":25},{"practice_id":27,"total":0},{"practice_id":28,"total":25},{"practice_id":29,"total":46.666666666666664},{"practice_id":30,"total":34.285714285714285},{"practice_id":31,"total":0},{"practice_id":32,"total":0},{"practice_id":33,"total":0}]},{"discipline_id":5,"total":0,"practices":[{"practice_id":34,"total":0},{"practice_id":35,"total":0},{"practice_id":36,"total":0},{"practice_id":37,"total":0},{"practice_id":38,"total":0},{"practice_id":39,"total":0},{"practice_id":40,"total":0},{"practice_id":41,"total":0}]},{"discipline_id":6,"total":23.809523809523807,"practices":[{"practice_id":42,"total":33.33333333333333},{"practice_id":43,"total":66.66666666666666},{"practice_id":44,"total":60},{"practice_id":45,"total":0},{"practice_id":46,"total":0},{"practice_id":47,"total":0},{"practice_id":48,"total":6.666666666666667}]},{"discipline_id":7,"total":4.166666666666666,"practices":[{"practice_id":49,"total":0},{"practice_id":50,"total":0},{"practice_id":51,"total":0},{"practice_id":52,"total":0},{"practice_id":53,"total":0},{"practice_id":54,"total":33.33333333333333},{"practice_id":55,"total":0},{"practice_id":56,"total":0}]}]};

// // Disciplines view
// var DisciplinesView = Backbone.View.extend();

// // A discipline details view
// var DisciplineDetailsView = Backbone.View.extend();

// var practicesString = " Practices";

// var radarChartData = {
//   labels : [
//     "Collaborating" + practicesString,
//     "Planning" + practicesString,
//     "Defining" + practicesString,
//     "Developing" + practicesString,
//     "Tracking" + practicesString,
//     "Testing" + practicesString,
//     "Releasing" + practicesString
//   ],

//   datasets: [
//     {
//       fillColor : "rgba(26,158,213, 0.9)",
//       strokeColor : "rgba(0,0,0,0.5)",
//       pointColor : "rgba(220,220,220,0.1)",
//       pointStrokeColor : "#fff",
//       data : _(results.disciplines).pluck("total")
//     }
//   ]
// };

// var myRadar = new Chart($("#radar")[0].getContext("2d"));

// myRadar.Radar(radarChartData, {
//   scaleShowLabels : true,
//   pointLabelFontSize : 11,
//   scaleFontSize : 11,
//   scaleShowLabelBackdrop : false,
//   scaleLineWidth : 1
// });



// *
//  * Bar chart
//  *
//  */

;
/**
 * Right now Assessments are called "Indexes"
 */

gps.models.Assessment = BackendlessBB.Model.extend({

  schemaName: "assessment",
  relationsString: 'answers.comment',

  initialize: function(data, options) {

    //these are constants from Database.
    this.StartDate = "startdate";
    this.EndDate   = "enddate";
    this.Status    = "status";
    this.Answers   = "answers";
  },

  validate: function( attributes ) {

    if (!attributes.assessment_name || attributes.assessment_name.length < 2){
      return "Assessment name should be at least 2 characters.";
    }

    if (!attributes.assessment_name || attributes.assessment_name.length < 2){
      return "Assessment name should be at least 2 characters.";
    }

    //have no date
    if ( attributes.startdate === 1 ||
      // if the date is below than today and it's not started or done or bloked.
      (isGratherThan ( new Date(),new Date(attributes.startdate)) && !( attributes.status === "2" || attributes.status === "4" || attributes.status === "3"))){
      return "Start Date should be a valid date";
    }

    if ( attributes.enddate === 1 || isGratherThan(new Date(attributes.startdate),new Date(attributes.enddate)) ){
      return "End Date should be a valid date and greater than start date";
    }
  },

  /**
   *
   * @param backlogId
   * @param assessmentId
   * @param callback is optional
   * @returns {*}
   */
  getResults: function(backlogId, assessmentId, callback) {
    var composeResults = this.composeResults;

    var assessment = _.findWhere(gps.controllers.backlogController.getGpsBacklog(backlogId).get("assessments"), {
          objectId: assessmentId
        }),
        collection = new gps.models.Assessment(assessment).getAnswers();
    return composeResults(collection, callback);
  },

  /**
   * This will return an object containing stats for all the disciplines
   * and practices of the current instance.
   *
   * Example:
   * {"disciplines":[{"discipline_id"...,
     * total: current percentage of that discipline,
     * practices:[{..., total: percentage of the practice},...]
     * ...}
   * @returns {*}
   */
  getMyResults: function() {
    return this.composeResults(this.getAnswers());
  },

  /**
   * This is only an average of all 7 disciplines for the Index.
   * @returns {string}
   */
  getAverageScore: function() {
    var stats = this.getMyResults(), currentScore;
    currentScore = _.reduce(stats.disciplines, function(memo, discipline) {
      return memo + discipline.total;
    }, 0);

    return (currentScore/stats.disciplines.length).toFixed(0);
  },

  setStatus_Wip: function(onReadyCallBack){

    this.updateAssessment({
          status: "2",
          started_date: new Date().getTime(),
          percent_completed: 0
      },
      onReadyCallBack);
  },

  setAndSaveEndDate: function(endDate,callback){

    this.updateAssessment({enddate:endDate.getTime()},callback);
  },

  setFetched: function() {
    if(!this.isFetched()) {
      gps.session.fetchedAssessments.push(this.id);
    }
  },

  setEndDate: function(date){

    this.set('enddate', date);
    return this;
  },

  setPercentCompletedGlobalVariable: function(percent_completed) {
    if(gps.backlogAssessments) {
      var asgps = gps.backlogAssessments.get(this.id);

      // Getting problem using backbone .set(...)
      asgps.attributes.percent_completed = percent_completed;
    }
  },

  setPercentCompleted: function(percent_completed){

    this.set('percent_completed', percent_completed);
  },

  /**
   * This will update to the server and the instance itself all the new attributes
   * passed by parameter.
   * Then if everything is fine is going to call the callback function.
   */
  updateAssessment: function(newAttributes,callback){

    var answers = this.get(this.Answers);

    this.on('invalid', function(model, error){
      alert(error);

      return
    });

    this.save(newAttributes, {
      success: function( response ) {

        //I'm going to restore the information.
        this.set(this.Answers,answers);

        //then call our callback function.
        callback(this,response);
      }.bind(this),
      error: function( model, error ) {
        if(error.responseJSON && error.responseJSON.message) {
          alert(error.responseJSON.message);
        }
        window.history.back();
      },
      remote_ignore: ['answers'],
      update: true
    });
  },

  /*
   * Answer should be a wrapper.
   */
  addAnswerLocally: function(answer) {

    (this.attributes.answers ?
      this.attributes.answers : this.attributes.answers = []).push(answer.attributes);
  },

  /*
   * Answer should be a wrapper.
   */
  updateAnswerLocally: function(answer) {

      var local_answer = _.findWhere(this.get("answers"),
          {objectId: answer.get("objectId")});

      local_answer.score = answer.get("score");
      local_answer.comment = answer.get("comment");
  },

  isNotEditable: function() {

    var status = this.get("status");

    return ( status === "2" || status === "4"); //WIP || Done
  },

  isPlanned: function(){
    return !this.has('started_date')
  },

  isWip: function(){
    return this.get('status') === "2"
  },

  /**
   * Returns true if it was finished by the user.
   * @returns {boolean}
   */
  isFinished: function() {
    return this.get("status") === "4";
  },

  isFetched: function(){

    return this.isPlanned() || _.indexOf(gps.session.fetchedAssessments, this.id) !== -1;
  },

  getAssessmentName: function(){
    return this.get('assessment_name')
  },


  /*
   * This function is going to give the status name.
   * If and instance is passed by parameter it will use that instance, if not => this.
   */
  getStatusName: function(instance){

    var status = instance ? instance.status : this.get("status");
    return status ? gps.statuses.get( status ).get("name") : "Backlog";
  },

  getStartDate: function() {

    return new Date(this.get(this.StartDate));
  },

  /**
   * Returns the answers.
   * This method is doing some verifications in order to aviod going to the server, here they are:
   *  1 - if id is null => null answers because this is a new index.
   *  2 - if answers are in memory => return those answers.
   *  3 - if answers are cached => return those answers ( using getCachedAnswers method ).
   *  4 - if answers are not cached => goes to the server to obtain the answers and then we try to save them
   *  in cache using saveAndGetAnswers method.
   * @returns {*|number}
   */
  getAnswers: function() {

    if (!this.id) {  //if it does not have an id, then shouldn't have any answer.
      return [];
    }

    //first we try to see if there are answers, if not then try to see if we have answers in cache,
    //finally if there are not answers in cache, we go to the server, fetch those answers and then we save them.
    return this.get("answers") || this.getCachedAnswers() || (this.fetch({async:false}) || 1) && this.saveAndGetAnswers();
  },

  getCachedAnswers: function() {
    this.pc = gps.controllers.persistenceController;

    var cached = this.pc.get('cachedAnswers:' + this.get('id'));
    return cached ? JSON.parse(cached) : null;
  },

  saveAndGetAnswers: function() {
    this.pc = gps.controllers.persistenceController;

    if (!this.pc.get('cachedAnswers:'+ this.get('id')) && this.isFinished()) {
      this.pc.set('cachedAnswers:'+ this.get('id'), JSON.stringify(this.get("answers") || []));
    }
    return this.get('answers');
  },

  getEndDate: function(){

    return new Date(this.get("enddate"));
  },

  getPercentCompleted: function() {

    return this.get('percent_completed');
  },

  getAllCommentsInfo: function(){
    var answersColGps = new gps.collections.Answers(this.getAnswers());
    return answersColGps.getAllCommentsInfo();
  },

  getAmountComments: function(){
    var answersColGps = new gps.collections.Answers(this.getAnswers());
    return answersColGps.getAmountComments();
  },

  composeResults: function(answers, callback) {
    var scoreTable = [0, 0, 0.2, 0.4, 0.6, 0.8, 1];

    var results = {
      disciplines: []
    }


    gps.assessments.disciplines.sort(function (a, b) {
        if (a.loc_id > b.loc_id)
          return 1;
        if (a.loc_id < b.loc_id)
          return -1;
        // a must be equal to b
        return 0;
    });

    _(gps.assessments.disciplines).each(function(discipline) {

      var practiceIds =  discipline.practices
      var practicesPercentageSum = 0;
      var practicesAmount = discipline.practices.length;
      var disciplineTotalPercentage;
      var practicesResults = []

      _(practiceIds).each(function(practiceId) {

        var practice = _(gps.assessments.practices).findWhere({objectId: practiceId.objectId});
        var questionsAmount = practice.questions.length;
        var questionsScoreSum = 0;
        var practiceTotalPercentage;

        _(practice.questions).each(function(questionId, position, context){
           var question =  _(gps.assessments.questions).findWhere({objectId: questionId.objectId});

           var answer = _(answers).findWhere({question_id_st: questionId.objectId});
           //var answerScore = answer ? answer.score : 0;
           var answerScore = (answer && answer.score) ? answer.score : 0;

           if (question && question.binary && answerScore === 1) {
             questionsScoreSum += 1;
           } else {
             questionsScoreSum += (scoreTable[answerScore]);
           }

        });
        practiceTotalPercentage = (questionsScoreSum/questionsAmount)*100;
        practicesPercentageSum += practiceTotalPercentage;

        practicesResults.push(
          {
            practice_id: practiceId,
            total: practiceTotalPercentage
          }
        )
      })

      disciplineTotalPercentage = practicesPercentageSum / practicesAmount;

      results.disciplines.push(
        {
          discipline_id: discipline.objectId,
          discipline_name: discipline.name,
          total: disciplineTotalPercentage,
          practices: practicesResults
        }
      )
    });
    if (callback)
      callback(results);  //We are returning the information now, this is kept for compatibility.
    return results;
  }
});

gps.collections.Assessments = BackendlessBB.Collection.extend({

  model: gps.models.Assessment,

  // Constants
  sortAssessmentsBy: ['planned', 'wip', 'closed'],
  sortPlannedBy: {ascending: false, value: 'startdate'},
  sortWipBy: {ascending: true, value: 'assessment_name'},
  sortClosedBy: {ascending: false, value: 'ended_date'},

  sortAssessments: function() {
    var planned = new gps.collections.Assessments(),
    wip = new gps.collections.Assessments(),
    closed = new gps.collections.Assessments();

    planned.comparator = function(assessment) {
      var factor = this.sortPlannedBy.ascending ? 1 : -1;
      return factor * assessment.get(this.sortPlannedBy.value)
    }

    wip.comparator = function(assessment) {
      var factor = this.sortPlannedBy.ascending ? 1 : -1;
      return factor * assessment.get(this.sortWipBy.value)
    }

    closed.comparator = function(assessment) {
      var factor = this.sortPlannedBy.ascending ? 1 : -1;
      return factor * assessment.get(this.sortClosedBy.value)
    }

    this.each(function(assessmentGps) {
      if( assessmentGps.isPlanned() ){
        planned.add(assessmentGps);

      } else if( assessmentGps.isWip() ){
        wip.add(assessmentGps);

      } else if( assessmentGps.isFinished() ){
        closed.add(assessmentGps);

      }
    });

    var key= {
      planned: planned.models,
      wip: wip.models,
      closed: closed.models
    };

    this.reset();

    for(var i in this.sortAssessmentsBy){
      this.push(key[this.sortAssessmentsBy[i]]);
    }
  },

  isFetched: function(){
    var res = this.every(function(assessmentGps) {
      return assessmentGps.isFetched() // one no fetched => we fetch all again
    });

    return res;
  },

  isOnlyPlanned: function(){
    var res = this.every(function(assessmentGps) {
      return assessmentGps.isPlanned()
    });

    return res;
  },

  setFetched: function(){
    this.each(function(assessmentGps){
      assessmentGps.setFetched();
    });
  }

});

gps.session.fetchedAssessments = [];
gps.models.Backlog = BackendlessBB.Model.extend({
  schemaName: "backlog",
  relationsString: 'assessments.answers.comment,trend_reports',

  validate: function( attributes ) {

    if (!attributes.name || attributes.name.length < 2) {
      return "Backlog name should be at least 2 characters.";
    }
  },

  //this method is not going to the server.
  updateBacklogLocally: function(newAssessment){

    assessments = this.get( 'assessments' );

    var ourAssessment = _.filter( assessments, function( assessment ) {
      return assessment.objectId === newAssessment.id;
    });

    for(property in newAssessment.attributes) {
      ourAssessment[0][property] = newAssessment.attributes[property];
    }
  },

  updateGlobalCopys: function(backlog){

    // Initialize assessments
    gps.backlogAssessments = new gps.collections.Assessments( this.get('assessments') );
    gps.backlogAssessments.sortAssessments();
    backlog.assessments = gps.backlogAssessments.toJSON();

    // Initialize stories
    gps.backlogStories = new gps.collections.Stories( this.get('stories') );
  },

  hasAllAssessmentsFetched: function() {
    var assessmentsGps = new gps.collections.Assessments(this.get('assessments'));

    return assessmentsGps.isFetched();
  },

  setClient: function(clientId){
    this.set('client', clientId);
  },

  addTrendReport: function(gpsTrendReport) {
    var collection = this.get('trend_reports') || [];
    collection.push(gpsTrendReport.toJSON());
    this.set('trend_reports', collection);
  },

  getTrendReports: function() {
    return new gps.collections.TrendReports(this.get('trend_reports') || []);
  },

  getTrendReport: function(reportID) {

    return this.getTrendReports().findWhere({objectId: reportID});
  },

  getName: function() {
    return this.get('name');
  },

  getAssessment: function(assessmentId) {
    var assesColGps = new gps.collections.Assessments(this.getAssessments());
    return assesColGps.get(assessmentId);
  },

  /**
   * Returns the Gps Assessment collection.
   * Assessments is the old name of index, right now Assessments are called Indexes.
   * @returns {gps.collections.Assessments}
   */
  getGpsAssessmentsCollection: function() {
    return new gps.collections.Assessments(this.getAssessments());
  },

  getAssessments: function() {
    return this.get('assessments');
  },

  getAssessmentsId: function() {
    var assessmentsGps = new gps.collections.Assessments(this.getAssessments());
    var res = assessmentsGps.map(function(assessmentGps) {
      return assessmentGps.id
    });

    return res || [];
  }
});

gps.collections.Backlogs = BackendlessBB.Collection.extend({
  model: gps.models.Backlog,

  getAssessmentsId: function() {
    res = [];
    this.each(function(backlogGps){
      res = res.concat(backlogGps.getAssessmentsId());
    });

    return res;
  }
});
gps.models.Client = BackendlessBB.Model.extend({
    schemaName: "client",

    validate: function(attributes) {

        // Name
        if (!attributes.name || attributes.name.length < 3){
            return "Name should be at least 3 characters.";
        }

        // Street
        if (!attributes.street || attributes.street.length < 3){
            return "Street is too short.";
        }

        // City
        if (!attributes.city){
            return "Please enter a city.";
        }

        // ZIP Code
        if (!attributes.zip_code || attributes.zip_code.length < 2){
            return "ZIP code is too short.";
        }

        // Country
        if (!attributes.country){
            return "Please select a country.";
        }

    },

    getBacklogs: function(clientID,organizationID,teamID){
        alert("deprectateed getBacklogs");
        /*
         return gps.backlogs.filter(function(backlog){

         var back_cli_id = backlog.get("client").client_id,
         back_org_id = backlog.get("organization") ? backlog.get("organization").organization_id : "",
         back_team_id = backlog.get("team") ? backlog.get("team") : "";

         if ( back_cli_id === clientID && back_org_id === organizationID &&
         back_team_id === teamID ){
         return backlog;
         }
         });
         */
    },

    getUser: function ( userID ) {
        return _.findWhere(this.get("users"), { objectId: userID });
    },

    getOrganization: function (orgID) {
        return _.findWhere(this.get("organizations"), {objectId: orgID});
    },

    getOrganizations: function(){
      return this.get('organizations');
    },

    getMaturityGroup: function(){
      return this.get('maturity_group_name') || "Gearstream";
    },

    /**
     * this function goes to the server and then updates locally.
     * @param attribs
     * @param orgID
     * @param onfinish
     */
    updateOrganization: function(attribs,orgID,onfinish){

        var organizationAtt = this.getOrganization(orgID),
            organization = new gps.models.Organization(organizationAtt);

        organization.on('invalid', function(model, error){
            onfinish(model, error, null, true);
        });

        organization.save(attribs,{
            success:function(model, result, options){

                var updatedOrg = model.toJSON();
                for(var attr in updatedOrg) {
                  organizationAtt[attr] = updatedOrg[attr];
                }

                onfinish ? onfinish(model, result, options):"";
            },
            error: function(model, error, options){
                if( error.responseJSON && error.responseJSON.message ) {
                    error = error.responseJSON.message;
                }
                onfinish ? onfinish(model, error, options,true):"";
            },
            remote_ignore: ['teams','backlogs'],
            update: true
        });
    },


    getTeam: function(teamID,orgID){

        var organization = _.where( this.get("organizations"), { objectId: orgID } ),
        organization = organization? organization[0] : null;

        if (organization) {
            var team = _.where( organization.teams, { objectId: teamID } ),
            team = team ? team[0] : null;

            return team;
        }

        return null;
    },

    updateTeam: function( gpsTeam, orgID ){

        var organizationOrig = _.where( this.get("organizations"), { objectId: orgID } ),
        organizationOrig = organizationOrig[0];

        var localTeam = _.findWhere( organizationOrig.teams, { objectId: gpsTeam.get("objectId") });

        for(att in gpsTeam.attributes){
            if (att != "backlogs"){
                localTeam[att] = gpsTeam.attributes[att];
            }
        }
    },

    /**
     * Will add the team inside the organization from the client
     * This method does changes locally and in the server.
     * Finally a callback method is going to be invoked.
     */
    addTeam: function(gpsTeam,orgID,onfinish,create){

        // Select the current client
        var organizationOrig = _.where(this.get("organizations"),{organization_id:orgID}),
            organization = gps.clientOrganizations.get(orgID),
            organizationOrig = organizationOrig[0];

        var teamInformation = create ? gpsTeam : gpsTeam.get("team_id");
        // Create the team and add it to the current client
        organization.save('teams', [ teamInformation ], {
            success: function( model, result, options ) {

                var teamslist = organization.get("teams") ?
                    organization.get("teams") : [];

                if (create){
                    teamslist.push( model );
                    organizationOrig.teams = teamslist;
                    onfinish ? onfinish(model, result, options):"";
                }else {
                    gpsTeam.fetchExpanded(2,{
                        success:function(data){
                            teamslist.push( gpsTeam.attributes );
                            // Set these updated list users locally (no server) to the current client
                            organizationOrig.teams = teamslist;
                            onfinish ? onfinish(model, result, options):"";
                        },
                        error:function(data,error,f){
                            if( error.responseJSON && error.responseJSON.message ) {
                                alert(error.responseJSON.message);
                            }
                        }
                    })
                }
            },
            error: function(model, error, options){
                if( error.responseJSON && error.responseJSON.message ) {
                    error = error.responseJSON.message;
                }
                onfinish ? onfinish(model, error, options,true):"";
            }
        });
    },

    /**
     * Will remove the team inside the organization from the client
     * This method does changes locally and in the server.
     * Finally a callback method is going to be invoked.
     */
    removeTeam: function(gpsTeam,orgId,onfininsh){

        var organization,teams,team_id,

            organization_original = _.where(this.get("organizations"),{organization_id:orgId}),
            organization = new gps.models.Organization(organization_original[0]),   //here is doing a copy!
            teams = organization_original[0].teams,
            team_id = gpsTeam.get("team_id");

        organization.removeChild('teams', team_id, {
            success: function(model, result, options){
                organization.get("organization_id");
                var newTeams = _.reject(teams,function(team){
                    if (team.team_id === team_id){
                        return team;
                    }
                });

                organization_original[0].teams = newTeams;
                onfininsh ? onfininsh(model, result, options) : "";
            }.bind(this),
            error:function(model, response, options){
                //how do I know if there was an error?
                if( response.responseJSON && response.responseJSON.message ) {
                    response = response.responseJSON.message;
                }
                onfininsh(model, response, options,true);
            }
        });
    },

  getAssessmentsIdFromClient: function() {
    var orgsGps = new gps.collections.Organizations(this.getOrganizations()),
    res = orgsGps.getAssessmentsIdFromOrg() || [];

    return res;
  }
});

gps.collections.Clients = BackendlessBB.Collection.extend({

    relationsString:
        'users,' +
            'teams,' +

            'organizations.backlogs,' +
            'organizations.backlogs.assessments,' +
            'organizations.backlogs.trend_reports.indexes,' +
            'organizations.backlogs.trend_reports.recommendations,' +
            'organizations.backlogs.stories,' +
            'organizations.backlogs.stories.tasks,' +
            'organizations.backlogs.stories.comments,' +

            'organizations.teams.backlogs.assessments,' +
            'organizations.teams.backlogs.trend_reports.indexes,' +
            'organizations.backlogs.trend_reports.recommendations,' +
            'organizations.teams.backlogs.stories,' +
            'organizations.teams.backlogs.stories.tasks,' +
            'organizations.teams.backlogs.stories.comments,',

    model: gps.models.Client,

    getClientById: function(cliName){
      var clientGps = this.find(function(gpsClient){
        return gpsClient.id == cliName
      });

      return clientGps.toJSON();
    }
});
//This model is used for answers(note) and stories(comments)
gps.models.Comment = BackendlessBB.Model.extend({
  schemaName: "comment",

  initialize: function() {
    var isRemote = this.id,
    user = this.get('user');
 
    if ( isRemote ) {
      this.setRemote( true );
    } else {
      this.setRemote( false );
    }

    if(user && user.username) {
      this.set('user', user.username);
    }

    if( !isRemote ){
      this.setBothDates();
    }

  },

  setRemote: function( option ) {
    this.remote = option;
  },

  setBothDates: function() {
    this.setCreatedDate();
    this.setUpdatedDate(this.getCreatedDate());
  },

  setCreatedDate: function(time) {
    time = time || new Date().getTime();

    this.set('created_date', time);
  },

  setUpdatedDate: function(time) {
    time = time || new Date().getTime();

    this.set('updated_date', time);
  },

  getRemote: function() {
    return this.remote;
  },

  getContents: function(){
    return this.get('contents') || "";
  },

  getCreatedDate: function() {
    return this.get('created_date');
  },

  getUpdatedDate: function() {
    return this.get('updated_date');
  },

  getUsername: function(){
    return this.get('username');
  },

  hasContents: function(){
    return !!(this.getContents().length);
  },

  parse: function(result){
    // new Comment
    if(!result.updated) {
      result.created = Date.parse(result.created);
      result.updated = result.created;
    } else { // edited comment
      result.updated = Date.parse(result.updated);
    }

    return result;
  }

});

gps.collections.Comments = BackendlessBB.Collection.extend({
  model: gps.models.Comment
});
gps.data.countries = [{"name":"United States","shortName":"US"},{"name":"Afghanistan","shortName":"AF"},{"name":"Albania","shortName":"AL"},{"name":"Algeria","shortName":"DZ"},{"name":"American Samoa","shortName":"AS"},{"name":"Andorra","shortName":"AD"},{"name":"Angola","shortName":"AO"},{"name":"Anguilla","shortName":"AI"},{"name":"Antarctica","shortName":"AQ"},{"name":"Antigua and Barbuda","shortName":"AG"},{"name":"Argentina","shortName":"AR"},{"name":"Armenia","shortName":"AM"},{"name":"Aruba","shortName":"AW"},{"name":"Australia","shortName":"AU"},{"name":"Austria","shortName":"AT"},{"name":"Azerbaijan","shortName":"AZ"},{"name":"Bahamas","shortName":"BS"},{"name":"Bahrain","shortName":"BH"},{"name":"Bangladesh","shortName":"BD"},{"name":"Barbados","shortName":"BB"},{"name":"Belarus","shortName":"BY"},{"name":"Belgium","shortName":"BE"},{"name":"Belize","shortName":"BZ"},{"name":"Benin","shortName":"BJ"},{"name":"Bermuda","shortName":"BM"},{"name":"Bhutan","shortName":"BT"},{"name":"Bolivia","shortName":"BO"},{"name":"Bosnia and Herzegovina","shortName":"BA"},{"name":"Botswana","shortName":"BW"},{"name":"Bouvet Island","shortName":"BV"},{"name":"Brazil","shortName":"BR"},{"name":"British Antarctic Territory","shortName":"BQ"},{"name":"British Indian Ocean Territory","shortName":"IO"},{"name":"British Virgin Islands","shortName":"VG"},{"name":"Brunei","shortName":"BN"},{"name":"Bulgaria","shortName":"BG"},{"name":"Burkina Faso","shortName":"BF"},{"name":"Burundi","shortName":"BI"},{"name":"Cambodia","shortName":"KH"},{"name":"Cameroon","shortName":"CM"},{"name":"Canada","shortName":"CA"},{"name":"Canton and Enderbury Islands","shortName":"CT"},{"name":"Cape Verde","shortName":"CV"},{"name":"Cayman Islands","shortName":"KY"},{"name":"Central African Republic","shortName":"CF"},{"name":"Chad","shortName":"TD"},{"name":"Chile","shortName":"CL"},{"name":"China","shortName":"CN"},{"name":"Christmas Island","shortName":"CX"},{"name":"Cocos [Keeling] Islands","shortName":"CC"},{"name":"Colombia","shortName":"CO"},{"name":"Comoros","shortName":"KM"},{"name":"Congo - Brazzaville","shortName":"CG"},{"name":"Congo - Kinshasa","shortName":"CD"},{"name":"Cook Islands","shortName":"CK"},{"name":"Costa Rica","shortName":"CR"},{"name":"Croatia","shortName":"HR"},{"name":"Cuba","shortName":"CU"},{"name":"Cyprus","shortName":"CY"},{"name":"Czech Republic","shortName":"CZ"},{"name":"Côte d’Ivoire","shortName":"CI"},{"name":"Denmark","shortName":"DK"},{"name":"Djibouti","shortName":"DJ"},{"name":"Dominica","shortName":"DM"},{"name":"Dominican Republic","shortName":"DO"},{"name":"Dronning Maud Land","shortName":"NQ"},{"name":"East Germany","shortName":"DD"},{"name":"Ecuador","shortName":"EC"},{"name":"Egypt","shortName":"EG"},{"name":"El Salvador","shortName":"SV"},{"name":"Equatorial Guinea","shortName":"GQ"},{"name":"Eritrea","shortName":"ER"},{"name":"Estonia","shortName":"EE"},{"name":"Ethiopia","shortName":"ET"},{"name":"Falkland Islands","shortName":"FK"},{"name":"Faroe Islands","shortName":"FO"},{"name":"Fiji","shortName":"FJ"},{"name":"Finland","shortName":"FI"},{"name":"France","shortName":"FR"},{"name":"French Guiana","shortName":"GF"},{"name":"French Polynesia","shortName":"PF"},{"name":"French Southern Territories","shortName":"TF"},{"name":"French Southern and Antarctic Territories","shortName":"FQ"},{"name":"Gabon","shortName":"GA"},{"name":"Gambia","shortName":"GM"},{"name":"Georgia","shortName":"GE"},{"name":"Germany","shortName":"DE"},{"name":"Ghana","shortName":"GH"},{"name":"Gibraltar","shortName":"GI"},{"name":"Greece","shortName":"GR"},{"name":"Greenland","shortName":"GL"},{"name":"Grenada","shortName":"GD"},{"name":"Guadeloupe","shortName":"GP"},{"name":"Guam","shortName":"GU"},{"name":"Guatemala","shortName":"GT"},{"name":"Guernsey","shortName":"GG"},{"name":"Guinea","shortName":"GN"},{"name":"Guinea-Bissau","shortName":"GW"},{"name":"Guyana","shortName":"GY"},{"name":"Haiti","shortName":"HT"},{"name":"Heard Island and McDonald Islands","shortName":"HM"},{"name":"Honduras","shortName":"HN"},{"name":"Hong Kong SAR China","shortName":"HK"},{"name":"Hungary","shortName":"HU"},{"name":"Iceland","shortName":"IS"},{"name":"India","shortName":"IN"},{"name":"Indonesia","shortName":"ID"},{"name":"Iran","shortName":"IR"},{"name":"Iraq","shortName":"IQ"},{"name":"Ireland","shortName":"IE"},{"name":"Isle of Man","shortName":"IM"},{"name":"Israel","shortName":"IL"},{"name":"Italy","shortName":"IT"},{"name":"Jamaica","shortName":"JM"},{"name":"Japan","shortName":"JP"},{"name":"Jersey","shortName":"JE"},{"name":"Johnston Island","shortName":"JT"},{"name":"Jordan","shortName":"JO"},{"name":"Kazakhstan","shortName":"KZ"},{"name":"Kenya","shortName":"KE"},{"name":"Kiribati","shortName":"KI"},{"name":"Kuwait","shortName":"KW"},{"name":"Kyrgyzstan","shortName":"KG"},{"name":"Laos","shortName":"LA"},{"name":"Latvia","shortName":"LV"},{"name":"Lebanon","shortName":"LB"},{"name":"Lesotho","shortName":"LS"},{"name":"Liberia","shortName":"LR"},{"name":"Libya","shortName":"LY"},{"name":"Liechtenstein","shortName":"LI"},{"name":"Lithuania","shortName":"LT"},{"name":"Luxembourg","shortName":"LU"},{"name":"Macau SAR China","shortName":"MO"},{"name":"Macedonia","shortName":"MK"},{"name":"Madagascar","shortName":"MG"},{"name":"Malawi","shortName":"MW"},{"name":"Malaysia","shortName":"MY"},{"name":"Maldives","shortName":"MV"},{"name":"Mali","shortName":"ML"},{"name":"Malta","shortName":"MT"},{"name":"Marshall Islands","shortName":"MH"},{"name":"Martinique","shortName":"MQ"},{"name":"Mauritania","shortName":"MR"},{"name":"Mauritius","shortName":"MU"},{"name":"Mayotte","shortName":"YT"},{"name":"Metropolitan France","shortName":"FX"},{"name":"Mexico","shortName":"MX"},{"name":"Micronesia","shortName":"FM"},{"name":"Midway Islands","shortName":"MI"},{"name":"Moldova","shortName":"MD"},{"name":"Monaco","shortName":"MC"},{"name":"Mongolia","shortName":"MN"},{"name":"Montenegro","shortName":"ME"},{"name":"Montserrat","shortName":"MS"},{"name":"Morocco","shortName":"MA"},{"name":"Mozambique","shortName":"MZ"},{"name":"Myanmar [Burma]","shortName":"MM"},{"name":"Namibia","shortName":"NA"},{"name":"Nauru","shortName":"NR"},{"name":"Nepal","shortName":"NP"},{"name":"Netherlands","shortName":"NL"},{"name":"Netherlands Antilles","shortName":"AN"},{"name":"Neutral Zone","shortName":"NT"},{"name":"New Caledonia","shortName":"NC"},{"name":"New Zealand","shortName":"NZ"},{"name":"Nicaragua","shortName":"NI"},{"name":"Niger","shortName":"NE"},{"name":"Nigeria","shortName":"NG"},{"name":"Niue","shortName":"NU"},{"name":"Norfolk Island","shortName":"NF"},{"name":"North Korea","shortName":"KP"},{"name":"North Vietnam","shortName":"VD"},{"name":"Northern Mariana Islands","shortName":"MP"},{"name":"Norway","shortName":"NO"},{"name":"Oman","shortName":"OM"},{"name":"Pacific Islands Trust Territory","shortName":"PC"},{"name":"Pakistan","shortName":"PK"},{"name":"Palau","shortName":"PW"},{"name":"Palestinian Territories","shortName":"PS"},{"name":"Panama","shortName":"PA"},{"name":"Panama Canal Zone","shortName":"PZ"},{"name":"Papua New Guinea","shortName":"PG"},{"name":"Paraguay","shortName":"PY"},{"name":"People's Democratic Republic of Yemen","shortName":"YD"},{"name":"Peru","shortName":"PE"},{"name":"Philippines","shortName":"PH"},{"name":"Pitcairn Islands","shortName":"PN"},{"name":"Poland","shortName":"PL"},{"name":"Portugal","shortName":"PT"},{"name":"Puerto Rico","shortName":"PR"},{"name":"Qatar","shortName":"QA"},{"name":"Romania","shortName":"RO"},{"name":"Russia","shortName":"RU"},{"name":"Rwanda","shortName":"RW"},{"name":"Réunion","shortName":"RE"},{"name":"Saint Barthélemy","shortName":"BL"},{"name":"Saint Helena","shortName":"SH"},{"name":"Saint Kitts and Nevis","shortName":"KN"},{"name":"Saint Lucia","shortName":"LC"},{"name":"Saint Martin","shortName":"MF"},{"name":"Saint Pierre and Miquelon","shortName":"PM"},{"name":"Saint Vincent and the Grenadines","shortName":"VC"},{"name":"Samoa","shortName":"WS"},{"name":"San Marino","shortName":"SM"},{"name":"Saudi Arabia","shortName":"SA"},{"name":"Senegal","shortName":"SN"},{"name":"Serbia","shortName":"RS"},{"name":"Serbia and Montenegro","shortName":"CS"},{"name":"Seychelles","shortName":"SC"},{"name":"Sierra Leone","shortName":"SL"},{"name":"Singapore","shortName":"SG"},{"name":"Slovakia","shortName":"SK"},{"name":"Slovenia","shortName":"SI"},{"name":"Solomon Islands","shortName":"SB"},{"name":"Somalia","shortName":"SO"},{"name":"South Africa","shortName":"ZA"},{"name":"South Georgia and the South Sandwich Islands","shortName":"GS"},{"name":"South Korea","shortName":"KR"},{"name":"Spain","shortName":"ES"},{"name":"Sri Lanka","shortName":"LK"},{"name":"Sudan","shortName":"SD"},{"name":"Suriname","shortName":"SR"},{"name":"Svalbard and Jan Mayen","shortName":"SJ"},{"name":"Swaziland","shortName":"SZ"},{"name":"Sweden","shortName":"SE"},{"name":"Switzerland","shortName":"CH"},{"name":"Syria","shortName":"SY"},{"name":"São Tomé and Príncipe","shortName":"ST"},{"name":"Taiwan","shortName":"TW"},{"name":"Tajikistan","shortName":"TJ"},{"name":"Tanzania","shortName":"TZ"},{"name":"Thailand","shortName":"TH"},{"name":"Timor-Leste","shortName":"TL"},{"name":"Togo","shortName":"TG"},{"name":"Tokelau","shortName":"TK"},{"name":"Tonga","shortName":"TO"},{"name":"Trinidad and Tobago","shortName":"TT"},{"name":"Tunisia","shortName":"TN"},{"name":"Turkey","shortName":"TR"},{"name":"Turkmenistan","shortName":"TM"},{"name":"Turks and Caicos Islands","shortName":"TC"},{"name":"Tuvalu","shortName":"TV"},{"name":"U.S. Minor Outlying Islands","shortName":"UM"},{"name":"U.S. Miscellaneous Pacific Islands","shortName":"PU"},{"name":"U.S. Virgin Islands","shortName":"VI"},{"name":"Uganda","shortName":"UG"},{"name":"Ukraine","shortName":"UA"},{"name":"Union of Soviet Socialist Republics","shortName":"SU"},{"name":"United Arab Emirates","shortName":"AE"},{"name":"United Kingdom","shortName":"GB"},{"name":"Uruguay","shortName":"UY"},{"name":"Uzbekistan","shortName":"UZ"},{"name":"Vanuatu","shortName":"VU"},{"name":"Vatican City","shortName":"VA"},{"name":"Venezuela","shortName":"VE"},{"name":"Vietnam","shortName":"VN"},{"name":"Wake Island","shortName":"WK"},{"name":"Wallis and Futuna","shortName":"WF"},{"name":"Western Sahara","shortName":"EH"},{"name":"Yemen","shortName":"YE"},{"name":"Zambia","shortName":"ZM"},{"name":"Zimbabwe","shortName":"ZW"},{"name":"Åland Islands","shortName":"AX"}];
gps.models.Discipline = BackendlessBB.Model.extend({
  schemaName: "discipline",
  idAttribute: "id",

  hasPractice: function(practiceId){
    return !!(this.getPractice(practiceId));
  },

  getPractice: function(practiceId){
    var practicesGpsCol = new gps.collections.Practices(this.getPractices());
    return practicesGpsCol.getPractice(practiceId)
  },

  getPractices: function(){
    return this.get('practices');
  },

  getName: function(){
    return this.get('name');
  }
});

gps.collections.Disciplines = BackendlessBB.Collection.extend({
  model: gps.models.Discipline,
  relationsString: 'practices.questions.possibleAnsw',

  getDisciplineParent: function(practiceId){
    var discipline;

    this.find(function(disciplineGps){
      if(disciplineGps.hasPractice(practiceId)){
        discipline = disciplineGps.toJSON()
        return true;
      }
      return false;
    });

    return discipline;
  },

  /**
   * Look for the practices for the discipline with name "disciplineName"
   * @param disciplineName - Name of the discipline
   * @returns {Array.<Practice>}
   */
  getPractices: function(disciplineName){
		var currentDisciplineGps = this.find(function(disciplineGps){
			return disciplineGps.getName().toUpperCase() === disciplineName.toUpperCase();
		});

		return currentDisciplineGps.getPractices();
	}
});
gps.models.MaturityDiscipline = BackendlessBB.Model.extend({
  schemaName: "maturity_discipline",

  // GETTERS
  getGroupName: function(){
    return this.get('group_name') || "";
  },

  getDisciplineName: function(){
    return this.get('discipline_name') || "";
  },

  getMaturityValue: function(){
    return this.get('maturity_value');
  },

  getMaturityPractices: function(){
    return this.get('maturity_practices');
  },

  getMaturityLevel: function(){
    return this.get('maturity_level');
  },

  // SETTERS
  setMaturityPractices: function(mps){
    this.set('maturity_practices', mps);
  },


  isNovice: function(){
    return (this.getMaturityLevel().toUpperCase() == "NOVICE");
  },

  isFoundational: function(){
    return (this.getMaturityLevel().toUpperCase() == "FOUNDATIONAL");
  },

  isDisciplineInGroup: function(groupName) {
    return groupName.toUpperCase() == this.getGroupName().toUpperCase();
  },

  getLevelPractices: function(level){
    var gpsColMatPrac = new gps.collections.MaturityPractices(this.getMaturityPractices());
    return gpsColMatPrac.getLevelPractices(level);
  },

  linkMaturityPractices: function(groupName){
    gps.assessments.maturityPractices.each(function(gpsMaturityPractice) {
      if ( gpsMaturityPractice.isPracticeInDisGroup(this.getDisciplineName(), this.getMaturityLevel(), groupName) ) {
        var mps = new gps.collections.MaturityPractices(this.getMaturityPractices());
        mps.addMaturityPractice(gpsMaturityPractice);
        this.setMaturityPractices(mps.toJSON());
      }
    }.bind(this));
  }
});

gps.collections.MaturityDisciplines = BackendlessBB.Collection.extend({
  model: gps.models.MaturityDiscipline,

  addMaturityDiscipline: function(md){
    this.add(md, {merge: true});
  },

  linkMaturityPractices: function(){
    this.each(function(gpsMaturityDiscipline){
      var groupName = gpsMaturityDiscipline.getGroupName();
      gpsMaturityDiscipline.linkMaturityPractices(groupName);
    });
  },

	/**
	 * We modify the current gps collection,
	 * sort the maturity disciplines,
	 * taking the order of the real disciplines.
	 */
  orderMaturityDisciplines: function(){
		// get disciplines' names order, because we have to sort the maturity disciplines in this way
    var discisName = gps.assessments.disciplines.map(function(discipline){
      return discipline.name.toUpperCase();
    }),

		gpsColMatDisOrdered = new gps.collections.MaturityDisciplines(),
		currentLevelDisci = [];

		// iterate the seven disciplines, for each one we get their maturity (mixing groups and levels)
		_.each(discisName, function(disciplineName){
			currentLevelDisci = this.filter(function(gpsMaturityDiscipline){
				return gpsMaturityDiscipline.getDisciplineName().toUpperCase() === disciplineName;
			});

			gpsColMatDisOrdered.add(currentLevelDisci);
		}.bind(this));

		this.set(gpsColMatDisOrdered.toJSON());
  },

  getLevelDisciplines: function(level){
    var levDis = this.filter(function(gpsMaturityDiscipline){
      return (gpsMaturityDiscipline.getMaturityLevel().toUpperCase() === level.toUpperCase());
    });

    return levDis;
  },

  getLevelPractices: function(groupName, disciName, level){
    var allMatPract = gps.assessments.maturityPractices,
    gpsMaturityDiscipline = this.find(function(gpsMaturityDiscipline){
          var sameDisciName = gpsMaturityDiscipline.getDisciplineName().toUpperCase() === disciName.toUpperCase(),
          sameDisciLevel = gpsMaturityDiscipline.getMaturityLevel().toUpperCase() === level.toUpperCase();

          return sameDisciName && sameDisciLevel;
    }),
    levelPrac;

    if (gpsMaturityDiscipline){
      levelPrac = gpsMaturityDiscipline.getLevelPractices(level)
    }
    else {

      levelPrac = gps.assessments.maturityPractices.getLevelPracticesFromAll(groupName, disciName, level);
    }

	// post condition of this method is to sort the result by practice_name
	levelPrac = _.sortBy(levelPrac, function(gpsLevelPractice){
		return gpsLevelPractice.get('practice_name');
	});

    return levelPrac;
  },

	setMaturityPractices: function (matPractices){
		this.each(function(gpsMatDiscipline){
			gpsMatDiscipline.setMaturityPractices(matPractices);
		});
	},

	save: function(){
		this.each(function(gpsMatDiscipline){
			gpsMatDiscipline.save(gpsMatDiscipline.toJSON());
		});
	}
});
gps.models.MaturityGroup = BackendlessBB.Model.extend({
  schemaName: "maturity_group",

  // GETTERS
  getName: function() {
    return this.get('name');
  },

  getMaturityDisciplines: function() {
    return this.get('maturity_disciplines');
  },

  // SETTERS
  setMaturityDisciplines: function(mds) {
    this.set('maturity_disciplines', mds);
  },


  linkMaturityDisciplines: function() {
    // We empty previous linking
    this.setMaturityDisciplines([]);

    gps.assessments.maturityDisciplines.each(function (gpsMaturityDiscipline) {
      if (gpsMaturityDiscipline.isDisciplineInGroup(this.getName())) {
        var mds = new gps.collections.MaturityDisciplines(this.getMaturityDisciplines());
        mds.addMaturityDiscipline(gpsMaturityDiscipline);
        this.setMaturityDisciplines(mds.toJSON());
      }
    }.bind(this));
  },

  getLevelDisciplines: function(level) {
    var gpsColMatDisc = new gps.collections.MaturityDisciplines(this.getMaturityDisciplines());
    return gpsColMatDisc.getLevelDisciplines(level);
  },

  getLevelPractices: function(discipline, level) {
    var gpsColMatDisc = new gps.collections.MaturityDisciplines(this.getMaturityDisciplines());
    return gpsColMatDisc.getLevelPractices(this.getName(), discipline, level);
  }
});

gps.collections.MaturityGroups = BackendlessBB.Collection.extend({
  model: gps.models.MaturityGroup,

  linkMaturityDisciplines: function(){
    this.each(function(gpsGroup){
      gpsGroup.linkMaturityDisciplines();
    });
  },

  save: function(){
    this.each(function(gpsGroup){
      gpsGroup.save(gpsGroup.toJSON());
    });
  },

	saveRelations: function(){
		this.each(function(gpsGroup){

			// save the maturity disciplines first
			var gpsMatDisciplines = new gps.collections.MaturityDisciplines(gpsGroup.getMaturityDisciplines());
			gpsMatDisciplines.save();

			// after that, we save the groups. Now disciplines are not linked with practices
			gpsMatDisciplines.setMaturityPractices([]);
			gpsGroup.setMaturityDisciplines(gpsMatDisciplines.toJSON());
			gpsGroup.save(gpsGroup.toJSON());
		});
	}
});


gps.models.MaturityPractice = BackendlessBB.Model.extend({
  schemaName: "maturity_practice",

  // GETTERS
  getDisciplineName: function(){
    return this.get('discipline_name');
  },

  getGroupName: function(){
    return this.get('group_name')
  },

  getMaturityLevel: function(){
    return this.get('maturity_level');
  },

  getMaturityValue: function(){
    // If it is range, get the right side of the hyphan
    var matValStr = this.get('maturity_value').replace(/.*\-/, "");

    return parseInt(matValStr);
  },

  getRange: function(){
    var maturityValue = this.getMaturityValue(),
    rangeRes = 0.5,             // default value
    range, leftVal, rightVal;

    if(maturityValue == 0)
      rangeRes = 0;
    else if (this.isRangeValue()){

      leftVal = this.get('maturity_value').replace(/\-.*/, "");
      rightVal = this.getMaturityValue();
      range = rightVal - parseInt(leftVal);
      if (range && range > 0){
        rangeRes = range;
      }
    }

    return rangeRes;
  },

  getPracticeName: function(){
    return this.get('practice_name');
  },

  isRangeValue: function(){
    return (this.get('maturity_value').indexOf('-') != -1);
  },

  isPracticeInDisGroup: function(name, level, groupName){
    var sameName = name.toUpperCase() === this.getDisciplineName().toUpperCase(),
    sameLevel = level.toUpperCase() === this.getMaturityLevel().toUpperCase(),
    sameGroupName = groupName.toUpperCase() === this.getGroupName().toUpperCase();

    return sameName && sameLevel && sameGroupName;
  }
});

gps.collections.MaturityPractices = BackendlessBB.Collection.extend({
  model: gps.models.MaturityPractice,

  comparator: 'discipline_name',

  addMaturityPractice: function(mp){
    this.add(mp, {merge: true});
  },

  getLevelPractices: function(level){
    var levPrac = this.filter(function(gpsMaturityPractice){
      return (gpsMaturityPractice.getMaturityLevel().toUpperCase() === level.toUpperCase());
    });

    return levPrac;
  },

  getLevelPracticesFromAll: function(groupName, disciName, level){
    var levPrac = this.filter(function(gpsMaturityPractice){
      return gpsMaturityPractice.isPracticeInDisGroup(disciName, level, groupName)
    });

    return levPrac;
  },

  sortPracticesByName: function(){
    this.comparator = 'practice_name';
    this.sort();
  }
});
gps.models.Organization = BackendlessBB.Model.extend({

  schemaName: "organization",


  validate: function( attributes ) {

    if (!attributes.name || attributes.name.length < 2){
      return "Organization name should be at least 2 characters.";
    }
  },

  getBacklogs: function(){
    return this.get('backlogs');
  },

  getTeams: function(){
    return this.get('teams');
  },

  relationsString:
    'backlogs.stories,' +
      'backlogs.assessments,' +

      'teams.backlogs.stories,' +
      'teams.backlogs.assessments,'
});

gps.collections.Organizations = BackendlessBB.Collection.extend({
	model: gps.models.Organization,

  getAssessmentsIdFromOrg: function(){
    var res = [];

    this.each(function(orgGps){
      res = res.concat(new gps.collections.Backlogs(orgGps.getBacklogs()).getAssessmentsId());
      res = res.concat(new gps.collections.Teams(orgGps.getTeams()).getAssessmentsIdFromTeam())
    });

    return res;
  }

});
gps.models.PossibleAnswer = BackendlessBB.Model.extend({
  schemaName: "possible_answer",

  parse:function(resp){
      BackendlessBB.Model.prototype.parse.apply(this, arguments);

      this.attributes.values = JSON.parse(resp.values);

      return resp;
  },

  save:function(attributes, options){
    this.attributes.values = JSON.stringify(attributes.values);
    arguments[0].values = JSON.stringify(attributes.values);
    
    BackendlessBB.Model.prototype.save.apply(this, arguments, options);
  }

});

gps.collections.PossibleAnswers = BackendlessBB.Collection.extend({
  model: gps.models.PossibleAnswer
});
gps.models.Practice = BackendlessBB.Model.extend({
  schemaName: "practice",

  hasQuestion: function(questionId){
    return !!(this.getQuestion(questionId));
  },

  getPractice: function(practiceId){

  },

  getQuestion: function(questionId){
    var questionGpsCOl = new gps.collections.Questions(this.getQuestions());
    return questionGpsCOl.getQuestion(questionId)
  },

  getQuestions: function(){
    return this.get('questions');
  },

  getName: function(){
    return this.get('name');
  }
});

gps.collections.Practices = BackendlessBB.Collection.extend({
  model: gps.models.Practice,

  getPractice: function(practiceId){
    return this.findWhere({objectId: practiceId});
  },

  lookForQuestion: function(questionId) {
    var practiceAndQuestion;

    this.find(function(practiceGps){
      var question = practiceGps.getQuestion(questionId);

      if(question){
        practiceAndQuestion = {
          practice: practiceGps.toJSON(),
          question: question
        };
        return true;
      }
      return false;
    });

    return practiceAndQuestion;
  }

});
gps.models.Question = BackendlessBB.Model.extend({
  schemaName: "question",

  getTitle: function(){
    return this.get('title');
  }
});

gps.collections.Questions = BackendlessBB.Collection.extend({
  model: gps.models.Question,

  getQuestion: function(questionId){
    var questionGps = this.findWhere({objectId: questionId});

    if(questionGps){
      return questionGps.toJSON()
    }
    return;
  }
});
gps.models.Status = Backbone.Model.extend();

gps.collections.Statuses = BackendlessBB.Collection.extend({
  model: gps.models.Status,

  getStatusById: function(id) {
    var res = this.findWhere({id: id});

    return res.get('name');
  }
});

gps.statuses = new gps.collections.Statuses([
  {
    "id": 1,
    "name": "Backlog"
  },
  {
    "id": 2,
    "name": "WIP"
  },
  {
    "id": 3,
    "name": "Blocked"
  },
  {
    "id": 4,
    "name": "Done"
  }
]);
gps.models.Story = BackendlessBB.Model.extend({

  schemaName: "story",

  validate: function( attributes ) {
    // Name
    if ( !attributes.story_name || attributes.story_name.length < 2 ){
      return "Story name should be at least 2 characters.";
    }
  },

  setActions: function(colActions){
    this.set('tasks', colActions);
  },

  getComments: function() {
    return this.get('comments') || [];
  },

  getActions: function() {
    return this.get('tasks') || [];
  },

  getComment: function(commentId) {
    var comment = _.findWhere(this.getComments(), {
      objectId: commentId
    });

    return comment;
  },

  relationsString:
    'tasks,' +
      'comments'

});

gps.collections.Stories = BackendlessBB.Collection.extend({

  relationsString:
    'tasks,' +
    'comments',

  model: gps.models.Story

});
/**
 * this entity will represent the current information 
 * that tell us where things were updated.
 */

gps.models.SyncInfo = BackendlessBB.Model.extend({

  schemaName: "syncinfo"

});

gps.collections.SyncInfos = BackendlessBB.Collection.extend({
    model: gps.models.SyncInfo
});
gps.models.Task = BackendlessBB.Model.extend({
  schemaName: "task",

  initialize: function (){
    this.on('invalid', function(model, error) {
      alert(error);
      this.error = true;
    }, this);
  },

  validate: function(attributes) {
    if (!attributes.name || attributes.name.length < 2) {
      return "Action name should be at least 2 characters."
    }

    if (!attributes.status) {
      return "Please select the status of the task.";
    }

    // The Time Estimate attribute should be an optional field with no value required
    if (attributes.estimated_time && !Number(attributes.estimated_time)) {
      return "Please type a valid time in hours.";
    }
  }
});

gps.collections.Tasks = BackendlessBB.Collection.extend({
  model: gps.models.Task
});
gps.models.Team = BackendlessBB.Model.extend({
  
  schemaName: "team",

  validate: function( attributes ) {

    if (!attributes.team_name || attributes.team_name.length < 2){
      return "Team name should be at least 2 characters.";
    }

    if (!attributes.organization || attributes.organization.length < 2){
      return "Please select a valid organization";
    }
  },

  getBacklogs: function(){
    return this.get('backlogs');
  }
});

gps.collections.Teams = BackendlessBB.Collection.extend({

  model: gps.models.Team,

  getAssessmentsIdFromTeam: function(){
    var res = [];

    this.each(function(teamGps){
      var backlogsGps = new gps.collections.Backlogs(teamGps.getBacklogs());
      res = res.concat(backlogsGps.getAssessmentsId())
    });
    return res;
  }

});
/**
 * This Entity aims to represent a snapshot report of the current state with history
 * of the progress about one backlog.
 */

gps.models.TrendReport = BackendlessBB.Model.extend({

  //it's linked to the necessary source information to generate report.
  schemaName: 'trend_report_source',

  maturityLevels: ['Novice', 'Foundational', 'Mastery'],

  /**
   * Sets the name of the report.
   * @param name
   */
  setName: function(name) {
    this.set('name', name);
  },

  /**
   * @param teamMaturity
   */
  setTeamMaturityLevel: function(teamMaturityLevel) {
    this.set('team_maturity_level', teamMaturityLevel);
  },

  setOrgMaturityLevel: function(orgMaturityLevel) {
    this.set('organization_maturity_level', orgMaturityLevel);
  },

  setFindingBrief: function(findingBrief) {
    this.set('finding_brief', findingBrief);
  },

  setIndexes: function(indexesGpsCollection) {
    this.set('indexes', indexesGpsCollection.toJSON());
  },

  setTrendReportRecommendations: function(trendReportCollection) {
    this.set('trendReportRecommendations', trendReportCollection);
  },

  /**
   * Returns the name of the entity.
   * @returns {*}
   */
  getName: function() {
    return this.get('name');
  },

  /**
   * Returns the recommendations associated with this entity.
   * @returns {gps.collections.TrendReportRecommendations}
   */
  getTrendReportRecommendations: function() {
    return new gps.collections.TrendReportRecommendations(this.get('recommendations') || []);
  },

  getIndexes: function() {

    //if is array => is coming from the server
    // and we need to convert it to a gps collection.
    if (jQuery.isArray(this.get('indexes'))) {
      return new gps.collections.Assessments(this.get('indexes'));
    }

    return this.get('indexes') || new gps.collections.Assessments();
  },

  /**
   * @param teamMaturity
   */
  getTeamMaturity: function() {
    return this.get('team_maturity_level') || '';
  },

  getOrganizationMaturity: function() {
    return this.get('organization_maturity_level') || '';
  },

  getIndexingPerformance: function() {
    return this.get('indexingPerformance') || '';
  },

  getCurrentMaturityMarker: function() {
    return this.get('currentMaturityMarker') || '';
  },

  getFindingBrief: function() {
    return this.get('finding_brief') || '';
  },

  getTarget: function() {
    return '';
  },

  /**
   * Will return needed information to populate IndexingTrendTable
   * Output example:
   * {
   *  headers: ["JAN '14", "MAR '14", "JUN '14", "SEP '14"],
   *  collaborating : [{val:35, trend: -1},{val:35, trend: 1}, {val:35, trend: -1}, {val: -1, trend: -1}],
   *   ...
   * }
   * Where
   *  val: stat of the corresponding discipline.
   *  trend: indicates if it's better than the latest iteration check.
   */
  getIndexingTrendsTableInfo: function() {

    var indexes = new gps.collections.Assessments(jQuery.extend(true, [], this.getIndexes())), startingDate,
    //obtain the latest day or if indexes is empty => date of today.
        latestDate = indexes.size() && indexes.last().getEndDate() || new Date();

    //We always have to have a virtual index for the future, having End date 1 month ahead.
    indexes.add(new gps.models.Assessment().setEndDate(moment(latestDate).add(1, 'M')));

    //we should always have 4 indexes, if we don't have 4 => we create virtual ones.
    while( indexes.size() < 4 ) {
      startingDate = indexes.first().getEndDate();
      indexes.add(new gps.models.Assessment().setEndDate(moment(startingDate).subtract(1, 'M')), {at: 0});
    }

    return indexes
      .reduce(function(result, index) {
        var previous, stats = index.getMyResults();

        //we add the header corresponding to the end date, using a format of 3 letters of Month 'Year.
        (result['headers'] || (result['headers'] = [])).push(moment(index.getEndDate()).format("MMM 'YY"));

        _.each(stats.disciplines, function(discipline) {

          //here we add for each discipline the total points they have completed.
          (result[discipline.discipline_name] || (result[discipline.discipline_name] = [])).push({
            val: discipline.total ? discipline.total.toFixed(2) : -1,
            trend: previous && previous.total < discipline.total ? 1 : -1
          });

          //we store previous discipline to do a comparison in the next iteration.
          previous = discipline;
        });
        return result;
      }, {});
  },

  //return [{val: 12, date: 2929299292}, {val: 12, date: 2929299292}, {val: 12, date: 2929299292}];
  getTrendsTowardsSustainability: function() {

    //we will return an array with the end date and the average score per Index.
    return this.getIndexes()
      .reduce(function(m, index) {
        m.push({
          date: index.getEndDate(),
          val : index.getAverageScore()
        });
        return m;
      }, []);
  },

  //return [ {completed: false, index: 2929299292, desc: 'des1'}];
  getTopRecommendations: function() {

    //by default we should always have 5 recommendations.
    if (!this.get('recommendations')) {

      var coll = [];

      for(var i = 0; i < 5; i++) {
        coll.push(new gps.models.TrendReportRecommendation({description: '', index: -1}));
      }
      this.set('recommendations', coll);
    }
    return new gps.collections.TrendReportRecommendations(this.get('recommendations'));
  },

  /**
   * This is only an average of all 7 disciplines for the last Index completed.
   */
  getCurrentScore: function() {
    return this.currentScore || (this.currentScore = this._getCurrentScore());
  },

  /**
   * Returns the average current score of the latest index.
   * @returns {*|string|number}
   * @private
   */
  _getCurrentScore: function() {
    var latestIndex = this.getIndexes().last();
    return latestIndex && latestIndex.getAverageScore() || 0;
  }
});

/**
 * Collection of TrendReports.
 */
gps.collections.TrendReports = BackendlessBB.Collection.extend({
  model: gps.models.TrendReport,

  /**
   * this will return an array of objects with id and name.
   * @returns {Array|*}
   */
  toJSON: function() {
    return _.map(this.models,function(item) {
      return {id: item.get('objectId') , name: item.getName()}
    })
  }
});
gps.models.TrendReportRecommendation = BackendlessBB.Model.extend({
  schemaName: 'trend_report_recommendation',

  setDescription: function(description) {
    this.set('description', description);
  },

  setCompleted: function(compleated) {
    this.set('completed', compleated);
  },

  getDescription: function() {
    return this.get('description') || '';
  },

  setIndex: function(index) {
    this.set('index', index)
  },

  getIndex: function() {
    return this.get('index');
  },

  getCompleted: function() {
    return this.get('completed');
  }
});

gps.collections.TrendReportRecommendations = BackendlessBB.Collection.extend({
  model: gps.models.TrendReportRecommendation,

  toJSON: function() {
    return _.map(this.models, function(item) {
      return {desc: item.getDescription(), index: item.getIndex(), completed: item.getCompleted()}
    })
  }
});
gps.models.User = BackendlessBB.User.extend({
    
  schemaName:'Users',

  initialize: function () {

  },

  validate: function( attributes ) {

    // First name
    if (!attributes.first_name || attributes.first_name.length < 2){
        
      return "User's first name should be at least 2 characters.";
    }

    // Last name
    if (!attributes.last_name || attributes.last_name.length < 2){
        
      return "User's last name should be at least 2 characters.";
    }

    // Email
    if (!attributes.email || attributes.email.length < 2 || attributes.email.indexOf('@') == -1) {

      return "Email Address is not valid.";
    }

    // Username
    if (!attributes.username || attributes.username.length < 2){
        
      return "Username is too short.";
    }

    // password
    /*if (attributes.password && attributes.password.length < 2){

      return "Password is too short.";
    }*/
  },

  validatePassword: function(password){

    if (password.length < 2){
      
      return "Password is too short.";
    }
  }
});


gps.collections.Users = BackendlessBB.Collection.extend({
  model: gps.models.User
});
function assessmentController(){}
assessmentController.prototype = {};
assessmentController.prototype.addAssessmentLocally = function(assessment,backlogID){

  var realBacklog = gps.controllers.backlogController.getBacklog(backlogID).backlog;
  var assessments = realBacklog.assessments || [];
  assessments.push(assessment);
  realBacklog.assessments = assessments;
}

assessmentController.prototype.updateAssessmentLocally = function(attrs, backlogId) {

  // update the client tree
  var backlogGps = gps.controllers.backlogController.getGpsBacklog(backlogId),
  assessments = backlogGps.getAssessments(),
  currentAssessment = _.findWhere(assessments, {
    objectId: attrs.objectId
  });
  _.extend(currentAssessment, attrs);

  // update the global variable
  if(gps.backlogAssessments) {
    var assessmentGps = gps.backlogAssessments.get(currentAssessment.objectId);
    //currentAssessment.answers && assessmentGps.set('answers', currentAssessment.answers);
    assessmentGps.set(attrs);
  }
}

assessmentController.prototype.getAnsweredQuestionsIds = function(assessment){
  var answers = [];
  if(assessment instanceof Backbone.Model) {
      answers = assessment.get("answers");
  }
  else {
      answers = assessment.answers;
  }

  var questions_ids = [];
  _.each(answers,function(answer) {
      if(typeof answer.score == 'number') {
          questions_ids.push(answer["question_id_st"]);
      }
  });

  return questions_ids;
}

assessmentController.prototype.getCompletedPercentage = function(assessment){

  var answers = this.getAnsweredQuestionsIds(assessment),
  questions = _.pluck(gps.controllers.disciplineController.getAllQuestions(), 'objectId'),
  intersection = _.intersection(questions,answers);

  //Calculate percentage
  var completed = Math.round(( intersection.length / questions.length) * 100);

  return completed;
}

assessmentController.prototype.setCompletedPercentage = function(percent, assessmentId, backlogId){
  var backlogGps = gps.controllers.backlogController.getGpsBacklog(backlogId),
      assessments = backlogGps.getAssessments(),
      currentAssessment = _.findWhere(assessments, {
        objectId: assessmentId
      });

  currentAssessment.percent_completed = percent;
}

assessmentController.prototype.isCompleted = function(assessment){

    return !!assessment.ended_date;
}

assessmentController.prototype.getFormatDate = function(date){

  var array = date.toUTCString().split(" ");
  return (array[1] + ". " + array[2] + " " +  array[3]);
}

assessmentController.prototype.getProgressInfo = function(assessment){
  var  percent = assessment.percent_completed || 0,
  res = percent + "% Done ",
  allQuestions;

  if(assessment.answers){
    var answered = this.getAnsweredQuestionsIds(assessment)
    allQuestions = gps.controllers.disciplineController.getAllQuestions();
    res += "(" + answered.length + "/" + allQuestions.length + ")";
  }
  else {
    var allQuestions = gps.controllers.disciplineController.getAllQuestions(),
    answeredLength = Math.round(percent * allQuestions.length / 100);
    res += "(" + answeredLength + "/" + allQuestions.length + ")";
  }

  return res;
}

assessmentController.prototype.getStatusData = function(assessment){
  var id = assessment.status ? parseInt(assessment.status) : 1,
  data = {};

  switch(id) {
    case 1:
      data['status'] = 'Planned for:';
      data['info'] = this.getFormatDate(new Date(assessment.startdate));
      break;
    case 2:
      data['status'] = 'WIP:';
      data['info'] = this.getProgressInfo(assessment);
      break;
    case 3:
      data['status'] = 'Blocked';
      data['info'] = '';
      break;
    case 4:
      data['status'] = 'Completed on:';
      data['info'] = this.getFormatDate(new Date(assessment.ended_date));
      break;
  }

  return data;
};

assessmentController.prototype.getImpediments = function(backlog){
  var impediments = [];

  _.each(backlog.assessments, function(assessment) {

    _.each(assessment.answers, function(answer) {
      if(answer.comment && answer.comment.impediment) {
        impediments.push(answer.comment);
      }
    })
  })

  return impediments;
};

assessmentController.prototype.getAveragePercentageCompleted = function(assessmentArray){

    var value = 0;
    for(var i in assessmentArray){
        value += this.getCompletedPercentage(assessmentArray[i]);
    }

    return {imagePercent: Math.round(value/assessmentArray.length/10) * 10, exactPercent: Math.round(value/assessmentArray.length)};
}


assessmentController.prototype.getAllComments = function(assessmentGps) {
  return assessmentGps.getAllCommentsInfo();
}

assessmentController.prototype.refreshPercentageCompleted = function(assessment, backlogId){

  var assessmentGps = new gps.models.Assessment(assessment),
  realPercent = this.getCompletedPercentage(assessmentGps),
  dataBasePercent = assessmentGps.getPercentCompleted(),
  hasToRefresh = dataBasePercent != realPercent;

  if(hasToRefresh){
    assessmentGps.setPercentCompleted(realPercent);
    assessmentGps.save(assessmentGps.toJSON());
    this.setCompletedPercentage(realPercent, assessmentGps.id, backlogId);
  }

}

// Before using this, we have to load all the assessments answers
assessmentController.prototype.migrateToAssessmentIdAttribute = function(){
  gps.counter = 0;
  if(this.migrate){
    gps.clients.each(function(client){
      _.each(client.toJSON().organizations, function(org){

        _.each(org.backlogs, function(backlog){
          _.each(backlog.assessments, function(assess){
            _.each(assess.answers, function(answer){
              console.log(gps.counter++);
              var answerGps = new gps.models.Answer(answer);
              if(!answerGps.has('assessment_id')){
                answerGps.set('assessment_id', assess.objectId.toString());
                answerGps.save(answerGps.toJSON);
              }
            });
          });
        });

        _.each(org.teams, function(team){
          _.each(team.backlogs, function(backlog){
            _.each(backlog.assessments, function(assess){
              _.each(assess.answers, function(answer){
                console.log(gps.counter++);
                var answerGps = new gps.models.Answer(answer);
                if(!answerGps.has('assessment_id')){
                  answerGps.set('assessment_id', assess.objectId.toString());
                  answerGps.save(answerGps.toJSON);
                }
              });
            });
          });
        });
      });
    });
  }
};

gps.controllers = gps.controllers || {};
gps.controllers.assessmentController = new assessmentController();

gps.controllers.assessmentController.migrate = false;

function backlogController(){}
backlogController.prototype = {};

/**
 * This method will create a new Backlog inside a Organization or a team.
 * If the team is specified, then the team will be used, if not => will use the org.
 * @param gpsOrg
 * @param gpsTeam
 * @param callback
 */
backlogController.prototype.createBacklog = function(attributes,gpsClient,orgID,teamID,callback){

    if (!gpsClient){

        callback(null,"Please select a Client",null,true);
        return;
    } else if (!orgID){

        callback(null,"Please select an Organization",null,true);
        return;
    } else {
        var validateMessage = gps.models.Backlog.prototype.validate(attributes);
        if (validateMessage){
            callback(null,validateMessage,null,true);
            return;
        }
    }

    var backlogs = this.getBacklogsWithClient(gpsClient.id,orgID);
    var hasBacklogWithName = _.where(backlogs,{name:attributes.name});
    if (hasBacklogWithName && hasBacklogWithName.length > 0){

        callback(null,"This backlog name is already in use, please enter a unique name.",null,true);
        return;
    }

    var backlog = new gps.models.Backlog();
    backlog.set(attributes);
    backlog.setClient(gpsClient.id);

    if (teamID){

        var team = gpsClient.getTeam(teamID,orgID),
            gpsTeam = new gps.models.Team(team);

        /**
         * I haven't tested this yet.
         */
        gpsTeam.save("backlogs",[backlog],{
            success:function(model, result, options){

                var backlogs = model.get('backlogs'),
                newBacklog = backlogs[backlogs.length - 1];

                var currentBacklogs = team.backlogs || [];

                // important because we use length in templates
                newBacklog.stories = [];
                newBacklog.assessments = [];

                currentBacklogs.push(newBacklog);

                team.backlogs = currentBacklogs;

                callback(model,result,options);
            },
            error:function(model, result, options){

                callback(model,result,options,true);
            }
        })
    } else {

        var org = gpsClient.getOrganization( orgID),
            gpsOrg = new gps.models.Organization(org);

        gpsOrg.save("backlogs", [backlog], {
            success:function(model, result, options){

                var backlogs = model.get('backlogs'),
                newBacklog = _.last(backlogs);

                var currentBacklogs = org.backlogs || [];

                // important because we use length in templates
                newBacklog.stories = [];
                newBacklog.assessments = [];

                currentBacklogs.push(newBacklog);

                org.backlogs = currentBacklogs;
                callback(model, result, options);
            },
            error:function(model,error,options){

                callback(model,error,options,true);
            },
            remote_ignore: ['teams', 'backlogs']
        })
    }

    return this;
};

/**
 * Backlog need to exist in the current scope.
 * @param attr
 * @param backlogID
 * @param gpsClient
 * @param orgID
 * @param teamID
 * @param callback
 */
backlogController.prototype.updateBacklog = function(attr,backlogID,gpsClient,orgID,teamID,callback){

    var backlogs = this.getBacklogsWithClient(gpsClient.id,orgID);
    var hasBacklogWithName = _.where(backlogs,{name:attr.name});
    if (hasBacklogWithName && hasBacklogWithName.length > 0){

        callback(null,"This backlog name is already in use, please enter a unique name.",null,true);
        return;
    }

    var newBacklog = new gps.models.Backlog({objectId:backlogID});

    newBacklog.on('invalid', function(model, error){
      alert(error);

      return;
    });

    newBacklog.save(attr,{
        success:function(model, result, options){
            if (teamID){

                var team = gpsClient.getTeam(teamID,orgID),
                    backlogs = team.backlogs || [];
                var this_backlog = _.where(backlogs,{objectId:backlogID})[0];

                //I have to update all the attributes.
                for(var att in attr){
                    this_backlog[att] = model.attributes[att];
                }
            } else {

                var org = gpsClient.getOrganization(orgID),
                    backlogs = org.backlogs || [];
                var this_backlog = _.where(backlogs,{objectId:backlogID})[0];

                //I have to update all the attributes.
                for(var att in attr){
                    this_backlog[att] = model.attributes[att];
                }
            }
            callback(model, result, options);
        },
        error:function(model, error, options){
          if( error.responseJSON && error.responseJSON.message ) {
            error = error.responseJSON.message;
          }
          callback(model, error, options,true);
        }
    })
};

/**
 * Get backlog but with the GPS wrapper.
 * @param backlogID
 * @returns {*}
 */
backlogController.prototype.getGpsBacklog = function(backlogID) {

    var backlogInfo = this.getBacklog(backlogID);
    if (backlogInfo.backlog) return new gps.models.Backlog(backlogInfo.backlog);
    else return {};
};

/**
 * Will add the team inside the organization from the client
 * This method does changes locally and in the server.
 * Finally a callback method is going to be invoked.
 */
backlogController.prototype.addUpdateTeam = function( team, client, organization, callback ) {

  // Push the new team
  /*var teams = organization.get('teams') || [];
  teams.push(team.toJSON());*/

  organization.save( 'teams', [team], {

    success: function( model, response, options ) {

      var teams = response.teams,
      newTeam = new gps.models.Team( _.last(teams) );

      // Use the backbone team model to add it on the teams collection
      gps.clientTeams.add( newTeam );

      var organizations = client.get('organizations'),
      newOrganizations;

      // Compose an array of all organizations without this current organization
      newOrganizations = _.reject( organizations, function( organization ) {
        return ( organization.objectId === response.objectId );
      });

      // Now we will add the new organization to the new organizations list
      newOrganizations.push( model.toJSON() );

      // Set these updated array of organizations locally (no server) to the current client
      client.set( 'organizations', newOrganizations);

      // All new teams should have a backlog inside with the same name of the team.
      var item = {
        name : newTeam.get( 'team_name' ) + " Backlog"
      },
      orgId = organization.get( 'objectId' ),
      teamId = newTeam.get('objectId');

      this.createBacklog( item, client, orgId, teamId, function( modelBacklog, resultBacklog, optionsBacklog, error ) {
        if (error){
          if( resultBacklog.responseJSON && resultBacklog.responseJSON.message ) {
            resultBacklog = resultBacklog.responseJSON.message;
          }
          callback ? callback( model, resultBacklog, error) : "";
        }
        else {
          callback ? callback( model, resultBacklog, error ) : "";
        }
      });

    }.bind(this),

    error: function ( model, error ) {
      organization.set('teams',
        _.filter( teams, function(team) {
          return ( !!team.objectId );
        })
      );

      if( error.responseJSON && error.responseJSON.message ) {
        callback ? callback( model, error.responseJSON.message, true ) : "";
      }
    }.bind(this),
    remote_ignore: ['backlogs','teams']
  });

};

backlogController.prototype.updateTrendReportsLocally = function(backlogID, trend_reports) {

  var result = this.getBacklog(backlogID);
      result.backlog && (result.backlog.trend_reports = trend_reports);
};

backlogController.prototype.getBacklog = function(backlogID){

    var backlog, backlogInfo = {};
    gps.clients.every(function(client){

        var organizations = client.get("organizations");
        for(var orgKey in organizations){

            var org = organizations[orgKey];

            if (org.backlogs){
                backlog = _.where(org.backlogs,{objectId:backlogID});
                if (backlog.length > 0) {
                    backlog = backlog[0];
                    backlogInfo.backlog = backlog;
                    backlogInfo.clientId = client.id;
                    backlogInfo.organizationID = org.objectId;
                    return false;
                }
            }
            var teams = org.teams;
            for (var teamKey in teams){

                var team = teams[teamKey];
                if (team.backlogs){
                    backlog = _.where(team.backlogs,{objectId:backlogID});
                    if (backlog.length > 0) {
                        backlog = backlog[0];
                        backlogInfo.backlog = backlog;
                        backlogInfo.clientId = client.id;
                        backlogInfo.organizationID = org.objectId;
                        backlogInfo.teamId = team.objectId;
                        return false;
                    }
                }
            }
        }
        return true;    //continue the search.
    });
    return backlogInfo;
};

backlogController.prototype.getBacklogsWithClient = function(clientID,organizationID){

    var client = gps.clients.get(clientID);
    var backlogs = [],
        organizations = client.get("organizations");

    for(var orgKey in organizations){

        var org = organizations[orgKey];
        if (org.objectId == organizationID){

            var teams = org.teams;
            if (org.backlogs) backlogs = backlogs.concat(org.backlogs);//is important to load org backlogs first.
            for (var team in teams){

                if (teams[team].backlogs)
                    backlogs = backlogs.concat(teams[team].backlogs);
            }
            return backlogs;
        }
    }
    return backlogs;
};

backlogController.prototype.getBacklogs = function(organization){
    var backlogs = _.toArray(organization.backlogs);

    _.each(organization.teams, function(team) {
        backlogs = backlogs.concat(_.toArray(team.backlogs));
    });

    _.each(backlogs, function(backlog) {
        var assessments_completed = _.filter(backlog.assessments, function(assessment) {
            return gps.controllers.assessmentController.isCompleted(assessment);
        });

        backlog["assessments_completed"] = assessments_completed.length;

        if(!backlog.hasOwnProperty("assessments")) {
            backlog["assessments"] = [];
        }

        if(!backlog.hasOwnProperty("stories")) {
            backlog["stories"] = [];
        }
    });

    return backlogs;
};

backlogController.prototype.getImpediments = function(organization){
  var backlogs = this.getBacklogs(organization),
  impediments = [],
  assessmentsImpediments, storyImpediments;

  _.each(backlogs, function(backlog) {
    assessmentsImpediments = gps.controllers.assessmentController.getImpediments(backlog);
    storyImpediments = gps.controllers.storyController.getImpediments(backlog);
    impediments = impediments.concat(assessmentsImpediments);
    impediments = impediments.concat(storyImpediments);
  })

  return impediments;
};

backlogController.prototype.getClient = function( backlog ){
  return gps.clients.getClientById(backlog.client);
};

gps.controllers = gps.controllers || {};
gps.controllers.backlogController = new backlogController();
function clientController(){}

gps.clients = gps.clients || new gps.collections.Clients();

clientController.prototype = {};
clientController.prototype.loadClients = function(retry, callback) {

  if(gps.currentUser.get('access_level') != gps.controllers.securityController.ADMIN_ROLE) {
    // It's very important to write in this way "key='value'"
    gps.clients.filteringBy = "users.objectId=" + "\'" + gps.currentUser.id + "\'";
  }

  // Set the expand to the object
  gps.clients.fetch({
    //async: false,

    success: function(model) {
      console.log("Clients loaded: Okay");

      if(gps.router.onbacklogReport() || gps.router.onbacklogAssessmentUpdate()) {
        gps.currentView.reload(function() {
          callback && callback(model);
          return true;
        });
      }
      else {

        callback && callback(model);
        return true;
      }
    },

    error: function (model, error) {
      console.log("Clients loaded: Error");

      if( error.responseJSON && error.responseJSON.message ) {
        /*if(error.responseJSON.code === 1017) {
          alert("This user has not been associated with any client.")
        }
        else {
        }*/

        gps.util.showError(model, error);
      }
      // Problems with server, for example lack of connection,
      // so we retry a few times again
      else {

        if(retry > 0) {

          retry--;
          console.log("Clients loaded - Retry");
          gps.controllers.clientController.loadClients(retry,callback);
        } else {
          gps.util.showError(model, error);
        }
      }
    }
  });
};

clientController.prototype.getImpediments = function(clientId, fetchedImpediments) {
  var impediments = fetchedImpediments || [],
    client = {},
    backlogImpediments, gpsClient;

  if (clientId) {
    gpsClient = gps.clients.findWhere({objectId: clientId});
    if (gpsClient){
      client = gpsClient.toJSON();
    }
  }
  else if(gps.clients.length) {
    client = gps.clients.toJSON()[0];
  }

  _.each(client.organizations, function(organization) {
    backlogImpediments = gps.controllers.backlogController.getImpediments(organization);
    impediments = impediments.concat(backlogImpediments);
  });

  // we reject repeated impediments
  impediments = _.uniq(impediments, function(impediment){
    return impediment.objectId;
  });

  impediments = _.sortBy(impediments, function(impediment) {
    return impediment.updated_date * -1;
  });

  return impediments;
};

clientController.prototype.getAssessmentsIdFromClient = function( clientId ){
  var assessIds, clientGps;

  if (gps.clients.length){
    clientGps = clientId ? gps.clients.findWhere({objectId: clientId}) : gps.clients.at(0);
    assessIds = clientGps.getAssessmentsIdFromClient() || [];
  }
  return assessIds;
};

/**
 * @param {Function} [listener] - Function being called when the event is fired.
 * This method add a function as a listener for the sync event in the client collection of the system.
 * Sync event is being fired when the server and the client have finished their communication of
 * sync.
 */
clientController.prototype.onClientsSyncChange = function(listener) {

  gps.clients.on('sync', listener);
};

/**
 * @param {Function} [listener] - Function being called when the event is fired.
 * This method removes the function from the Sync listeners in the client collection of the system.
 */
clientController.prototype.offClientsSyncChange = function(listener) {

  gps.clients.off('sync', listener);
};

gps.controllers = gps.controllers || {};
gps.controllers.clientController = new clientController();
function commentController(){}
commentController.prototype = {};

commentController.prototype.addComment = function(attr, storyGps, backlogId, callback) {

  var comment = new gps.models.Comment(attr),
  sc = gps.controllers.storyController;

  storyGps.save('comments', [comment], {
    wait: true,
    success: function(model) {

      var currentComments = model.get('comments'),
      newComment = _.last(currentComments);

      sc.addCommentLocally(newComment, storyGps, backlogId, callback);
    },
    error: function( model , error) {
      gps.util.showError(model, error);
    },
    remote_ignore: ['tasks', 'comments']
  });
};

commentController.prototype.editComment = function(storyGps, attr, backlogId, callback) {

  var comments = storyGps.get('comments'),
  currentComment = _.clone(_.findWhere(comments, {objectId: attr.objectId}));
  currentComment= _.extend(currentComment, attr);

  var commentGps = new gps.models.Comment(currentComment),
  sc = gps.controllers.storyController;

  commentGps.setUpdatedDate();
  commentGps.save(commentGps.attribute, {
    success: function( model ) {
      sc.updateCommentLocally(model.toJSON(), storyGps, backlogId, callback);
    },
    error: function( model, error, options) {
      callback(null, error.responseJSON ? error.responseJSON.message : 'There was an error');
    }
  });
};

commentController.prototype.removeComment = function(comment_id, storyGps, backlogId, callback) {
  var sc = gps.controllers.storyController;

  storyGps.removeChild('comments', comment_id, {
    success: function( model ) {
      sc.removeCommentLocally(comment_id, storyGps, backlogId, callback);
    },
    error: function( model, error, options ){
      callback(null, error.responseJSON ? error.responseJSON.message : 'There was an error');
    }
  });
};

gps.controllers = gps.controllers || {};
gps.controllers.commentController = new commentController();
function disciplineController(){}
disciplineController.prototype = {};

/**
 * This function will check if we have the latest version of the available disiplines.
 * and if not, is going to go go the server and update the local copy of them!.
 */
disciplineController.prototype.loadDisciplines = function(callback){

    var contl = gps.controllers.syncInfoController;

    if (!contl.areUpdated("DISCIPLINE")){

        this.updateDisciplines(callback);
    } else {
        gps.assessments = gps.assessments || {};
        gps.assessments.disciplines = JSON.parse(contl.getData("DISCIPLINE"));
        if (callback) callback();
    }
}

disciplineController.prototype.updateDisciplines = function(callback){

    gps.assessments = gps.assessments || {};
    gps.assessments.gps_disciplines = new gps.collections.Disciplines();

    gps.util.fetchCollection(gps.assessments.gps_disciplines, function() {
      gps.assessments.disciplines = gps.assessments.gps_disciplines.toJSON();
      gps.controllers.syncInfoController.saveData("DISCIPLINE",JSON.stringify(gps.assessments.disciplines));
      callback && callback();
    });   
}

disciplineController.prototype.getCompletedPercentage = function(assessment){
    var disciplines = _.clone(gps.assessments.disciplines);

    _.each(disciplines,function(discipline) {
        discipline["percent_completed"] = this.calculateCompletedPercentage(assessment,discipline);
    },this);

    disciplines = _.sortBy(disciplines, function(discipline){
      return discipline.loc_id;
    })

    return disciplines;
}

disciplineController.prototype.calculateCompletedPercentage = function(assessment,discipline){
    var answers = gps.controllers.assessmentController.getAnsweredQuestionsIds(assessment),
    questions = this.getQuestionsIds(discipline),

    questionsID = _.pluck(questions, 'objectId'),
    intersection = _.intersection(questionsID, answers);

    //Calculate percentage
    var completed = Math.round(( intersection.length / questions.length) * 100);

    return completed;
}

disciplineController.prototype.getQuestionsIds = function(discipline){
    var questions = [];
    _.each(discipline["practices"],function(practice) {
        questions = questions.concat(practice["questions"]);
    });

    return questions;
}

disciplineController.prototype.getAllQuestions = function(){
    var disciplines = _.clone(gps.assessments.disciplines),
    questions = [];

    _.each(disciplines,function(discipline) {
        questions = questions.concat(this.getQuestionsIds(discipline));
    },this);

    return questions;
}

disciplineController.prototype.getDiscipline  = function(id){
    var discipline = _.find(gps.assessments.disciplines, function(discipline){
        return (discipline["objectId"] == id);
    });

    return discipline;
}

disciplineController.prototype.getDisciplines = function(){

    return gps.assessments.disciplines;
}

disciplineController.prototype.getDisciplineByColor = function(colorDiscipline){
  return _.findWhere(this.getDisciplines(), {color: colorDiscipline});
}

disciplineController.prototype.getColorByDiscipline = function(disciplineName){
  return _.findWhere(this.getDisciplines(), function(discipline){
    return discipline.name.toUpperCase() == disciplineName.toUpperCase();
  });
}

disciplineController.prototype.getDisciplineParent = function(practiceId) {
  var disciplineRes;

  _.find(gps.assessments.disciplines, function(discipline){
    practice = _.findWhere(discipline.practices, {objectId: practiceId});

    // perhaps the practice was not in this discipline
    if(practice){
      disciplineRes = discipline;
      return true;
    }
  });

  return disciplineRes;
};

gps.controllers = gps.controllers || {};
gps.controllers.disciplineController = new disciplineController();
function handlebarsCompileFactory(){
  this.cachedCompilations = {};
}

handlebarsCompileFactory.prototype = {
  get : function(id) {
    return this.cachedCompilations[id] = this.cachedCompilations[id] || Handlebars.compile($(id).html());
  }
};

gps.handlebarsCompileFactory = new handlebarsCompileFactory();
function gpsLoginController(){}

gpsLoginController.prototype.doLogin = function( username, password, options ) {

  gps.currentUser.login( username, password, {
    success: function( model, response ) {

      options.success && options.success( model, response );

      gps.currentUser.set('password',password);
      localStorage.setItem("environment",gps.environment.getCurrEnvName());

      gps.initData(function() {
        gps.router.navigate("dashboard", { trigger: true });
        gps.views.sideBar.render();
      });
    },
    error: function( model, response ) {

      options.error && options.error( model, response );
    }
  });
}

/**
 * @param options
 * This method logs out the user currently logged in.
 */
gpsLoginController.prototype.doLogOut = function( options ) {
  options = options || {};

  gps.currentUser.logout({
    success: function () {

      //Next login will retrieve all clients without refreshing
      gps.clients = new gps.collections.Clients();

      options.success && options.success();
      gps.router.navigate("", {trigger: true});
    },
    error: function( model, response ) {

      if (options.error) {
        // when timeout, error is the first (array) param
        response ? options.error(response) : options.error(gps.currentUser, _.first(model));
      }

      gps.currentUser.removeUserSessionData();
      gps.router.navigate("", {trigger: true});
    }
  });
}

gpsLoginController.prototype.getLoggedUser = function(){

  return gps.currentUser.toJSON();
}

gps.controllers = gps.controllers || {};
gps.controllers.loginController = new gpsLoginController();
function maturityController(){}
maturityController.prototype = {};

maturityController.prototype.MATURITY_LEVELS = ['novice', 'foundational', 'mastery'];

maturityController.prototype.loadMaturity = function() {
  var syncController = gps.controllers.syncInfoController;

  if (syncController.areUpdated("MATURITY_GROUPS")){

    // Get the data from the local storage
    gps.assessments.maturityGroups = JSON.parse(syncController.getData("MATURITY_GROUPS"));
    gps.assessments.maturityDisciplines = JSON.parse(syncController.getData("MATURITY_DISCIPLINES"));
    // We instance to Backbone because is the only we use at the moment
    gps.assessments.maturityPractices = new gps.collections.MaturityPractices(JSON.parse(syncController.getData("MATURITY_PRACTICES")));
  } else {

    // Get the data from server
    gps.controllers.maturityController.updateMaturity();
  }
}

maturityController.prototype.updateMaturity = function() {
  this.loadMaturityPractices(this.loadMaturityDisciplines, this.loadMaturityGroups);
}

maturityController.prototype.loadMaturityPractices = function(callback, argCallback) {
  var syncController = gps.controllers.syncInfoController;
  gps.assessments.maturityPractices = new gps.collections.MaturityPractices();

  gps.util.fetchCollection(gps.assessments.maturityPractices, function() {
    gps.assessments.maturityPractices.sortPracticesByName();

    syncController.saveData("MATURITY_PRACTICES", JSON.stringify(gps.assessments.maturityPractices.toJSON()));
    callback && callback(argCallback);
  });
}

maturityController.prototype.loadMaturityDisciplines = function(callback) {
  var syncController = gps.controllers.syncInfoController;
  gps.assessments.maturityDisciplines = new gps.collections.MaturityDisciplines();

  gps.util.fetchCollection(gps.assessments.maturityDisciplines, function() {
    gps.assessments.maturityDisciplines.linkMaturityPractices();
    gps.assessments.maturityDisciplines.orderMaturityDisciplines();

    syncController.saveData("MATURITY_DISCIPLINES", JSON.stringify(gps.assessments.maturityDisciplines.toJSON()));
    callback && callback();
  });
}

maturityController.prototype.loadMaturityGroups = function() {
  var syncController = gps.controllers.syncInfoController;
  gps.assessments.maturityGroups = new gps.collections.MaturityGroups();

  gps.util.fetchCollection(gps.assessments.maturityGroups, function() {
    gpsColGroups = gps.assessments.maturityGroups;
    gpsColGroups.linkMaturityDisciplines();
    var colGroups = gpsColGroups.toJSON(),
    //gpsColGroups.save(colGroups); //Important

    // We have to do this because we have problems saving in backendless
    // The idea is first to save maturity disciplines, we make the link between them and maturity practices
    // after that we save the group linked with the disciplines but not with the practices
    auxGpsColGroups = new gps.collections.MaturityGroups(gpsColGroups.toJSON());
    auxGpsColGroups.saveRelations();

    syncController.saveData("MATURITY_GROUPS", JSON.stringify(colGroups));
    gps.assessments.maturityGroups = gps.assessments.maturityGroups.toJSON();
  });
}

maturityController.prototype.getSpiderMaturity = function(client, maturityColors) {

  function loadAxisColorValue(markers, level) {
    var formatData = [],
        value, valuePercent;

    _.each(markers, function (markerGps) {
      value = markerGps.getMaturityValue(),
          valuePercent = (value == 0) ? value : value / 100;

      formatData.push({
        value: valuePercent,
        axis: markerGps.getDisciplineName(),
        color: maturityColors[level]
      });
    });

		// remove duplicate axis
		formatData = _.uniq(formatData, true, function(elem){
			return elem.axis;
		});

    return formatData;
  }

  var levels = {},
  cliGps = new gps.models.Client(client),
  groupName = cliGps.getMaturityGroup(),
  group = _.findWhere(gps.assessments.maturityGroups, {name: groupName}),
  groupGps = new gps.models.MaturityGroup(group);

  if( group ) {   
    levels.novice = loadAxisColorValue(groupGps.getLevelDisciplines("Novice"), 0);
    levels.foundational = loadAxisColorValue(groupGps.getLevelDisciplines("Foundational"), 1);
    levels.mastery = loadAxisColorValue(groupGps.getLevelDisciplines("Mastery"), 2);
  }
    
  return levels;
}

maturityController.prototype.getBarMaturity = function(client, disciplineName, maturityColors){

  function loadAxisColorValue(markers, level) {
		var res = [],
				allPractices;

		_.each(markers, function(markerGps) {
			res.push({
				value: markerGps.getMaturityValue(),
				axis: markerGps.getPracticeName(),
				color: maturityColors[level],
				range: markerGps.getRange()
			});
		});

		// remove duplicate axis
		res = _.uniq(res, true, function (elem) {
			return elem.axis;
		});

		// we check there is no more "maturity practices", than "real practices" for this discipline
		allPractices = gps.controllers.practiceController.getPractices(disciplineName);
		if (res.length > allPractices.length) {
			res.length = allPractices.length;
		}

    return res;
  }

  var levels = {},
  cliGps = new gps.models.Client(client),
  groupName = cliGps.getMaturityGroup(),

  group = _.findWhere(gps.assessments.maturityGroups, {name: groupName}),
  groupGps = new gps.models.MaturityGroup(group);

  if( group ) {        
    levels.novice = loadAxisColorValue(groupGps.getLevelPractices(disciplineName, "Novice"), 0);
    levels.foundational = loadAxisColorValue(groupGps.getLevelPractices(disciplineName, "Foundational"), 1);
    levels.mastery = loadAxisColorValue(groupGps.getLevelPractices(disciplineName, "Mastery"), 2);
  }
  return levels;
}

/*
	data: Has the information of the practices of all the assessments selected
	 			[{name: ..., values:[{axis: ..., color: ..., value: ...}]}] -> length = the amount of practices for this discipline

	index: 0..2 -> Represents the level, ej: 0 -> 'novice'

	arrayLevel: Has the information of the maturity level for all practices (inside a particular discipline)
						  [{axis:..., color:..., range:..., value: ...}] -> length = the amount of practices for this discipline

  totAsmtsSelected: 1..3 -> The amount of assessments selected at the report view
 */
maturityController.prototype.loadMaturityForAllSelectedAssessments = function (data, index, arrayLevel, totAsmtsSelected){
	var level = this.MATURITY_LEVELS[index],
	index = 0,
	currentPractice = 0;

	// we iterate all data, adding the maturity information with the particular practice and replicate for all assessments selected
	_.each(data, function(disPract){
		disPract[level] = JSON.parse(JSON.stringify(disPract.values));
		_.each(disPract[level], function(marker){
			marker.color = arrayLevel[currentPractice].color;
			marker.value = arrayLevel[currentPractice].value;
			marker.range = arrayLevel[currentPractice].range;
			index++;
			if (index == totAsmtsSelected){
				index = 0;
				currentPractice++;
			}
		});
	});
}

gps.controllers = gps.controllers || {};
gps.controllers.maturityController = new maturityController();
function persistenceController(){}
persistenceController.prototype = {};
persistenceController.prototype.get = function(elementKey){

	return localStorage.getItem(elementKey);
}
persistenceController.prototype.set = function(elementKey,element){

	localStorage.setItem(elementKey, element);
} 

persistenceController.prototype.remove = function(elementKey){

	localStorage.removeItem(elementKey);
}

gps.controllers = gps.controllers || {};
gps.controllers.persistenceController = new persistenceController();
function practiceController(){}
practiceController.prototype = {};

/**
 * This function will check if we have the latest version of the available disiplines.
 * and if not, is going to go go the server and update the local copy of them!.
 */
practiceController.prototype.loadPractices = function(callback){

    var contl = gps.controllers.syncInfoController;

    if (!contl.areUpdated("PRACTICE")){

        this.updatePracticesFromServer(callback);
    } else {
        gps.assessments = gps.assessments || {};
        gps.assessments.practices = JSON.parse(contl.getData("PRACTICE"));
        if (callback) callback();
    }
}

practiceController.prototype.updatePracticesFromServer = function(callback) {

    gps.assessments = gps.assessments || {};
    gps.assessments.gps_practices = new gps.collections.Practices();
    gps.util.fetchCollection(gps.assessments.gps_practices, function() {
      gps.assessments.practices = gps.assessments.gps_practices.toJSON();
      gps.controllers.syncInfoController.saveData("PRACTICE",JSON.stringify(gps.assessments.practices));
      callback && callback();
    });
}

practiceController.prototype.getCompletedPercentage  = function(assessment){

    var practices = _.clone(gps.assessments.practices);

    _.each(practices,function(practice) {
        practice["percent_completed"] = this.calculateCompletedPercentage(assessment,practice);
    },this);

    practices = _.sortBy(practices, function(practice){
      return practice.loc_id;
    })

    return practices;
}

practiceController.prototype.calculateCompletedPercentage  = function(assessment,practice){

    var answers = gps.controllers.assessmentController.getAnsweredQuestionsIds(assessment),
    questions = practice["questions"],

    questionsID = _.pluck(questions, 'objectId');
    intersection = _.intersection(questionsID,answers);

    //Calculate percentage
    var percentage = (intersection.length / questions.length) * 100;

    //Rounding to a power of 10
    var completed = Math.round(percentage/10)*10;

    return completed;
}

practiceController.prototype.getPractice  = function(id){

    var practice = _.find(gps.assessments.practices, function(practice){
        return (practice["objectId"] == id);
    });

    return practice;
}

practiceController.prototype.lookForQuestion = function(questionId){
  var practiceAndQuestion, questions, question;

  _.find(gps.assessments.practices, function(practice){
    question = _.findWhere(practice.questions, {objectId: questionId});

    // perhaps the question was not in this practice
    if(question){
      practiceAndQuestion = {
        practice: practice,
        question: question
      };
      return true;
    }
  });
  return practiceAndQuestion;
}

/**
 * Get all the practices related with the discipline
 * @param disciplineName - The Name of the discipline
 * @returns {Array.<Practice>}
 */
practiceController.prototype.getPractices = function(disciplineName) {
	var gpsColDisciplines = new gps.collections.Disciplines(gps.assessments.disciplines);

	return gpsColDisciplines.getPractices(disciplineName);
}

gps.controllers = gps.controllers || {};
gps.controllers.practiceController = new practiceController();
var GPSpossibleDefaultAnswers = [{
    "loc_id":0,
    "type":"binary",
    "description":"list of possible answeres for X type of questions.",
    "values":[{
        "value": 0,
        "helpText":"No"
    },{
        "value": 1,
        "helpText":"Yes"
    }]
    },{
    "loc_id":1,
    "type":"scalar",
    "description":"list of possible answeres for X type of questions.",
    "values":[{
        "id": 1,
        "value": 1,
        "helpText":"Completely Disagree"
    },{
        "id": 2,
        "value": 2,
        "helpText":"Mostly Disagree"
    },{
        "id": 3,
        "value": 3,
        "helpText":"Slightly Disagree"
    },{
        "id": 4,
        "value": 4,
        "helpText":"Slightly Agree"
    },{
        "id": 5,
        "value": 5,
        "helpText":"Mostly Agree"
    },{
        "id": 6,
        "value": 6,
        "helpText":"Completely Agree"
    }]
}];

function questionController(){}

questionController.prototype = {};

questionController.prototype.loadQuestions = function(callback){
  
  var contl = gps.controllers.syncInfoController;

  if (!contl.areUpdated("QUESTION")) {
    this.updateQuestionsFromServer(callback);
  }
  else {
    gps.assessments = gps.assessments || {};
    gps.assessments.questions = JSON.parse(contl.getData("QUESTION"));
    if (callback) callback();
  }
}

questionController.prototype.updateQuestionsFromServer = function(callback) {

    gps.assessments = gps.assessments || {};
    gps.assessments.gps_questions = new gps.collections.Questions();

    gps.util.fetchCollection(gps.assessments.gps_questions, function() {
      gps.assessments.questions = gps.assessments.gps_questions.toJSON();

      for(var qkey in gps.assessments.questions){
        var q = gps.assessments.questions[qkey];
        if (q.possibleAnsw){
          q.possibleAnsw.values = JSON.parse(q.possibleAnsw.values);
        } else {

          q.possibleAnsw = q.binary ?
            GPSpossibleDefaultAnswers[0] :
            GPSpossibleDefaultAnswers[1];
        }
      }

      gps.controllers.syncInfoController.saveData("QUESTION",JSON.stringify(gps.assessments.questions));
      callback && callback();
    });
}

gps.controllers = gps.controllers || {};
gps.controllers.questionController = new questionController();
function reportController(){}
reportController.prototype = {};
reportController.prototype.getAvAssessmentReportsInfo = function(assessmentArray){

    var ac = gps.controllers.assessmentController;
    var all =  this.practicesAssessmentCompletedReport(assessmentArray),
    percentage = ac.getAveragePercentageCompleted(assessmentArray),
    converted = [];

    for(var elem in all){
        converted.push({name:elem, percent_completed:all[elem].percent_completed, exactPercent:all[elem].exactPercent});
    }

    if(assessmentArray.length) {
      converted.unshift({name:"Overall", percent_completed:percentage.imagePercent, exactPercent:percentage.exactPercent});
    }

    return converted;
}

reportController.prototype.disciplineAssessmentReport = function(discipline,assessmentArray,backlogId){

    var stats = {};
    for(var i in assessmentArray) {
        var assessmentGps = new gps.models.Assessment(assessmentArray[i]),
        disciplines = assessmentGps.getResults(backlogId, assessmentGps.get('objectId')).disciplines,
        practices = _.findWhere(disciplines, {discipline_name: discipline}).practices;

        for(var j in practices){
          (stats[practices[j].practice_id.name] || (stats[practices[j].practice_id.name] = []))
            .push({objectId: assessmentGps.id,total:practices[j].total, color: assessmentGps.get('color')});
        }
    }
    return stats;
}

reportController.prototype.overallAssessmentReport = function(assessmentArray,backlogId){

    var stats = [];
    for(var i in assessmentArray) {

        var assessmentGps = new gps.models.Assessment(assessmentArray[i]),
            mdata = assessmentGps.getResults(backlogId, assessmentGps.get('objectId'));

        _(mdata.disciplines).each(_.bind(function(discipline) {
            var data = _.extend(discipline, {
                title: _.findWhere(gps.assessments.disciplines, {
                    objectId: discipline.discipline_id
                }).name
            });

            data.objectId = assessmentGps.id;
            data.color = assessmentGps.get('color');
            (stats[data.title] || (stats[data.title] = [])).push(data);
        }, this));
    }
    return stats;
}

reportController.prototype.practicesAssessmentCompletedReport = function(assessmentArray){

    var stats = {};
    for(var i in assessmentArray){
        var assessmentGps = new gps.models.Assessment(assessmentArray[i]),
            practices = gps.controllers.disciplineController.getCompletedPercentage(assessmentGps);

        for(var j in practices){
            (stats[practices[j].name] || (stats[practices[j].name] = {}))
                .exactPercent =
                (stats[practices[j].name].exactPercent ? stats[practices[j].name].exactPercent:0)
                    + practices[j].percent_completed;
        }
    }

    for(var i in stats){
        stats[i].percent_completed = Math.round(stats[i].exactPercent/assessmentArray.length/10)*10;
        stats[i].exactPercent = Math.round(stats[i].exactPercent / assessmentArray.length);
    }
    return stats;
}

reportController.prototype.getAssessmentReport = function(type,assessmentArray,backlogId){

    if (type == "Overall"){

        return this.overallAssessmentReport(assessmentArray,backlogId);
    } else return this.disciplineAssessmentReport(type,assessmentArray,backlogId);
}

gps.controllers = gps.controllers || {};
gps.controllers.reportController = new reportController();
function securityController(){}

securityController.prototype = {};

securityController.prototype.ADMIN_ROLE = "Admin";

securityController.prototype.OWNER_ROLE = "Owner";

securityController.prototype.isAuthorized = function(user,resource,type,permission){
    var access_level = user['access_level'];

    if(access_level == gps.controllers.securityController.ADMIN_ROLE) {
        return true;
    }
    else if(type == "client") {
        var users = resource.get("users"),
        query = { "username": user.username };

        return _.findWhere(users,query);
    }
    else if(type == "backlog") {
        var users = resource.get("users"),
        query = { "username": user.username };

        return _.findWhere(users,query);
    }
    else if(type == "comment"){
        var author = resource.username;

        return (author == user.username);
    }
    else {
        return false;
    }
}

gps.controllers = gps.controllers || {};
gps.controllers.securityController = new securityController();
function storyController() {
}
storyController.prototype = {};

storyController.prototype.addStoryLocally = function(story, backlogID) {
  var realBacklog = gps.controllers.backlogController.getBacklog(backlogID).backlog,
      stories = realBacklog.stories || [];

  stories.push(story);
  realBacklog.stories = stories;
};

storyController.prototype.updateStoryLocally = function(attr, storyID, backlogID) {
  var realBacklog = gps.controllers.backlogController.getBacklog(backlogID).backlog,
      storie = _.where(realBacklog.stories, {objectId: storyID})[0];

  for (var att in attr) {
    storie[att] = attr[att];
  }
};

storyController.prototype.addAction = function(action, taskColGps, storyGps, backlogId, callback) {
  var sc = this,
      gpsAction = new gps.models.Task();

  gpsAction.set(action, {validate: true});

  if (gpsAction.error) {
    return;
  }

  storyGps.save('tasks', [gpsAction], {
    success: function(model) {
      var currentAction = _.last(model.getActions());

      sc.addTaskLocally(currentAction, taskColGps, storyGps, backlogId);

      if (callback) {
        callback();
      }
    },
    error: function(model, response) {

      if (callback) {
        callback(model, response);
      }
    },
    remote_ignore: ['comments', 'tasks']
  });
};

storyController.prototype.addTaskLocally = function(task, taskColGps, storyGps, backlogID) {

  var realBacklog = gps.controllers.backlogController.getBacklog(backlogID).backlog,
      storie = _.findWhere(realBacklog.stories, {
        objectId: storyGps.id
      }),
      tasks = storie.tasks || [];

  tasks.push(task);
  storie.tasks = tasks;

  storyGps.setActions(storie.tasks);
  taskColGps.add(task);
};

storyController.prototype.removeAction = function(taskId, taskColGps, storyGps, backlogId, callback) {
  var sc = this;

  storyGps.removeChild('tasks', taskId, {
    success: function() {
      sc.removeTaskLocally(taskId, taskColGps, storyGps, backlogId);

      if (callback) {
        callback();
      }
    },
    error: function(model, response) {
      gps.util.showError(model, response);

      if (callback) {
        callback(model, response);
      }
    }
  });
};

storyController.prototype.removeTaskLocally = function(taskId, taskColGps, storyGps, backlogId) {

  var realBacklog = gps.controllers.backlogController.getBacklog(backlogId).backlog;
  var storie = _.findWhere(realBacklog.stories, {
    objectId: storyGps.id
  });

  var tasks = storie.tasks || [];
  storie.tasks = _.reject(tasks, function(task) {

    return task.objectId === taskId;
  });

  taskColGps.remove(taskId);
  storyGps.setActions(storie.tasks);
};

storyController.prototype.updateAction = function(attr, actionId, taskColGps, storyGps, backlogId, callback) {
  var sc = this,
      actionGps = new gps.models.Task(attr);

  actionGps.set(actionGps.idAttribute, actionId);

  actionGps.save(actionGps.toJSON(), {
    success: function(model) {
      sc.updateTaskLocally(model.toJSON(), actionId, taskColGps, storyGps, backlogId);

      if (callback) {
        callback();
      }
    },
    error: function(model, response) {
      gps.util.showError(model, response);

      if (callback) {
        callback(model, response);
      }
    }
  });
};

storyController.prototype.updateTaskLocally = function(attr, taskId, taskColGps, storyGps, backlogID) {

  var realBacklog = gps.controllers.backlogController.getBacklog(backlogID).backlog;
  var storie = _.findWhere(realBacklog.stories, {
    objectId: storyGps.id
  });

  var tasks = storie.tasks || [];

  var task = _.findWhere(tasks, {
    objectId: taskId
  });

  for (var att in attr) {
    task[att] = attr[att];
  }

  taskColGps.add(task, {merge: true});
  storyGps.setActions(tasks);
};

storyController.prototype.addCommentLocally = function(comment, storyGps, backlogId, callback) {
  var story = this.getStory(storyGps.id, backlogId),
      comments = story.comments;

  comments.push(comment);

  if (callback) callback(comment);
};

storyController.prototype.removeCommentLocally = function(commentId, storyGps, backlogId, callback) {
  var story = this.getStory(storyGps.id, backlogId);

  story.comments = _.reject(story.comments, function(comment) {
    return comment.objectId == commentId;
  });

  storyGps.set('comments', story.comments);

  // Compatibility with remote ignore
  storyGps._previousAttributes.comments = story.comments;

  if (callback) callback(commentId);
};

storyController.prototype.updateCommentLocally = function(newAttr, storyGps, backlogId, callback) {
  var story = this.getStory(storyGps.id, backlogId),
      comments = story.comments,
      comment = _.findWhere(comments, {objectId: newAttr.objectId});

  comment = _.extend(comment, newAttr);
  storyGps.set('comments', comments);

  if (callback) callback(comment);
};

storyController.prototype.getImpediments = function(backlog) {
  var impediments = [],
      user, contents, updated;

  _.each(backlog.stories, function(story) {
    if (story.comments instanceof Backbone.Collection) {
      story.comments = story.comments.toJSON();
    }

    _.each(story.comments, function(comment) {
      if (comment.impediment) {
        username = comment.username;
        contents = comment.contents;
        updated = comment.updated_date || comment.created_date;

        impediments.push({
          'username'    : username,
          'contents'    : contents,
          'updated_date': updated
        });
      }
    });

  });
  return impediments;
};

storyController.prototype.getStoryGps = function(storyID, backlogID) {
  var story = this.getStory(storyID, backlogID),
      loggedUser = gps.controllers.loginController.getLoggedUser();

  story.comments = story.comments || [];

  var storyGps = new gps.models.Story(story);
  storyGps.set("comments", story.comments);

  return storyGps;
};

storyController.prototype.getStory = function(storyID, backlogID) {
  var realBacklog = gps.controllers.backlogController.getBacklog(backlogID).backlog,
      story = _.findWhere(realBacklog.stories, {objectId: storyID});

  return story;
};

storyController.prototype.getStoriesInfo = function(teamOrBacklog) {
  var backlog, storiesInfo;

  if (teamOrBacklog.hasOwnProperty('team_name')) {
    backlog = teamOrBacklog.backlogs.length ? teamOrBacklog.backlogs[0] : {};
  } else {
    backlog = teamOrBacklog;
  }

  if (!backlog.hasOwnProperty("stories")) {
    backlog["stories"] = [];
  }

  //set status count
  storiesInfo = this.getStatusCount(backlog.stories);

  //set top story  
  storiesInfo.topStory = backlog.stories.length ? backlog.stories[0] : {};

  storiesInfo.backlog_id = backlog.objectId;

  return storiesInfo;
};

storyController.prototype.getStatusCount = function(stories) {
  var statuses = gps.statuses.toJSON(),
      statusCount = {};

  _.each(statuses, function(status) {
    var key = status.name + "Stories";
    statusCount[key] = 0;
  });

  _.each(stories, function(story) {
    var key = statuses[story.status - 1].name + "Stories";
    statusCount[key]++;
  });

  return statusCount;
};

gps.controllers = gps.controllers || {};
gps.controllers.storyController = new storyController();
function syncInfoController() {}

syncInfoController.prototype = {};

syncInfoController.prototype.loadSyncInfo = function( callback ){

  gps.SyncInfos  = new gps.collections.SyncInfos();
  gps.SyncInfos.fetch({
    success: function() {

      this.currentSyncInfo = gps.SyncInfos.first() ? gps.SyncInfos.first() : new gps.models.SyncInfo();
      callback();
    }.bind(this),
    error: function (model, error) {
      console.log("Error loading sync configuration information, maybe there is no table sync info.");
      gps.util.showError(model, error);

      this.currentSyncInfo = new gps.models.SyncInfo();
      callback();
    }.bind(this)
  });
}

syncInfoController.prototype.keyMaps = {
  "DISCIPLINE":{
    LATEST_DATE:"latest_update_disiciplines_date",
    LATEST: "latest_disiciplines_json"
  },
  "PRACTICE":{
    LATEST_DATE:"latest_update_practices_date",
    LATEST: "latest_practices_json"
  },
  "QUESTION":{
    LATEST_DATE:"latest_update_questions_date",
    LATEST: "latest_questions_json"
  },
  "POSSIBLE_ANSWER":{
    LATEST_DATE:"last_update_poss_answers_date",
    LATEST: "latest_possible_answers_json"
  },
  "MATURITY_GROUPS":{
    LATEST_DATE:"latest_update_maturity_date",
    LATEST: "latest_maturity_json"
  },
  "MATURITY_DISCIPLINES":{
    LATEST: "latest_maturityDis_json"
  },
  "MATURITY_PRACTICES":{
    LATEST: "latest_maturityPrac_json"
  }
}

syncInfoController.prototype.areUpdated = function(key) {

  var latestUpadted_local = gps.controllers.persistenceController.get( this.keyMaps[key].LATEST_DATE ),
    latestUpdated_remote 	= this.currentSyncInfo.get( this.keyMaps[key].LATEST_DATE );

  if ( !latestUpadted_local || (latestUpdated_remote && (latestUpadted_local < latestUpdated_remote))) {
    return false;
  }
  return true;
}

syncInfoController.prototype.saveData = function(key,json){

  gps.controllers.persistenceController.set(this.keyMaps[key].LATEST,json);
  gps.controllers.persistenceController.set(this.keyMaps[key].LATEST_DATE,new Date().getTime());
  console.log(key + " saved from server.");
}

syncInfoController.prototype.getData = function(key){

  console.log(key + " loaded from cache.");
  return gps.controllers.persistenceController.get( this.keyMaps[key].LATEST );
}

syncInfoController.prototype.setRemoteUpdatedDate = function(key,date,callback){

  var param = {};
  param[this.keyMaps[key].LATEST_DATE] = date;
  this.updateInfo(param,callback);
}

syncInfoController.prototype.updateInfo = function(info,callback) {

  if ( this.currentSyncInfo && this.currentSyncInfo.get("objectId") ) {

    this.currentSyncInfo = new gps.models.SyncInfo({objectId:this.currentSyncInfo.get("objectId")});
  }
  else
  {

    this.currentSyncInfo = new gps.models.SyncInfo();
  }

  this.currentSyncInfo.save(info,{
    success: function(model, result, options) {

      callback && callback();
    },
    error: function(model, error) {
      if( error.responseJSON && error.responseJSON.message ) {
        alert(error.responseJSON.message);
        console.warn(error.responseJSON.message);
      }
      if (callback) callback();
    }
  })

}

gps.controllers = gps.controllers || {};
gps.controllers.syncInfoController = new syncInfoController();
function TrendReportController() {}
gps.controllers = gps.controllers || {};
gps.controllers.trendReportController = new TrendReportController();

TrendReportController.prototype.createNewReport = function(gpsBacklog) {

  var gpsReflectionResult = new gps.models.TrendReport(), sortedAndFilteredIndexes, latestThree,
      indexes = gpsBacklog.getGpsAssessmentsCollection();

  sortedAndFilteredIndexes = _.filter(
    indexes.sortBy(function(index) { return index.get('ended_date')}),
    function(index) { return index.isFinished()}
  );

  latestThree = _.first(sortedAndFilteredIndexes, 3);
  gpsReflectionResult.setName(moment().format('MMMM Mo, YYYY'));
  gpsReflectionResult.setIndexes(new gps.collections.Assessments(latestThree));
  return gpsReflectionResult;
}.bind(gps.controllers.trendReportController);

TrendReportController.prototype.obtainTrendReports = function(gpsBacklog) {};
TrendReportController.prototype.saveTrendReports   = function(gpsBacklog) {};
TrendReportController.prototype.testTrendReport    = function(gpsBacklog) {

  var tr = this.createNewReport(gpsBacklog);

  console.log("created trend Report: ");
  console.log("tr - current scroe: " + tr.getCurrentScore());
  console.log("tr - indexing trends table info: " + JSON.stringify(tr.getIndexingTrendsTableInfo()));
  //console.log("tr - indexing trends table info: " + JSON.stringify(tr.getTrendsTowardsSustainability()));
  //console.log("tr - indexing trends table info: " + JSON.stringify(tr.getTopRecommendations()));
  console.log("tr - spider info: -use graph controller to obtain info-");

}.bind(gps.controllers.trendReportController);

gps.AddBacklogView = Backbone.View.extend({

  events: {
    "change .combo-section-client": "populateOrganization"
  },

  initialize: function() {

    this.template = gps.handlebarsCompileFactory.get('#backlog-new-add');
    //this.headerTemplate = Handlebars.compile($("#backlogs-add-sub-header").html());
    Backbone.on('selectedItemCombo', this.populateOrganization, this);
  },

  render: function() {

    var levels;

    // Render this template
    $(this.el).html(this.template());

    // Set breadcrumbs
    levels = [{
      name: "Improvement Plans",
      url: "#backlogs"
    }, {
      name: "New Improvement Plan"
    }];

    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button,
      gps.views.header.availableButtons.save_improvement_plan_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
    gps.views.header.setBreadcrumbs(levels);
    //Render client combobox
    this.populateClients();

    return this;
  },

  save: function(event) {

    var attr, client, clientId, orgId, name;
    name = this.$('.backlog-add-input').val();
    clientId = this.clientComboBox.getSelectedVal();
    orgId = this.comboOrgs.getSelectedVal();
    attr = {
      name : name,
      client : clientId,
      organization : orgId
    };
    client = this.collection.get(attr.client);
    gps.controllers.backlogController.createBacklog(attr, client, attr.organization, null, this.onsaved);
  },

  onsaved: function(model, message, options, error) {

    if (error) alert(message);
    else window.history.back();
  },

  populateClients: function() {

    this.clientComboBox = new gps.ComboBox({
        data: this.getClientsNames(gps.clients),
        prompt: "Select client"
    });
    this.$el.find('.combo-section-client').append(this.clientComboBox.render().el);
  },

  populateOrganization: function(clientId) {

    var selectedClient = _.findWhere(gps.clients.models, {
          id: clientId
    });
    if ( selectedClient ) {
      organizations = selectedClient.get("organizations");

      if (organizations.length > 0) {
        this.comboOrgs = new gps.ComboBox({
          data: this.getOrgNames(organizations),
          prompt: "Select organization"
        });
      } else {
        this.comboOrgs = new gps.ComboBox({
          data: {},
          prompt: "No organizations"
        });
      }
      this.$el.find('.combo-section-org').html(this.comboOrgs.render().el);
    }
  },

  getOrgNames: function(orgs){

    var dataOrg = [];
    _.each(orgs, function(org) {
       var item = {};
       item[org.objectId] = org.name;
       dataOrg.push(item);
    });
    return dataOrg;
  },

  getClientsNames: function(gps_clients) {

    var clients = [],
        comboBoxClients = [];

    gps_clients.each(function(item) {
       clients.push(item.toJSON());
    });

    clients = _.sortBy(clients, function(client) {
      if (client.name) {
        return client.name;
      } else {
        return;
      }
    });
    _.each(clients, function(client) {
        var item = {};
        item[client.objectId] = client.name;
        comboBoxClients.push(item);
    });
    return comboBoxClients;
  },

  removeClientComboBox: function() {
    this.$el.find('.combo-section-client').hide();
    this.clientComboBox && this.clientComboBox.remove();
    this.clientComboBox = null;
    Backbone.off('selectedItemCombo', this.populateOrganization, this);
  },

  removeOrgComboBox: function() {
    this.$el.find('.combo-section-org').hide();
    this.comboOrgs && this.comboOrgs.remove();
    this.comboOrgs = null;
  },

  remove: function(){
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction, this);
    this.removeClientComboBox();
    this.removeOrgComboBox();
    destroy_view(this);
  }
});
gps.AddBacklogAssessmentView = Backbone.View.extend({

  initialize: function(options) {
    this.options = options || {};

    _.bindAll(this, 'render', 'save');
    this.template = gps.handlebarsCompileFactory.get('#assessment-add');

  },

  render: function() {

    var levels;

    // Render this view's template with the model
    this.$el.html(this.template());
    this.renderHeader();

    // Set breadcrumbs
    backlogName = gps.controllers.backlogController.getGpsBacklog(this.options.backlogID).get('name');

    levels = [{
      name: 'Improvement Plans',
      url: '#backlogs'
    }, {
      name: backlogName,
      url: '#backlogs/' + this.options.backlogID + '/list'
    }, {
      name: 'Add Index'
    }];

    gps.views.header.setBreadcrumbs(levels);

    return this;
  },

  renderHeader: function() {
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button,
      gps.views.header.availableButtons.save_assessment_button
    ]);

    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    destroy_view(this);
  },

  save: function(event) {

    if (event) {
      event.preventDefault();
    }

    var formData, backlog, assessment, hasErrors;

    // Get the data from the form
    formData = serializeWithDates($('form.assessment-add-section').find("input,select"));

    /**
     * We need to create the assessment and add it
     * to the current backlog id
     */

    // Create a new assessment
    assessment = new gps.models.Assessment();

    assessment.on('invalid', function(model, error) {
      hasErrors = true;
      alert(error);
      return;
    });

    assessment.set(formData, {
      validate: true
    });

    // Select the current backlog
    backlog = gps.controllers.backlogController.getGpsBacklog(this.options.backlogID);

    // Cancel if we have any errors when setting the model
    if (hasErrors) {
      return;
    }

    // Create the assessment and add it to the current backlog
    backlog.save('assessments', [assessment], {
      success: function(model) {

        var assessments = model.get('assessments'),
          newAssessment = _.last(assessments);

        var model = new gps.models.Assessment(newAssessment),
          newAssessments;

        // Use the backbone assessment model to add it on the team collection
        gps.backlogAssessments.add(model);

        // Grab the attributes of the most recently updated collection of assessments
        newAssessments = gps.backlogAssessments.map(function(assessment) {
          return assessment.attributes;
        });

        // Set these updated list users locally (no server) to the current backlog
        backlog.set('assessments', newAssessments);


        gps.controllers.assessmentController.addAssessmentLocally(newAssessment, backlog.id);

        // Go back
        window.history.back();
      },
      error: function(model, error) {

        if (error.responseJSON && error.responseJSON.message) {
          alert(error.responseJSON.message);
        }
        window.history.back();
      },
      remote_ignore: ['stories', 'assessments']
    });

    return this;
  }
});
gps.BacklogAssessmentCommentView = Backbone.View.extend({
  events: {
    "tap .comment-item-content-prac-link" : "goToComment"
  },

  initialize: function(options) {
    this.options = options || {};

    this.tabNavigationTemplate = gps.handlebarsCompileFactory.get('#tab-navigation');
    this.template = gps.handlebarsCompileFactory.get('#practices-show-comments-template');
  },

  render: function() {
    // Set BreadCrumbs
    gps.views.header.setBreadcrumbs([
      {
        name: "Improvement Plans",
        url: "#backlogs"
      },
      {
        name: this.options.backlogGps.getName(),
        url: "#backlogs/" + this.options.backlogGps.id + "/list"
      },
      {
        name: "Comments from: " + this.options.assessmentGps.getAssessmentName()
      }
    ]);

    // Render view
    this.$el.html( this.template({comments: this.collection}) );

    // Render tab navigation
    var comStrTabShow = 'COMMENTS (' + this.collection.length.toString() + ')',
    itemDiscTab = {
      'DISCIPLINES': "#backlogs/" + this.options.backlogGps.id + "/assessments/update/" + this.options.assessmentGps.id
    },
    itemCommentTab = {},
    dataTabNavigation = [itemDiscTab, itemCommentTab];

    // This make active the current tab
    itemCommentTab[comStrTabShow] = null;

    this.$('.prac-show-comments-tab-navigation-container').html( this.tabNavigationTemplate(dataTabNavigation));

    // Display the line between avatars
    // if we have more than one avatar to "link"
    var totalHeight = 0,
    numbOfComments = this.collection.length;

    if(numbOfComments > 1) {

      // Sum the height (including margin) of every comments
      $('.prac-show-comments-comments-container').children().each(function(index) {
        if(index <= numbOfComments - 1) {
          totalHeight += $(this).outerHeight(true) + 2;
        }
      });

      // Show the line with the calculated height
      $('.prac-show-line')
      .css({
        height: totalHeight.toString() + "px"
      })
      .show();
    }

    this.renderHeader();

    return this;
  },

  renderHeader: function() {
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);

    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
    destroy_view(this);
  },

  goToComment: function(event) {
    var disciplineId = $(event.currentTarget).data('discipline-id'),
        practiceId = $(event.currentTarget).data('practice-id'),
        questionTitle = $(event.currentTarget).closest('.comment-item-content').find("span[name='question']").text();

    // trigger a tap on "discipline tab"
    gps.router.navigate($('.tab-navigation-item').find("a[href]").attr('href'), true);

    // show the question
    gps.views.updateBacklogAssessmentView.showParticularPractice(disciplineId, practiceId, questionTitle);
  }

});
gps.EditBacklogAssessmentView = Backbone.View.extend({

    events: {},
    initialize: function(options) {
        this.options = options || {};
        _.bindAll(this, 'updated');

        this.template = gps.handlebarsCompileFactory.get('#assessment-edit');
    },

    render: function() {

        var levels;

        // Render this view's template with the model
        this.$el.html(this.template(this.model.toJSON()));
        this.renderHeader();

        // Set breadcrumbs
        backlogName = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID ).get('name');

        levels = [
            {
                name: 'Improvement Plans',
                url: '#backlogs'
            },
            {
                name: backlogName,
                url: '#backlogs/' + this.options.backlogID + '/list'
            },
            {
                name: 'Edit Index'
            }
        ];

        gps.views.header.setBreadcrumbs( levels );

        $("[name='startdate']")[0].valueAsDate = this.model.getStartDate();
        $("[name='enddate']")[0].valueAsDate = this.model.getEndDate();

        return this;
    },

    renderHeader: function() {
      gps.views.header.showButtons([
        gps.views.header.availableButtons.back_button,
        gps.views.header.availableButtons.edit_assessment_button
      ]);
      Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
    },

    remove: function() {
        Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

        destroy_view(this);
    },

    save: function( event ) {

        if ( event ) {
            event.preventDefault();
        }

        var formData;

        // Get the data from the form
        formData = serializeWithDates($('form.assessment-edit-section').find("input,select"));

        // update the assessment
        this.model.updateAssessment(formData,this.updated);

        return this;
    },

    updated: function(newAssessmentFromServer) {

        // Select the current backlog
        var backlog = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID );
        backlog.updateBacklogLocally(newAssessmentFromServer);
        window.history.back();
    }
})
;
gps.BacklogAssessmentQuestionHelpView = Backbone.View.extend({

    events: {
        "tap .question-help .content .answers p": "setScore",
        "tap .question-help #close-btn": "remove"
    },

    initialize: function( options ) {
        this.parentView = options.parentView;

        this.templateBinary = Handlebars.compile( $("#backlog-assessment-question-help-binary").html() );
        this.templateScalar = Handlebars.compile( $("#backlog-assessment-question-help-scalar").html() );

        //just one popup per time.
        if (gps.popUp) {
            gps.popUp.remove();
        }
        gps.popUp = this;
    },

    render: function() {
        var question = this.model.question;
        if(question.hasOwnProperty('binary') && question.binary) {
            this.$el.html( this.templateBinary( question ) );
        }
        else {
            this.$el.html( this.templateScalar( question ) );
        }
        return this;
    },

    setScore: function(event) {

        var selectedValue = $(event.target).closest("p").data("value");

        //this is going to be cached by the parent view and they are going to save the value.
        this.parentView.setScoreAndSave(this.model,selectedValue);
        this.remove();
    },

    notifyTapOutside: function(event) {
        if (!$.contains(this.el,event.target) && event.target.id != "show-help"){
            this.remove();
        }
    },

    remove: function() {
        this.$el.remove();
        gps.popUp = null;
    }
});
gps.BacklogAssessmentQuestionView = Backbone.View.extend({

    events: {
      'tap .question-box' : "focusQuestion",
      'tap .question-answer-box-item'   : "setScore",
      'tap .question-box-notes-button'  : 'toggleNotes',
      'tap .question-box-notes-impediment-button'  : 'toggleNotes',
      'tap .question-box-notes-content-button'  : 'toggleNotes',
      'tap .question-note-cancel-button': 'toggleNotes',
      'tap .question-note-add-comment-button': "saveNotes",
      'keyup .question-note textarea'        : "notesChange",
      'change .question-note-mark-as-impediment-checkbox .checkbox': "notesChange",
      "hold .question-box-answer>i": "showOptionsWithHelp",
      "tap .question-box-answer>i" : "showOptionsWithHelp"
    },

    initialize: function( options ) {

      this.helpHeight = 313;
      this.heightCorrection = 120;
      this.hf = gps.handlebarsCompileFactory;
      this.parentView = options.parentView;
      this.assessment = options.assessment;
      this.backlogId = options.backlogId;
      this.activeColor = options.activeColor;

      this.template = this.hf.get('#question-box');
      if(this.model.has('comment')) {
        this.commentGps = new gps.models.Comment(this.model.get('comment'));
      }

      this.setScoreCallback = function(assessment) {
        gps.eventManager.trigger("questionSetScore", assessment);
      };

      this.setCommentAmountCallback = function(isInc) {
        gps.eventManager.trigger("commentSetAmount", isInc);
      };
    },

    remove: function() {

      destroy_view(this);
    },

    render: function() {
      var answerJson = _.extend(this.model.toJSON(), this.commentGps ? this.commentGps.toJSON() : {}),
      contents;

      if( this.commentGps ) {
        contents = this.commentGps.get('contents');
      }

      // I need to ensure answerJson is different than null
      // because It's needed by the view.
      answerJson.comment = answerJson.comment || {contents: "", impediment: false};
      // each checkbox needs an id to be identified with his own label.
      answerJson.comment.checkboxId = this.model.question.objectId;

      var data = _.extend(answerJson , {
          title: this.model.question.title,
          binary: this.model.question.binary,
          enable_impediment: this.enableImpediment(contents),
          question: this.model.question,
          hasContent: (answerJson.comment.contents.length > 0)
      });
      
      this.$el.html(this.template(data));
      return this;
    },

    setScore: function(event) {

      if (this.assessment.isFinished()) {
        return;
      }

      var $element = $(event.currentTarget),
      $elementContainer = $element.parent(),
      isBoolean = $element.hasClass("boolean-score"),
      score = $element.index() + 1;

      if (isBoolean) {
        score--;
      }

      $elementContainer.find(".question-answer-box-item").removeClass("active");
      $element.addClass("active");

      this.model.set("score", score);
      this.save(this.setScoreCallback);
    },

    /**
     * The component inside is going to check if it is a binary question or scalar.
     * @param event
     */
    showOptionsWithHelp: function( event ) {

      this.$('.question-box-note').removeClass('open');
      this.$(".question-box-web-information").toggleClass("open");
    },

    //Reajust css acording to the guidance and title
    adjustOptionsWithHelp: function() {

      //get guidance content
      var $gcontent = $(".gcontent");

      if($gcontent.innerHeight() > 252) { //scroll present
        $(".shadow").css('display','initial');
      }
      else {
        $(".shadow").css('display','none');
      }

      //get question title
      var $tquestion = $(".tquestion" );

      if($tquestion.innerHeight() > 60) {
        $(".h-separator").addClass("large");
        $(".v-separator").addClass("short");
      }
      else {
        $(".h-separator").addClass("short");
        $(".v-separator").addClass("large");
      }
    },

    setScoreAndSave : function(question,score){

      if (this.assessment.isFinished()) {

        return;
      }

      var $list = this.$el.find("ul"),
      $liElements = $list.find("li"),
      isBoolean = $list.hasClass("boolean-score");

      //clear the current selected value.
      $liElements.removeClass("active");

      this.model.set("score", score);
      //now I'm going to set as selected the new scroe.
      var index = isBoolean ? score: score-1;
      $($liElements[ index ]).addClass("active");

      this.save(this.setScoreCallback);
    },

    save: function(callback) {

      if ( this.model.getRemote() ) {

        //If already exists in the server => save
        this.model.save(this.model.attribute, {
          success:function(answerModel) {

            //Restore comment to comment model
            if (this.commentGps && this.commentGps.getRemote()) {
              this.model.set('comment', this.commentGps.toJSON());
            }

            //this method will update our local copy with the new answer.
            this.assessment.updateAnswerLocally(this.model);
            var backlog = gps.controllers.backlogController.getGpsBacklog(this.backlogId);
            backlog.updateBacklogLocally(this.assessment);
          }.bind(this),

          error: function(model, error) {
            if(error.responseJSON && error.responseJSON.message) {
              alert(error.responseJSON.message);
            }
            window.history.back();
          }
        });
      }
      else {
        // avoid problems going to data base
        var assessmentGps = this.assessment.clone();
        assessmentGps.addAnswerLocally(this.model);
        var percent_completed = gps.controllers.assessmentController.getCompletedPercentage(assessmentGps);

        assessmentGps.attributes.answers.pop();

        this.model.setAssessmentId(assessmentGps.id);
        assessmentGps.setPercentCompleted(percent_completed);
        assessmentGps.setPercentCompletedGlobalVariable(percent_completed);

        //Creating and associating new answer
        assessmentGps.save('answers', [this.model], {
          success: function(assessmentModel) {
            var answers = assessmentModel.get('answers'),
            answerModel = answers[answers.length - 1];

            //Restore comment to comment model
            if (this.commentGps && this.commentGps.getRemote()) {
              this.model.set('comment', this.commentGps.toJSON());
            }

            //Mark as already existing on server
            this.model.set('objectId', answerModel.objectId);
            this.model.setRemote( true );

            //Update the local copy of the assessment with the new answer.
            this.assessment.addAnswerLocally(this.model);
            var backlog = gps.controllers.backlogController.getGpsBacklog(this.backlogId);
            backlog.updateBacklogLocally(this.assessment);
            callback ? callback(this.assessment) : "";
          }.bind(this),

          error: function(model, error) {
            if(error.responseJSON && error.responseJSON.message) {
              alert(error.responseJSON.message);
            }
            window.history.back();
          }
        });
      }
    },

    saveNote: function(callback) {

      this.commentGps.save(this.commentGps.attribute, {
        success: function(comment) {
          
          this.model.set('comment', this.commentGps.toJSON());

          //Mark as already existing on server
          if (!this.commentGps.getRemote()) {
            this.commentGps.setRemote(true);
          }
          else {
            this.assessment.updateAnswerLocally(this.model);
            var backlog = gps.controllers.backlogController.getGpsBacklog(this.backlogId);
            backlog.updateBacklogLocally(this.assessment);
          }

          this.$('.question-box-note').toggleClass('open');

          callback ? callback() : "";          
        }.bind(this),
        error: function( model, error ) {
          if( error.responseJSON && error.responseJSON.message ) {
            alert(error.responseJSON.message);
          }
          return;
        }.bind(this)
      })  
    },

    /**
     * Saves the note for a particular answer, validates if an empty note is being saved.
     * Also it checks if the impediment checkbox is 'on' and mark this note as impediment if yes  
     * @return {void}
     */
    saveNotes: function() {

      var $textArea    = this.$("textarea[name='notes']"),
      $impedimentCheck = this.$("input[type='checkbox']"),
      $notesBtn        = this.$("button[name='show-notes']"),
      contents         = $textArea.val(),
      impediment       = $impedimentCheck.is(':checked'),
      loggedUser       = gps.controllers.loginController.getLoggedUser(),
      logicalCreate    = this.commentGps && !this.commentGps.hasContents() && contents,
      previousCommentGps = new gps.models.Comment(this.model.getComment());

      this.commentGps =  this.commentGps || new gps.models.Comment();
      //set attributes
      this.commentGps.set({
        contents: contents,
        impediment: impediment,
        username: loggedUser.username
      });

      // Empty comment validation
      // if note's previous comment has text => allow to erase it, saving an empty text in the db
      if (contents.length === 0 && !previousCommentGps.hasContents()) {
        $textArea.addClass('error');
        return;
      }

      //save comment  
      if(this.commentGps.getRemote()) {
        this.commentGps.setUpdatedDate();

        // the comment is remote but was previously deleted logically
        if(logicalCreate) {
          this.saveNote(this.setCommentAmountCallback(true));
        } // we delete the comment logically
        else if(!this.commentGps.hasContents()) {
          this.saveNote(this.setCommentAmountCallback(false));
        } // edit comment so not changing amount
        else{
          this.saveNote();
        }
      }
      // create comment and save answer
      else {
        this.saveNote(function() {
          this.save();
        }.bind(this));

        this.setCommentAmountCallback(true);
      }

      //update show-notes button class
      $notesBtn.removeAttr('class');
      if(contents.length === 0) {
        
        $notesBtn.addClass("question-box-notes-button");
      }
      else {
        
        if(impediment) {
          
          $notesBtn.addClass("question-box-notes-impediment-button");
        }
        else {
          
          $notesBtn.addClass("question-box-notes-content-button");
        }
      }

      // pop-up keyboard go away
      $textArea.blur();
    },

    enableImpediment: function(text) {

      return (text && text.length >= 25);
    },

    /**
     * Function fired when the textarea for a note is modified.
     * @return {void}
     */
    notesChange: function() {
      var $textArea = this.$("textarea[name='notes']"),
          text      = $textArea.val(),
          checkbox  = this.$("input[type='checkbox']");

      // if the error class is on then we have to remove it.
      if ($textArea.hasClass('error')) {
        $textArea.removeClass('error');
      };


      if(this.enableImpediment(text)) {
        checkbox.attr('disabled', false);
      }
      else {
        checkbox.prop('checked', false);
        checkbox.attr('disabled', true);
      }
    },

    toggleNotes: function() {
      // discuss about checkbox state
      // depending on the text's length
      this.notesChange();

      this.$('.question-box-web-information').removeClass('open');

      // pop-up keyboard go away
      this.$('textarea').blur();
      setTimeout(function() {

        var moveCaretPosition = function() {
          var $textArea = this.$('textarea'),
          text = $textArea.val(),
          pos;

          // if there was previous text => we change pos
          if (text){
            pos = text.length;
          }

          // show the keyboard, and move the caret to the end
          setTimeout(function() {
            var el = $textArea.get(0);
            $textArea[0].setSelectionRange(pos, pos);
            $textArea[0].scrollTop = 999999;
            el.focus();
          }, 500);
        };

        var close = !this.$('.question-box-note').hasClass('open');
        this.$('.question-box-note').toggleClass('open');

        if (close) {
          gps.util.showEntireItem(this.$el, this.$el.parent(), true, 500, moveCaretPosition.bind(this));
        }
      }.bind(this), 500);
    },

    focusQuestion: function() {
      this.$el.addClass(this.activeColor);

      Backbone.trigger('blurQuestion', this.model, this.$el);
    }
});
gps.BacklogAssessmentQuestionListView = Backbone.View.extend({

    el: ".improvement-plans-question-list-wrapper",

    /*
     * Will have as collection the list of answers and each anser has a question.
     * Then I have the backlog id and the assessment ( the instance ).
     */
    initialize: function( options ) {
        this.assessmentId = options.assessment.id;
        this.backlogId    = options.backlogId;
        this.assessment   = options.assessment;
        this.activeColor  = 'question-active-' + options.color;

        this.currViews = [];

        Backbone.on('blurQuestion', this.blurQuestion, this);
    },

    remove : function() {
        Backbone.off('blurQuestion', this.unFocusQuestion, this);

        for (var index in this.currViews){
            this.currViews[index].remove();
        }
        this.currViews = [];
    },

    render: function( options ) {
        var $el = this.$el,
            collection = this.collection,
            assessmentId = this.assessmentId,
            backlogId = this.backlogId,
            assessment = this.assessment,
            activeColor = this.activeColor;

        $el.empty();

        this.collection.forEach(function( model ) {
            var item;

            item = new gps.BacklogAssessmentQuestionView({
                model: model,
                collection: collection,
                assessmentId: assessmentId,
                backlogId: backlogId,
                assessment:assessment,
                activeColor: activeColor
            });

            this.currViews.push(item);
            $el.append( item.render().el );
        }.bind(this));

        // the first question is focus as "selected"
        if (this.currViews.length) {
          this.currViews[0].focusQuestion();
        }

        return this;
    },

    blurQuestion: function(questionGps, $questionContainer) {
      var sameQuestion = false,
          // use id or cid, this is because notes without
          // score and comment aren't remote
          // it's important to check first for the id
          questionId = questionGps.id || questionGps.cid;

      // In case there was a previous selected question,
      // we check if the new one selected it's different from the previous one
      // lastQuestion.id can be equal to the id or to the cid, in case of equality with the cid
      // that is because a comment/score was added and now the question is remote (is an answer),
      // so we have to update this.lastSelectedQuestion.id in order to do not remove the active class
      if (this.lastSelectedQuestion) {
        sameQuestion = this.lastSelectedQuestion.id === questionId || this.lastSelectedQuestion.id === questionGps.cid;
      }

      // so we have a new selected question
      if (!sameQuestion) {
        // only have to remove "active class"
        // if it was a previous question selected (and different)
        if (this.lastSelectedQuestion) {
          this.lastSelectedQuestion.$questionContainer.removeClass(this.activeColor);
        }

        // save reference to remember the previous one selected
        this.lastSelectedQuestion = {
          id: questionId,
          $questionContainer: $questionContainer
        };
      }
    }
});
gps.BacklogAssessmentReportView = Backbone.View.extend({

  className: "reflectionsView",

  events: {
    "tap .report-types li" : "onReportTap",
    "tap .rating li" : "onMaturityLevelTap",
    "tap .horizontal-graph-row": "renderDisciplinePractices"
  },

  // Constant
  COLORS: ['#32A4DF'],

  MATURITY_COLORS: ["#1ac723", "#33ced4", "#2869e0"], // [Novice, Foundational, Mastery]

  // Amount of checkbox selected
  MAX_SELECTED: 3,

  SHOW_MATURITY_INITIAL: true,

  AFFIRMATIVE: "On",
  NEGATIVE: "Off",

  initialize: function(options) {

    this.rc = gps.controllers.reportController;
    this.graphTemplate = Handlebars.compile( $("#assessment-show-report-graph").html() );

    this.spiderChartConfig = {
      w: 450,
      h: 450,
      factor: 1,
      factorLegend: .85
    };

    this.currBacklogGps = options.backlogGps;
    this.currAssessments = [options.assessmentGps.toJSON()];
    this.assessmentGps = options.assessmentGps;

    this.setColors();
    this.setDefaultProperties();
  },

  render: function() {

    // we render the assessments section only one time
    if(!this.template) {
      this.renderSidebarAssessments();
      this.setBreadcrumbs();
    }

    var reporTypes = this.rc.getAvAssessmentReportsInfo([this.assessmentGps.toJSON()]),
      currentReport = _.findWhere(reporTypes, {name: this.selectedReport});

    var data = {
      exactPercent: currentReport ? currentReport.exactPercent : 0,
      amountReports: reporTypes.length,
      initialOnMarker: this.memMaturitySelection
    }

    data.overall = (this.selectedReport == 'Overall')

    // render reports and graphic
    this.$('.graph-section').html( this.graphTemplate(data) );

    // render the three square colors
    if (this.selectedReport == "Overall") {

    } else {
      // there is no svg square, so the position change
      $('#levels-info').removeClass('levels-spider-info');
      $('#levels-info').addClass('levels-bar-info');
    }

    this.$selReportElem = $("li[data-name= " + this.selectedReport + "]");
    this.$selReportElem.addClass("selected");

    this.$selectedMaturityElem = this.$(".rating").find(".active");

    if (this.$selectedMaturityElem.text() != this.AFFIRMATIVE){
      $('#levels-info').hide();
    }

    //this.renderSubHeader();
    this.selectedReport != "Overall" ? this.onBarChartClick() : this.onSpiderChartClick();

    //remove the header components
    gps.views.header.removePreviousComponents();

    this.AllpracticesCompletedPercentage = this.AllpracticesCompletedPercentage ||
      gps.controllers.practiceController.getCompletedPercentage(this.assessmentGps.toJSON());

    var disciplines         = this.assessmentGps.getResults(this.currBacklogGps.id, this.assessmentGps.id).disciplines,
        practices           = _.sortBy(disciplines[0].practices, function(currentPractice) {
          return currentPractice.practice_id.name;
        }),
        color               = gps.assessments.disciplines[0].color;

    _.each(gps.assessments.disciplines, function(currentDiscipline, index) {
      disciplines[index].color = currentDiscipline.color
    });

    var data = _.extend({}, {
      disciplines: disciplines,
      practices: practices,
      color: color
    });

    $('.horizontal-graphs-main').html(gps.handlebarsCompileFactory.get('#horizontal-graph-assessment-report')(data));
    this.renderSubHorizontalGraph(data);


    this.$('.horizontal-graphs-main .horizontal-graph .horizontal-graph-row')
      .first().addClass('activated')
      .find('.horizontal-graph-title-box').addClass('activated');

    this.renderSpiderChart( this.getSpiderChartData() );
    $("#" + this.selectedChart).parent().addClass("active");

    //header buttons
    gps.views.header.showButtons([
        gps.views.header.availableButtons.back_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
  },

  renderSubHeader: function(){

    gps.views.subHeader.changeTemplate( this.headerTemplate() );
  },

  renderSidebarAssessments: function(){

    this.template = Handlebars.compile( $("#assessment-show-report").html() );
    this.$el.html( this.template({assessments: this.currAssessments}) );

    this.$el.find(".assessments li").each( function(i,e){

      var $el = $(e),
        checkboxView = new gps.coloredCheckbox({

          color: $el.data("color"),
          itemId: $el.data("id"),
          onTap: this.onAssessmentTap.bind(this),
          selected: _.contains(this.selectedAssessmentIds, $el.data("id")),
          validate: this.validate.bind(this)
        });

      $el.prepend(
        checkboxView.render().el
      );

      if( i == this.MAX_SELECTED - 1){
        this.lastCheckSelected = checkboxView;
      }

    }.bind(this));

  },

  renderSvgSquare: function(){
    this.$('#novice').prepend(this.squareTemplate({
      idGradient: "noviceGradient",
      initialColor: this.MATURITY_COLORS[0],
      finalColor: gps.util.getDarkColor(this.MATURITY_COLORS[0], 70)
    }));
    this.$('#foundational').prepend(this.squareTemplate({
      idGradient: "foundationalGradient",
      initialColor: this.MATURITY_COLORS[1],
      finalColor: gps.util.getDarkColor(this.MATURITY_COLORS[1], 70)
    }));
    this.$('#mastery').prepend(this.squareTemplate({
      idGradient: "masteryGradient",
      initialColor: this.MATURITY_COLORS[2],
      finalColor: gps.util.getDarkColor(this.MATURITY_COLORS[2], 70)
    }));
  },

  renderBarChart:function( data ){
    $("#" + this.selectedChart).parent().addClass("active");

    $("#current_graph").empty();    //first we need to remove previous things.

    if(data.length) {
      var activate = (this.$selectedMaturityElem.text() == this.AFFIRMATIVE);
      options = {enableMarker: activate && data.show};
      gps.charts.barChart.draw("#current_graph", data, options);
    }
  },

  renderSpiderChart:function( datos ){
    $("#" + this.selectedChart).parent().addClass("active");

    //first we need to remove previous things.
    $("#current_graph").empty();

    var activate = (this.$selectedMaturityElem.text() == this.AFFIRMATIVE);
    this.spiderChartConfig.enableMarker = activate;

    if(datos.data.length) {
      gps.charts.spiderChart.draw("#current_graph", datos.data, datos.marker, this.spiderChartConfig);
    }
  },

  setDefaultProperties : function(){

    this.selectedReport = "Overall";
  },

  setBreadcrumbs: function(){

    var backlogName = this.currBacklogGps.get("name");
    gps.views.header.setBreadcrumbs([
      {
        name: "Improvement Plans",
        url: "#backlogs"
      },
      {
        name: backlogName,
        url: "#backlogs/" + this.currBacklogGps.id + "/list"
      },
      {
        name: "Reflection"
      }
    ]);
  },

  setColors: function(){

    function updateColors(arrayColors, amount){
      for(var i = 0; i < amount; i++){
        arrayColors[i] = gps.util.desaturateColor(arrayColors[i]);
      }
    };

    var arrayColors = this.COLORS ? this.COLORS.slice() : [],
      amount, index = 0;

    for(assess in this.currAssessments){

      if( index == 10 ) {
        index = 0;

        amount = ( this.currAssessments.length - assess ) < 10 ? this.currAssessments.length - assess : 10;
        updateColors(arrayColors, amount);
      }
      this.currAssessments[assess].color = arrayColors[index++];
    }
  },

  onAssessmentTap : function(id){

    var assessment = _.findWhere(this.currAssessments, {objectId: id});
    assessment.selected = assessment.selected ? false : true;
    assessment.selected ? this.amountSelected++ : this.amountSelected--;

    this.updateSelectedAssessments();
    this.render();
  },

  updateSelectedAssessments: function(){

    this.selectedAssessments   = _.where(this.currAssessments, {selected:true});
    this.selectedAssessmentIds = _.map(this.selectedAssessments, function(assessm){ return assessm.objectId; });
  },

  getChartData: function(){
    return this.rc.
      getAssessmentReport(this.selectedReport,
      this.currAssessments,
      this.currBacklogGps.id);
  },

  getBarChartData: function(){

    var chartData = this.getChartData(),
      barChartData = [],
      arrayM = [],
      backlogController = gps.controllers.backlogController,
      maturityController = gps.controllers.maturityController;

    for(var pract in chartData){
      var valuesArray = [];
      var assessmArray = chartData[pract];

      for(var j in assessmArray){
        valuesArray.push({axis:assessmArray[j].objectId,value:assessmArray[j].total, color: assessmArray[j].color});
      }
      barChartData.push({name:pract,values:valuesArray});
    }

    // we sortBy name unless we get overall active
    if ( !$('li[data-name="Overall"]').hasClass('selected') ) {
      barChartData = _.sortBy(barChartData, function (elem) {
        return elem.name;
      });
    }

    var client = backlogController.getClient(this.currBacklogGps.toJSON());
    var markers = maturityController.getBarMaturity(client, this.selectedReport, this.MATURITY_COLORS);

    for (var level in markers){
      if (markers[level].length == Object.keys(chartData).length){
        arrayM.push(markers[level]);
      }
    }

    // We don't have maturity to show for this discipline
    if (!arrayM.length){
      this.$('.maturity-section').hide();
      this.$('#current_graph').css("margin-top", "50px");
      barChartData.show = false;
    }
    else {
      barChartData.show = true;
      // we have to replicate the level of each practice to all the assessments selected
      _.each(arrayM, function(level, index){
        maturityController.loadMaturityForAllSelectedAssessments(barChartData, index, level, this.amountSelected);
      }.bind(this));
    }

    return barChartData;
  },

  getSpiderChartData: function() {

    var arrayD = [],
      arrayM = [],
      chartData = this.getChartData();

    for(var i in chartData){
      for(var j in chartData[i]){
        arrayD[j] = arrayD[j] ? arrayD[j] : [];
        arrayD[j].push({"axis" : i ,"value":chartData[i][j].total/100, "color":chartData[i][j].color});
      }
    }

    var client  = gps.controllers.backlogController.getClient(this.currBacklogGps.toJSON());
    var markers = gps.controllers.maturityController.getSpiderMaturity(client, this.MATURITY_COLORS);

    for (var level in markers){
      if (markers[level].length == Object.keys(chartData).length){
        arrayM.push(markers[level]);
      }
    }

    if (! arrayM.length){
      this.$('.maturity-section').hide();
      this.$('#current_graph').css("margin-top", "50px");
    }

    return {data: arrayD, marker: arrayM};
  },

  onReportTap: function(ev){

    if ($(ev.currentTarget) != this.$selReportElem){

      this.$selReportElem.removeClass("selected");
      this.$selReportElem = $(ev.currentTarget);

      this.selectedReport = this.$selReportElem.data("name");
      this.render();
    }
  },

  onSpiderChartClick: function(){
    $("#" + this.selectedChart).parent().removeClass("active");

    this.selectedChart = "spiderChart";
    this.renderSpiderChart( this.getSpiderChartData() );
  },

  onBarChartClick: function(){
    $("#" + this.selectedChart).parent().removeClass("active");

    this.selectedChart = "barChart";
    this.renderBarChart( this.getBarChartData() );
  },

  onMaturityLevelTap: function(ev){
    var selected = $(ev.currentTarget);

    if (!selected.hasClass("active")) {

      this.$selectedMaturityElem.removeClass("active");
      this.$selectedMaturityElem = selected;
      this.$selectedMaturityElem.addClass("active");

      this.memMaturitySelection = (this.$selectedMaturityElem.text() == this.AFFIRMATIVE);

      this.memMaturitySelection ? $('#levels-info').show() : $('#levels-info').hide();

      var hasToRenderBar = (this.selectedReport != "Overall");
      hasToRenderBar ? this.renderBarChart( this.getBarChartData() ) : this.renderSpiderChart( this.getSpiderChartData() );
    }
  },

  renderDisciplinePractices: function(event) {
    var $element = $(event.currentTarget),
      color,
      data,
      discipline,
      disciplineId,
      practices;

    if (this.isMainHorizontalGraphComponent($element)) {

      // If the clicked element is the one activated we don't need to render again.
      if($element.hasClass('activated'))
        return;

      this.removeActivatedClass();

      // Activate the row being clicked.
      $element.addClass('activated');
      $element.find('.horizontal-graph-title-box').addClass('activated');
      // collect the data and construct the object for the practices.
      disciplineId = $element.data('id');

      discipline = _.findWhere(gps.assessments.disciplines, {
        objectId: disciplineId
      });

      practices = _.findWhere(this.assessmentGps.getResults(this.currBacklogGps.id, this.assessmentGps.id).disciplines, {
        discipline_id: disciplineId
      }).practices;
      color = discipline.color;

      data = _.extend({}, {
        practices: _.sortBy(practices, function(currentPractice) {
          return currentPractice.practice_id.name;
        }),
        color: color
      });

      // compile and render the template for the practices of the clicked discipline.
      this.renderSubHorizontalGraph(data);
    }
  },


  // this is to avoid that taps/clicks in rows of the practices container trigger the
  // renderDisciplinePractice function.
  isMainHorizontalGraphComponent: function($element) {
    return $element.parent() && $element.parent().parent().attr('class').indexOf('horizontal-graphs-main') != -1;
  },

  // Cache all components of the horizontal-graph-main and remove the class 'activated' of some of them.
  removeActivatedClass: function() {
    this.$horizontalGraphMain = this.$horizontalGraphMain || this.$('.horizontal-graphs-main');
    this.$horizontalGraphRows = this.$horizontalGraphRows || this.$horizontalGraphMain.find('.horizontal-graph-row');
    this.$rowsTitleBox = this.$rowsTitleBoxes || this.$horizontalGraphRows.find('.horizontal-graph-title-box');
    this.$horizontalGraphMain.removeClass('activated');
    this.$horizontalGraphRows.removeClass('activated');
    this.$rowsTitleBox.removeClass('activated');
  },

  // Here what we do is filter the array where all the practices have their respective
  // percentage with the upcoming practices array (the practices of an specific discipline)
  getPracticesPercentage: function(practices) {
    return _.filter(this.AllpracticesCompletedPercentage, function(practice) {
      return _.contains(_.map(practices, function(practice) {
        return practice.objectId;
      }), practice.objectId);
    });
  },

  renderSubHorizontalGraph: function(data) {
    $('.horizontal-graphs-sub').html(gps.handlebarsCompileFactory.get('#horizontal-graph-assessment-sub-report')(data));
  },

  validate: function( anotherSelected, checkboxView) {

    if( anotherSelected ) {
      if(this.amountSelected == this.MAX_SELECTED) this.lastCheckSelected.tick();
      this.lastCheckSelected = checkboxView;
    }
  },

  reload: function(callback) {
    var backlog = gps.controllers.backlogController.getBacklog(this.currBacklogGps.id).backlog

    this.currBacklogGps.fetch({
      success: function(model) {

        var assessments = model.getAssessments();
        assessmentCol = new gps.collections.Assessments(this.currAssessments);
        assessmentCol.setFetched();
        backlog.assessments = assessments;

        callback && callback();
      },
      error: function(model, error) {

        gps.util.showError(model, error);
      }
    });
  },

  remove:function(){

    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction, this);
    gps.eventManager.off("onSpiderChartClick", this.onSpiderChartClick, this);
    gps.eventManager.off("onBarChartClick", this.onBarChartClick, this);
    destroy_view(this);
  }
});
gps.BacklogAssessmentsView = Backbone.View.extend({

  generalEvents: {
    'tap #close-btn': 'closePopUp',
    'tap .add-assessment-button': 'goToAddAssessment'
  },

  events: function() {

    return gps.util.getEvents (
      [{
        'touchstart li': 'goToAssesment'
      }],
      [{
        "tap li": "goToAssesment"
      }],
      this.generalEvents);
  },

  remove: function(){

    /*
     * Here I need to unregister all my events and all the pop ups I have opened.
     * Basically undo all things I did in initialize.
     */
    this.assesmentOptions ? this.assesmentOptions.remove() : "";
    this.collection.unbind("change", this.render, this);
    destroy_view(this);
  },

  initialize: function() {

    this.template = Handlebars.compile($("#backlog-assessment-item").html());
    this.collection.bind("change", this.render, this);
    this.render();
  },

  goToAssesment: function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();

    var $li = $(event.currentTarget),
      assessmentId = $li.data("assessmentid"),
      backlogId = this.id;

    //look for the assessment in the database or collection.
    var assessment = this.collection.get(assessmentId);

    if ( assessment.isNotEditable() ){
      if ( !assessment.isFetched() ) {
        assessment.fetch({
          success: function (model) {
            gps.controllers.assessmentController.updateAssessmentLocally(model.toJSON(), backlogId);
            gps.router.navigate("backlogs/" + $li.data("backlogid") + "/assessments/update/" + assessment.id, true);
          }.bind(this),
          error: function (model, error) {
            gps.util.showError(model, error);
          }
        });
      } else {
        gps.router.navigate("backlogs/" + $li.data("backlogid") + "/assessments/update/" + assessment.id, true);
      }
    } else {

      /* if the status is !started then I'm going to ask if user whant's to edit or start */
      var options = {
        design: 2,
        title: "Assessment",
        message_options:[
          {description:"Start the assessment",url:"backlogs/" + $li.data("backlogid") + "/assessments/update/" + assessmentId},
          {description:"Edit the Assessment", url:"backlogs/" + $li.data("backlogid") + "/assessments/edit/" + assessmentId}
        ]
      };

      $("body").append( (this.assesmentOptions = new gps.messageBoxHelper(options)).render());
    }
  },

  closePopUp: function(event){

    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();

    if (this.assesmentOptions){
      $(".optionMessage").remove();
    }
  },

  goToAddAssessment: function(event){
    var $button = $(event.currentTarget);
    gps.router.navigate('backlogs/'+ $button.data('backlogid')+'/assessments/add', true);
  },

  render: function() {
    var $assessmentsContainer = $(this.el).find("ul"),
         backlogID            = this.id,
         isOdd                = true;
         isFirst              = true;

    $assessmentsContainer.empty();

    this.collection.sortBy('created');

    // Add assessments to the list
    this.collection.each(_.bind(function( assessment ){
      console.log(assessment);
      var newAssessment = assessment.toJSON();

      newAssessment.backlog_id = backlogID;
      newAssessment.isOdd = isOdd;
      newAssessment.isFirst = isFirst;
      isOdd = !isOdd;
      isFirst = false;

      var data = gps.controllers.assessmentController.getStatusData(newAssessment);
      newAssessment.statusName = data.status;
      newAssessment.statusInfo = data.info;
      newAssessment = this.fixCapitalization(newAssessment);

      $assessmentsContainer.append( this.template( newAssessment ) );
    }, this));

    return this;
  },

  fixCapitalization: function(assessment){
    assessment.assessment_name = this.fixSentenceCapitalization(assessment.assessment_name);
    assessment.statusName = this.fixSentenceCapitalization(assessment.statusName);
    assessment.statusInfo = this.fixSentenceCapitalization(assessment.statusInfo);

    return assessment;
  },

  fixSentenceCapitalization: function(sentence) {
    return sentence.split(' ').map(function(word) {
      if (word.toLowerCase() === "wip:") {
        return word;
      }
      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
    }).join(' ');
  }
});
gps.UpdateBacklogAssessmentView = Backbone.View.extend({

  className: "improvement-plan-indexes-screen",
  events: {
    'change form input, form select, form textarea': 'notifyChange',
    'tap .improvement-plans-category-chooser .decorated-percentage-row': 'selectDiscipline',
    'tap .improvement-plans-subcategory-chooser .decorated-percentage-row': 'startQuestionsView'
  },

  reload: function(callback) {
    this.model.fetch({
      silent: true,
      success: function(model) {

        gps.controllers.assessmentController.updateAssessmentLocally(model.toJSON(), this.options.backlogID);
        this.model.setFetched();

        callback && callback();
      }.bind(this),
      error: function(model, error) {

        gps.util.showError(model, error);
      }
    });
  },

  initialize: function(options) {
    this.options = options || {};

    this.backlogID = this.options.backlogID;

    this.hf = gps.handlebarsCompileFactory;
    _.bindAll(this, 'render', 'updateBacklog', 'onconfirm', 'showDisciplineDetails');

    this.tabNavigationTemplate            = this.hf.get('#tab-navigation');
    this.assessmentResults                = this.hf.get("#assessment-results");
    this.assessmentDisciplineTotal        = this.hf.get("#assessment-discipline-total");
    this.assessmentDisciplineDetailed     = this.hf.get("#assessment-discipline-detailed");
    this.assessmentDisciplineDetailedItem = this.hf.get("#assessment-discipline-detailed-item");
    this.assessmentCommentsRightBar       = this.hf.get("#comment-side-bar");

    this.collection.on("change", this.render, this);
    gps.eventManager.on("commentSetAmount",this.commentSetAmount, this);
    gps.eventManager.on("messageBoxSave",this.updateEndDate, this);
    gps.eventManager.on("questionSetScore",this.questionSetScore, this);

    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
    Backbone.on('gps.views.header:onModifyEndButton', this.changeAssessmentEndDate, this);
    Backbone.on('gps.views.header:onEndIndexButton', this.endAssessment, this);
    Backbone.on('gps.views.header:onReflectionButton', this.showResults, this);

    this.views = [];
    this.model.setFetched();
    gps.controllers.assessmentController.refreshPercentageCompleted(this.model.toJSON(), this.backlogID);
  },

  /**
   * Is going to print the index of the button starting in one.
   * @param button
   */
  onconfirm: function(button) {

    if (button == "1") {
      var callback = function(newAssessment) {

        var backlog = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID),
            assessments = backlog.get( 'assessments' );

        var ourAssessment = _.find(assessments, function(assessm){
          return assessm.objectId === newAssessment.id;
        });

        ourAssessment.status = "4"; //done!
        ourAssessment.ended_date = new Date().getTime();
        window.history.back();
      }.bind(this);

      this.model.updateAssessment({status: "4", ended_date: new Date().getTime() },callback);
    }
  },

  endAssessment: function() {

    var confirmed = showConfirmMessage('You are about to Close this Assessment. ' +
      'Once closed, you can no longer change any results.\n Are you sure' +
      ' you want to End the Assessment?',this.onconfirm,"Yes,No","WARNING");
  },

  updateEndDate:function(event,newDate) {

    this.model.setAndSaveEndDate(newDate,this.updateBacklog);
  },

  /**
   * This function is for MODIFY END index popup and calls messageBoxHelper(options)
   * that appends the popup in the view.
   * options ->
   *    design: Is for choose popup body design.
   *    title: Title of my popup.
   *    message_options: Content data of my popup.
   */
  changeAssessmentEndDate: function() {
    var endDate = this.model.getEndDate() ? this.model.getEndDate() : new Date();
    var options = {
      design: 1,
      title: "End Date",
      message_options: [{
        description: "Choose end date",
        value: endDate,
        datetype: "s"
      }]
    };

    $("body").append( (this.assesmentOptions = new gps.messageBoxHelper(options)).render());
  },

  render: function() {

    var data = _.extend(this.model.toJSON(), {
      disciplines: gps.controllers.disciplineController.getCompletedPercentage(this.model),
      practices: gps.controllers.practiceController.getCompletedPercentage(this.model),
      questions: gps.assessments.questions
    });

    data.mainHeader  = {title: 'Disciplines'};
    data.notesHeader = {title: 'Notes'};
    // Render this view's template with the model
    this.$el.html(this.hf.get('#improvement-plans-update')(data));

    // Render the sub header for this view
    this.cantComments = this.model.getAmountComments();
    this.renderTabNavigation();
    this.renderHeaderButtons();
    this.renderRightCommentsSideBar();

    // Set breadcrumbs
    var backlogName = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID ).get("name");

    var actionDoingName = "Editing",
      extraStatusWord = "";

    if (this.model.isFinished()) {
      var endedD = getSplittedDateInfo(new Date(this.model.get("ended_date")));
      actionDoingName = "Viewing";
      extraStatusWord = " Closed: " + endedD[1] + "/" +endedD[0] + "/" + endedD[2];
    }

    gps.views.header.setBreadcrumbs([
      {
        name: "Improvement Plans",
        url: "#backlogs"
      },
      {
        name: backlogName,
        url: "#backlogs/" + this.options.backlogID + "/list"
      },
      {
        name: actionDoingName + ": " + this.model.get("assessment_name") + extraStatusWord
      }
    ]);

    // Let's namespace the current assessment answers
    gps.backlogAssessments.currentAssessmentAnswers = this.model.get("answers");

    // Open the first discipline by default
    this.$(".improvement-plans-category-chooser .decorated-percentage-row:first").trigger("tap");
    return this;
  },

  renderHeaderButtons: function() {

    gps.views.header.showButtons(
      [gps.views.header.availableButtons.back_button,
       gps.views.header.availableButtons.backlog_assessment_reflection_button,
       gps.views.header.availableButtons.end_index_button,
       gps.views.header.availableButtons.modify_end_button
      ])
  },

  renderTabNavigation: function() {
    var commentsUrl = "#backlogs/" + this.options.backlogID +
        "/assessments/update/comments/" + this.model.id,

      dataTabNavigation = [{
        'DISCIPLINES': null
      }];
    comStr = 'COMMENTS(' + this.cantComments + ')';
    dataCom = {};
    dataCom[comStr] = commentsUrl;
    dataTabNavigation.push(dataCom);

    this.$('.improvement-plans-tab-selector').html(this.tabNavigationTemplate(dataTabNavigation));
  },

  renderRightCommentsSideBar: function() {
    var assessmentGps = gps.backlogAssessments.get(this.model.id),
      backlogGps = gps.controllers.backlogController.getGpsBacklog(this.backlogID),
      commentsInfoCol = gps.controllers.assessmentController.getAllComments(assessmentGps);

    var commentsSideBarInfo = [];
    commentsInfoCol.forEach(function (elem) {
      commentsSideBarInfo.push({
        header: "Q: " + elem.questionTitle,
        metadataStrong: elem.comment.author,
        metadata: " - " + moment(elem.comment.updated_date).format("MMMM Do YYYY"),
        content: elem.comment.contents
      });
    });

    this.$('.improvement-plans-notes-list').append(this.assessmentCommentsRightBar(commentsSideBarInfo));
  },

  commentSetAmount: function(isInc) {
    isInc ? this.cantComments++ : this.cantComments--;

    // Update the tab navigation's number of comments
    this.renderTabNavigation();
  },

  updateBacklog: function(newAssessment){
    var backlog = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID );
    backlog.updateBacklogLocally(newAssessment);
  },

  /* deprecated and I think is not working... */
  update: function() {
    var formData, backlog, assessments, hasErrors;

    // Get the data from the form
    formData = $('form.assessment-update').serializeObject();
    if (!_.isEmpty(formData)){// if we don't have nothing to update => we do not update! yey

      backlog = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID );
      assessments = backlog.get( 'assessments' );
      this.model.save(formData, {
        success: function( response ) {
          // We compose a list of all assessments but without the one we modified,
          // so that we can add the new modified version (this is how we update/override it)
          var newAssessments = _.reject( assessments, function( assessment ) {
            return assessment.objectId === response.id;
          });

          // Now we push locally the updated team we got from the server
          newAssessments.push( response.attributes );

          // Set these updated array of assessments locally (no server) to the current backlog
          backlog.set( 'assessments', newAssessments);

          // Return back
          window.history.back();
        },

        error: function( model, error ) {
          hasErrors = true;
          if( error.responseJSON && error.responseJSON.message ) {
            alert(error.responseJSON.message);
          }
          return;
        }
      });
    }
  },

  delete: function() {
    var backlog = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID ),
      collection = this.collection,
      model = this.model;

    backlog.removeChild('assessments', this.model.get('objectId'), {
      success: function( response ) {
        var assessmentID = model.get('objectId'),
          newAssessments;

        // Update the collection locally to exclude the removed assessment
        newAssessments = _.reject( collection.toJSON(), function( assessment ) {
          return assessment.objectId === assessmentID;
        });

        // Set these updated array of assessments locally (no server) to the current backlog
        backlog.set('assessments', newAssessments);

        // Return back
        window.history.back();
      }
    });
  },

  selectDiscipline: function( event ) {

    var $row = $(event.currentTarget),
      practicesHtml = this.hf.get("#improvement-plans-practices"),
      disciplineId = $row.data("id"),
      discipline = _.findWhere(gps.assessments.disciplines,{objectId:disciplineId}),
      practices = discipline.practices;

    this.$selectedRow && this.$selectedRow.removeClass('active');
    this.$selectedRow = $row;
    this.$selectedRow.addClass('active');

    this.$(".improvement-plans-subcategory-chooser").html(
      practicesHtml({
        practices: _.filter(gps.controllers.practiceController.getCompletedPercentage(this.model), function(practice) {
          if (_.findWhere(practices, {objectId: practice.objectId})) {
            practice.color = discipline.color;
            practice.practice = true;
            return practice;
          }
        })
      })
    );

    // Open it's questions view by default
    this.$(".improvement-plans-subcategory-chooser .decorated-percentage-row:first").trigger("tap");
  },

  questionSetScore: function(assessment) {

    //update practice percentage
    var active_practice = this.$(".improvement-plans-subcategory-chooser").find(".active"),
      practice = gps.controllers.practiceController.getPractice(active_practice.data("id")),
      percentage = gps.controllers.practiceController.calculateCompletedPercentage(assessment,practice);

    active_practice
      .children(".decorated-percentage-row-status-box")
      .children('i').css("background-image", "url(img/practices/" + percentage + ".png)");

    //update discipline percentage
    var active_discipline = this.$(".improvement-plans-category-chooser").find(".active");
    var discipline = gps.controllers.disciplineController.getDiscipline(active_discipline.data("id"));
    var percentage = gps.controllers.disciplineController.calculateCompletedPercentage(assessment,discipline);
    active_discipline.children(".decorated-percentage-row-status-box").children('span').text(percentage + "%");
  },

  startQuestionsView: function( event ) {

    var assessmentId = this.model.get("objectId"),
        backlogId = this.options.backlogID,
        $row = $(event.currentTarget),
        practiceId = $row.data("id"),
        currentPractice = _.findWhere(gps.assessments.practices,{objectId:practiceId}),
        disciplineColor = currentPractice.color,
        questions = currentPractice.questions,
        currentQuestions, questionCollection;

    /**
     * Render the questions
     */

    // We could render all questions and then populate them with the exisiting
    // answers that match the current questions

    //these are the questions for this practice and backlog.
    currentQuestions = _.filter(gps.assessments.questions, function(question) {
      return _.findWhere(questions, {objectId: question.objectId});
    });

    this.$selectedCategoryRow && this.$selectedCategoryRow.removeClass('active');
    this.$selectedCategoryRow = $row;
    this.$selectedCategoryRow.addClass('active');

    /***
     * Just for comatibility, in the future I need to check if I need this global variable:
     * gps.backlogAssessments.currentAssessmentAnswers
     */
    gps.backlogAssessments.currentAssessmentAnswers = this.model.get("answers");

    // Create a questions collection and render the question list view
    questionCollection = _.map(currentQuestions, function(question) {
      var answer = _.findWhere(gps.backlogAssessments.currentAssessmentAnswers, {
          question_id_st: question.objectId }) || {},
        model;

      model = new gps.models.Answer( answer );
      model.setQuestion( question );
      model.setAssessmentId( assessmentId );
      model.setBacklogId( backlogId );

      return model;
    });

    this.questionListView ? this.questionListView.remove() : ""; delete this.questionListView;
    this.questionListView = new gps.BacklogAssessmentQuestionListView({
      collection: new gps.collections.Answers(questionCollection),
      assessment: this.model,
      backlogId: backlogId,
      color: disciplineColor
    });
    this.questionListView.render();
  },

  showResults: function() {
    var assessmentId = this.model.get("objectId"),
      backlogId = this.options.backlogID;

    function callback(data) {
      this.assessmentResultsData = data;

      // Render the results view with our data
      $("#content").prepend( this.assessmentResults(data) );

      // Handle sub-header buttons
      $(".nav-head .nav-action-buttons").hide();
      $(".nav-head .for-show-results").show();

      this.createRadarChart(data);
      this.createLinearCharts(data);
    }
    $('.nav-selectors').hide();

    this.model.getResults(backlogId, assessmentId, callback.bind(this));
  },

  createRadarChart: function(results) {
    // Start radar chart
    // var practicesString = " Practices";
    var practicesString = "";

    var data = _(results.disciplines).pluck("total");

    var customData = [data[1], data[2], data[3], data[4], data[5], data[6], data[0]];

    var radarChartData = {
      labels : [
          "Collaborating" + practicesString,
          "Planning" + practicesString,
          "Defining" + practicesString,
          "Developing" + practicesString,
          "Tracking" + practicesString,
          "Testing" + practicesString,
          "Releasing" + practicesString
      ],

      datasets: [
        {
          fillColor : "rgba(26,158,213, 0.3)",
          strokeColor : "rgba(0,0,0,0.4)",
          scaleLineColor : "rgba(0,0,0,.3)",
          pointColor : "rgba(220,220,220,0.1)",
          pointStrokeColor : "#fff",
          data : customData
        }
      ]
    };

    var myRadar = new Chart($("#radar-chart")[0].getContext("2d"));

    myRadar.Radar(radarChartData, {
      scaleShowLabels : true,
      scaleSteps : 10,
      pointLabelFontSize : 11,
      pointDotStrokeWidth : 2,
      scaleFontSize : 11,
      scaleShowLabelBackdrop : false,
      datasetStrokeWidth : 2,
      scaleLineWidth : 0.5,

      /* this will add a fixed scale */
      scaleOverride: true,
      scaleStepWidth  : 10, //stepValue
      scaleStartValue : 0, //graphMin
      labels: ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100"]   /* end fixed scale.. */
    });
  },

  createLinearCharts: function(lanes) {

    this.$disciplinesTotals = $(".assessment-results ul.lanes");

    _(lanes.disciplines).each(_.bind(function(discipline) {
      var data = _.extend(discipline, {
        title: _.findWhere(gps.assessments.disciplines, {
          // discipline_id coherent!
          objectId: discipline.discipline_id
        })
      });

      this.$disciplinesTotals.append(this.assessmentDisciplineTotal(data));
    }, this));

    this.$disciplinesTotals.find(".lane").on("tap", this.showDisciplineDetails);
  },

  showDisciplineDetails: function(event) {
    var id = $(event.currentTarget).data("id");

    $(".assessment-displine-details").remove();

    $(".assessment-results").append(this.assessmentDisciplineDetailed({
      id: id
    }));

    var $lanes = $(".assessment-results .assessment-displine-details .lanes");

    // coherent discipline_id
    var disciplineData = _.findWhere(this.assessmentResultsData.disciplines, {discipline_id: id});

    var templateItem = this.assessmentDisciplineDetailedItem;

    disciplineData.practices = _.sortBy(disciplineData.practices, function(discipline){
      return discipline.practice_id.name
    });

    _(disciplineData.practices).each(function(practice) {
      var data = _.extend(practice, {
        color: disciplineData.title.color
      });
      $lanes.append(templateItem(data))
    });

    this.centerDiv("assessment-displine-details");

    $(".close-discipline-details").on("tap", function() {
      $(".assessment-displine-details").remove();
    });
  },

  centerDiv: function(className) {

    var $detailsBox = $('.' + className),
      baseHeight = $detailsBox.find(".discipline .lanes").height();

    $detailsBox.height( baseHeight + 100 );
    $detailsBox.find(".percent").height( baseHeight + 16 );
  },

  hideResults: function() {
    $("#content .assessment-results").remove();
    $(".nav-head .nav-action-buttons").show();
    $(".nav-head .for-show-results").hide();
    $('.nav-selectors').show();
  },

  notifyChange: function() {
    gps.formChanged = true;
  },

  showParticularPractice: function(disciplineId, practiceId, questionTitle){

    this.$("li[data-id='" + disciplineId + "']").trigger('tap');
    this.$("li[data-id='" + practiceId + "']").trigger('tap');
    this.$(".item:contains('" + questionTitle + "')").find("button[name='show-notes']").trigger('tap');
  },

  remove: function() {

    /*
     On remove I need to unregister all my events.
     */
    gps.eventManager.off("messageBoxSave",this.updateEndDate, this);
    gps.eventManager.off("questionSetScore",this.questionSetScore, this);
    gps.eventManager.off("commentSetAmount", this.commentSetAmount, this);
    this.collection .off("change", this.render, this);

    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction, this);
    Backbone.off('gps.views.header:onModifyEndButton', this.changeAssessmentEndDate, this);
    Backbone.off('gps.views.header:onEndIndexButton', this.endAssessment, this);
    Backbone.off('gps.views.header:onReflectionButton', this.showResults, this);

    this.questionListView ? this.questionListView.remove() : "";
    delete this.questionListView;
    delete this.assesmentOptions;
    destroy_view(this);
  },

  goToReflections: function(event){
    event.preventDefault();
    event.stopPropagation();

    gps.router.navigate("backlogs/"+this.backlogID+"/assessments/report/"+this.model.id, true);
  }
});
gps.clientOrgTeamsView = Backbone.View.extend({

    events: {
        'tap li.team ': 'goToBacklogList'
    },

    initialize: function() {

        this.pageTemplate = Handlebars.compile($("#clientOrgTeamsList").html());
        this.headerTemplate = Handlebars.compile($("#backlogs-client-org-team-sub-header").html());
    },

    goToBacklogList: function(event){
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();

        var $li = $(event.currentTarget);
        gps.router.navigate("#clients/"+$li.data("clientid")+"/organizations/"+$li.data("orgid")+"/teams/"+$li.data("teamid")+ "/backlogs",true);
    },

    render: function() {

        gps.views.header.removeClientComboBox();
        // Set breadcrumbs
        levels = [
            {
                name: "Improvement Plans"
            }
        ];

        gps.views.header.setBreadcrumbs( levels );

        // Render the sub header for this view
        gps.views.subHeader.changeTemplate( this.headerTemplate() );

        var parameters = {clients:[]};
        this.collection.each( function(item){
            parameters.clients.push(item.toJSON());
        });
        $(this.el).html(this.pageTemplate(parameters));

        var $listContainer = $("ul.section-list");

        // Hide no items message
        if ( this.collection.length ) {
            $listContainer.parent().find('.no-items').hide();
        }
        return this;
    }
});
// Show "Backlogs View"
// This will show the Backlogs
gps.BacklogsView = Backbone.View.extend({

  events: {
    'tap .backlog-list-item-info-container': 'goToBacklog'
  },

  initialize: function() {
    if (!gps.currentUser.isAuthorized()) {
      return;
    }

    this.hf = gps.handlebarsCompileFactory;
    // this.collection.bind("change", this.render, this);
    //this.pageTemplate = Handlebars.compile($("#backlogs").html());
    //this.backlogItemTemplate = Handlebars.compile($("#backlogs-backlog-item-template").html());
    this.organizationItemTemplate = this.hf.get("#backlogs-organization-item-template");
    //this.clientItemTemplate = Handlebars.compile($("#backlogs-client-item-template").html());
    this.headerTemplate =  this.hf.get("#backlogs-show-sub-header");
    //NEW UI
    this.pageTemplate =  this.hf.get("#new-backlogs");


    this.collection.comparator = function(model) {
      if (model.get('name')) {
        return model.get("name");
      } else {
        return;
      }
    };
  },

  goToBacklog: function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();

    gps.router.navigate("backlogs/" + $(event.currentTarget).data("id") + "/list", true);
  },

  remove: function() {

    destroy_view(this);
  },

  render: function() {
    var backlogItemTemplate = this.backlogItemTemplate,
        organizationItemTemplate = this.organizationItemTemplate,
        clientItemTemplate = this.clientItemTemplate,
        levels,
        viewObject,
        jsonClients;
        // Sort the collection

    this.collection.sort();
    var clients = [],
        actual;
    this.collection.each(function(item) {
      actual = item.toJSON();
      actual.title = actual.name; //title key for sub-header partial
      clients.push(actual);
    });

    //
    // NEW UI
    //
    viewObject = {
      jsonClients: clients,
      areThereClients: gps.clients.length !== 0
    };

    // Render the page template
    $(this.el).html(this.pageTemplate(viewObject));
    // Render the sub header for this view
    gps.views.subHeader.changeTemplate(this.headerTemplate());

    // Set breadcrumbs
    levels = [{
      name: "Improvement Plans"
    }];

    gps.views.header.setBreadcrumbs(levels);
    //Here we remove the old view in the header and add the new 'add improvement plan button'.
    gps.views.header.showButtons([
      gps.views.header.availableButtons.add_improvement_plan_button
    ]);

    return this;
  }
});
gps.BacklogReportView = Backbone.View.extend({

  className: 'reportScreen',
  events: {
    "tap .backlog-report-types li" : "onReportTap",
    "tap .colored-checkbox" : "onMaturityLevelTap",
    "tap .maturity-checkbox-button": "onMaturityMakersCheckbox",
    "tap .maturity-novice-color": "onColoredMaturityMarker",
    "tap .maturity-foundation-color": "onColoredMaturityMarker",
    "tap .maturity-mastery-color": "onColoredMaturityMarker",
  },

  // Constant
  COLORS: ['#ee162d','#00a65b','#ffe344','#00afe9','#615da3',
    '#f28034','#00356d','#cb6dc9','#8c623f','#a0d04d'],

  MATURITY_COLORS: ["#C7C7C7", "#E2E2E2", "#F9F9F9"],     // [Novice, Foundational, Mastery]
  MATURITY_BAR_COLORS: ["#443700", "#666666", "#939393"], // [Novice, Foundational, Mastery]

  // Amount of checkbox selected
  MAX_SELECTED: 3,
  SHOW_MATURITY_INITIAL: true,
  MATURITY_LEVELS: {novice:0, foundational:1, mastery:2},

  initialize: function(options) {

    this.rc = gps.controllers.reportController;
    this.hf = gps.handlebarsCompileFactory;
    this.reportTemplate = this.hf.get("#backlog-show-report-reports");
    this.graphTemplate  = this.hf.get("#backlog-show-report-graph");
    this.squareTemplate = this.hf.get("#colored-square");

    this.spiderChartConfig = {
      w: 500,
      h: 500,
      factor: 1,
      factorLegend: 0.85
    };

    this.currBacklogGps = options.backlog;

    // We don't get planned assessments
    this.currAssessments = _.filter(this.currBacklogGps.get("assessments").slice(), function(assessment) {
      return assessment.started_date;
    });

    for(var i = 0; i < this.currAssessments.length; i++){
      this.currAssessments[i] = _.clone(this.currAssessments[i]);
    }

    this.currAssessments = _.sortBy(this.currAssessments, function(assessment) {
      return assessment.assessment_name;
    });

    this.amountSelected = ( this.currAssessments.length >= this.MAX_SELECTED ) ? this.MAX_SELECTED : this.currAssessments.length;

    this.setColors();
    this.setDefaultProperties();
  },

  render: function() {

    // we render the assessments section only one time
    if (!this.template) {
      this.renderSidebarAssessments();
      this.setBreadcrumbs();
    }

    var reporTypes = this.rc.getAvAssessmentReportsInfo(this.selectedAssessments),
      currentReport = _.findWhere(reporTypes, {
        name: this.selectedReport
      });

    var data = {
      exactPercent: currentReport ? currentReport.exactPercent : 0,
      amountReports: reporTypes.length,
      initialOnMarker: this.memMaturitySelection
    };

    data.overall = (this.selectedReport == 'Overall');

    // render checkbox button


    // render reports and graphic
    this.$('.backlog-report-types').html(this.reportTemplate({
      reportTypes: reporTypes
    }));
    this.$('.graph-section').html(this.graphTemplate(data));

    //render colored maturity marker checkboxes.
    this.renderMaturityCheckboxes(this.MATURITY_COLORS);

    // render the three square colors
    if (this.selectedReport == "Overall") {
      this.renderSvgSquare();
    }

    this.$selReportElem = $("li[data-name= " + this.selectedReport + "]");
    this.$selReportElem.addClass("selected");

    // create/render the maturity general checkbox
    this.maturityMarkersCheckbox = new gps.CheckBox({isChecked: false});
    this.maturityMarkersCheckbox.render();
    this.$('.maturity-checkbox-button').html(this.maturityMarkersCheckbox.el);


    this.selectedReport !== "Overall" ? this.onBarChartClick() : this.onSpiderChartClick();

    //remove the header components
    gps.views.header.removePreviousComponents();

    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);
  },

  renderSubHeader: function() {

    gps.views.subHeader.changeTemplate( this.headerTemplate() );
  },

  renderSidebarAssessments: function() {

    this.template = this.hf.get("#backlog-show-report");
    this.$el.html(this.template({
      assessments: this.currAssessments
    }));

    this.$el.find(".backlog-assessments li").each(function(i, e) {

      var $el = $(e),
        checkboxView = new gps.coloredCheckbox({

          color: $el.data("color"),
          itemId: $el.data("id"),
          onTap: this.onAssessmentTap.bind(this),
          selected: _.contains(this.selectedAssessmentIds, $el.data("id")),
          validate: this.validate.bind(this)
        });

      $el.prepend(
        checkboxView.render().el
      );

      if (i == this.MAX_SELECTED - 1) {
        this.lastCheckSelected = checkboxView;
      }

    }.bind(this));

  },

  renderSvgSquare: function() {
    this.$('#novice').prepend(this.squareTemplate({
      idGradient: "noviceGradient",
      initialColor: this.MATURITY_COLORS[this.MATURITY_LEVELS.novice],
      finalColor: gps.util.getDarkColor(this.MATURITY_COLORS[this.MATURITY_LEVELS.novice], 70)
    }));
    this.$('#foundational').prepend(this.squareTemplate({
      idGradient: "foundationalGradient",
      initialColor: this.MATURITY_COLORS[this.MATURITY_LEVELS.foundational],
      finalColor: gps.util.getDarkColor(this.MATURITY_COLORS[this.MATURITY_LEVELS.foundational], 70)
    }));
    this.$('#mastery').prepend(this.squareTemplate({
      idGradient: "masteryGradient",
      initialColor: this.MATURITY_COLORS[this.MATURITY_LEVELS.mastery],
      finalColor: gps.util.getDarkColor(this.MATURITY_COLORS[this.MATURITY_LEVELS.mastery], 70)
    }));
  },

  renderBarChart:function( data ) {


    $(".backlog-current-graph").empty(); //first we need to remove previous things.

    if (data.length) {
      options = {
        enableMarker: data.show
      };
      gps.charts.barChart.draw(".backlog-current-graph", data, options);
    }
  },

  renderSpiderChart:function( datos ) {

    //first we need to remove previous things.
    $(".backlog-current-graph").empty();
    $(".backlog-current-graph").css('margin-top', '50px');

    this.spiderChartConfig.enableMarker = this.maturityMarkersCheckbox.isChecked();

    if (datos.data.length) {
      gps.charts.spiderChart.draw(".backlog-current-graph", datos.data, datos.marker, this.spiderChartConfig);
    }
  },

  setDefaultProperties : function() {

    this.selectedReport = "Overall";
    this.memMaturitySelection = this.SHOW_MATURITY_INITIAL;

    /**
     * Here I'm going to force to be selected the first, second and third assessment.
     * @type {boolean[]}
     */
    this.forceToBeSelected = [true, true, true];
    for (var i in this.currAssessments) {
      if (this.forceToBeSelected[i])
        this.currAssessments[i].selected = true;
    }

    this.updateSelectedAssessments();
    gps.eventManager.on("onSpiderChartClick", this.onSpiderChartClick, this);
    gps.eventManager.on("onBarChartClick", this.onBarChartClick, this);
  },

  setBreadcrumbs: function() {

    var backlogName = this.currBacklogGps.get("name");
    gps.views.header.setBreadcrumbs([{
      name: "Improvement Plans",
      url: "#backlogs"
    }, {
      name: backlogName,
      url: "#backlogs/" + this.currBacklogGps.id + "/list"
    }, {
      name: "Reflection"
    }]);
  },

  /**
   * It renders the colored maturity markers checkboxes.
   * @param {array} colors - an array representing the maturity markers colors.
   * @return {void}
   */
  renderMaturityCheckboxes: function(colors) {
    var checkboxView,
        checkboxes = [];
    _.each(colors, function(color) {
      checkboxView = new gps.coloredCheckbox({
        color: color,
      });
      checkboxes.push(checkboxView);
    }.bind(this));

    this.currentCheckboxes = checkboxes;

    this.$('.maturity-novice-color').html(checkboxes[this.MATURITY_LEVELS.novice].render().el);
    this.$('.maturity-foundation-color').html(checkboxes[this.MATURITY_LEVELS.foundational].render().el);
    this.$('.maturity-mastery-color').html(checkboxes[this.MATURITY_LEVELS.mastery].render().el);
  },

  setColors: function() {

    function updateColors(arrayColors, amount) {
      for(var i = 0; i < amount; i++){
        arrayColors[i] = gps.util.desaturateColor(arrayColors[i]);
      }
    }

    var arrayColors = this.COLORS ? this.COLORS.slice() : [],
      amount, index = 0;

    for (var assess in this.currAssessments) {

      if (index == 10) {
        index = 0;

        amount = (this.currAssessments.length - assess) < 10 ? this.currAssessments.length - assess : 10;
        updateColors(arrayColors, amount);
      }
      this.currAssessments[assess].color = arrayColors[index++];
    }
  },

  onAssessmentTap : function(id) {
    //we need to know the previousAmount in order to render the graph again if it was 0.
    var assessment = _.findWhere(this.currAssessments, {
      objectId: id
    }),
        previousAmount = this.amountSelected;

    assessment.selected = assessment.selected ? false : true;
    assessment.selected ? this.amountSelected++ : this.amountSelected--;

    this.updateSelectedAssessments();
    if(this.amountSelected === 0 || previousAmount === 0){
      this.render();
    }
  },

  updateSelectedAssessments: function() {

    this.selectedAssessments = _.where(this.currAssessments, {
      selected: true
    });
    this.selectedAssessmentIds = _.map(this.selectedAssessments, function(assessm) {
      return assessm.objectId;
    });
  },

  getChartData: function() {
    return this.rc.
    getAssessmentReport(this.selectedReport,
      this.selectedAssessments,
      this.currBacklogGps.id);
  },

  getBarChartData: function() {

    var chartData = this.getChartData(),
      barChartData = [],
      arrayM = [],
      backlogController = gps.controllers.backlogController,
      maturityController = gps.controllers.maturityController;

    for (var pract in chartData) {
      var valuesArray = [];
      var assessmArray = chartData[pract];

      for (var j in assessmArray) {
        valuesArray.push({
          axis: assessmArray[j].objectId,
          value: assessmArray[j].total,
          color: assessmArray[j].color
        });
      }
      barChartData.push({
        name: pract,
        values: valuesArray
      });
    }

    // we sortBy name unless we get overall active
    if (!$('li[data-name="Overall"]').hasClass('selected')) {
      barChartData = _.sortBy(barChartData, function(elem) {
        return elem.name;
      });
    }

    var client = backlogController.getClient(this.currBacklogGps.toJSON());
    var markers = maturityController.getBarMaturity(client, this.selectedReport, this.MATURITY_BAR_COLORS);

    for (var level in markers) {
      if (markers[level].length == Object.keys(chartData).length) {
        arrayM.push(markers[level]);
      }
    }

    // We don't have maturity to show for this discipline
    if (!arrayM.length) {
      this.$('.backlog-current-graph').css("margin-top", "50px");
      barChartData.show = false;
    } else {
      barChartData.show = true;
      // we have to replicate the level of each practice to all the assessments selected
      _.each(arrayM, function(level, index) {
        maturityController.loadMaturityForAllSelectedAssessments(barChartData, index, level, this.amountSelected);
      }.bind(this));
    }

    return barChartData;
  },

  getSpiderChartData: function() {

    var arrayD = [],
      arrayM = [],
      chartData = this.getChartData();

      console.log(this.selectedAssessments);
      console.log(chartData);

    for (var i in chartData) {
      console.log(i);
      for (var j in chartData[i]) {
        console.log(j);
        arrayD[j] = arrayD[j] ? arrayD[j] : [];
        arrayD[j].push({
          "axis": i,
          "value": chartData[i][j].total / 100,
          "color": chartData[i][j].color
        });
      }
    }

    // we sortBy name unless we get overall active
    if (!$('li[data-name="Overall"]').hasClass('selected')) {
      _.each(arrayD, function(i, index) {
        arrayD[index] = _.sortBy(i, function(elem) {
          return elem.axis;
        });
      });
    }

    var client = gps.controllers.backlogController.getClient(this.currBacklogGps.toJSON());
    var markers = gps.controllers.maturityController.getSpiderMaturity(client, this.MATURITY_COLORS);

    for (var level in markers) {
      if (markers[level].length == Object.keys(chartData).length) {
        arrayM.push(markers[level]);
      }
    }

    if (!arrayM.length) {
      this.$('.maturity-section').hide();
      this.$('.backlog-current-graph').css("margin-top", "50px");
    }

    return {
      data: arrayD,
      marker: arrayM
    };
  },

  onReportTap: function(ev) {

    if ($(ev.currentTarget) != this.$selReportElem) {

      this.$selReportElem.removeClass("selected");
      this.$selReportElem = $(ev.currentTarget);

      this.selectedReport = this.$selReportElem.data("name");
      this.render();
    }
  },

  onSpiderChartClick: function() {
    this.$('.maturity-title');
    this.$('.maturity-checkbox-button').show();
    this.$('.maturity-levels-info').switchClass('bar-chart', 'spider-chart', 0);

    this.renderSpiderChart( this.getSpiderChartData() );
  },

  onBarChartClick: function() {
    this.$('.maturity-title').hide();
    this.$('.maturity-checkbox-button').hide();
    this.$('.maturity-levels-info').switchClass('spider-chart', 'bar-chart', 0);
    this.$('.maturity-novice-color').addClass('bars');
    this.$('.maturity-foundation-color').addClass('bars');
    this.$('.maturity-mastery-color').addClass('bars');


    this.renderBarChart( this.getBarChartData() );
    this.renderMaturityCheckboxes(this.MATURITY_BAR_COLORS);
    this.changeMaturityMarkersState(true);
    this.$('.maturity-levels-info').css('display', 'inline-block');
  },

  onMaturityLevelTap: function(ev) {
    var selected = $(ev.currentTarget);

    if (!selected.hasClass("active")) {
      var hasToRenderBar = (this.selectedReport != "Overall");
      hasToRenderBar ? this.renderBarChart( this.getBarChartData() ) : this.renderSpiderChart( this.getSpiderChartData() );
    }
  },

  /**
   * Function to show or hide maturity markers container and check or uncheck all the colored checkboxes,
   * this is triggered when the general maturity checkbox is toggle.
   * @return {void}  - .
   */
  onMaturityMakersCheckbox: function() {
    if (this.maturityMarkersCheckbox.isChecked()) {
      this.changeMaturityMarkersState(true);
      this.$('.maturity-levels-info').fadeIn(500).css('display', 'inline-block');
    } else {
      this.$('.maturity-levels-info').fadeOut(500, function() {
        this.changeMaturityMarkersState(false);
      }.bind(this));
    }
    this.renderSpiderChart( this.getSpiderChartData() );
  },

  /**
   * A helper function to easily manipulate colored maturity checkboxes states.
   * @param {boolean} activated - boolean to activate o deactivate the checkboxes.
   * @return {void}
   */
  changeMaturityMarkersState: function(activated){
    _.each(this.currentCheckboxes, function(checkbox) {
      checkbox.selected = !activated; //if this evaluate to false it means maturity markers will be on
      checkbox.tick(); // because tick change the actual state of the checkbox (if it was false it put it true)
    });
  },

  /**
   * Function to put maturity markers on or off individually, this is triggered everytime
   * a colored maturity markers checkbox is clicked/tapped.
   * @return {void}
   */
  onColoredMaturityMarker: function() {
    var hasToRenderBar = (this.selectedReport != "Overall"),
      data = hasToRenderBar ? this.getBarChartData() : this.getSpiderChartData();

    if (!hasToRenderBar) {
      data.marker = this.filterMarkersForSpider(data.marker);
    } else {
      data = this.filterMarkersForBars(data);
    }

    hasToRenderBar ? this.renderBarChart(data) : this.renderSpiderChart(data);
  },

  /**
   * Filters spider's chart maturity markers data depending on the state of
   * colored checkboxes.
   * @param {object} data - The data object that will be passed to the chart.
   * @return {object} - The data object with maturity markers data filtered.
   */
  filterMarkersForSpider: function(data) {
    var dataFiltered = [];
    for (var i = 0; i < this.currentCheckboxes.length; i++) {
      if (this.currentCheckboxes[i].isChecked()) {
        dataFiltered.push(data[i]);
      }
    }
    console.log(dataFiltered)
    return dataFiltered;
  },

  /**
   * Filters bars's chart maturity markers data depending on the state of
   * colored checkboxes.
   * @param {object} data - The data object that will be passed to the chart.
   * @return {object} - The data object with maturity markers data filtered.
   */
  filterMarkersForBars: function(data) {
    var maturityNames = _.keys(this.MATURITY_LEVELS);
    for (var i = 0; i < data.length; i++) {
      for (var j in data[i]) {
        if (_.contains(maturityNames, j)) {
          if (!this.currentCheckboxes[this.MATURITY_LEVELS[j]].isChecked()) {
            data[i] = _.omit(data[i], j);
          }
        }
      }
    }
    return data;
  },

  validate: function( anotherSelected, checkboxView) {

    if( anotherSelected ) {
      if(this.amountSelected == this.MAX_SELECTED) this.lastCheckSelected.tick();
      this.lastCheckSelected = checkboxView;
    }
  },

  reload: function(callback) {
    var backlog = gps.controllers.backlogController.getBacklog(this.currBacklogGps.id).backlog;

    this.currBacklogGps.fetch({
      success: function(model) {

        var assessments = model.getAssessments();
        assessmentCol = new gps.collections.Assessments(assessments);
        assessmentCol.setFetched();
        backlog.assessments = assessments;

        callback && callback();
      },
      error: function(model, error) {

        gps.util.showError(model, error);
      }
    });
  },

  remove:function() {

    gps.eventManager.off("onSpiderChartClick", this.onSpiderChartClick, this);
    gps.eventManager.off("onBarChartClick", this.onBarChartClick, this);
    destroy_view(this);
  }
});
gps.AddBacklogStoryView = Backbone.View.extend({

  initialize: function(options) {
    this.options = options || {};

    this.template = gps.handlebarsCompileFactory.get('#story-add');
  },

  render: function() {
    var levels;

    // Render this view's template
    this.$el.html(this.template());

    // Save references
    this.$comboContainer = this.$('.story-add-combo-status');

    // Render status combobox
    this.renderStatusCombo();

    // Render header
    this.renderHeader();

    // Set breadcrumbs
    backlogName = gps.controllers.backlogController.getGpsBacklog(this.options.backlogID).get('name');

    levels = [{
      name: 'Improvement Plans',
      url: '#backlogs'
    }, {
      name: backlogName,
      url: '#backlogs/' + this.options.backlogID + '/list'
    }, {
      name: 'Add Objective'
    }];

    gps.views.header.setBreadcrumbs(levels);

    return this;
  },

  renderHeader: function() {
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button,
      gps.views.header.availableButtons.save_stories_button
    ]);

    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
  },

  renderStatusCombo: function() {
    var info = [];

    // Iterate every status to populate
    gps.statuses.each(function(gpsStatus) {
      var currentItem = {};
      currentItem[gpsStatus.get('id')] = gpsStatus.get('name');

      info.push(currentItem);
    });

    this.comboView = new gps.ComboBox({
      data: info,
      serialize: 'status'
    });

    this.$comboContainer.html(this.comboView.render().el);
  },

  save: function(event) {

    if (event) {
      event.preventDefault();
    }

    var formData, backlog, story, hasErrors;

    // Get the data from the form
    formData = $('form.story-add-section').serializeObject();

    /**
     * We need to create the story and add it
     * to the current backlog id
     */

    // Create a new story
    story = new gps.models.Story();

    story.on('invalid', function(model, error) {
      hasErrors = true;
      alert(error);
      return;
    });

    story.set(formData, {
      validate: true
    });

    // Select the current backlog
    backlog = gps.controllers.backlogController.getGpsBacklog(this.options.backlogID);

    // Cancel if we have any errors when setting the model
    if (hasErrors) {
      return;
    }

    backlog.save('stories', [story], {
      success: function(response) {

        var stories = response.get('stories'),
          newStory = _.last(stories);

        var model = new gps.models.Story(newStory);

        // Use the backbone story model to add it on the team collection
        gps.backlogStories.add(model);

        newStory.tasks = [];
        newStory.comments = [];

        gps.controllers.storyController.addStoryLocally(newStory, backlog.id);
        // Go back
        window.history.back();
      },
      error: function(model, error) {
        if (error.responseJSON && error.responseJSON.message) {
          alert(error.responseJSON.message);
        }
        window.history.back();
      },
      remote_ignore: ['assessments', 'stories']
    });

    return this;

  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
    this.comboView.remove();

    destroy_view(this);
  }
});
gps.BacklogStoryCommentListView = Backbone.View.extend({

  events: {
    'tap .story-show-comments-add-button'               : 'addComment',
    'keyup textarea.story-show-comments-add-action-text': 'writingChange',

    'tap .comment-item-sub-header-action-edit'           : 'editComment',
    'keyup textarea.story-show-comments-edit-action-text': 'writingChange',
    'tap .story-show-comments-cancel-button'             : 'cancelEditComment',
    'tap .story-show-comments-edit-button'               : 'updateComment',

    'tap .comment-item-sub-header-action-remove': 'removeComment'
  },

  initialize: function(options) {
    // Compile the template
    this.template = gps.handlebarsCompileFactory.get('#story-comments-template');


    // create tab template
    if (isDevice) {
      this.tabNavigationTemplate = gps.handlebarsCompileFactory.get('#tab-navigation');
    }

    this.templateComment = gps.handlebarsCompileFactory.get('#comment-item-template');
    this.addSectionTemplate = gps.handlebarsCompileFactory.get('#story-comments-add-section-template');
    this.editSectionTemplate = gps.handlebarsCompileFactory.get('#story-comments-edit-section-template');

    // Saving references
    this.storyGps = options.storyGps;
    this.backlogId = options.backlogId;
    this.loggedUser = gps.controllers.loginController.getLoggedUser();
  },

  render: function() {
    // Set breadcrumbs
    var backlogName = gps.controllers.backlogController.getGpsBacklog(this.backlogId).get("name"),
        dataRender = [],
        comments;

    gps.views.header.setBreadcrumbs([
      {
        name: "Improvement Plans",
        url : "#backlogs"
      },
      {
        name: backlogName,
        url : "#backlogs/" + this.backlogId + "/list"
      },
      {
        name: "Edit Objective"
      }
    ]);

    comments = this.storyGps.getComments();

    comments = _.sortBy(comments, function(comment) {
      return comment.created_date;
    });

    // Only Admin and the Owner of the comment can edit it
    // we iterate all comments setting the editable property
    _.each(comments, function(comment) {
      authorized = gps.controllers.securityController.isAuthorized(this.loggedUser, comment, "comment")
      data = _.clone(comment);
      data.editable = authorized;
      dataRender.push(data);
    }, this);

    // Render the comments template
    this.$el.html(this.template({
      isDevice  : isDevice,
      comments  : dataRender,
      addComment: true
    }));

    // Saving some references
    this.$noComments = this.$('.story-show-no-comments');
    this.$commentsSection = this.$('.story-comments-section');
    this.$addEditSection = this.$('.story-show-comments-addEdit-section');
    this.$tabSection = this.$('.story-show-comments-tab-navigation-container');

    // Render rest of the view
    this.renderHeader();
    this.renderTabNavigation();
    this.renderAddEditSection();
    this.renderLine();

    if (!this.storyGps.getComments().length) {
      this.$noComments.show();
    }

    return this;
  },

  renderHeader: function() {
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);

    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
  },

  renderTabNavigation: function() {

    if (isDevice) {
      var dataTabNavigation = [
          {
            "DETAILS VIEW": '#backlogs/' + this.backlogId + '/stories/update/list/' + this.storyGps.id
          }
        ],
        strComments = "COMMENTS (" + this.storyGps.getComments().length + ")",
        comments = {};

      comments[strComments] = null;
      dataTabNavigation.push(comments);
      this.$tabSection.html(this.tabNavigationTemplate(dataTabNavigation));
    }
  },

  renderAddEditSection: function(comment) {
    // if comment by param => edit comment
    if (comment) {
      // render edit section
      this.$addEditSection.html(
        this.editSectionTemplate(comment)
      );

      // save reference
      this.$primaryTextArea = this.$('.story-show-comments-edit-action-text');
      this.$checkbox = this.$('.story-show-comment-edit-action-impediment-checkbox');
      this.$addEditButton = this.$('.story-show-comments-edit-button');

      var textLength = this.$primaryTextArea.val().length,
        textArea = this.$primaryTextArea[0];

      // show the keyboard, and move the caret to the end
      setTimeout(
        function() {
          textArea.setSelectionRange(textLength, textLength);
        },
        500);

    } else {
      // render add section
      this.$addEditSection.html(
        this.addSectionTemplate()
      );

      // save reference
      this.$primaryTextArea = this.$('.story-show-comments-add-action-text');
      this.$checkbox = this.$('.story-show-comment-add-action-impediment-checkbox');
      this.$addEditButton = this.$('.story-show-comments-add-button');
    }
  },

  /**
   * Method that render the gray line that "links"
   * more than two avatars. It sums the height of every comments (including the margin),
   * and applies to the line.
   * In case there are less than two comments, it's hidden.
   * This method is called every time the user adds or removes a comment.
   */
  renderLine: function() {
    // Display the line between avatars
    // if we have more than one avatar to "link"
    var totalHeight = 0,
        numbOfComments = this.storyGps.getComments().length;

    if (numbOfComments > 1) {
      // Sum the height (including margin) of every comments
      this.$commentsSection.find('li').each(function(index) {
        // ignore the last comment's height
        if (index < numbOfComments - 1) {
          totalHeight += $(this).outerHeight(true) + 2;
        }
      });

      // Show the line with the calculated height
      this.$('.story-show-comments-line')
        .css({
          height: totalHeight.toString() + "px"
        })
        .show();
    } else {
      this.$('.story-show-comments-line').hide();
    }
  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    destroy_view(this);
  },

  /************************* Events Functions ******************************/

  addComment: function() {
    var $commentArea = this.$primaryTextArea,
        commentText = $commentArea.val($commentArea.val().replace(/\s+$/g, "")).val();

    this.$addEditButton.prop('disabled', true);

    // we ignore comments with length == 0
    if (!commentText) {
      return;
    }

    var loggedUser = gps.controllers.loginController.getLoggedUser(),
        impediment = this.$checkbox.prop('checked');

    var attr = {
      contents  : commentText,
      impediment: impediment,
      username  : loggedUser.username
    };

    // empty the text area, go away the pop-up keyboard and unchecked
    $commentArea.val('');
    $commentArea.blur();
    this.$checkbox.prop('checked', false);

    // Add the comment to the database
    gps.controllers.commentController.addComment(attr, this.storyGps, this.backlogId,
      this.addCommentCallback.bind(this));
  },

  addCommentCallback: function(comment, error) {
    var commentItem, authorized, data;

    if (error) {
      alert(error);
      return;
    }

    // go away empty message
    this.$noComments.hide();

    // Render the comment template
    authorized = gps.controllers.securityController.isAuthorized(this.loggedUser, comment, "comment");
    data = _.clone(comment);
    data.editable = authorized;
    commentItem = this.templateComment(data);

    // adding the new commentItem
    $(commentItem).appendTo(this.$commentsSection).hide().slideDown();

    // move the scroll at the bottom of commentsDisplay
    this.$commentsSection.animate({scrollTop: this.$commentsSection[0].scrollHeight }, 1500);

    this.renderTabNavigation();
    this.renderLine();
  },

  editComment: function(event) {
    var commentId = $(event.target).closest('.comment-item-primary-container').data('id'),
        comment = this.storyGps.getComment(commentId);

    this.renderAddEditSection(comment);
    this.enableImpediments(this.$primaryTextArea.val(), this.$checkbox);
  },

  updateComment: function(event) {

    var commentText = this.$primaryTextArea.val(this.$primaryTextArea.val().replace(/\s+$/g, "")).val(),
        commentId, attr;

    this.$addEditButton.prop('disabled', true);

    // we ignore comments with length == 0
    if (!commentText) {
      return;
    }

    commentId = $(event.target).closest('.story-show-comments-edit-action-section').data('id');
    this.saveCommentCallback.$li = this.$(' li[data-id="' + commentId + '"]');

    attr = {
      objectId  : commentId,
      impediment: this.$checkbox.prop('checked'),
      contents  : commentText
    };

    // Save the editComment at the database
    gps.controllers.commentController.editComment(this.storyGps, attr, this.backlogId, this.saveCommentCallback.bind(this));
  },

  saveCommentCallback: function(comment, error) {
    if (error) {
      alert("There was a server error: " + error);
      return;
    }

    var authorized = gps.controllers.securityController.isAuthorized(this.loggedUser, comment, "comment"),
        data = _.clone(comment),
        commentItem, $currentLi;

    data.editable = authorized;
    commentItem = this.templateComment(data);
    $currentLi = this.saveCommentCallback.$li;

    $currentLi.replaceWith(commentItem);

    //gps.util.showEntireItem(this.$(' li[data-id="' + comment.objectId + '"]'), $('.story-show-comments-section'), true, 1000);

    // finish edit comment => render add section
    this.renderAddEditSection();
  },

  removeComment: function(event) {
    this.onconfirm.eventTarget = event.target;

    var confirmed = showConfirmMessage('Are you sure you want to remove this comment?',
      this.onconfirm.bind(this), "Yes,No", "WARNING");
  },

  onconfirm: function(button) {
    if (button == "1") {

      var $li = $(this.onconfirm.eventTarget).closest('li'),
        comment_id = $li.data('id');

      // Remove comment from the database
      gps.controllers.commentController.removeComment(comment_id, this.storyGps, this.backlogId, this.confirmRemoveCallback.bind(this));
    }
  },

  confirmRemoveCallback: function(commentId, error) {

    if (error) {
      alert("There was a server error: " + error);
      return;
    }

    var $li = this.$(' li[data-id="' + commentId + '"]');

    $li.slideUp(400, _.bind(function() {
      $li.remove();

      // if there's no comments => show the empty message
      if (!this.storyGps.getComments().length) {
        this.$noComments.show();
      }

      this.renderTabNavigation();
      this.renderLine();
    }, this));
  },

  cancelEditComment: function(event) {

    this.renderAddEditSection();
  },

  writingChange: function() {
    var text = this.$primaryTextArea.val();

    if (text.length === 0) {
      this.$addEditButton.prop('disabled', true);
    } else {
      this.$addEditButton.prop('disabled', false);
      this.enableImpediments(text, this.$checkbox);
    }
  },


  /************************* Helper Functions ******************************/

  enableImpediments: function(text, $checkbox) {
    if (text && text.length > 25) {

      $checkbox.attr('disabled', false);
    } else {

      $checkbox.prop('checked', false);
      $checkbox.attr('disabled', true);
    }
  }

});
gps.UpdateBacklogStoryKanbanView = Backbone.View.extend({

    events: { },

    initialize: function(options) {
        this.options = options || {};

        this.template = Handlebars.compile( $("#backlog-story-update-kanban").html() );
        this.taskItem = Handlebars.compile( $("#backlog-story-task-item-kanban").html() );
        this.headerTemplate = Handlebars.compile( $("#backlog-story-update-kanban-sub-header").html() );
    },

    remove: function(){

        destroy_view(this);
    },

    render: function() {
        var $navHeader, $columnsContainer, backlogName, detailsURL, commentsURL, data;

        data = {
            emptyCollection:  !this.collection.toJSON().length
        };

        // Render this view's template with the model
        $(this.el).html( this.template( data ) );

        // Render the sub header for this view
        this.renderSubHeader();

        // Assign the columns container to a variable
        $columnsContainer = this.$(".columns-container");

        // Set breadcrumbs
        backlogName = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID ).get("name");

        gps.views.header.setBreadcrumbs([
            {
                name: "Improvement Plans",
                url: "#backlogs"
            },
            {
                name: backlogName,
                url: "#backlogs/" + this.options.backlogID + "/list"
            },
            {
                name: "Edit Objective"
            }
        ]);

        // Render the tasks
        // TODO: Render the views according to it's position, so actually
        // just sort them. :-)
        this.collection.each(_.bind(function( item ){
            var task = item.toJSON(),
                $rowDestination;

            task.itemType = "task";
            task.statusName = gps.statuses.get( task.status ).get("name").toLowerCase();

            $rowDestination = $columnsContainer.find("#" + task.statusName + "-column");

            $rowDestination.append( this.taskItem( task ) );
        }, this));

        // After having appended the items, we will enable sortable/dragging on them
        this.sortable();

        // And we will fit the container for the current displayed items
        this.fitKanbanContainer();

        return this;
    },

    renderSubHeader: function(){
      // Render the sub header for this view
      var commentsURL = "#backlogs/" + this.options.backlogID + "/stories/update/comments/" + this.model.id,
      detailsURL = "#backlogs/" + this.options.backlogID + "/stories/update/list/" + this.model.id;

      gps.views.subHeader.changeTemplate(
          this.headerTemplate({
            commentsURL: commentsURL,
            detailsURL: detailsURL,
            totalComments: this.model.getComments().length
          })
      );
    },

    getPositions: function () {
        var positions = [];

        _.each(["backlog", "wip", "blocked", "done"], function( type ) {
            var $column = $("#" + type + "-column"),
                tasks = $.deparam(serializeList($column)).tasks,
                newTasks;

            if ( tasks ) {
                _.each(tasks, function( id, position ) {
                    positions.push({
                        id: id,
                        position: position,
                        column: type
                    });
                });
            }
        });

        return positions;
    },

    getChangedTasks: function() {
        return _.compact(_.map(gps.currentView.initialTaskPositions, function( oldItem ) {
            var positions = gps.currentView.getPositions(),
            brother = _.findWhere(positions, {id: oldItem.id});

            if (brother.position !== oldItem.position) {
                return brother;
            }

            if (brother.column !== oldItem.column) {
                return brother;
            }
        }));
    },

    sortable: function() {
        var $columns = this.$(".kanban-column"),
            fitKanbanContainer = this.fitKanbanContainer,
            updateItem = this.updateItem,
            getChangedTasks = this.getChangedTasks,
            getPositions = this.getPositions;

        $columns.sortable({
            connectWith: "ul",
            items: "li",
            update: function( event, ui ){
                var itemId = $(ui.item).data("item-id"),
                    columnId = $(event.target).data("column-id"),
                    position = ui.item.index();

                if ( this === ui.item.parent()[0] ) {
                    updateItem( itemId, columnId, position, getChangedTasks() );
                    fitKanbanContainer();
                }
            }
        });

        this.initialTaskPositions = getPositions();
    },

    updateItem: function( taskId, columnId, position, changedTasks ) {
        var backlog = gps.controllers.backlogController.getGpsBacklog( gps.currentView.options.backlogID ),
            stories = backlog.get("stories"),
            story = gps.currentView.model,
            columns = _.pluck(gps.statuses.toJSON(), "name"),
            statusName = columns[ columnId - 1 ],
            statuses, task, tasks, taskOnServer;

        statuses = gps.statuses.map(function(status) {
            return status.get("name").toLowerCase();
        });

        // Store tasks from this Story model
        tasks = story.get('tasks');

        // Get the task we want to update
        task = _.find(tasks, function(item) {
            return item.objectId === taskId;
        });

        // Set the new status on the task
        task.status = columnId.toString();

        // Let's update the tasks on the server
        _.each(changedTasks, function( item, index ) {
            var taskOnServer = new gps.models.Task({ objectId: item.id });

            taskOnServer.save({
                status: String( statuses.indexOf( item.column ) + 1 ),
                position: item.position
            }, {
                wait: true,
                success: function() {
                    if ( changedTasks.length === index + 1 ) {
                        // Let's refresh the current task positions collection
                        gps.currentView.initialTaskPositions = gps.currentView.getPositions();
                    }
                },
                error: function(model, error){
                  if(error.responseJSON && error.responseJSON.message) {
                    alert(error.responseJSON.message);
                  }
                  window.history.back();
                }
            });
        });

        // Let's update the tasks collection locally
        var newTasks = _.reject( tasks, function( item ) {
            return item.objectId === task.objectId;
        });

        newTasks.push( task );

        // Let's update the current task's story with an updated version of its tasks
        story.set("tasks", newTasks);

        // We compose a list of all stories but without the one we modified,
        // so that we can add the new modified version (this is how we update/override it)
        var newStories = _.reject( stories, function( item ) {
            return item.objectId === story.id;
        });

        // Now we push locally the updated story that we just updated by updating one of its
        // tasks
        newStories.push( story.toJSON() );

        // Set these updated array of storys locally (no server) to the current backlog
        backlog.set( 'stories', newStories);
    },

    fitKanbanContainer: function() {
        // MIN_HEIGHT will change on the iPad
        var MIN_HEIGHT = 725, heights, maxHeight;

        // Reset heights
        this.$(".kanban-column").removeAttr("style");

        heights = this.$(".kanban-column").map(function () {
            return $(this).height();
        });

        maxHeight = Math.max.apply( null, heights );

        if ( maxHeight > MIN_HEIGHT ) {
            this.$(".kanban-column").css("height", maxHeight);
        } else {
            this.$(".kanban-column").css("height", "100%");
        }
    }

});
gps.BacklogStoriesView = Backbone.View.extend({

  events: {
    'tap .add-stories-button': 'goToAddStories',
    'tap li': 'goToStory'
  },

  remove: function() {
    var $storiesContainer = $(this.el).find("ul");
    $storiesContainer.remove();
    this.collection.unbind("change", this.render, this);
    destroy_view(this);
  },

  goToStory: function(event) {

    event.stopImmediatePropagation();
    event.stopPropagation();
    event.preventDefault();

    var $element = $(event.currentTarget);
    gps.router.navigate("backlogs/" + $element.data("backlogid") + "/stories/update/list/" + $element.data("storyid"), true);
  },

  goToAddStories: function(event) {
    var $button = $(event.currentTarget);
    gps.router.navigate('backlogs/' + $button.data('backlogid') + '/stories/add', true);
  },

  initialize: function() {

    this.template = Handlebars.compile($("#backlog-story-item").html());
    this.collection.bind("change", this.render, this);
    this.render();
  },

  render: function() {
    var $storiesContainer = $(this.el).find("ul"),
        backlogID         = this.id,
        isOdd             = true;
        isFirst           = true;

    $storiesContainer.empty();

    //this was causing a memory leak.
    this.collection.comparator = function(model) {
      return model.get('story_name');
    };

    this.collection.sort();
    //this.collection.sortBy("story_name");

    // Add stories to the list
    this.collection.each(_.bind(function(story) {
      var newStory = story.toJSON(),
        status = gps.statuses.get(newStory.status);

      newStory.backlog_id = backlogID;
      newStory.isOdd = isOdd;
      newStory.isFirst = isFirst;
      isOdd = !isOdd;
      isFirst = false;

      if (status) {
        newStory.status_name = status.get('name');
      }
      
      newStory = this.fixCapitalization(newStory);
      $storiesContainer.append(this.template(newStory));
    }, this));

    return this;
  },

  fixCapitalization: function(story){
    story.story_name = this.fixSentenceCapitalization(story.story_name);
    story.status_name = this.fixSentenceCapitalization(story.status_name);

    return story;
  },

  fixSentenceCapitalization: function(sentence) {
    return sentence.split(' ').map(function(word) {
      if (word.toLowerCase() === "wip:") {
        return word;
      }
      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
    }).join(' ');
  }

});
gps.ActionView = Backbone.View.extend({
  tagName  : 'li',
  className: 'action-tasks-list-item',

  events: {
    'tap .action-task-list-item-edit-icon'  : 'edit',
    'tap .action-tasks-cancel-update-button': 'cancel',
    'tap .action-tasks-update-x-icon'       : 'cancel',
    'tap .action-tasks-update-button'       : 'update',
    'tap .action-tasks-remove-button'       : 'removeAction'
  },

  // References to css class' names
  strContainerCombo: '.action-tasks-update-status-combobox',
  strFormUpdate    : 'form.action-tasks-update-section',

  initialize: function(options) {
    this.options = options;

    this.template = gps.handlebarsCompileFactory.get('#action-item');
    this.updateTemplate = gps.handlebarsCompileFactory.get('#action-tasks-update');
  },

  render: function() {
    this.$el.html(this.template(this.model.toJSON()));

    return this;
  },

  renderStatusCombo: function() {
    // if rendered before,
    // remove the old one
    if (this.comboView) {
      this.comboView.remove();
    }

    var defaultId = this.model.get('status'),
      info = [],
      defaultStatus = {};

    // Iterate status and populate them
    gps.statuses.each(function(gpsStatus) {
      var currentItem = {};
      currentItem[gpsStatus.get('id')] = gpsStatus.get('name');

      info.push(currentItem);
    });

    defaultId = parseInt(defaultId, 10);

    // Select the element to show at the combobox's display
    defaultStatus[defaultId] = gps.statuses.getStatusById(defaultId);

    this.comboView = new gps.ComboBox({
      data     : info,
      serialize: "status"
    });

    this.$(this.strContainerCombo).html(this.comboView.render(defaultStatus).el);
  },

  remove: function() {
    if(this.comboView) {
      this.comboView.remove();
    }

    destroy_view(this);
  },

  edit: function() {
    // There is a static header above, so when the user tap
    // to edit the first action item (the top one), we should not show a new header
    var hasHeader = this.model.id !== this.collection.first().id;

    // Render the template to update the action
    this.$el.html(this.updateTemplate({
      action   : this.model.toJSON(),
      hasHeader: hasHeader
    }));

    this.renderStatusCombo();

    // Remove the default class, it's used
    // only when the general template is render
    this.$el.toggleClass(this.className);
  },

  cancel: function() {
    // it's neccesary when we render the general template
    this.$el.toggleClass(this.className);

    this.render();
  },

  update: function() {
    var attrUpdatedAction = this.$(this.strFormUpdate).serializeObject();

    gps.controllers.storyController.updateAction(attrUpdatedAction, this.model.id, this.collection, this.options.storyGps, this.options.backlogId, this.updateActionCallback.bind(this));
  },

  updateActionCallback: function(model, error) {
    if (error) {
      gps.util.showError(model, error);
      return;
    }

    this.render();
    this.$el.toggleClass(this.className);
  },

  removeAction: function() {
    gps.controllers.storyController.removeAction(this.model.id, this.collection, this.options.storyGps, this.options.backlogId, this.removeActionCallback.bind(this));
  },

  removeActionCallback: function(model, error) {
    if (error) {
      gps.util.showError(model, error);
      return;
    }

    this.remove();
  }
});
gps.ActionsListView = Backbone.View.extend({
  events: {
    'tap .action-tasks-add-button'   : 'add',
    'tap .action-tasks-create-button': 'create',
    'tap .action-tasks-cancel-button': 'cancel'
  },

  initialize: function(options) {
    this.options = options;

    // Sort the collection by created
    this.collection.comparator = 'created';
    this.collection.sort();
    this.currViews = [];

    this.addTemplate = gps.handlebarsCompileFactory.get("#action-tasks-add");
    this.listTemplate = gps.handlebarsCompileFactory.get('#action-tasks-list');
  },

  render: function() {
    this.$el.html(this.listTemplate());

    this.collection.each(function(gpsAction) {
      var actionView = new gps.ActionView({
        model     : gpsAction,
        collection: this.collection,
        storyGps  : this.options.storyGps,
        backlogId : this.options.backlogId
      });

      this.$('.action-tasks-list').append(actionView.render().$el);
      this.currViews.push(actionView);
    }.bind(this));

    return this;
  },

  renderStatusCombo: function() {
    // if rendered before,
    // remove the old one
    if (this.statusCombo) {
      this.statusCombo.remove();
    }

    var info = [];

    // Iterate every status to populate
    gps.statuses.each(function(gpsStatus) {
      var currentItem = {};
      currentItem[gpsStatus.get('id')] = gpsStatus.get('name');

      info.push(currentItem);
    });

    this.statusCombo = new gps.ComboBox({
      data     : info,
      serialize: 'status'
    });

    this.$('.action-tasks-add-status-combobox').html(this.statusCombo.render().el);
    this.currViews.push(this.statusCombo);
  },

  remove: function() {
    _.each(this.currViews, function(view) {
      view.remove();
    }, this);

    destroy_view(this);
  },

  add: function() {

    this.$('.action-tasks-add-container').html(this.addTemplate());
    this.renderStatusCombo();
  },

  create: function() {
    var actionAttrs = this.$('form.action-tasks-add-section-grabber').serializeObject();

    gps.controllers.storyController.addAction(actionAttrs, this.collection, this.options.storyGps, this.options.backlogId, this.createCallback.bind(this));
  },

  createCallback: function(model, error) {

    if (error) {
      gps.util.showError(model, error);
      return;
    }

    // remove "add windows"
    this.cancel();

    // render the list again with the new action item
    this.render();
  },

  cancel: function() {
    this.$('.action-tasks-add-container').children().remove();
  }
});
gps.UpdateBacklogStoryView = Backbone.View.extend({

  events: {
    //'change form input, form select, form textarea': 'notifyChange',
    'tap .story-update-action-update': 'update',
    'tap .story-update-action-cancel': 'cancel'
  },

  initialize: function(options) {
    this.options = options || {};

    this.template = gps.handlebarsCompileFactory.get("#story-update");
    this.addActionTemplate = gps.handlebarsCompileFactory.get("#action-tasks-add");
    this.actionListTemplate = gps.handlebarsCompileFactory.get("#action-tasks-list");
    this.updateActionTemplate = gps.handlebarsCompileFactory.get("#action-tasks-update");

    this.currentViews = [];

    this.model.on('invalid', function(model, error){
      alert(error);
      return;
    });
  },

  remove : function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    this.comboView.remove();
    if (this.commentsSectionView) {
      this.commentsSectionView.remove();
    }

    this.actionsSectionView.remove();

    destroy_view(this);
  },

  render: function() {
    var backlogName, title, commentsURL;

    // Render this view's template with the model
    $(this.el).html(this.template({
        isDevice: isDevice,
        story: this.model.toJSON()
    }));

    // Render tab
    this.renderTabNavigation();

    // Render status combo
    this.renderStatusCombo();

    // Set breadcrumbs
    backlogName = gps.controllers.backlogController.getGpsBacklog( this.options.backlogID ).get("name");

    gps.views.header.setBreadcrumbs([
      {
        name: "Improvement Plans",
        url: "#backlogs"
      },
      {
        name: backlogName,
        url: "#backlogs/" + this.options.backlogID + "/list"
      },
      {
        name: "Edit Objective"
      }
    ]);

    // Fire up the tasks sub view
    this.taskCollection = new gps.collections.Tasks(this.model.get('tasks'));

    this.renderCommentsSection();
    this.renderActionsSection();
    this.renderHeader();

    return this;
  },

  renderHeader: function() {
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);

    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
  },

  renderTabNavigation: function() {
    if (isDevice) {
      // Render the sub header for this view
      var commentsURL = "#backlogs/" + this.options.backlogID + "/stories/update/comments/" + this.model.id,
        commentsTitle = "COMMENTS (" + this.model.getComments().length + ")",
        dataTab = [
          {
            "DETAILS VIEW": null
          }
        ],
        commentsTabItem = {};

      commentsTabItem[commentsTitle] = commentsURL;
      dataTab.push(commentsTabItem);
      $('.story-update-tab-navigation-container').append(gps.handlebarsCompileFactory.get('#tab-navigation')(dataTab));
    }
  },

  renderCommentsSection: function() {
    if (!isDevice) {
      this.commentsSectionView = new gps.BacklogStoryCommentListView({
        storyGps: this.model,
        backlogId: this.options.backlogID
      });

      this.$('.story-update-comments-section').append(
        this.commentsSectionView.render().el
      );

      $('.story-update-entire')
        .addClass('story-update-section')
        .removeClass('story-update-entire');

      this.commentsSectionView.renderLine();
    }
  },

  renderActionsSection: function() {
    this.actionsSectionView = new gps.ActionsListView({
      collection: new gps.collections.Tasks(this.model.getActions()),
      storyGps: this.model,
      backlogId: this.options.backlogID
    });

    this.$('.action-tasks-container').html(this.actionsSectionView.render().$el);
  },

  update: function() {
    var item;

    // Get the data from the form
    item = $('form.story-update-section').serializeObject();
    this.model.save(item, {
      success: function() {
        // To prevent the gimmick done by the next instruction
        this.$el.hide();

        // Notify that the form is well validated
        gps.formChanged = false;
        gps.controllers.storyController.updateStoryLocally(item,this.model.id,this.options.backlogID);

        // Return back
        window.history.back();
      }.bind(this),

      error: function( model, error ) {
        if(error.responseJSON && error.responseJSON.message) {
          alert(error.responseJSON.message);
        }
        return;
      },
      remote_ignore: ['tasks', 'comments'],
      update: true
    });
  },

  cancel: function() {
    gps.views.header.onBackButtonDefaultAction();
  },

  renderStatusCombo: function() {
    var defaultId = this.model.get('status'),
        info = [],
        defaultStatus = {};

    // iterate status and populate them
    gps.statuses.each(function(gpsStatus, index) {
      var currentItem = {};
      currentItem[gpsStatus.get('id')] = gpsStatus.get('name');

      info.push(currentItem);
    });

    defaultId = parseInt(defaultId, 10);

    // select the element to show at the combobox's display
    defaultStatus[defaultId] = gps.statuses.getStatusById(defaultId);

    this.comboView = new gps.ComboBox({
      data: info,
      serialize: "status"
    });

    this.combosInfo = info;

    this.$('.story-update-combo-status').html(this.comboView.render(defaultStatus).el);
  },

  notifyChange: function() {
    gps.formChanged = true;
  }
});
gps.TrendReportListView = Backbone.View.extend({
  className: 'trend-report-list-container',

  initialize: function(options) {
    this.options = options || {};

    this.template = gps.handlebarsCompileFactory.get('#trend-report-list');
    // sort this.collection by date attribute, the newest at the top
  },

  render: function() {

    // Render header
    this.renderHeader();

    // Template
    this.populate();
    this.$el.html(this.template({
      backlogId: this.model.id,
      reports  : this.trendReports.toJSON()
    }));

    return this;
  },

  renderHeader: function() {

    // Render breadcumbs
    gps.views.header.setBreadcrumbs([
      {
        name: "Improvement Plans",
        url : "#backlogs"
      },
      {
        name: this.model.getName(),
        url : "#backlogs/" + this.model.id + "/list"
      },
      {
        name: "Trend Reports"
      }
    ]);

    // Render Buttons
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);

    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    destroy_view(this);
  },

  populate: function() {
    this.trendReports = this.options.collection;
  }
});
// View for updating and deleting Clients
gps.UpdateBacklogView = Backbone.View.extend({

  events: {
    'change select': 'removePrompt',
    'change form input, form select, form textarea': 'notifyChange'
  },

  initialize: function(options) {
    this.options = options || {};

    this.template = gps.handlebarsCompileFactory.get("#new-backlog-update");
    console.warn("[backlogs|edit]", "initilize");
  },

  remove: function() {

    this.model.off();
    destroy_view(this);
    console.warn("[backlogs|edit]", "remove");
  },

  render: function() {

    var levels;

    // Render this view's template with the current model
    $(this.el).html(this.template(this.model.toJSON()));

    // Set breadcrumbs
    levels = [{
      name: "Improvement Plans",
      url: "#backlogs"
    }, {
      name: this.model.get("name")
    }];
    gps.views.header.showButtons([gps.views.header.availableButtons.update_improvement_plan_button]);
    gps.views.header.setBreadcrumbs(levels);

    return this;
  },

  update: function() {

    var client = gps.clients.get(this.options.clientID),
      orgID = this.options.organizationID,
      teamID = this.options.teamID,
      formData = $("form.new-backlog-update").serializeObject();
    gps.controllers.backlogController.updateBacklog(formData, this.model.id, client, orgID, teamID, this.onupdated);
  },

  onupdated: function(model, message, options, error) {

    if (error) alert(message);
    else window.history.back();
  },

  delete: function() {
    var assessments = this.model.get('assessments') || false,
      stories = this.model.get('stories') || false,
      deleteAssessments, deleteStories, deleteBacklog,
      confirmed;

    /*
     * We need to delete the backlog but first
     * we need to make sure we have deleted all
     * its children resources which in this case
     * they are Assessments and Stories.
     */

    // We show a confirm dialog
    confirmed = confirm('All Assessments and Stories associated to ' +
      'this Backlog will be permanently deleted.\n' +
      'Do you still want to proceed?'
    );

    // If user didn't confirm we don't proceed
    if (!confirmed) {
      return;
    }

    // Define the delete for the backlog
    deleteBacklog = _.bind(function() {

      console.log('I will delete the backlog');

      this.model.destroy({
        success: _.bind(function() {

          /*
           * Send a change event to our collection so the
           * list of backlogs can get refreshed
           */

          this.collection.trigger("change");

          // go back to the clients page
          gps.router.navigate("#backlogs", {
            trigger: true,
            replace: false
          })
        }, this)
      });
    }, this);


    // Define the delete of the backlog assessments
    deleteAssessments = _.bind(function() {

      if (!assessments && !assessments.length) {
        deleteStories();
        return;
      }

      console.log('I will delete assessments', _.pluck(assessments, 'assessment_id'));

      this.model.removeRelationship('assessments', {
        success: function() {
          deleteStories();
        }
      });
    }, this);


    // Define the delete of all the backlog stories
    deleteStories = _.bind(function() {
      if (!stories && !stories.length) {
        deleteBacklog();
        return;
      }

      console.log('I will delete stories', _.pluck(stories, 'story_id'));

      this.model.removeRelationship('stories', {
        success: function() {
          deleteBacklog();
        }
      });
    }, this);


    // Kick off the deletion of Assessments and Stories and the Backlog
    deleteAssessments();
  },

  removePrompt: function(event) {
    var $select = this.$("select");

    if ($select.find(".prompt")) {
      $select.find(".prompt").remove();
    }
  },

  notifyChange: function() {
    gps.formChanged = true;
  }
});


/*
 * var hasClient = this.model.get("client");
 * var currentOrg = _.where(organizations,{organization_id:this.model.get("organization").organization_id});
 * var hasTeam = _.where(teams,{team_id:this.model.get("team")})[0];
 * */
;
// Show "Backlogs View"
// This will show the Backlogs
gps.BacklogsKanban = Backbone.View.extend({

    initialize: function() {

        if ( !gps.currentUser.isAuthorized() ) {
            return;
        }

        // this.collection.bind("change", this.render, this);
        this.pageTemplate = Handlebars.compile($("#backlog-kanban").html());
        // this.backlogItemTemplate = Handlebars.compile($("#backlog-item-template").html());
        // this.headerTemplate = Handlebars.compile($("#backlogs-show-sub-header").html());

        // this.collection.comparator = function( model ) {
        //   if ( model.get('name')) {
        //     return model.get("name");
        //   } else {
        //     return;
        //   }
        // };
    },

    remove: function(){

        destroy_view(this);
    },

    render: function() {

        // var $listContainer, $navHeader,
        //   groupedBacklogs, backlogItemTemplate, levels;

        // backlogItemTemplate = this.backlogItemTemplate;

        // // Sort the collection
        // this.collection.sort();

        // // Group the collection by ranges
        // groupedBacklogs = this.collection.groupBy(function( model ){

        //   var client = model.get("client"),
        //     firstChar;

        //   if ( !client ) {
        //     return;
        //   }

        //   return client.name;
        // });


        // Render the page template
        $(this.el).html( this.pageTemplate() );

        // // Render the sub header for this view
        // $navHeader = $(".nav-head");
        // $navHeader.empty();
        // $navHeader.html( this.headerTemplate() );

        // console.log("backlogs show view");

        // // Append our client list to the content area
        // $listContainer = $("ul.section-list");

        // _.each(groupedBacklogs, function(collection, range) {
        //   var $listHeader = $("<div>").addClass("list-header").text(range);

        //   // Add the current character range header
        //   $listContainer.append($listHeader);

        //   // Add the items from the current character range
        //   _.each(collection, function(item) {
        //     $listContainer.append(backlogItemTemplate( item.toJSON() ));
        //   });
        // });

        // // Set breadcrumbs
        // levels = [
        //   {
        //     name: "Improvement Plans"
        //   }
        // ];

        // gps.views.header.setBreadcrumbs( levels );

        return this;
    }
});
// Show 'Backlogs View'
// This will show the Backlogs   => could be stories or assessments.
gps.BacklogsList = Backbone.View.extend({

    initialize: function(options) {
        this.options = options || {};

        if ( !gps.currentUser.isAuthorized() ) {
            return;
        }

        this.pageTemplate = Handlebars.compile($('#backlog-list').html());
        console.log("[backlogs|view-options|list] initialize");
    },

    remove: function() {

        Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction, this);
        this.backlogsAssessmentsView ? this.backlogsAssessmentsView.remove():"";
        this.backlogsStoriesView ? this.backlogsStoriesView.remove():"";
        delete this.backlogsAssessmentsView;
        delete this.backlogsStoriesView;
        this.$('.backlog-assessments-show').remove();
        destroy_view(this);
        console.log("[backlogs|view-options|list] remove");
    },

    render: function() {

        var levels, hasItems;

        this.model.updateGlobalCopys(this.options.backlog);

        // Check if we either have stories or assessments
        if ( gps.backlogAssessments.toJSON().length ) {
            hasItems = true;
        }

        if ( gps.backlogStories.toJSON().length ) {
            hasItems = true;
        }
        
        // Render the page template
        $(this.el).html( this.pageTemplate( {backlog_id: this.model.id}  ) );

        
        // Check if exist at least one assessment with status not null
        var showReflections = _.some(this.model.toJSON().assessments, function(assessment) {
            return (assessment.status);
        });
        

        // Show the subview with the Stories for this backlog
        this.showBacklogAssessments();

        // Show the subview with the stories for this backlog
        this.showBacklogStories();

        // Set breadcrumbs
        levels = [
            {
                name: 'Improvement Plans',
                url: '#backlogs'
            },
            {
                name: this.model.get('name')
            }
        ];
        gps.views.header.showButtons([
            gps.views.header.availableButtons.back_button,
            gps.views.header.availableButtons.backlog_reflection_button,
            gps.views.header.availableButtons.edit_improvement_plan_button
        ]);
        Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

        gps.views.header.setBreadcrumbs(levels);

        return this;
    },

    showBacklogAssessments: function() {

        this.backlogsAssessmentsView ? this.backlogsAssessmentsView.remove() : {};
        delete this.backlogsAssessmentsView;
        this.backlogsAssessmentsView = gps.views.backlogsAssessmentsView = new gps.BacklogAssessmentsView({
            el: this.$('.backlog-assessments-show'),
            collection: gps.backlogAssessments,
            id: this.model.id
        });
    },

    showBacklogStories: function() {

        this.backlogsStoriesView ? this.backlogsStoriesView.remove() : {};
        delete this.backlogsStoriesView;
        this.backlogsStoriesView = gps.views.backlogsStoriesView = new gps.BacklogStoriesView({
            el: this.$('.backlog-stories-show'),
            collection: gps.backlogStories,
            id: this.model.id
        });
    },

    goToEditImprovementPlan: function(event) {
        gps.router.navigate('backlogs/update/' + this.model.id, true);
    },

    goToReflections: function(event) {
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();
        gps.router.navigate('backlogs/' + this.model.id + '/report', true);
    }
});
// View for adding Clients
gps.AddClientView = Backbone.View.extend({

  events: {
        'tap .add-client-view-btn': "save",
        'tap .cancel-button' : "goBack"
  },

  initialize: function() {

    this.template = Handlebars.compile( $("#new-client-add").html() );
    this.headerTemplate = Handlebars.compile( $("#clients-add-sub-header").html() );
  },

  render: function() {

    var levels;

    // Render this template
    $(this.el).html(this.template());

    // Render the sub header for this view
    gps.views.subHeader.changeTemplate( this.headerTemplate() );

      var comboData = [], defaultCountry = {};
      _.each(gps.data.countries, function (country) {
          var item = {};
          item[country.shortName] = country.name;
          comboData.push(item);
      });

      this.comboBoxView = new gps.ComboBox({
          data: comboData
      });

      this.$el.find('.combo-section').append(this.comboBoxView.render().el);

    // Set breadcrumbs
    levels = [
      {
        name: "Clients",
        url: "#clients"
      },
      {
        name: "New company"
      }
    ];

    gps.views.header.setBreadcrumbs( levels );

    // render header
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    return this;
  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
    this.comboBoxView.remove();

    destroy_view(this);
  },

  save: function(event) {

    if (event) {
      event.preventDefault();
    }

    var item = $("form.client-add").serializeObject(),
    client;

    var newCountry = this.comboBoxView.getSelectedVal();
    item.country = newCountry;
    // Create a new instance of the client
    client = new gps.models.Client(item);

    client.on('invalid', function(model, error) {
      alert(error);
      return;
    });

    // Call the create method to save your data at stackmob
    client.save( client.toJSON(), {
      success: _.bind(function ( model, response ) {
        // add new item to your collection
        this.collection.add(model);

        // send a change event to our collection so the
        // list of todos is refreshed on our homepage.
        this.collection.trigger("change");

        // return back to the home page
        gps.router.navigate("#clients", {
          trigger: true,
          replace: false
        });

      }, this),

      error: function ( model, error ) {
        if( error.responseJSON && error.responseJSON.message ) {
          alert(error.responseJSON.message);
        }
      }
    });

    return this;
  },

  populateCountries: function() {
    
    var $countryList = this.$(".country-list");

    _.each(gps.data.countries, function (country) {
      var $option = $("<option>");

      $option.text(country.name);
      $option.val(country.shortName);

      $option.appendTo( $countryList );
    });
  },

  goBack: function( event ) {
    event.stopImmediatePropagation();
    event.stopPropagation();
    event.preventDefault();

    if ( !gps.formChanged ) {
       window.history.back()
    } else {
       changesMade(event);
    }
  }

});
// Show "Clients View"
// This will list all the clients
// For now we will only have this view. We will CRUD with the console.
gps.ClientsView = Backbone.View.extend({

  events: function() {

    return gps.util.getEvents(
      [{
        "touchstart li": "viewDetails"
      }], [{
        "click li": "viewDetails"
      }], {}
    );
  },

  //goes to the detils view of the selected client id.
  viewDetails: function(event) {

    event.stopImmediatePropagation();
    event.stopPropagation();
    event.preventDefault();

    var $li = $(event.currentTarget);

    gps.router.navigate("clients/update/" + $li.data("id"), true);

    return false;
  },

  initialize: function() {

    if (!gps.currentUser.isAuthorized()) {
      return;
    }

    this.collection.bind("change", this.render, this);

    // Here we remove the old view in the header and add the new add client button.
    gps.views.header.showButtons([gps.views.header.availableButtons.add_client_button]);

    this.pageTemplate = Handlebars.compile($("#new-client-item-template").html());
    this.headerTemplate = Handlebars.compile($("#clients-show-sub-header").html());



    this.collection.comparator = function(model) {
      return model.get("name");
    };
  },

  render: function(eventName) {

    var clientItemTemplate = this.clientItemTemplate,
      groupedClients,
      $listContainer,
      levels,
      keyText,
      jsonClients,
      viewObject;

    // Sort the collection
    this.collection.sort();

    // Group the collection by ranges
    groupedClients = this.collection.groupBy(function(model) {

      var firstChar;

      if (!model.get("name")) {
        return;
      }

      firstChar = model.get("name").substring(0, 1);

      if (typeof firstChar === "string") {
        firstChar = firstChar.toLowerCase();
      }

      if (firstChar.match(/[0-9]/)) {
        return "0_9";
      }

      if (firstChar.match(/[A-Fa-f]/)) {
        return "A_F";
      }

      if (firstChar.match(/[G-Kg-k]/)) {
        return "G_K";
      }

      if (firstChar.match(/[L-Zl-z]/)) {
        return "L_Z";
      }
    });

    keyText = {
      '0_9': "0 - 9",
      'A_F': "A - F",
      'G_K': "G - K",
      'L_Z': "L - Z"
    };
    jsonClients = {};
    _.each(groupedClients, function(arr, key) {
      jsonClients[key] = _.map(arr, function(item) {
        return item.toJSON();
      });
      jsonClients[key].title = keyText[key];
    });
    //
    // Object father, we send this to the view with clients, titles, and other props.
    //
    viewObject = {
      jsonClients: jsonClients,
      areThereClients: gps.clients.length !== 0
    };

    $(this.el).html(this.pageTemplate(viewObject));

    var loggedUser = gps.controllers.loginController.getLoggedUser();

    if (gps.controllers.securityController.isAuthorized(loggedUser, this.headerTemplate(), "add-client-btn")) {

      // Render the sub header for this view
      gps.views.subHeader.changeTemplate(this.headerTemplate());
    }

    // Set breadcrumbs
    levels = [{
      name: "Clients"
    }];

    gps.views.header.setBreadcrumbs(levels);

    return this;
  }

});
// View for adding Clients
gps.AddClientOrganizationView = Backbone.View.extend({

  events: {
    'tap .add-organization-button': "save",
    'tap .cancel-button' : "goBack"
  },

  initialize: function( options ) {
    this.options = options || {};

    this.hf = gps.handlebarsCompileFactory;
    this.template = this.hf.get("#client-organization-new-add");
    this.headerTemplate = this.hf.get("#client-org-add-sub-header");
    this.client  = gps.clients.get( this.options.clientID );
  },

  render: function() {

    var levels;
    
    // Render this template
    $(this.el).html(this.template( {} ));

    // Render the sub header for this view
    gps.views.subHeader.changeTemplate( this.headerTemplate() );

    // Set breadcrumbs
    levels = [
      {
        name: "Clients",
        url: "#clients"
      },
      {
        name: this.client.get("name"),
        url: "#clients/update/" + this.options.clientID
      },
      {
        name: "New organization"
      }
    ];
    gps.views.header.setBreadcrumbs( levels );

    // render header
    gps.views.header.showButtons([
       gps.views.header.availableButtons.back_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    return this;
  },

  save: function( event ) {
    
    var item = $("form.organization-new-add").serializeObject(),
    organizations,
    hasError,
    newOrg;

    if (event) {
      event.preventDefault();
    }

    // Create a new instance of the organization model
    newOrg = new gps.models.Organization();

    newOrg.on('invalid', function(model, error){
      hasError = true;
      alert(error);
      return;
    });

    newOrg.set( item, {validate: true});

    // Cancel if we have any errors when setting the model
    if ( hasError ) {
      return;
    }

    // Backup Teams
    var organizations = this.client.get('organizations') || [];
    var organizationsTeams = {};

    _.each(organizations, function(org) {    

      var teams = org.teams;
      organizationsTeams[org.objectId] = teams;

      delete org.teams;
    });


    this.client.save( 'organizations', [newOrg], {
      
      success: function( model, response, options ) {

        var organizations = model.get('organizations'),
        newOrg = new gps.models.Organization( _.last(organizations) );
                
        // Restore Teams
        _.each(organizations, function(org) {    

          var teams = organizationsTeams[org.objectId];
          org.teams = teams;
        });

        // Use the backbone organization model to add it on the organizations collection
        gps.clientOrganizations.add( newOrg ); //=>ns alf

        // Go back
        window.history.back();
      }.bind(this),

      error: function ( model, error ) {
        this.client.set('organizations', 
          _.filter( organizations, function(org) { 
            return ( !!org.objectId ); 
          })
        );

        if( error.responseJSON && error.responseJSON.message ) {
          alert(error.responseJSON.message);
        }
      }.bind(this),
      remote_ignore: ['users', 'organizations']

    });
  },


  goBack: function( event ) {
    event.stopImmediatePropagation();
    event.stopPropagation();
    event.preventDefault();

    if ( !gps.formChanged ) {
      window.history.back()
    } else {
      changesMade(event);
    }
  },

  remove:function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction, this);

     destroy_view(this);
  }

});
gps.ClientOrgView = Backbone.View.extend({

  initialize: function() {

    this.hf = gps.handlebarsCompileFactory;
    this.template = this.hf.get("#client-org-item");

    this.collection.bind("change", this.render, this);
    
    this.collection.comparator = function( model ) {
      var orgModel = model.get("name");

      return ( orgModel ? orgModel.toLowerCase() : orgModel);
    };

    this.render();
  },

  render: function() {

    var $orgContainer = $(this.el).find("ul"),
    clientID = this.id,
    organizations = [];

    $orgContainer.empty();

    if ( this.collection.length ) {
        
      $orgContainer.parent().parent().find('.no-resources').hide();
    }

    // Sort the collection
    this.collection.sort();
    

    gps.clientTeams = null;

    // Add organizations to the list
    this.collection.each(_.bind(function( org ){
      
      var newOrg = org.toJSON();
      newOrg.client_id = clientID;
      newOrg.teams = newOrg.teams ? newOrg.teams : [];
  
      $orgContainer.append( this.template( newOrg ) );   

    }, this));

    return this;
  },

  remove: function() {

    destroy_view(this);
  }

});
// View for updating organizations
gps.UpdateClientOrganizationView = Backbone.View.extend({

  events: {
    'tap .for-teams': 'addTeam',
    'tap .tab-navigation-item': 'showListTeams',
    'tap .organization-team-list-item': 'showUpdateTeam'
  },

  initialize: function(options) {
    this.options = options || {};

    this.hf = gps.handlebarsCompileFactory;
    this.template = this.hf.get("#client-organization-update");
    this.tabNavigationTemplate = this.hf.get('#tab-navigation');
    this.headerTemplate = this.hf.get("#client-org-update-sub-header");
    this.headerTeamsListTemplate = this.hf.get("#client-teams-header");

    this.currClient = gps.clients.get(this.options.clientID);
    this.currOrg = this.currClient.getOrganization(this.options.organizationID);
  },

  render: function() {
    var levels,
      clientName = this.currClient.get("name"),
      orgName = this.currOrg.name;

    // Render this template
    $(this.el).html(this.template(this.currOrg || {}));

    // Here we construct the organization tab information (null means active)
    var organizationTabItem = {
      "Details": null
    };

    // Here we get the lenght of teams.
    var length = this.currOrg.teams ? this.currOrg.teams.length : 0;

    // Here we construct the team tab information.
    var teamsTabName     = "Teams(" + length + ")",
        teamsTabItem     = {},
        teamsTabFunction = '#clients/' + this.options.clientID + '/organizations/update/' + this.options.organizationID;

    teamsTabItem[teamsTabName] = teamsTabFunction;

    this.$('.organization-tab-selector').html(this.tabNavigationTemplate([organizationTabItem, teamsTabItem]));

    this.showTeams();

    // Set breadcrumbs
    levels = [{
      name: "Clients",
      url: "#clients"
    }, {
      name: clientName,
      url: "#clients/update/" + this.options.clientID
    }, {
      name: "Edit organization"
    }];

    gps.views.header.setBreadcrumbs(levels);

    // render header
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button,
      gps.views.header.availableButtons.update_organizations_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    return this;
  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    destroy_view(this);
  },

  showListTeams: function(event) {
    var $li = $(event.currentTarget),
      $liContainer = $li.closest("ul");
    if ($li.find('span').html().trim().toLowerCase() === 'details') {
      $liContainer.find("li").removeClass("active");
      $li.addClass("active");
      this.$(".organization-update").css('display', '');
      this.$(".clients-list-container").css('display', 'none');
      gps.views.header.showButtons([
        gps.views.header.availableButtons.back_button,
        gps.views.header.availableButtons.update_organizations_button
      ]);
    } else {
      $liContainer.find("li").removeClass("active");
      $li.addClass("active");
      this.$(".clients-list-container").css('display', '');
      this.$(".organization-update").css('display', 'none');
      gps.views.header.showButtons([
        gps.views.header.availableButtons.back_button,
        gps.views.header.availableButtons.add_teams_button
      ]);
    }
  },

  showOrgDetails: function(event) {
    var $li = $(event.currentTarget),
      $liContainer = $li.closest("ul");

    $liContainer.find("li").removeClass("active");
    $li.addClass("active");
    this.$(".clients-list-container").css('display', 'none');
    this.$(".organization-update").css('display', '');

    gps.views.subHeader.$("#add-team-btn").parent().css('display', 'none');
  },

  showTeams: function() {
    var headerTeamsListTemplate = this.headerTeamsListTemplate;

    gps.clientTeams = new gps.collections.Teams(this.currOrg.teams);

    if (gps.clientTeams.length) {

      this.$(".client-teams-show").parent().prepend(headerTeamsListTemplate(gps.clientTeams));
    }

    gps.views.clientTeamsView = new gps.ClientTeamsView({
      el: this.$(".client-teams-show"),
      collection: gps.clientTeams,
      id: this.options.clientID,
      orgID: this.options.organizationID
    });
  },

  addTeam: function() {

    gps.router.navigate('#clients/' + this.options.clientID + '/' + this.options.organizationID + '/teams/add', {
      'trigger': true
    });
  },

  showUpdateTeam: function(event) {
    $element = $(event.currentTarget);
    gps.router.navigate('#clients/' + $element.data('client-id') + '/organizations/' +
      $element.data('organization-id') + '/teams/update/' + $element.data('team-id'), true);
  },

  save: function(event) {

    var item = $("form.organization-update").serializeObject();

    if (event) {
      event.preventDefault();
    }

    var onfinish = function(model, message, options, isError) {

      if (isError) {
        alert(message);
        return;
      }
      
      window.history.back();
    }.bind(this);

    this.currClient.updateOrganization(item, this.options.organizationID, onfinish);

    return this;
  }

});
gps.AddClientTeamView = Backbone.View.extend({

  initialize: function(options) {
    this.options = options || {};

    this.hf = gps.handlebarsCompileFactory;
    this.template = this.hf.get("#client-team-add");

    this.currClient = gps.clients.get(this.options.clientID);
    this.currOrg = new gps.models.Organization(this.currClient.getOrganization(this.options.orgID));
  },

  render: function() {

    // Render this view's template with the model
    $(this.el).html(this.template());

    var length = this.currOrg.teams ? this.currOrg.teams.length : 0,

        // Set breadcrumbs
        levels = [{
          name: "Clients",
          url: "#clients"
        }, {
          name: this.currClient.get('name'),
          url: "#clients/update/" + this.options.clientID
        }, {
          name: this.currOrg.get('name'),
          url: "#clients/" + this.options.clientID + "/organizations/update/" + this.options.orgID
        }, {
          name: "Add team"
        }];

    // render header
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button,
      gps.views.header.availableButtons.save_teams_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    gps.views.header.setBreadcrumbs(levels);

    return this;
  },

  remove : function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    destroy_view(this);
  },

  save: function(event) {

    if (event) {
      event.preventDefault();
    }

    var item,
      hasErrors,
      team;

    // Get the data from the form
    item = $("form.team-add").serializeObject();

    // Create a new team
    team = new gps.models.Team();

    item.organization = this.options.orgID;

    team.on('invalid', function(model, error) {
      hasErrors = true;
      alert(error);
      return;
    });

    team.set(item, {
      validate: true
    });

    // Cancel if we have any errors when setting the model
    if (hasErrors) {

      return;
    }

    gps.controllers.backlogController.addUpdateTeam(team, this.currClient, this.currOrg, this.onBacklogCreated);

    return this;
  },

  onBacklogCreated: function(model, message, error) {

    if (error) {
      alert(message);
    } else {
      window.history.back();
    }
  }

});
gps.ClientTeamsView = Backbone.View.extend({

  initialize: function(options) {
    this.options = options || {};

    this.hf = gps.handlebarsCompileFactory;
    this.template = this.hf.get("#client-team-item");

    this.collection.bind("change", this.render, this);

    this.collection.comparator = function(model) {
      var teamModel = model.get("team_name");
      teamModel = teamModel.toLowerCase();

      return teamModel;
    };

    this.render();
  },

  render: function() {

    var $teamsContainer = this.$el.find("ul"),
      clientID = this.id;

    $teamsContainer.parent().find('h1.left').show();
    //$teamsContainer.empty();

    if (this.collection.length) {
      $teamsContainer.parent().parent().find('.no-resources').hide();
    }

    // Sort the collection
    this.collection.sort();

    // Add teams to the list
    this.collection.each(_.bind(function(team) {
      var newTeam = team.toJSON();

      newTeam.client_id = clientID;
      newTeam.organization_id = this.options.orgID;
      newTeam.team_id = newTeam.objectId;

      $teamsContainer.append(this.template(newTeam));
    }, this));

    if (!isDevice) { // a correction for the web version.
      this.$el.css("margin-left", "0");
    }

    return this;
  },

  remove: function() {

    destroy_view(this);
  },

  showAddTeam: function(event) {
    var clientID = this.id,
        orgID    = this.options.orgID;

    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();

    gps.router.navigate('clients/' + clientID + '/' + orgID + '/teams/add', true);
  }
});
gps.UpdateClientTeamView = Backbone.View.extend({

  events: {
    
    'change form input, form select, form textarea': 'notifyChange'
  },

  initialize: function(options) {
    this.options = options || {};

    this.hf = gps.handlebarsCompileFactory;
    this.template = this.hf.get("#client-team-update");
    this.headerTemplate = this.hf.get("#client-team-update-sub-header");
    
    this.collection.bind("change", this.render, this);
    this.currentClient = gps.clients.get(this.options.clientID);

    this.model.on('invalid', function(model, error){
      alert(error);
    });
  },

  render: function() {

    var clientName = this.currentClient.get("name"), 
    orgName = this.currentClient.getOrganization( this.options.orgID ).name;

    // Render this view's template with the model
    $(this.el).html( this.template( this.model.toJSON() ) );

    // Render the sub header for this view
    gps.views.subHeader.changeTemplate( this.headerTemplate() );

    // Set breadcrumbs
    gps.views.header.showButtons([gps.views.header.availableButtons.update_teams_button]);
    gps.views.header.setBreadcrumbs([
      {
        name: "Clients",
        url: "#clients"
      },
      {
        name: clientName,
        url: "#clients/update/" + this.options.clientID
      },
      {
        name: orgName,
        url: "#clients/" + this.options.clientID + "/organizations/update/" + this.options.orgID
      },
      {
        name: "Edit team"
      }
    ]);

    // render header
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button,
      gps.views.header.availableButtons.save_teams_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    return this;
  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    destroy_view(this);
  },

  update: function() {

    var item = $("form.team-update").serializeObject();
        
    this.model.save( item, {
      success: function ( model, response, options ) {
        
        this.currentClient.updateTeam( this.model, this.options.orgID );
        window.history.back();
      }.bind(this),
      
      error: function ( model, error ) {
        
        if( error.responseJSON && error.responseJSON.message ) {
          alert(error.responseJSON.message);
        }
      }.bind(this),
      remote_ignore: ['backlogs'],
      update: true
    });
  },

  notifyChange: function() {
    
    gps.formChanged = true;
  }

});
// View for updating and deleting Clients
gps.UpdateClientView = Backbone.View.extend({

  events: {
    'tap .for-organization': 'addOrg',
    'tap .for-users': 'addUser',
    'change form input, form select, form textarea': 'notifyChange',
    'tap .update-client-button': "update",
    'tap .cancel-button' : "goBack"
  },

  initialize: function() {

    this.template = Handlebars.compile( $("#client-new-update").html() );
    this.headerTemplate = Handlebars.compile( $("#clients-edit-sub-header").html() );
    this.headerUsersListTemplate = Handlebars.compile($("#client-users-header").html());
    this.headerOrgsListTemplate = Handlebars.compile($("#client-organization-header").html());
  },

  render: function() {
    var levels, clientName, clientId, client;

    // Render this view's template with the current model
    $(this.el).html( this.template( this.model.toJSON() ) );

    // Render the sub header for this views
    gps.views.subHeader.changeTemplate(this.headerTemplate({ clientID: this.model.id }));

    client = gps.clients.get(this.model.id).attributes;
    clientId = client.objectId;

    //Show users and Organizations
    gps.clientUsers = new gps.collections.Users( this.model.get('users') );
    gps.clientOrganizations = new gps.collections.Organizations( this.model.get('organizations') );
    var users = [],
        orgs = [],
        actual,
        viewObject;
    //Get users data
    gps.clientUsers.each( function( item ) {
      actual = item.toJSON();
      actual.clientId = clientId;
      users.push(actual);
    });
    //Get organization data.
    gps.clientOrganizations.each( function( item ) {
       actual = item.toJSON();
       actual.clientId = clientId;
       if ( actual.teams )
         actual.teamsLength = actual.teams.length;
       else
         actual.teamsLength = 0;
       orgs.push(actual);
    });

    viewObject = {
      clientId: clientId,
      name: client.name,
      street: client.street,
      suite_floor: client.suite_floor,
      city: client.city,
      zip_code: client.zip_code,
      notes: client.notes,
      jsonUsers: users,
      jsonOrgs: orgs,
      hasUsers: gps.clientUsers.length !== 0,
      hasOrgs: gps.clientOrganizations.length !== 0
    };

    $(this.el).html(this.template(viewObject));

    //Build the combobox to populate countries
    var comboData = [], defaultCountry = {}, userCountry;
    userCountry = this.model.get("country");
    _.each(gps.data.countries, function (country) {
       var item = {};
       item[country.shortName] = country.name;
       comboData.push(item);
       if ( country.shortName == userCountry ){
         //To put default value in combobox.
         defaultCountry[userCountry] = country.name;
       }
    });

    this.comboBoxView = new gps.ComboBox({
      data: comboData
    });

    this.$el.find('.combo-section').append(this.comboBoxView.render(defaultCountry).el);

    // Set breadcrumbs
    clientName = this.collection.get( this.model.id ).get("name");
    levels = [
      {
        name: "Clients",
        url: "#clients"
      },
      {
        name: clientName
      }
    ];

    gps.views.header.setBreadcrumbs( levels );

    // render header
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    return this;
  },

  remove: function() {
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
    this.comboBoxView.remove();

    destroy_view(this);
  },

  update: function() {
    /*
     * Again, updating locally and remotely.
     * We delete the users attribute from the client model
     * just when making a put to the server, locally we're all
     * good. Basically, we remove the users & teams from the put
     * request, and on success back from the server, we restore it
     * back onto the client model.
    */
    var item = $("form.client-update").serializeObject(),
    client = gps.clients.get( this.model.id ),
    organizations,
    users, 
    teams;
    //Set updated country of the new combobox.
    var newCountry = this.comboBoxView.getSelectedVal();
    item.country = newCountry;
    // Store the users, teams and organizations before deleting them from the request object
    users = client.get('users');
    teams = client.get('teams');
    organizations = client.get('organizations');

    // Call the save/update method to save your data at stackmob
    client.save(item, {
      success: function( model, response ) {

        // Notify that the form is well validated
        gps.formChanged = false;

        client.set('users', users);

        window.history.back();
      },

      error: function( model, error ) {
        
        if( error.responseJSON && error.responseJSON.message ) {
          alert(error.responseJSON.message);
        }
      },
      remote_ignore: ['users', 'organizations'],
      update: true
    });
  },

  populateCountries: function() {
    var $countryList = this.$(".country-list");

    function populate() {
      _.each(gps.data.countries, function (country) {
        var $option = $("<option>");

        $option.text(country.name);
        $option.val(country.shortName);

        $option.appendTo( $countryList );
      });
    }

    populate();

    // Preselect the current model's country
    $countryList.val( this.model.get("country") );
    $countryList.find(".prompt").remove();
  },

  showUsers: function() {
    var headerUsersListTemplate = this.headerUsersListTemplate;

    gps.clientUsers = new gps.collections.Users( this.model.get('users') );

    if(gps.clientUsers.length) {

      this.$(".client-users-show").parent().prepend(headerUsersListTemplate(gps.clientUsers));
    }

    gps.views.clientUsersView = new gps.ClientUsersView({
      el: this.$(".client-users-show"),
      collection: gps.clientUsers,
      id: this.model.id
    });
  },

  showOrganizations: function(){
    var headerOrgsListTemplate = this.headerOrgsListTemplate;
    gps.clientOrganizations = new gps.collections.Organizations( this.model.get('organizations') );

    if(gps.clientOrganizations.length) {

      this.$(".client-orgs-show").parent().prepend(headerOrgsListTemplate(gps.clientOrganizations));
    }

    gps.views.clientOrgsView = new gps.ClientOrgView({
      el: this.$(".client-orgs-show"),
      collection: gps.clientOrganizations,
      id: this.model.id
    });
  },

  addOrg: function() {

    gps.router.navigate('#clients/' + gps.currentView.model.id + '/organizations/add', {
      'trigger': true
    });
  },

  addUser: function() {
    
    gps.router.navigate('#clients/' + gps.currentView.model.id + '/users/add', {
      'trigger': true
    });
  },

  updateOrganization: function(event){
    var $element = $(event.currentTarget);
    gps.router.navigate('#clients/' + $element.data('client-id') 
        + '/organizations/update/' + $element.data('organization-id'), true);
  },

  notifyChange: function() {
    gps.formChanged = true;
  },

  goBack: function( event ) {
    event.stopImmediatePropagation();
    event.stopPropagation();
    event.preventDefault();

    if ( !gps.formChanged ) {
        window.history.back()
    } else {
        changesMade(event);
    }
  }

});
gps.AddClientUserView = Backbone.View.extend({

  events: {
    'tap .add-user-btn': "save",
    'tap .cancel-button' : "goBack"
  },

  initialize: function(options) {
    this.options = options || {};

    this.template = gps.handlebarsCompileFactory.get("#client-user-new-add");
    //this.headerTemplate = Handlebars.compile( $("#client-user-add-sub-header").html() );
  },

  render: function() {

    var levels, 
    clientName;

    // Render this view's template with the model
    $(this.el).html( this.template() );

    // Set breadcrumbs

    clientName = gps.clients.get( this.options.clientID ).get("name");

    levels = [
      {
        name: "Clients",
        url: "#clients"
      },
      {
        name: clientName,
        url: "#clients/update/" + this.options.clientID
      },
      {
        name: "Add user"
      }
    ];

    // render header
    gps.views.header.showButtons([
       gps.views.header.availableButtons.back_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    gps.views.header.setBreadcrumbs( levels );

    return this;
  },

  save: function( event ) {

    if (event) {
      event.preventDefault();
    }

    var item = $("form.new-user-add").serializeObject(),
    client = gps.clients.get( this.options.clientID ), 
    hasErrors;
        
    // Compose a new user object
    var newUser = new gps.models.User();

    newUser.on('invalid', function(model, error){
      hasErrors = true;
      alert(error);
    });

    // Populate the new user with the data from the form
    newUser.set(item, {validate: true});

    if ( hasErrors ) {

      return;
    }

    newUser.unset("___class");
    newUser.register(newUser.toJSON(), {

      success: function ( model, response, options ) {
        //
        //  Attribute used in backendless ( tested, and is to get working Stormapth and CodeRunner )
        //
        newUser.set("___class", "Users");
        //update user objectId
        newUser.set( response );

        client.save( 'users', [model], {
          
          success: function( model, response, options ) {

            // Go back
            window.history.back();
          },

          error: function ( model, error ) {
            
            client.set('users', 
              _.filter( users, function( user ) { 
                return ( !!user.objectId ); 
              })
            );

            if( error.responseJSON && error.responseJSON.message ) {
              alert(error.responseJSON.message);
            }
          },
          remote_ignore: ['organizations', 'users']
        });  
      },

      error: function ( model, error ) {
        if( error.responseJSON && error.responseJSON.message ) {
          alert(error.responseJSON.message);
        }
      }

    }); 
    
    if(newUser.validationError) {

      alert(newUser.validationError);
    }

    return this;
  },

  goBack: function( event ) {
    event.stopImmediatePropagation();
    event.stopPropagation();
    event.preventDefault();

    if ( !gps.formChanged ) {
      window.history.back()
    } else {
      changesMade(event);
    }
  },

  remove: function(){
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction, this);

    destroy_view(this);
  }

});
gps.ClientUsersView = Backbone.View.extend({

  initialize: function() {

    this.template = Handlebars.compile( $("#client-user-item").html() );

    this.collection.bind("change", this.render, this);

    this.collection.comparator = function( model ) {

      var userModel = model.get("last_name");
      return (userModel ? userModel.toLowerCase() : userModel);
    };

    this.render();
  },

  render: function() {

    var $usersContainer = $(this.el).find("ul"),
    clientID = this.id;

    $usersContainer.empty();

    if ( this.collection.length ) {
      
      $usersContainer.parent().parent().find('.no-resources').hide();
    }

    // Sort the collection
    this.collection.sort();

    // Add users to the list
    this.collection.each(_.bind(function( user ){
      
      var newUser = user.toJSON();
      newUser.client_id = clientID;
      newUser.user_id = newUser.objectId;
      
      $usersContainer.append( this.template( newUser ) );
    }, this));

    return this;
  },

  remove : function() {

    destroy_view(this);
  },

});
gps.UpdateClientUserView = Backbone.View.extend({

  events: {
    'change form input, form select, form textarea': 'notifyChange',
    'tap .update-client-user-btn' : 'update',
    'tap .cancel-button' : "goBack"
  },

  initialize: function() {

    this.template = gps.handlebarsCompileFactory.get("#new-client-user-update");

    this.collection.bind("change", this.render, this);
    this.currClient = gps.clients.get( this.id );

    this.model.on('invalid', function(model, error){
      hasErrors = true;
      alert(error);
    });
  },

  render: function() {

    var levels, 
    clientName = this.currClient.get("name");

    // Render this view's template with the model
    $(this.el).html( this.template( this.model.toJSON() ) );

    // Set breadcrumbs
    levels = [
      {
        name: "Clients",
        url: "#clients"
      },
      {
        name: clientName,
        url: "#clients/update/" + this.currClient.id
      },
      {
        name: "Edit user"
      }
    ];

    gps.views.header.setBreadcrumbs(levels);

    // render header
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);
    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);

    return this;
  },

  update: function() {
    var item = $("form.user-update").serializeObject();

    //For Stompath - Coderunner: unset ___class
    this.model.unset("___class");
    this.model.update( item, {
      success: function ( model, response, options ) {

        var users = this.currClient.get('users'),
            newUsers;
        this.model.set("___class", "Users");
        // Compose an array of all users without this current user
        newUsers = _.reject( users, function( user ) {
          return (user.objectId === response.objectId);
        });

        // Now we will add the new user to the new users list
        newUsers.push( model.toJSON() );
        // Set these updated array of users locally (no server) to the current client
        this.currClient.set( 'users', newUsers);
        // Return back
        window.history.back();
      }.bind(this),

      error: function ( model, error ) {

        this.model.set("___class", "Users");
        if( error.responseJSON && error.responseJSON.message ) {
          alert(error.responseJSON.message);
        }
      }
    });
  },

  notifyChange: function() {
    
    gps.formChanged = true;
  },

  goBack: function( event ) {
     event.stopImmediatePropagation();
     event.stopPropagation();
     event.preventDefault();

     if ( !gps.formChanged ) {
        window.history.back()
     } else {
        changesMade(event);
     }
  },

  remove: function(){
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction, this);

    destroy_view(this);
  }

});
// Show "Client Widget View"
gps.ClientWidgetView = Backbone.View.extend({

  events: {
    'tap .improvement-plans-stats-org': 'goToBacklog'
  },

  initialize: function() {

    if ( !gps.currentUser.isAuthorized() ) {
      return;
    }

    this.hf = gps.handlebarsCompileFactory;
    this.clientWidgetTemplate = this.hf.get('#clientWidgetTemplate');

    this.collection.comparator = function(model) {
      if ( model.get('name') ) {
        return model.get("name");
      }
      else {
        return;
      }
    };

    gps.eventManager.on("clientWidgetSelect", this.renderWidget, this);
    this.render();
  },

  remove: function(){

    gps.eventManager.off("clientWidgetSelect", this.renderWidget, this);
    destroy_view(this);
  },

  goToBacklog: function(event){

    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();

    var $container = $(event.currentTarget);
    gps.router.navigate("backlogs/" + $container.data("id") + "/list", true);
  },

  render: function() {

    var clients = [];

    // Sort the collection
    this.collection.sort();
    
    this.collection.each( function(item){
      clients.push(item.toJSON());
    });

    var client = _.findWhere(clients, {objectId: gps.session.lastSelectedClient});

    if(!client && clients.length){
      client = clients[0];
      gps.session.lastSelectedClient = client.objectId;
    }

    this.renderWidget(client);
  },

  renderWidget: function(client) {

    function addDataWidgetClient(teamOrBacklog, organization) {
      //set stories info
      var storiesInfo = gps.controllers.storyController.getStoriesInfo(teamOrBacklog);

      organization.dataWidgetClient.push({
        name: teamOrBacklog.team_name || teamOrBacklog.name,
        storiesInfo: storiesInfo,
        wipObjetives: {description: 'Wip Objetives', value: storiesInfo.WIPStories},
        backlogObjetives: {description: 'Backlog Objetives', value: storiesInfo.BacklogStories}
      });
    }

    if(client) {
      client = JSON.parse(JSON.stringify(client));

      _.each(client.organizations, function(organization) {
        organization.dataWidgetClient = [];

        _.each(organization.teams, function(team) {
          addDataWidgetClient(team, organization);
        });

        _.each(organization.backlogs, function(backlog){
          addDataWidgetClient(backlog, organization);
        });

        organization.dataWidgetClient = _.sortBy(organization.dataWidgetClient, function(dw){
          return dw.name;
        });
      });
    }
    if (client) {
      $(this.el).html(this.clientWidgetTemplate({ title: client.name, client: client }));
    }
  },

  hitBottom: function(event) {
    var $shadow = this.$(".shadow"),
    isScrollOnBotton = $(".clist").scrollTop() + $(".clist").height() === $(".cwcontent")[0].scrollHeight

    if ( isScrollOnBotton ) {
      $shadow.addClass('hide');
    } 
    else {
      $shadow.removeClass('hide');
    }
  }
});
// Show "Impediment Widget View"
gps.ImpedimentWidgetView = Backbone.View.extend({

  events: {},
  initialize: function() {

    if (!gps.currentUser.isAuthorized()) {
      return;
    }

    this.hf = gps.handlebarsCompileFactory;

    gps.session.fetchedImpediments = gps.session.fetchedImpediments || {};
    this.pageTemplate = this.hf.get('#impedimentsWidgetTemplate');
    gps.eventManager.on("impedimentWidgetSelect", this.render, this);

    this.render();
  },

  remove: function() {
    gps.eventManager.off("impedimentWidgetSelect", this.render, this);
    destroy_view(this);
  },

  render: function () {

    this.$ilist = this.$ilist || $(".impediments-widget-impediments");
    this.$ilist.off("scroll");

    // we check if we have mem the impediments for this client
    if(!gps.session.fetchedImpediments[gps.session.lastSelectedClient]) {
      this.fetchImpedimentsFromAnswers(this.render.bind(this));
    } else {

      this.$ilist = this.$ilist || $(".impediments-widget-impediments");
      var impediments = gps.controllers.clientController
                          .getImpediments(gps.session.lastSelectedClient,
                                          gps.session.fetchedImpediments[gps.session.lastSelectedClient]);

      // Render the page template
      var impedimentsSize = impediments && impediments.length || 0;
      var viewData = {
        title: 'Impediments Requiring Executive Action (' + impedimentsSize + ')',
        impediments : impediments
      };
      this.$el.html(this.pageTemplate(viewData));

      this.$ilist.on("scroll",function(e) {
        this.hitBottom(e);
      }.bind(this));

      if(this.$ilist[0] && (this.$ilist[0].scrollHeight <= this.$ilist.height())) {
        this.$(".shadow").addClass('hide');
      }

      var impedimentWidgetCellArray = $('.impediments-widget-cell');
      if (impedimentWidgetCellArray.length > 0) {

        var currentHeight = 0, bulletsPositionsData = {bulletsPositions: []},
          startValue = $(impedimentWidgetCellArray[0]).offset().top;
        _.each(impedimentWidgetCellArray, function(elem) {

          currentHeight = $(elem).offset().top - startValue;
          bulletsPositionsData.bulletsPositions.push({top: currentHeight});
        });

        bulletsPositionsData.lineHeight = currentHeight;
        this.$el.find('.impediments-widget-timeline')
          .append(this.hf.get('#timeline')(bulletsPositionsData))
          .css("height", bulletsPositionsData.lineHeight + 50);
      }
    }

    return this;
  },

  hitBottom: function(event) {

    this.$ilist = this.$ilist || $(".impediments-widget-impediments");
    var $shadow = this.$(".shadow"),
      isScrollOnBotton = this.$ilist.scrollTop() + this.$ilist.height() === $(".iwcontent")[0].scrollHeight;

    if ( isScrollOnBotton ) {
      $shadow.addClass('hide');
    }
    else {
      $shadow.removeClass('hide');
    }
  },

  fetchImpedimentsFromAnswers: function(onCallback){
    var assessmentsIds = gps.controllers.clientController.getAssessmentsIdFromClient(gps.session.lastSelectedClient) || [],
      comments = [];

    if(assessmentsIds.length){
      var col = new gps.collections.Answers();

      // we only want to fetch the impediment comments from the asssessments
      // related with this client
      function formatFilter(mem, elem) {
        var base = " assessment_id=\'" + elem + "\'"
        return mem + (_.last(assessmentsIds) === elem ? base + ')' : base + ' or');
      }
      col.filteringBy = _.reduce(assessmentsIds, formatFilter, "comment.impediment=true and (");

      col.fetch({
        success: function(col){
          comments = col.map(function(model){
            var comment = model.get('comment');
            comment.createdDateString = moment(comment.created_date).format("MMMM Do YYYY");
            return comment;
          });
          // we mem the fetched impediments
          gps.session.fetchedImpediments[gps.session.lastSelectedClient] = comments;
          onCallback && onCallback(comments);
        },
        error: function(model, error){
          gps.util.showError(model, error);
          onCallback && onCallback(comments);
        }
      });
    } else {
      gps.session.fetchedImpediments[gps.session.lastSelectedClient] = comments;
      onCallback && onCallback(comments);
    }
  }
});
// Show "Dashboard View"
// This will show the application Dashboard
gps.DashboardView = Backbone.View.extend({

  className: 'dashboardView',
  initialize: function() {

    if ( !gps.currentUser.isAuthorized() ) {
      return;
    }

    this.pageTemplate = Handlebars.compile($("#dashboard").html());

  },

  remove: function(){
    //remove impediments widget view
    this.impedimentsWidgetView ? this.impedimentsWidgetView.remove():'';
    delete this.impedimentsWidgetView;
    
    //remove client widget view
    this.clientWidgetView ? this.clientWidgetView.remove():'';
    delete this.clientWidgetView;

    destroy_view(this);
  },

  render: function (eventName) {

    var levels;
    gps.views.header.removePreviousComponents();
    gps.views.header.showClientComboBox();

    // Render the page template
    $(this.el).html(this.pageTemplate({title: 'Business Value Teams'}));

    // Show Client Widget
    this.showClientWidget();

    // Show Impediments Widget
    this.showImpedimentsWidget();

    // Set breadcrumbs
    levels = [
      {
        name: "Dashboard"
      }
    ];

    gps.views.header.setBreadcrumbs( levels );

    return this;
  },

  showImpedimentsWidget: function() {
    //remove impediment widget view 
    this.impedimentsWidgetView ? this.impedimentsWidgetView.remove():'';
    delete this.impedimentsWidgetView;

    this.impedimentsWidgetView = new gps.ImpedimentWidgetView({
      el: $(this.el).find('.impediments-widget-container')
    });
  },

  showClientWidget: function() {
    //remove client widget view 
    this.clientWidgetView ? this.clientWidgetView.remove():'';
    delete this.clientWidgetView;

    this.clientWidgetView = new gps.ClientWidgetView({
      el: $(this.el).find('.client-widget-container'),
      collection: this.collection
    });
  }

});
gps.LoginView = BackendlessBB.View.extend({

  events: {
    'tap .login-sign-in-button': 'login',
    'blur .login-form-username': 'validateEmail',
    'blur .login-form-username-error': 'validateEmail'
  },

  remove: function() {

    destroy_view(this);
  },

  initialize: function(options) {
    this.view = options.view;

    // in case of problems with spinning
    // we enable this
    //$.active = 0;
  },

  render: function() {
    var template = $(this.view).html();

    $(this.el).html(template);

    this.$form = this.$("form");

    return this;
  },

  login: function() {

    var data = this.$form.serializeObject(),
      $passwordInput = this.$(".login-form-password");

    gps.controllers.loginController.doLogin(data.username, data.password, {
      success: function() {

        // Hide keyboard on webview
        $passwordInput.blur();
      },

      error: function(model, response) {
        this.$generalNotifier = this.$generalNotifier || $('.login-notifier');
        this.$generalNotifier.fadeIn(500);

        var cb = _.bind(function() {
          this.$generalNotifier.fadeOut(500);
        }, this);

        setTimeout(cb, 5000);
      }
    });

    return false;
  },

  // Here we are using a regex without hard checking it
  // just by the moment but we should make sure this regex
  // satisfies our needs
  validateEmail: function(event) {
    this.$emailInput = this.$emailInput || $(event.currentTarget);

    if (this.$emailInput.val().length > 2) {
      this.validEmail();
    } else {
      this.invalidEmail();
    }
  },

  // here we hide the wrong email label if its present.
  // If we have a reference to the signInButton then it means
  // its disabled so we enabled in that case.
  // Lastly we change the error class to the no-error one for the email input.
  validEmail: function() {
    this.$wrongEmailNotifier ? this.$wrongEmailNotifier.fadeOut(500) : '';
    this.$signInButton ? this.$signInButton.switchClass('login-sign-in-button-disabled', 'login-sign-in-button') : '';
    this.$emailInput.switchClass('login-form-username-error', 'login-form-username', 500);
  },

  // we grab the references for the wrong email label and button
  // we show them and lastly we switch the no-error class to the error one for the email input.
  invalidEmail: function() {
    this.$wrongEmailNotifier = this.$wrongEmailNotifier || $('.login-form-invalid-email-label');
    this.$signInButton = this.$signInButton || $('.login-sign-in-button');
    this.$wrongEmailNotifier.fadeIn(500);
    this.$signInButton.switchClass('login-sign-in-button', 'login-sign-in-button-disabled');
    this.$emailInput.switchClass('login-form-username', 'login-form-username-error', 500);
  }

});
gps.title = Backbone.View.extend({

  initialize: function(text) {

    //this.text = (text || {});
    this.text = text;
    this.title_template = Handlebars.compile($("#title-box").html());

    //console.warn("[messageBoxHelper]","initialize");
  },

  render: function() {
    this.$el.append(this.title_template(this.text));
    return this.$el;
  }
});
gps.coloredCheckbox = Backbone.View.extend({

    className: "colored-checkbox",
    events: {
        "tap" : "tick"
    },

    initialize: function(options) {
        this.options = options || {};
        this.selected = options.selected ? true: false;
        this.template = gps.handlebarsCompileFactory.get("#colored-checkbox");
    },

    render: function() {

        this.$el.html(this.template());
        this.renderColor();
        this.renderTick();
        return this;
    },

    renderColor: function() {
      var color = this.options.color,
      darkColor = gps.util.getDarkColor(color, 50),
      colorSide = this.$('.tick-container');

      colorSide.css('background-color', color);
    },

    renderTick: function() {
        this.$tickIcon = this.$tickIcon ||  this.$(".tick-icon");
        this.selected ? this.$tickIcon.css('display', '') : this.$tickIcon.css('display', 'none');
    },

    tick: function(){
        if ( this.options.validate ) {
            this.options.validate(!this.selected, this);
        }

        this.selected = !this.selected;
        this.renderTick();
        if (this.options.onTap){

            this.options.onTap(this.options.itemId,this.selected);
        }
    },

    remove: function(){

        destroy_view(this);
    },

    /**
     * It return whether the checkbox is on or off.
     * @return {void}
     */
    isChecked: function(){
        return this.selected;
    }
});
gps.ComboBox = Backbone.View.extend({
  className: 'combo-main',

  events: {
    'tap .combo-container' : 'toggleDrop',
    'tap .combo-row': 'itemSelected'
  },

  /**
   * @param {String} [options.prompt] - Optional message showed at the first time
   * @param {String} [options.fireFirstSelected] - Optional fire the event for the default selected item
   * @param {String} [options.serialize] - The attribute of the model related with the combobox => allows compatibility with $.serializeObject
   * @param {Array<{item_id: String}>} [options.data] - Optional list of items to show at the drop list
   * item_id is the attribute 'value' of the combo-box's item (ej: <li value=item_id><li>)
   * the value of the item_id is the text of the combo-box's item (ej: <li>text<li>)
   */
  initialize: function(options) {
    this.prompt = options.prompt;
    this.collection = options.data || [];
    this.fireFirstSelected = options.fireFirstSelected || false;
    this.serializeAttr = options.serialize;

    this.generalTemplate = gps.handlebarsCompileFactory.get('#combo-display');
    this.dropTemplate = gps.handlebarsCompileFactory.get('#combo-drop-list');

    // Combo boxs have to listen the events that take place
    // outside of the view and loss focus if it is necessary
    _.bindAll(this, 'toUnfocus');
    Backbone.trigger('suscribeToUnfocus', this.toUnfocus);
  },
  /**
   * @param {{item_id: String}} [options] - A particular item to show at the display
   */
  render: function(options) {

    var alreadyTemplated;

    // We render combo-box display
    this.lastSelectedRow = options || this.prompt || _.first(this.collection);

    this.$el.html(this.generalTemplate({
      ppt: this.prompt,
      head: this.lastSelectedRow,
      serializeKey: this.serializeAttr,
      serializeValue: _.keys(this.lastSelectedRow)[0]
    }));

    // We use the prompt only one time
    delete this.prompt;

    // We render the drop list, only one time
    // and if we have at least one item
    this.$dropList = this.$('.combo-drop-list');
    alreadyTemplated = (this.$dropList.children().length > 0);

    if (! alreadyTemplated && this.collection.length) {
      this.$dropList.html(this.dropTemplate({
        items: this.collection
      }));
    }

    /**
     * If we are going to have selected one by default => we fire it's event.
     */
    if (this.lastSelectedRow && this.fireFirstSelected) {
      Backbone.trigger('selectedItemCombo', Object.keys(this.lastSelectedRow)[0]);
    }

    // If we click the combo-display it will change it's background color depending on the 
    // visibility of the combo-drop-list.
     this.$(".combo-display").click(function() {
      if (this.$(".combo-drop-list").is(':visible')) {
         this.$(".combo-display").addClass('active')
      } else {
         this.$(".combo-display").removeClass('active');
      }
    }.bind(this));

    return this;
  },

  /**
   * This function, show or hide the drop list
   */
  toggleDrop: function() {
    this.$dropList.toggle();
  },

  remove: function() {

    Backbone.trigger('unsuscribeToUnfocus', this.toUnfocus);
    destroy_view(this);
  },

  itemSelected: function(event) {
    var options = {},
    itemId = event.target.getAttribute('value');

    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();

    options[itemId] = event.target.innerText;

    // We render combo-box display only if the new item selected
    // is different than the current combo-box display item
    if(!_.isEqual(this.lastSelectedRow, options)) {
      this.lastSelectedRow = options;
      this.render(options);

      // We trigger event if parent view is listening
      // The param is the key of the selected object
      Backbone.trigger('selectedItemCombo', itemId);

    } else {
      // The element selected was already at the display
      // we don't render it, hide the drop list
      this.toggleDrop();
    }
  },

  /**
   * This method check if the event listened was triggered outside of the backbone view
   * in that case we force the combo box to "unfocus"
   * @param event
   */
  toUnfocus: function(event) {
    var elemInsideView = (this.$(event.target).length !== 0);

    if (!elemInsideView && this.$dropList.is(':visible')) {
      this.toggleDrop();
    }

    // change the color of the combo display when we lose focus of it.
     this.$(".combo-display").removeClass('active');
  },

  getSelectedVal: function(){
      return _.keys(this.lastSelectedRow)[0];
  }
});
gps.messageBoxHelper = Backbone.View.extend({

    events: {
        "tap .popup-closeButton": "onClose",
        "tap .popup-save-button": "onSave"
    },

    /**
     * @param {options}
     * Options example 2:
     *  var options = {design:2,title,"hi",message_options:[
     *      {description:"Start the assessment",url:"backlogs/" + $li.data("backlogid"),optionlist:"" },
     *      {description:"Edit the Assessment", url:"backlogs/",optionlist:""}
     *  ]};

     * Options example 1:
     *  var options = {design:1,title,"hi",message_options:[
     *      {description:"endDate",value:new Date(),datetype:""}
     *  ]};
     */
    initialize: function(options) {

        this.options = (options || {});
        this.indexPopupTemplate = gps.handlebarsCompileFactory.get("#new-assessment-option-messages-one");

        console.warn("[messageBoxHelper]","initialize");
    },

    /**
     * Render index popup template depending of the desired design.
     * And adds opacity to background.
     * @returns {Backbone.View.$el|*|e.View.$el}
     */
    render: function() {

      if (this.options.design == 1) {

        this.$el.append(this.indexPopupTemplate(this.options));
        this.$el.find("input")[0].valueAsDate = this.options.message_options[0].value;
      } else if (this.options.design == 2) {

        this.$el.append(this.indexPopupTemplate(this.options));
      }

      $(".content-body").css({"opacity" : "0.4"});
      return this.$el;
    },

    onSave: function(event){

      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();

      gps.eventManager.trigger("messageBoxSave",event,this.$el.find("input")[0].valueAsDate);
      this.remove();
    },

    onClose:function(event){

      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();

      this.remove();
    },

    /**
     * Remove popup and also background opacity.
     */
    remove: function(){

      $(".content-body").css({"opacity" : ""});
      destroy_view(this);
    }
});
gps.CheckBox = Backbone.View.extend({

  constants: {
    INPUT_CLASS: '.checkbox-view-input',
    GRABBER_CLASS: '.checkbox-view-grabber',
    GRABBER_ACTIVE_CLASS: '.checkbox-view-grabber-active',
    POSITIVE_OPTION_CLASS: '.checkbox-view-option-active',
    NEGATIVE_OPTION_CLASS: '.checkbox-view-option',
    TEMPLATE_ID: '#checkbox-display',
  },

  events: {
    'tap .checkbox-view-grabber': 'toggle',
  },
  /**
   * @param {Boolean} [options.isChecked] - Optional boolean for the checked attribute of the input[checkbox]
   * whereToToggle attribute is use to avoid using !checked to know where to toggle, basically is the
   * opposite of input[checkbox] checked value.
   * @return {void}
   */
  initialize: function(options) {
    this.whereToToggle = options ? options.isChecked : false;
    this.template = gps.handlebarsCompileFactory.get(this.constants.TEMPLATE_ID);
  },

  /**
   * Render the view with false value as default, in case this.whereToToggle is true it will
   * render as false and then toggle to true.
   *
   * @return {object} - The reference for 'this' view.
   */
  render: function() {
    this.$el.html(this.template({
      checked: false
    }));
    this.$checkbox = this.$checkbox || this.$el.find(this.constants.INPUT_CLASS);

    // we grab them to reuse them in toggleFalse/True functions
    this.$negativeOption = this.$negativeOption || this.$el.find(this.constants.NEGATIVE_OPTION_CLASS);
    this.$positiveOption = this.$positiveOption || this.$el.find(this.constants.POSITIVE_OPTION_CLASS);
    this.$grabber = this.$grabber || this.$el.find(this.constants.GRABBER_CLASS);

    /* if it is true is because option.checked value was passed as true 
     * then we have to toggle it, because default is false, otherwise we have to
     * put this.whereToToggle to true because that is where we are going to toggle next.
     * We have to set the input[checkbox] to true in case the checked parameter is also true.
     */
    if (this.whereToToggle) {
      this.$checkbox.prop('checked', 'true');
      this.toggle(undefined, 0);
    } else {
      this.whereToToggle = true;
    }

    return this;
  },

  /**
   * Toggle the checkbox to the opposite site.
   *
   * @param {event} The event which triggered this function
   * @param {animationSpeed} The speed of the toggle, this is use to make the toggle animation (0) when
   * initializing the checkbox with isChecked:true.
   *
   * @return {object} - The reference for 'this' view.
   */
  toggle: function(event, animationSpeed) {
    if (this.whereToToggle) {
      this.toggleTrue(_.isUndefined(animationSpeed) ? 500 : animationSpeed);
    } else {
      this.toggleFalse();
    }
  },

  // Basically we handle the transitions here and the grabber shadow position.
  // same happens in toggleTrue.
  toggleFalse: function() {
    this.$negativeOption.css('left', '46px');
    this.$positiveOption.animate({
      left: '-80px'
    }, 650);
    this.$negativeOption.animate({
      left: '4px'
    }, 500);
    this.$grabber.animate({
      left: '0px'
    }, 500);
    this.$grabber.toggleClass(this.constants.GRABBER_ACTIVE_CLASS.replace('.', ''));
    this.toggleAttributes(false);
  },

  /**
   * @param {Boolean} [checked] - Option for the checked attribute of the input[checkbox]
   *  and the this.whereToToggle attribute that is the opposite of the checked parameter.
   * @return {void}
   */
  toggleAttributes: function(checked) {
    this.$checkbox.prop('checked', checked);
    this.whereToToggle = !checked;
  },

  toggleTrue: function(animationSpeed) {
    this.$positiveOption.css('left', '-34px');
    this.$negativeOption.animate({
        left: "82px"
      },
      animationSpeed === 0 ? 0 : animationSpeed + 150);
    this.$positiveOption.animate({
      left: "-8px"
    }, animationSpeed);
    this.$grabber.animate({
      left: '46px'
    }, animationSpeed);
    this.$grabber.toggleClass(this.constants.GRABBER_ACTIVE_CLASS.replace('.', ''));
    this.toggleAttributes(true);
  },

  /**
   * It return whether the checkbox is on or off.
   * @return {void}
   */
  isChecked: function() {
    return this.$checkbox.prop('checked');
  }
});
gps.HeaderView = Backbone.View.extend({

  /**
   * This view is being rendered in the index.haml file using _new_header.haml
   * This view controls the behavior of the header.
   */
  el: '#header',
  events: {
    'tap .logout-button'                 : 'onLogoutButton',
    'tap .header-search-icon'            : 'onSearchButton',
    'tap .header-search-bar'             : 'onSearchButton',
    'tap .add-client-button'             : 'onAddClientButton',
    'tap .add-improvement-plan-button'   : 'onAddImprovementPlanButton',
    'tap .save-improvement-plan-button'  : 'onSaveImprovementPlanButton',
    'tap .edit-assessment-button'        : 'onEditAssessmentButton',
    'tap .save-assessment-button'        : 'onSaveAssessmentButton',
    'tap .save-stories-button'           : 'onSaveStoriesButton',
    'tap .edit-improvement-plan-button'  : 'onEditImprovementPlanButton',
    'tap .update-improvement-plan-button': 'onUpdateImprovementPlanButton',
    'tap .update-stories-button'         : 'onUpdateStoriesButton',
    'tap .update-organizations-button'   : 'onUpdateOrganizationButton',
    'tap .update-teams-button'           : 'onUpdateTeamButton',
    'tap .add-teams-button'              : 'onAddTeamButton',
    'tap .save-teams-button'             : 'onSaveTeamButton',
    'tap .back-button'        : function(event){Backbone.trigger('gps.views.header:onBackButton', event );},
    'tap .modify-end-button'  : function(){Backbone.trigger('gps.views.header:onModifyEndButton');},
    'tap .end-index-button'   : function(){Backbone.trigger('gps.views.header:onEndIndexButton');},
    'tap .reflection-button'  : function(){Backbone.trigger('gps.views.header:onReflectionButton');},
    'tap .report-button'      : function(){Backbone.trigger('gps.views.header:onReportButton');},
    'tap .backlog-reflection-button'     : 'onBacklogReflectionButton',
	  'tap .backlog-assessment-reflection-button'  : 'onBacklogAssessmentReflectionButton'
  },
  //Not sure about overwritting the tap event here. ?

  availableButtons: {
    back_button       : '<div class="back-button"><i class="icon"></i>Back</div>',
    logout_button     : '<div class="logout-button nav-button">Logout</div>',
    add_improvement_plan_button: '<div class="add-improvement-plan-button nav-button">Add Improvement Plan</div>',
    add_client_button : '<div class="add-client-button nav-button">Add Client</div>',
    modify_end_button : '<div class="default-button modify-end-button nav-button">MODIFY END</div>',
    end_index_button  : '<div class="default-button end-index-button nav-button">END INDEX</div>',
    backlog_reflection_button : '<div class="noticeable-button backlog-reflection-button nav-button">REFLECTION</div>',
    backlog_assessment_reflection_button : '<div class="noticeable-button backlog-assessment-reflection-button nav-button">REFLECTION</div>',
    edit_improvement_plan_button  : '<div class="edit-improvement-plan-button nav-button">EDIT IMPROVEMENT PLAN</div>',
    update_improvement_plan_button: '<div class="update-improvement-plan-button nav-button">UPDATE IMPROVEMENT PLAN</div>',
    save_improvement_plan_button  : '<div class="save-improvement-plan-button nav-button">SAVE IMPROVEMENT PLAN</div>',
    save_assessment_button  : '<div class="save-assessment-button nav-button">SAVE INDEX</div>',
    edit_assessment_button  : '<div class="edit-assessment-button nav-button">EDIT INDEX</div>',
    save_stories_button     : '<div class="save-stories-button nav-button">SAVE OBJECTIVE</div>',
    update_stories_button   : '<div class="update-stories-button nav-button">UPDATE OBJECTIVE</div>',
    update_organizations_button : '<div class="update-organizations-button nav-button">UPDATE ORGANIZATION</div>',
    update_teams_button     : '<div class="update-teams-button nav-button">UPDATE TEAM</div>',
    add_teams_button        : '<div class="add-teams-button nav-button">ADD TEAM</div>',
	  save_teams_button       : '<div class="save-teams-button nav-button">SAVE TEAM</div>',
    report_button           : '<div class="report-button default-button nav-button">REPORT</div>'
  },

  initialize: function() {

    this.cc = gps.controllers.clientController;
    this.$buttonNav = $('.header-navigation-buttons');
  },

  /**
   * This function should be called from every view so the header is cleaned up.
   */
  removePreviousComponents: function() {
    this.removeClientComboBox();
    this.$buttonNav.empty();
    $('.back-button').remove();
  },

  /**
   * @param {Array of Buttons} - Buttons to be displayed in the navigation section
   * ( from HeaderView.availableButtons )
   * This method will remove any previous button and display the selected buttons as parameters.
   * This method will also remove the client combo box if it was being displayed.
   * For the case of back button this function add it to an special container.
   * This method will remove the back button in case it exists.
   * Example of usage: gps.views.header.showButtons([gps.views.header.availableButtons.back_button]);
   */
  showButtons: function(buttons) {
    this.removePreviousComponents();
    var backButton = _.find(buttons, function(button){
      return $(button).hasClass('back-button');
    });

    // here we add the back button to the search bar and remove it from the header buttons array.
    if (backButton) {
      $('.header-search-bar').append(backButton);
      buttons.splice(buttons.indexOf(backButton), 1);
    }

    buttons.forEach(function(button) {
      this.$buttonNav.append($(button));
    }.bind(this));
  },

  /**
   * Will display the Client combo box inside the header.
   */
  showClientComboBox: function() {

    this.$el.find('.header-client-combo-box').show();
    if (!this.clientComboBox) {
      this.clientComboBox = new gps.ComboBox({
        data: this.getClientsNames(gps.clients)
      });
      this.cc.onClientsSyncChange(this.onClientChange.bind(this));
      Backbone.on('selectedItemCombo', this.fireSelectedClientEvent, this);
    }

    this.render();
  },

  fireSelectedClientEvent: function(clientID) {

    var selectedClient = _.findWhere(gps.clients.models, {
      id: clientID
    });

    gps.session.lastSelectedClient = clientID;
    console.log("seeted selected client");
    gps.eventManager.trigger("clientWidgetSelect", selectedClient.toJSON());
    gps.eventManager.trigger("impedimentWidgetSelect");
  },

  /**
   * It's going to remove the client combo box from the header.
   */
  removeClientComboBox: function() {

    this.$el.find('.header-client-combo-box').hide();
    this.clientComboBox && this.clientComboBox.remove();
    this.clientComboBox = null;
    this.cc.offClientsSyncChange(this.onClientChange);
    Backbone.off('selectedItemCombo', this.fireSelectedClientEvent, this);
  },

  /**
   * @param {Array of levels} those levels should be an object with one needed value ( name )
   * and an optional link, For exmaple: {name: 'something', link:'/contacts'}
   * This method is going to display Breadcrumbs with the values passed as parameters.
   * example: [{name:"contacts", link:"/contacts"}, ...]
   */
  setBreadcrumbs: function(levels) {
    var isArray = Array.isArray(levels),
      $breadcrumbsContainer, $active;

    if (!isArray) {

      return;
    }

    // Empty the breadcrumbs container
    $breadcrumbsContainer = this.$el.find(".breadcrumbs");
    $breadcrumbsContainer.empty();

    // Add the levels
    var i = 0;
    _.each(levels, function(level) {
      var $item = $("<li><a>");

      if (i++ > 0) {
        $item = $("<li><span class='breadcrumbs-right-arrow'>");
        $item.append($('<a>'));
      }

      $item.find("a").text(level.name);

      if (level.url) {
        $item.find("a").attr("href", level.url);
      }

      $breadcrumbsContainer.append($item);
    });

    // Mark the active level
    $active = $breadcrumbsContainer.find("li:nth(" + (levels.length - 1) + ")");
    $active.addClass("active");
  },

  /**
   * @param {Client} [gps.clients] Collection of clients.
   * Method to be called when the collection of clients
   */
  onClientChange: function(model) {

    this.removeClientComboBox();
    this.showClientComboBox();
  },

  /**
   * This method is going to render all the needed components of the view.
   * @returns {gps.HeaderView} the view itslef
   */
  render: function() {

    if (this.clientComboBox) {
      this.$el.find('.header-client-combo-box').append(this.clientComboBox.render().el);
    }
    return this;
  },

  /**
   * @param gps_clients
   * This method prepares the names from gps_clients in order to obtain an array of names and ids.
   * @returns {Array} indexed by client id and having the name of the client as value.
   */
  getClientsNames: function(gps_clients) {
    var clients = [],
      comboBoxClients = [];

    gps_clients.each(function(item) {
      clients.push(item.toJSON());
    });

    clients = _.sortBy(clients, function(client) {
      if (client.name) {
        return client.name;
      } else {
        return;
      }
    });
    _.each(clients, function(client) {
      var item = {};
      item[client.objectId] = client.name;
      comboBoxClients.push(item);
    });
    return comboBoxClients;
  },

  /**
   * The default action of the back button will be to go one step back in
   * the navigation history.
   */
  onBackButtonDefaultAction: function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();

    if (!gps.formChanged) {
      window.history.back();
    }
  },

  onLogoutButton: function() {
    gps.controllers.loginController.doLogOut();
    return false;
  },

  /**
   * Function that is going to be called when the add client button is pressed.
   */
  onAddClientButton: function() {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
      gps.router.navigate('clients/add', true);
  },

  /**
   * Function that is going to be called when the add improvement plan button is pressed.
   */
  onAddImprovementPlanButton: function() {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    gps.router.navigate('backlogs/add', true);
  },

  onSaveImprovementPlanButton: function(event) {
    if ( event ) {
      event.preventDefault();
    }
    gps.views.backlogsAdd.save();
    return false;
  },

  onEditAssessmentButton: function(event) {
    gps.views.editBacklogAssessmentView.save(event);
  },

  onSaveAssessmentButton: function(event) {
    gps.views.addBacklogAssessmentView.save(event);
  },

  onSaveStoriesButton: function(event) {
    gps.views.addBacklogStoryView.save(event);
  },

  onEditImprovementPlanButton: function(event) {
    gps.views.backlogsList.goToEditImprovementPlan(event);
  },

  onUpdateImprovementPlanButton: function(event) {
    gps.views.backlogsUpdate.update();
  },

  onUpdateStoriesButton: function(event) {
    gps.views.updateBacklogStoryView.update();
  },

  onBacklogReflectionButton: function(event) {
    gps.views.backlogsList.goToReflections(event);
  },

  onBacklogAssessmentReflectionButton: function(event) {
    gps.views.updateBacklogAssessmentView.goToReflections(event);
  },

  onUpdateOrganizationButton: function(event) {
    gps.views.UpdateClientOrganizationView.save(event);
  },

  onUpdateTeamButton: function(event) {
    gps.views.updateClientTeamView.update();
  },

  onAddTeamButton: function(event) {
    gps.views.clientTeamsView.showAddTeam(event);
  },

  onSaveTeamButton: function(event) {
    gps.views.addClientTeamView.save(event);
  },
  /**
   * Function that is going to be called when the search button is pressed.
   */
  onSearchButton: function() {
    this.searchView = new gps.SearchView();
    this.$('.header-search-place').html(this.searchView.render().el);

    var $searchInput = this.$('.search-input');
    $searchInput.focus();
    $searchInput[0].setSelectionRange();
  },

  remove: function() {
    this.searchView.remove();
    this.removeClientComboBox();
    destroy_view(this);
  }
});
gps.SearchView = Backbone.View.extend({
  events: {
    'search .search-input' : 'onStopSearchButton',
    'tap .search-text-row' : 'onSearch',
    'keyup .search-input' : 'onWriteSearch'
  },

  initialize: function() {

    this.searchTemplate = Handlebars.compile($('#search-display-template').html());
    this.searchDropListTemplate = Handlebars.compile($('#search-drop-list-template').html());

    // This view has to listen the events that take place
    // outside of the view and loss focus if it is necessary
    _.bindAll(this, 'toUnfocus');
    Backbone.trigger('suscribeToUnfocus', this.toUnfocus);
  },

  render: function() {
    this.$el.html(this.searchTemplate());

    this.$searchInput = this.$('.search-input');
    this.$searchLine = this.$('.search-line');
    this.$searchDropList = this.$('.search-drop-list');

    return this;
  },

  remove: function(){
    Backbone.trigger('unsuscribeToUnfocus', this.toUnfocus);

    destroy_view(this);
  },

  onStopSearchButton: function() {
    this.$searchDropList.empty(); // ELIMINA LOS EVENTOS HIJOS?

    this.$searchLine.animate({marginRight: '19px', width: '29px'}, 'fast',
      _.bind(function(){
        this.$searchLine.css({visibility: 'visible'});
      }, this)
    );
  },

  onSearch: function() {
    setTimeout(_.bind(function(){
      this.$el.empty();
    }, this), 100);
  },

  onWriteSearch: function() {
    var emptyInput = (this.$searchInput.val().length === 0),
    data;

    if(! emptyInput) {
      // search for objects (data)
      // template the drop list with them

      data = [
        {
          'Amazon': '#backlogs/DD6247BB-C0DF-F5F4-FF31-A407F4393400/list'
        },
        {
          'Amazon PS Video': '#backlogs/DD6247BB-C0DF-F5F4-FF31-A407F4393400/list'
        },
        {
          'Amazon Cloud': '#backlogs/DD6247BB-C0DF-F5F4-FF31-A407F4393400/list'
        },
        {
          'Amazon S3 Services': '#backlogs/DD6247BB-C0DF-F5F4-FF31-A407F4393400/list'
        }
      ];

      this.$searchDropList.html(this.searchDropListTemplate(data));
      this.$searchLine.css({visibility: 'hidden', width: '20px'}).animate({marginRight: '0px'}, 'fast');
    } else {
      this.onStopSearchButton();
    }
  },
  /**
   * This method check if the event listened was triggered outside of the backbone view
   * in that case we force the search view to "unfocus"
   * @param event
   */
  toUnfocus: function(event) {
    var eventClass = $(event.target).attr('class'),
      elemInsideView = (this.$(event.target).length !== 0);

    if (!elemInsideView && eventClass !== 'header-search-icon-content' && eventClass !== 'header-search-icon' && eventClass !== 'header-search-icon-content') {
      this.remove();
    }
  }
});
gps.SideBarView = Backbone.View.extend({

  el: "#sidebar",

  events: {
    "tap .user": "userPicture",
    'tap .toggle-selector': "toggleLeftSideBar"
  },

  initialize: function() {
    
    this.render();
  },

  remove: function(){
    
    destroy_view(this);
  },

  render: function () {
    
    var loggedUser = gps.controllers.loginController.getLoggedUser();

    this.$(".user-name").html(loggedUser.username);

    if (gps.currentUser.isAuthorized()) {
      var env = this.$(".environment");

      if (!gps.controllers.securityController.isAuthorized(loggedUser, env, "environment")) {
        env.addClass('hide')
      }
      else {
        var curr_id = localStorage.getItem("environment");

        env
          .removeClass("hide")
          .addClass(curr_id)
          .find("span")
          .text(curr_id);
      }
    }
  },

  userPicture: function( event ) {
    
    var $image = this.$(".user img"),
    actionSheet, cameraOptions;

    event.stopPropagation();

    if ( window.plugins ) {
      actionSheet = window.plugins.actionSheet;

      var actionSheetOptions = {
        title: "GPS App",
        items: ["Take a photo", "Add an existing photo", "Delete photo"],
        destructiveButtonIndex: 2
      };

      // Basic with title
      actionSheet.create(actionSheetOptions, function(buttonValue, buttonIndex) {
        function cameraSuccess( data ) {
          $image.attr("src", "data:image/jpeg;base64," + data);
          $image.show();
        }

        function cameraError() {}

        cameraOptions = {
          quality : 75,
          destinationType : Camera.DestinationType.DATA_URL,
          allowEdit : true,
          encodingType: Camera.EncodingType.JPEG,
          targetWidth: 46 * 2,
          targetHeight: 46 * 2,
          popoverOptions: CameraPopoverOptions,
          saveToPhotoAlbum: false
        };

        if ( buttonIndex === 0 ) {

          cameraOptions.sourceType = Camera.PictureSourceType.CAMERA;
          navigator.camera.getPicture( cameraSuccess, cameraError, cameraOptions );
          return;
        }

        if ( buttonIndex === 1 ) {

          cameraOptions.sourceType = Camera.PictureSourceType.PHOTOLIBRARY;
          navigator.camera.getPicture( cameraSuccess, cameraError, cameraOptions );
          return;
        }

        if ( buttonIndex === 2 ) {

          $image.hide();
          return;
        }
      });
    }
  },

  /**
  * Show or hide the left sidebar of the app.
  * @return {boolean} Whether the sidebar is visible or not after this function call.
  */
  toggleLeftSideBar: function() {
    this.$leftSideBar = this.$leftSideBar || $('#left-sidebar');
    this.$logoContainer = this.$logo = this.$('.sidebar-info-app');
    var isVisible = this.$leftSideBar.css('display') !== 'none';

    if (isVisible) {
      this.$leftSideBar.css('display', 'none');
      //here we return the absolute positioned logo to its original position.
      this.$logo.css('left', '6px');
    } else {
      this.$leftSideBar.css('display', 'block');
      //here we move the absolute positioned logo with the left-sidebar.
      this.$logo.css('left', '267px');
    }

    return !isVisible;
  }

});
gps.SubHeaderView = Backbone.View.extend({

  generalEvents: {
    "tap #save-backlog-btn": "saveBacklog",
    "tap #update-backlog-btn": "updateBacklog",
    "tap #remove-backlog-btn": "removeBacklog",

    "tap #remove-backlog-assessment-btn": "removeBacklogAssessment",
    "tap #show-assessment-result-btn": "showAssessmentResults",
    "tap #close-assessment-result-btn": "hideAssessmentResults",
    "tap #modifyEnd-btn": "changeAssessmentEndDate",

    "tap #save-backlog-story-btn": "saveBacklogStory",
    "tap #update-backlog-story-btn": "updateBacklogStory",
    "tap #remove-backlog-story-btn": "removeBacklogStory",
    "tap #add-task-btn": "addTask",

    "tap #save-client-btn": "saveClient",
    "tap #update-client-btn": "updateClient",
    "tap #remove-client-btn": "removeClient",

    "tap #save-client-user-btn": "saveClientUser",
    "tap #update-client-user-btn": "updateClientUser",
    "tap #remove-client-user-btn": "removeClientUser",

    "tap #save-client-team-btn": "saveClientTeam",
    "tap #update-client-team-btn": "updateClientTeam",
    "tap #remove-client-team-btn": "removeClientTeam",

    "tap #save-org-team-btn": "saveClientOrg",
    "tap #update-org-team-btn": "updateClientOrg",

    "tap #endAssessment-btn": "endAssessment",

    "tap #list-teams-btn": "listTeams",
    "tap #org-details-btn": "orgDetails"
  },

  events: function(){

    return gps.util.getEvents (
      [{
        "touchstart #cancel-btn": "goBack"
      },{
        "touchstart #save-backlog-assessment-btn": "saveBacklogAssessment"
      }],

      [{
        "click #cancel-btn": "goBack"
      },{
        "click #save-backlog-assessment-btn": "saveBacklogAssessment"
      }],

      this.generalEvents);
  },

  initialize: function(options) {

    if (options)
      this.html_template = options.template ? options.template : "";
    $(".nav-head").html( this.render().el );
  },

  /*
   I'm going to change the template of the header ( all the html ).
   this function removes all the events of the previous html and then will apply the tmplate.
   Finally will enable the evetns again.
   */
  changeTemplate: function( html_template ){

    destroy_view(gps.views.subHeader);
    gps.views.subHeader = new gps.SubHeaderView({template:html_template});
    //$(".nav-head").html( gps.views.subHeader.render().el );
  },

  render: function(){

    this.$el.html(this.html_template);
    return this;
  },

  remove: function(){

    console.warn("[subheader]","onRemove");
    destroy_view(this);
  },

  saveBacklog: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.backlogsAdd.save();

    return false;
  },

  updateBacklog: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.backlogsUpdate.update();

    return false;
  },

  removeBacklog: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.backlogsUpdate.delete();

    return false;
  },

  saveBacklogAssessment: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.eventManager.trigger("saveBacklogAssesment",event);

  },

  removeBacklogAssessment: function( event ) {

    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateBacklogAssessmentView.delete();
  },

  showAssessmentResults: function( event ) {

    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateBacklogAssessmentView.showResults();
  },

  hideAssessmentResults: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateBacklogAssessmentView.hideResults();
  },

  saveBacklogStory: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.addBacklogStoryView.save();

  },

  updateBacklogStory: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateBacklogStoryView.update();
  },

  removeBacklogStory: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateBacklogStoryView.delete();
  },

  addTask: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateBacklogStoryView.addTask();
  },

  saveClient: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.clientsAdd.save();

    return false;
  },

  updateClient: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.clientsUpdate.update();

    return false;
  },

  removeClient: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.clientsUpdate.delete();

    return false;
  },

  saveUserClient: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.addClientUserView.save();

    return false;
  },

  saveClientUser: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.addClientUserView.save();

    return false;
  },

  updateClientUser: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateClientUserView.update();

    return false;
  },

  endAssessment: function ( event ){

    if ( event ) {
      event.preventDefault();
    }

    gps.eventManager.trigger("endAssessment",event);
  },

  changeAssessmentEndDate: function( event ){

    if ( event ) {
      event.preventDefault();
    }

    gps.eventManager.trigger("changeAssessmentEndDate",event);
  },

  removeClientUser: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateClientUserView.delete();

    return false;
  },

  saveClientTeam: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.addClientTeamView.save();

    return false;
  },

  updateClientTeam: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateClientTeamView.update();

    return false;
  },

  removeClientTeam: function( event ) {
    if ( event ) {
      event.preventDefault();
    }

    gps.views.updateClientTeamView.delete();

    return false;
  },

  saveClientOrg: function( event ){
    if ( event ) {
      event.preventDefault();
    }
    gps.views.AddClientOrganizationView.save(event);
  },

  updateClientOrg: function( event ){
    if ( event ) {
      event.preventDefault();
    }
    gps.views.UpdateClientOrganizationView.save(event);
  },

  listTeams: function( event ){
    if ( event ) {
      event.preventDefault();
    }
    gps.views.UpdateClientOrganizationView.showListTeams(event);
  },

  orgDetails: function( event ){
    if ( event ) {
      event.preventDefault();
    }
    gps.views.UpdateClientOrganizationView.showOrgDetails(event);
  },

  goBack: function( event ) {
    var confirmed;

    /* this should not be placed here because I want to propage this event when
     people do changes*/

    event.stopImmediatePropagation();
    event.stopPropagation();
    event.preventDefault();

    if ( !gps.formChanged ) {
      //window.history.back();
      //seems to be a issue with the windows.history.back function when displaying assessments and stories.
      //then the back button do not work as expected.

      //window.setTimeout(function(){
      window.history.back()
      //},400); //we need to correct this!
    } else {
      changesMade(event);
    }
  }

});
gps.ReportView = Backbone.View.extend({

  className: "trends-report-section",

  events: {
    'tap .trends-report-left-finding-brief-edit': 'editFindingBrief',
    'change .trends-report-top-recommendations .input': 'validateMaxLength',
    'tap .trends-report-top-recommendation-container': 'editRecommendation',
    'blur .trends-report-top-recommendations.input': 'updateRecommendationLabel',
    'tap .trends-report-generate-button': 'generatePDFReport',
    'tap .trends-report-all-button': 'goToAllReports',
    'tap .trends-report-previous-button': 'goToPreviousReport',
    'change .trends-report-left-finding-brief-edit-section': 'componentChanged',
    'tap .trends-report-table-data-container': 'toggleRecommendation'
  },

  COLORS: ['#ee162d', '#00a65b', '#ffe344', '#00afe9', '#615da3',
    '#f28034', '#00356d', '#cb6dc9', '#8c623f', '#a0d04d'],

  constants: {
    EDIT_BRIEF : 'EDIT BRIEF',
    UPDATE_BRIEF : 'UPDATE BRIEF',
    INPUT_LIMIT: 25,
    ERROR_CLASS: 'error',
    JANUARY: 0,
    MARCH: 2,
    JUNE: 5,
    SEPTEMBER: 8
  },

  initialize: function(options) {
    this.hf  = gps.handlebarsCompileFactory;
    this.trc = gps.controllers.trendReportController;
    this.rc  = gps.controllers.reportController;

    this.currentReport  = options.report;
    this.currentBacklog = options.gpsBacklog;
    this.template = this.hf.get('#trends-report');
    this.leftSectionTemplate = this.hf.get('#trends-report-left-section');
    this.legendSectionTemplate = this.hf.get('#trends-report-legend-section');
    this.indexTrendTemplate = this.hf.get('#trends-report-index-trend');
    this.trendsSustainabilityTemplate = this.hf.get('#trends-report-trends-sustainability');
    this.topRecommendationsTemplate   = this.hf.get('#trends-report-top-recommendations');

    Backbone.on('selectedItemCombo', this.componentChanged, this);
  },

  render: function() {
    var trendReport          = this.currentReport,
        indexingTrends       = trendReport.getIndexingTrendsTableInfo(),
        trendsSustainability = trendReport.getTrendsTowardsSustainability(),
        previousReportId     = this.getPreviousReportId();

    this.headers = indexingTrends.headers;
    this.currAssessments = trendReport.getIndexes();
    this.transformCurrentAssessments();

    this.$el.html(this.template({backlog: this.currentBacklog.toJSON(), previousReportId: previousReportId}));
    this.$('.trends-report-left-section').html(this.leftSectionTemplate());
    this.$('.trends-report-right-top-section').html(this.legendSectionTemplate({indexes: this.currAssessments}));
    this.$('.trends-report-right-indexing-trends').html(this.indexTrendTemplate(indexingTrends));
    this.$('.trends-report-right-trends-sustainability').html(this.trendsSustainabilityTemplate());

    Backbone.on('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction);
    gps.views.header.showButtons([
      gps.views.header.availableButtons.back_button
    ]);

    this.renderTopRecommendations();
    this.renderDonutCharts();
    this.renderComboBoxes ();
    this.renderBreadCrumbs();
    this.renderLinesChart(trendsSustainability);
    this.renderSpiderChart();
    this.renderBrief();

  },

  remove: function() {
    this.removeMaturityComboBoxes();
    Backbone.off('gps.views.header:onBackButton', gps.views.header.onBackButtonDefaultAction, this);
    destroy_view(this);
  },

  /**
   * Function that remove the combo boxes components used in this view.
   * @return {void}.
   */
  removeMaturityComboBoxes: function() {
    this.maturityLevelComboBoxView && this.maturityLevelComboBoxView.remove();
    this.organizationalMaturityLevelComboBox && this.organizationalMaturityLevelComboBox.remove();
    this.maturityLevelComboBoxView = null;
    this.organizationalMaturityLevelComboBox = this.maturityLevelComboBoxView;
    Backbone.off('selectedItemCombo', this.componentChanged, this);
  },

  /**
   * Function that returns the previousReportId depending on the current
   * report being shown.
   * @return {String} previousReportId - The id of the previous report, it returns undefined if
   * the report being shown is a new one or if there are no previous report to show.
   */
  getPreviousReportId: function(){
    var previousReportId;
    if(this.currentReport.get('created')){
      var trendsReport = this.currentBacklog.getTrendReports();
      trendsReport = _.sortBy(trendsReport.models, "created");
      for(var i = 0; i < trendsReport.length; i++){
        if(trendsReport[i].get('objectId') === this.currentReport.get('objectId')){

          if(trendsReport[i+1]){
            previousReportId = trendsReport[i+1].get('objectId');
          }else{
            previousReportId = undefined;
          }
        }
      }
    }else{
      previousReportId = undefined;
    }
    return previousReportId;
  },

  /**
   * Function that transform the data coming from the model to adapt for the rules
   * of the view.
   * @param {object} topRecommendations - object with data from the model.
   * @return {object} topRecommendations - object with object.columns and an empty array
   * to achieve the correct rendering of the view.
   */
  transformTopRecommentionForView: function(topRecommendations) {
    topRecommendations = this.fillTopRecommendationData(topRecommendations);
    topRecommendations = this.mapColumnsDependingOnDate(topRecommendations);
    topRecommendations.fourLengthArray = new Array(4);
    return topRecommendations;
  },

  /**
   * Function that transform gpsAssessments into an array of json, it also
   * put the proper colors for assessments in the json.
   * @return {void}.
   */
  transformCurrentAssessments: function() {

    this.currAssessments = _.map(this.currAssessments.models, function(assessment) {
      return assessment.toJSON();
    });

    this.setColors();
  },

  /**
   * Function that depending on the number of data coming in the parameter
   * object it fills it with empty objects until its length is 5 (the number
   * of columns to paint in the view).
   * @param {object} topRecommendations - object with data from the model.
   * @return {object} topRecommendations - same object in case it has length 5 if
   * not then is the object coming from the parameters with addition of n objects
   * where n depends on the length of the passed object.
   */
  fillTopRecommendationData: function(topRecommendations) {
    var dummyDataLength = 5 - topRecommendations.length;
    for (var i = 0; i < dummyDataLength; i++) {
      topRecommendations.push({});
    }
    return topRecommendations;
  },

  /**
   * Function that adds a column attribute depending on the
   * date attribute of the parameter object.
   * @param {object} data - data object with an attribute date.
   * @return {return} data - same object with a new attribute column.
   */
  mapColumnsDependingOnDate: function(data) {
    return _.map(data, function(d) {

      d.column = d.index;
      return d;
    }.bind(this));
  },

  /**
   * Function that renders the donut charts to be used in this view.
   * @param {data} data - The data value to be represented in the donut chart.
   * @return {void}.
   */
  renderDonutCharts: function(data) {
    gps.charts.donutChart.draw('.trends-report-left-target-graph', [{
      value: 67,
      color: '#FDCD00',
      middleText: 'TARGET',
      biggerDimension: 40
    }]);
    gps.charts.donutChart.draw('.trends-report-left-current-graph', [{
      value: 44,
      color: '#FFFFFF',
      middleText: 'CURRENT',
      biggerDimension: 40
    }]);
  },

  /**
   * Function to render the actual brief coming from the model.
   * @return {void}.
   */
  renderBrief: function() {
    this.$('.trends-report-left-finding-brief-text').text(this.currentReport.getFindingBrief());
  },

  renderTopRecommendations: function() {

    var topRecommendations = this.currentReport.getTopRecommendations();
    topRecommendations = topRecommendations.toJSON();
    topRecommendations = this.transformTopRecommentionForView(topRecommendations);

    this.$('.trends-report-right-top-recomendations').html(this.topRecommendationsTemplate({
      headers: this.headers,
      topRecommendations: topRecommendations
    }));
  },

  /**
   * Function that renders the combo boxes components to be used in this view.
   * @return {void}.
   */
  renderComboBoxes: function() {
    var maturityLevels = this.currentReport.maturityLevels;
    var object = {};
    var comboData = _.map(maturityLevels, function(maturity) {
      object = {};
      object[maturity.toLowerCase()] = maturity;
      return object;
    });

    //populates the current selection stored in this.currentReport
    var mLSelection = {}, orgMLSelection = {};
    mLSelection[this.currentReport.getTeamMaturity().toLocaleLowerCase()]
      = this.currentReport.getTeamMaturity();
    orgMLSelection[this.currentReport.getOrganizationMaturity().toLocaleLowerCase()]
      = this.currentReport.getOrganizationMaturity();

    this.maturityLevelComboBoxView = new gps.ComboBox({
      data: comboData
    });

    this.organizationalMaturityLevelComboBox = new gps.ComboBox({
      data: comboData
    });

    this.$el.find('.trends-report-left-maturity-combo').append(this.maturityLevelComboBoxView.render(mLSelection).el);
    this.$el.find('.trends-report-left-level-combo').append(this.organizationalMaturityLevelComboBox.render(orgMLSelection).el);
  },

  /**
   * Function that renders the bread crumbs for this view.
   * @return {void}.
   */
  renderBreadCrumbs: function() {
    levels = [{
      name: 'Improvement Plans',
      url: '#backlogs'
    }, {
      name: "Trends Report"
    }];

    gps.views.header.setBreadcrumbs(levels);
  },

  /**
   * Function that renders the line chart.
   * @param {object} data - incoming data from the model.
   * @return {void}.
   */
  renderLinesChart: function(data) {
    var dataWithColumns = this.mapColumnsDependingOnDate(data);
        dataWithColumns = _.sortBy(dataWithColumns, "column");
    var lineChartData   = _.map(dataWithColumns, function(data) {
      return {
        value: data.val
      };
    });
    gps.charts.lineChart.draw('.trends-report-right-trends-graph', lineChartData);
  },

  /**
   * Function to render the spider chart of the report, it handles the
   * configuration parameters.
   * @return {void}.
   */
  renderSpiderChart: function() {
    this.spiderChartConfig = this.spiderChartConfig || {
      w: 200,
      h: 200,
      factor: 1,
      factorLegend: 0.85,
      textAxesCustomSpacing: 40
    };
    gps.charts.spiderChart.draw('.trends-report-right-spider-graph', this.getSpiderChartData(), [], this.spiderChartConfig);
  },

  /**
   * Function to get the data and transform it in order to correctly show it
   * in the spider chart.
   * @return {object} spiderChartData - The data to use for the spider chart.
   */
  getSpiderChartData: function() {
    var spiderChartData = this.rc.
    getAssessmentReport('Overall',
      this.currAssessments,
      this.currentBacklog.id);

    for (var i in spiderChartData) {
      for (var discipline in spiderChartData[i]) {
        spiderChartData[discipline] = spiderChartData[discipline] ? spiderChartData[discipline] : [];
        spiderChartData[discipline].push({
          "axis": i,
          "value": spiderChartData[i][discipline].total / 100,
          "color": spiderChartData[i][discipline].color
        });
      }
    }

    return spiderChartData;
  },

  /**
   * Function to map the attribute color to the current assessment objects.
   * @return {void}.
   */
  setColors: function() {

    function updateColors(arrayColors, amount) {
      for (var i = 0; i < amount; i++) {
        arrayColors[i] = gps.util.desaturateColor(arrayColors[i]);
      }
    }

    var arrayColors = this.COLORS ? this.COLORS.slice() : [],
      amount, index = 0;

    for (var assess in this.currAssessments) {

      if (index == 10) {
        index = 0;

        amount = (this.currAssessments.length - assess) < 10 ? this.currAssessments.length - assess : 10;
        updateColors(arrayColors, amount);
      }
      this.currAssessments[assess].color = arrayColors[index++];
    }
  },

  /**
   * Function that converts the brief <p> in a <textarea> to be edited.
   * @param {object} event - the event that trigger this function.
   * @return {void}.
   */
  editFindingBrief: function(event) {
    var $editButton = $(event.currentTarget);

    if ($editButton.text() !== this.constants.EDIT_BRIEF) {
      var text = this.$('.trends-report-left-finding-brief-edit-section').val();
      this.saveFindingBrief(text, $editButton);
    } else {
      var $briefParagraph = this.$('.trends-report-left-finding-brief-text'),
          briefText       = $briefParagraph.text(),
          $textArea       = $('<textarea></textarea>').attr('class', 'trends-report-left-finding-brief-edit-section');
      $textArea.val(briefText);
      $editButton.text(this.constants.UPDATE_BRIEF);
      $briefParagraph.replaceWith($textArea);
    }
  },

  /**
   * Function that updates the brief in the view as a preview.
   * @param {String} findingBriefText - the text to be updated in the brief.
   * @param {object} $findingBriefButton - the button that trigger this action.
   * @return {void}.
   */
  saveFindingBrief: function(findingBriefText, $findingBriefButton) {
    var $briefParagraph = $('<p></p>');

    $briefParagraph.text(findingBriefText);
    $briefParagraph.attr('class', 'trends-report-left-finding-brief-text');
    this.$('.trends-report-left-finding-brief-edit-section').replaceWith($briefParagraph);
    $findingBriefButton.text(this.constants.EDIT_BRIEF);

    this.currentReport.setFindingBrief(findingBriefText);
  },

  /**
   * Function to validate the max length of the top recommendations input.
   * @param {object} event - the event that trigger this Function.
   * @return {void}.
   */
  validateMaxLength: function(event) {
    var $input = $(event.currentTarget);

    if ($input.val().length > this.constants.INPUT_LIMIT) {
      $input.addClass(this.constants.ERROR_CLASS);
    } else {
      $input.removeClass(this.constants.ERROR_CLASS);
    }
    this.componentChanged();
    return !$input.hasClass(this.constants.ERROR_CLASS);
  },

  /**
   * Function that converts the label of top recommendation into an
   * input, the text of the label appears in the input.
   * @param {object} event - The event that triggers this function.
   * @return {void}.
   */
  editRecommendation: function(event){
    var $element = $(event.currentTarget);
    var $label = $element.find('.trends-report-top-recommendations');
    if(!$label.hasClass('input')) {
      var recommendationText = $label.text().trim();

      var $input = $('<input>').addClass('trends-report-top-recommendations input').val(recommendationText);
      $label.replaceWith($input);
      $input.focus();
    }
  },

  /**
   * Function that change the recommendation input into a label
   * the label text will be the one that was in the input.
   * @param {object} event - The event that triggers this function.
   * @return {void}.
   */
  updateRecommendationLabel: function(event) {
    if (this.validateMaxLength(event)) {
      var $element = $(event.currentTarget);
      var recommendationText = $element.val();
      var $label = $('<div>').addClass('trends-report-top-recommendations').text(recommendationText);

      var index  = $element.closest('tr').index();
      this.currentReport.getTopRecommendations().at(index -1).setDescription(recommendationText);
      $element.replaceWith($label);
    }
  },

  /**
   * Function to generate the PDF report.
   * @param {object} event - the event that trigger this Function.
   * @return {void}.
   */
  generatePDFReport: function(event) {
    var isAnyComboSelected = this.maturityLevelComboBoxView.getSelectedVal() !== 'none' ||
      this.organizationalMaturityLevelComboBox.getSelectedVal() !== 'none';


    // I hate state variables as this.generate, but it's the only way we could
    // know if any of the editable components were edited.
    if (false) {

      this.currentReport.setTeamMaturityLevel( this.maturityLevelComboBoxView.getSelectedVal());
      this.currentReport.setOrgMaturityLevel(this.organizationalMaturityLevelComboBox.getSelectedVal());
      this.currentBacklog.addTrendReport(this.currentReport);
      this.currentBacklog.save('trend_reports', this.currentBacklog.get('trend_reports'), {
        success: function(model, result) {

          gps.controllers.backlogController.updateTrendReportsLocally(this.currentBacklog.id, model.get('trend_reports'));
        }.bind(this),
        error: function() {
          alert("something is not working correctly with the server");
        },
        remote_ignore: ['stories.comments', 'stories', 'assessments', 'indexes']
      });
    } else {
      var a = document.documentElement.outerHTML;

      $.ajax({
        type: "POST",
        url: 'http://exporthtmlto-bixsolutions.rhcloud.com/hashmap.php',
        crossDomain: true,
        data: {key: 'test',
               value: a},
        success: function(d) {
          console.log("success");
        }
      });
      /*alert("please meet all the restrictions"); */
    }
  },

  /**
   * Function that validate if the inputs has the correct state to generate the PDF report.
   * @return {void}.
   */
  validateInputsText: function() {
    var $inputs = $('.trends-report-top-recommendations-input'),
        isValid = true,
        _this   = this,
        $tempInput;

    $inputs.each(function() {
      $tempInput = $(this);
      isValid = isValid && $tempInput.val().length > 0 && !$tempInput.hasClass(_this.constants.ERROR_CLASS);
    });

    return isValid;
  },

  goToAllReports: function(event) {
    // To be implemented.
  },

  goToPreviousReport: function(event) {
    // To be implemented.
  },

  /**
   * Function that is triggered when a editable component changed.
   * @param {object} event - The event that trigger this function.
   * @return {void}.
   */
  componentChanged: function(event) {
    this.editableChanged = true;
  },

  /**
   * Function to toggle the circle component in the top recommendations.
   * @param {object} event - The event that triggers this function.
   * @return {void}.
   */
  toggleRecommendation: function(event) {
    this.componentChanged();
    var $element = $(event.currentTarget);

    var rowIndex = $element.closest('tr').index();
    var columnIndex    = $element.closest('tr').children().index($element);
    var recommendation = this.currentReport.getTopRecommendations().at(rowIndex -1);

    if (recommendation.getIndex() === columnIndex -1) {
      recommendation.setIndex(-1);
    } else {
      recommendation.setIndex(columnIndex -1);
    }

    this.renderTopRecommendations();
  },

  /**
   * Function to construct the circle component.
   * @return {void}.
   */
  constructCircleComponent: function() {
    var $container   = $('<div>').addClass('trends-report-right-top-recommendations-circle-container'),
        $outerCircle = $('<div>').addClass('trends-report-right-top-recomendations-outer-circle'),
        $innerCircle = $('<div>').addClass('trends-report-right-top-recomendations-inner-circle');

    $container.append($outerCircle);
    $outerCircle.append($innerCircle);
    return $container;
  }
});
// Show "Settings View"
// This will show the application Settings
gps.SettingsView = Backbone.View.extend({

  initialize: function() {
    if (gps.currentUser.isAuthorized()) {
      this.pageTemplate = Handlebars.compile($("#new-settings").html());
      this.changePasswordTemplate = Handlebars.compile($("#new-change-pass").html());
      Backbone.on("selectedItemCombo", this.changeEnvironment, this);
    }
  },

  getEnvTemplate: function() {

    return this.envTemplate || (this.envTemplate = Handlebars.compile( $("#new-settings-env").html() ));
  },

  render: function (eventName) {
    // Render the page template
    this.$el.html(this.pageTemplate());

    var $envList = this.$(".combo-main");
    gps.views.header.removePreviousComponents();
    gps.views.header.showButtons([gps.views.header.availableButtons.logout_button]);

    // Set breadcrumbs
    var levels = [{
      name: "Settings"
    }];

    var loggedUser = gps.controllers.loginController.getLoggedUser();
    if (gps.controllers.securityController.isAuthorized(loggedUser, $envList, ".combo-main")) {
      this.$el.append(this.getEnvTemplate());
      this.renderEnvComboBox();
    }

    if( gps.environment.onProdEnv() ) {
      $(this.el).append(this.changePasswordTemplate());
    }

    gps.views.header.setBreadcrumbs( levels );
    return this;
  },

  renderEnvComboBox: function () {
    var envArray = [];

    _.each(_.keys(gps.settings),function( env ) {
      var option = {};
      option[env] = env;
      envArray.push(option);
    });

    var options = { data : envArray };
    this.comboView = new gps.ComboBox( options );

    var selected = {},
        itemId = gps.environment.getCurrEnvName();
    selected[itemId] = itemId;

    this.$el.find('#environment-selector').append(this.comboView.render(selected).el);
  },

  changeEnvironment: function(env) {
    gps.environment.changeEnv(env);
  },

  remove: function() {
    Backbone.off("selectedItemCombo", this.changeEnvironment, this);
    destroy_view(this);
  }
});
// Router
gps.AppRouter = Backbone.Router.extend({

  routes: {
    // Login
    "": "login",

    // Dashboard
    "dashboard": "dashboard",
    "report" : "showReport",

    // Backlogs
    "backlogs": "backlogsList",
    "backlogs/add": "backlogsAdd",
    "backlogs/update/:id": "backlogsUpdate",

    "backlogs/:id/kanban":"backlogKanban",
    "backlogs/:id/list":"backlogList",
    "backlogs/:id/report":"backlogReport",

    "backlogs/:id/trend_reports/list" : "backlogTrendReportList",
    "backlogs/:id/trend_reports/add" : "backlogTrendReportAdd",
    "backlogs/:id/trend_reports/:id/update" : "backlogTrendReportUpdate",
    "backlogs/:id/trend_reports/:id/download" : "backlogTrendReportDownload",

    "backlogs/:id/assessments/add": "backlogAssessmentAdd",
    "backlogs/:id/assessments/edit/:id": "backlogAssessmentEdit",
    "backlogs/:id/assessments/update/:id": "backlogAssessmentUpdate",
    "backlogs/:id/assessments/update/comments/:id": "backlogAssessmentComments",
    "backlogs/:id/assessments/report/:id": "backlogAssessmentReport",
    "backlogs/:id/stories/add": "backlogStoryAdd",
    "backlogs/:id/stories/update/list/:id": "backlogStoryUpdate",
    "backlogs/:id/stories/update/kanban/:id": "backlogStoryKanban",
    "backlogs/:id/stories/update/comments/:id": "backlogStoryComments",

    // Clients
    "clients": "clientsList",
    "clients/add": "clientsAdd",
    "clients/update/:id": "clientsUpdate",
    "clients/:id/users/add": "clientUserAdd",
    "clients/:id/users/update/:userid": "clientUserUpdate",
    "clients/:id/:orgid/teams/add": "clientTeamAdd",

    "clients/:id/organizations/:id/teams/update/:teamid": "clientTeamUpdate",
    "clients/:id/organizations/add" : "clientOrganizationAdd",
    "clients/:id/organizations/update/:id" : "clientOrganizationUpdate",
    "clients/:id/organizations/update/:orgid": "clientOrganizationUpdate",

    // Settings
    "settings": "settings"
  },

  history: [],

  dashboardRegex : /(dashboard)/,

  backlogsListRegex : /((backlogs\/)(.*)(\/list))/,

  backlogReportRegex : /((backlogs\/)(.*)(\/report))/,

  backlogAssessmentUpdateRegex : /((backlogs\/)(.*)(\/assessments\/update\/)(.*))/,


  showReport: function() {

    this.changePage(new gps.ReportView(), true);
  },

  updateHistory: function(entry) {

    this.history.push(entry);
  },

  getCurrentURL: function() {

    return this.history.length ? this.history[this.history.length-1] : '';
  },

  onDashboard: function() {
    var url = this.getCurrentURL();
    return this.dashboardRegex.test(url);
  },

  onbacklogsList: function() {
    var url = this.getCurrentURL();
    return this.backlogsListRegex.test(url);
  },

  onbacklogReport: function() {
    var url = this.getCurrentURL();
    return this.backlogReportRegex.test(url);
  },

  onbacklogAssessmentUpdate: function() {
    var url = this.getCurrentURL();
    return this.backlogAssessmentUpdateRegex.test(url);
  },

  initialize: function( el ) {
    this.el = el;

    gps.views.loginView = new gps.LoginView({
      view: "#login-template"
    });

    gps.views.header    = new gps.HeaderView().render();
    gps.views.subHeader = new gps.SubHeaderView(); //needed for back compatibility.
    gps.views.sideBar   = new gps.SideBarView();
    this.$sidebar = $("#sidebar");
  },

  // Router helper functions
  changePage: function( view ) {

    var $login = $("#login"), $breadcrumbs;

    // When user is not logged in
    if (!gps.currentUser.isAuthorized()) {

      if ( gps.currentView ) {
        gps.currentView.remove();
        delete gps.currentView;
      }

      // Hide normal sections
      $("body > header").hide();
      $("body > .section").hide();

      // Render template and
      gps.views.loginView = new gps.LoginView({
        view: "#login-template"
      });

      $login.find(".window").html( gps.views.loginView.el );
      $login.removeClass("hide");

      gps.views.loginView.render();
      gps.currentView = gps.views.loginView;
      return;
    }

    // Just make sure form validation is resetted at this point
    gps.formChanged = false;

    // User is logged in
    // -----------------
    // List normal sections
    $("body > header").show();
    $("body > .section").show();

    // Reset the sub header
    gps.views.subHeader.changeTemplate("");

    // Reset the breadcrumbs
    $breadcrumbs = $("#header .breadcrumbs");
    $breadcrumbs.empty();

    // Hide login section
    $login.addClass("hide");

    // Detach and delete (by now) the old view
    if ( gps.currentView ) {
      gps.currentView.remove();
      delete gps.currentView;
    }

    this.el.html( view.el );

    // Move the view element into the DOM (replacing the old content)
    // Render view
    view.render();

    $(view.el).find("input").blur();
    $(view.el).find("textarea").blur();

    // Save a reference to the current view
    gps.currentView = view;
  },

  setCurrentSection: function( section ) {
    var $currentSection;

    // Reset active states for sections
    this.$sidebar.find(".sidebar-control-selectors li").removeClass("active");

    // Set section
    $currentSection = this.$sidebar.find(".sidebar-control-selectors li[class$='" + section + "']");
    $currentSection.addClass("active");
  },

  // Section-specific functions
  login: function() {
    if ( gps.currentUser.isAuthorized() ) {
      this.navigate( "dashboard", { trigger: true } );
    } else {
      this.changePage( gps.views.loginView );
    }
  },

  dashboard: function() {
    if (gps.views.dashboard) {
      delete gps.views.dashboard;
    }

    gps.views.dashboard = new gps.DashboardView({
      collection : gps.clients
    });

    this.changePage( gps.views.dashboard, true );
    this.setCurrentSection("dashboard");
  },

  backlogsList: function() {
    this.setCurrentSection("plans");

    gps.views.backlogs = new gps.BacklogsView({
      collection: gps.clients
    });

    this.changePage(gps.views.backlogs);
  },

  backlogsAdd: function() {
    if (gps.views.backlogsAdd) {
      delete gps.views.backlogsAdd;
    }

    gps.views.backlogsAdd = new gps.AddBacklogView({
      collection: gps.clients
    });

    this.changePage( gps.views.backlogsAdd, true );

    this.setCurrentSection("plans");
  },

  backlogsUpdate: function( id ) {
    var backlogInfo;

    if (gps.views.backlogsUpdate) {
      delete gps.views.backlogsUpdate;
    }

    backlogInfo = gps.controllers.backlogController.getBacklog(id);

    gps.views.backlogsUpdate = new gps.UpdateBacklogView({
      clientID:backlogInfo.clientId,
      organizationID:backlogInfo.organizationID,
      teamID:backlogInfo.teamId,
      model: new gps.models.Backlog(backlogInfo.backlog)
    });

    this.changePage( gps.views.backlogsUpdate, false );

    this.setCurrentSection("plans");
  },

  backlogKanban: function() {
    if (gps.views.backlogsKanban) {
      delete gps.views.backlogsKanban;
    }

    gps.views.backlogsKanban = new gps.BacklogsKanban({
      collection: gps.backlogs
    });

    this.changePage( gps.views.backlogsKanban, true );

    this.setCurrentSection("plans");
  },

  backlogList: function( id ) {
    var backlogController = gps.controllers.backlogController,
      backlog = {},
      backlogInfo,
      backlogGps;

    if (gps.views.backlogsList) {
      delete gps.views.backlogsList;
    }

    backlog = (backlogInfo = backlogController.getBacklog(id)) && backlogInfo.backlog;
    backlogGps = new gps.models.Backlog(backlog);

    gps.views.backlogsList = new gps.BacklogsList({
      collection: gps.backlogs,
      model: backlogGps,
      backlog: backlog
    });

    this.changePage( gps.views.backlogsList, true );
    this.setCurrentSection("plans");
  },

  backlogReport: function( backlogID ) {

    var backlog = gps.controllers.backlogController.getBacklog(backlogID).backlog,
        backlogGps = new gps.models.Backlog(backlog);

    if ( !backlogGps.hasAllAssessmentsFetched() ){
      backlogGps.fetch({
        success: function(model) {
          var assessments = model.getAssessments();
          assessmentCol = new gps.collections.Assessments(assessments);
          assessmentCol.setFetched();
          backlog.assessments = assessments;

          gps.views.backlogReportView = new gps.BacklogReportView({
            backlog: model
          });

          this.changePage( gps.views.backlogReportView, false );
        }.bind(this),
        error: function(model, error) {
          gps.util.showError(model, error);
          window.history.back();
        }
      });
    }
    else {
      gps.views.backlogReportView = new gps.BacklogReportView({
        backlog: backlogGps
      });

      this.changePage( gps.views.backlogReportView, false );
    }
  },

  backlogTrendReportList: function(backlogId) {
    var backlog = gps.controllers.backlogController.getBacklog(backlogId).backlog,
        backlogGps = new gps.models.Backlog(backlog);

    gps.views.trendReportListView = new gps.TrendReportListView({
      model: backlogGps,
      collection: backlogGps.getTrendReports()//backbone collection of reports related with the current backlog
    });

    this.changePage(gps.views.trendReportListView);
  },

  /**
   * Creates a new trend report and then
   * display it using gps.ReportView
   * @param backlogID
   */
  backlogTrendReportAdd: function(backlogID) {

    this.trc = this.trc || gps.controllers.trendReportController;
    this.bc  = this.bc  || gps.controllers.backlogController;

    var backlog     = this.bc.getGpsBacklog(backlogID),
        trendReport = this.trc.createNewReport(backlog);

    this.changePage(new gps.ReportView({report: trendReport, gpsBacklog: backlog}), true);
  },

  backlogTrendReportUpdate: function(backlogId, trendReportId) {

    this.bc  = this.bc  || gps.controllers.backlogController;

    var backlog     = this.bc.getGpsBacklog(backlogId),
        trendReport = backlog.getTrendReport(trendReportId);

    this.changePage(new gps.ReportView({report: trendReport, gpsBacklog: backlog}), true);
  },

  backlogTrendReportDownload: function(backlogId, trendReportId) {

  },

  backlogAssessmentAdd: function( backlogID ) {

    gps.views.addBacklogAssessmentView = new gps.AddBacklogAssessmentView({
      backlogID: backlogID
    });

    this.changePage( gps.views.addBacklogAssessmentView, false );
  },

  backlogAssessmentEdit: function( backlogID, assessmentID) {

    if (!gps.backlogAssessments) {
      gps.router.navigate("" , true);
      return;
    }

    var model = gps.backlogAssessments.get( assessmentID );
    gps.views.editBacklogAssessmentView = new gps.EditBacklogAssessmentView({
      collection: gps.backlogAssessments,
      model: model,
      backlogID: backlogID
    });

    this.changePage( gps.views.editBacklogAssessmentView, false );
  },

  backlogAssessmentUpdate: function( backlogID, assessmentID ) {

    // Get the assessment model
    if (!gps.backlogAssessments) {
      gps.router.navigate("" , true);
      return;
    }

    var model  = gps.backlogAssessments.get(assessmentID),
        status = model.get("status");

    var startEditing = function(themodel) {
      gps.views.updateBacklogAssessmentView = new gps.UpdateBacklogAssessmentView({
        collection: gps.backlogAssessments,
        model: themodel,
        backlogID: backlogID
      });

      this.changePage( gps.views.updateBacklogAssessmentView, false, true );
    }.bind(this);

    var updateBacklog = function(local,fromServer){

      var backlog = gps.controllers.backlogController.getGpsBacklog(backlogID);
      backlog.updateBacklogLocally(fromServer);
      startEditing(fromServer);
    };

    if (!status){   //if there is no status => I can say this is started and WIP ( work in progress )
      model.setStatus_Wip(updateBacklog);
      return;
    }
    else if (model.isFinished() && this.onbacklogsList()){
      //alert when the assessment is first opened
      alert("You are viewing a Closed Assessment and cannot change the answers or the notes.","Close");
    }

    startEditing(model);
  },

  backlogAssessmentComments: function(backlogId, assessmentId) {

    var assessmentGps = gps.backlogAssessments.get(assessmentId),
        backlogGps = gps.controllers.backlogController.getGpsBacklog(backlogId),
        commentsInfoCol = gps.controllers.assessmentController.getAllComments(assessmentGps);

    gps.views.backlogAssessmentCommentView = new gps.BacklogAssessmentCommentView({
      collection: commentsInfoCol,
      assessmentGps: assessmentGps,
      backlogGps: backlogGps
    });

    this.changePage( gps.views.backlogAssessmentCommentView , false, false );
  },

  backlogAssessmentReport: function(backlogId, assessmentId) {
    var backlog = gps.controllers.backlogController.getBacklog(backlogId).backlog,
        backlogGps = new gps.models.Backlog(backlog);

    gps.views.backlogAssessmentReportView = new gps.BacklogAssessmentReportView({
      backlogGps: backlogGps,
      assessmentGps: backlogGps.getAssessment(assessmentId)
    });

    this.changePage(gps.views.backlogAssessmentReportView, false);
  },

  backlogStoryAdd: function( backlogID ) {
    gps.views.addBacklogStoryView = new gps.AddBacklogStoryView({
      backlogID: backlogID
    });

    this.changePage( gps.views.addBacklogStoryView, false );
  },

  backlogStoryUpdate: function( backlogID, storyID ) {
    if (!gps.backlogStories){
      gps.router.navigate("" , true);
      return;
    }

    // Get the assessment model
    var model = gps.backlogStories.get( storyID ) ;

    gps.views.updateBacklogStoryView = new gps.UpdateBacklogStoryView({
      collection: gps.backlogStories,
      model: model,
      backlogID: backlogID
    });

    this.changePage( gps.views.updateBacklogStoryView, false );
  },

  backlogStoryKanban: function( backlogID, storyID ) {
    if (!gps.backlogStories){
      gps.router.navigate("" , true);
      return;
    }

    // Get the assessment model
    var model = gps.backlogStories.get( storyID );
    var tasks = model.get("tasks");

    // cheking if there are tasks inside the story, if not => I created an empty task list.
    tasks = tasks ? new gps.collections.Stories( tasks ) : new gps.collections.Stories();

    gps.views.updateBacklogStoryKanbanView = new gps.UpdateBacklogStoryKanbanView({
      collection: tasks,
      model: model,
      backlogID: backlogID
    });

    this.changePage( gps.views.updateBacklogStoryKanbanView, false );
  },

  backlogStoryComments : function( backlogId, storyId ) {
    var storyGps = gps.backlogStories.get(storyId) ;

    gps.views.backlogStoryCommentListView = new gps.BacklogStoryCommentListView({
      storyGps: storyGps,
      backlogId: backlogId
    });

    this.changePage( gps.views.backlogStoryCommentListView, false );
  },

  clientsList: function() {
    if (gps.views.clientsList) {
      delete gps.views.clientsList;
    }

    gps.views.clientsList = new gps.ClientsView({
      collection: gps.clients
    });

    this.changePage( gps.views.clientsList, true );

    this.setCurrentSection("clients");
  },

  clientsAdd: function() {
    if (gps.views.clientsAdd) {
      delete gps.views.clientsAdd;
    }

    gps.views.clientsAdd = new gps.AddClientView({
      collection: gps.clients,
      router: this
    });

    this.changePage( gps.views.clientsAdd, false );
  },

  clientsUpdate: function ( id ) {
    var model;

    if (gps.views.clientsUpdate) {
      delete gps.views.clientsUpdate;
    }

    model = gps.clients.get( id );

    gps.views.clientsUpdate = new gps.UpdateClientView({
      collection: gps.clients,
      router: this,
      model: model
    });

    this.changePage( gps.views.clientsUpdate, false );
  },

  clientUserAdd: function( clientID ) {
    gps.views.addClientUserView = new gps.AddClientUserView({
      clientID: clientID
    });

    this.changePage( gps.views.addClientUserView, false );
  },

  clientUserUpdate: function( clientID, userID ) {

    // Get the user model
    var client = gps.clients.get( clientID ),
      user = new gps.models.User(client.getUser( userID ));

    gps.views.updateClientUserView = new gps.UpdateClientUserView({
      collection: gps.clientUsers,
      router: this,
      model: user,
      id: clientID
    });

    this.changePage( gps.views.updateClientUserView, false );
  },

  clientTeamAdd: function( clientID, orgID ) {
    gps.views.addClientTeamView = new gps.AddClientTeamView({
      clientID: clientID,
      orgID: orgID
    });

    this.changePage( gps.views.addClientTeamView, false );
  },

  clientTeamUpdate: function( clientID,orgID, teamID ) {
    // Get the team model
    var client = gps.clients.get( clientID),
        team   = client.getTeam(teamID,orgID);

    team = new gps.models.Team(team);
    gps.views.updateClientTeamView = new gps.UpdateClientTeamView({
      collection: gps.clientTeams, //this probably is going to give issues.
      model: team,
      clientID: clientID,
      orgID: orgID
    });

    this.changePage( gps.views.updateClientTeamView, false );
  },

  clientOrganizationAdd: function(clientID) {

    if (gps.views.AddClientOrganizationView) {
      delete gps.views.AddClientOrganizationView;
    }

    gps.views.AddClientOrganizationView = new gps.AddClientOrganizationView({
      clientID: clientID
    });

    this.changePage( gps.views.AddClientOrganizationView, false );
  },

  clientOrganizationUpdate: function(clientID,orgID) {

    if (gps.views.UpdateClientOrganizationView) {
      delete gps.views.UpdateClientOrganizationView;
    }

    gps.views.UpdateClientOrganizationView = new gps.UpdateClientOrganizationView({
      clientID: clientID,
      organizationID:orgID
    });

    this.changePage( gps.views.UpdateClientOrganizationView, false );
  },

  settings: function() {
    if (gps.views.settings) {
      gps.views.settings.remove();
      delete gps.views.settings;
    }

    gps.views.settings = new gps.SettingsView();

    this.changePage(gps.views.settings, true);
    this.setCurrentSection("settings");
  }
});
gps.changesMade = function(event){

  var $el = $(event.currentTarget),
    tagName = $el[0].tagName.toLowerCase(),
    href, confirmed;

  if ( tagName === 'a' ) {
    href = $el.attr('href');
  }

  if ( gps.formChanged ) {
    event.preventDefault();

    confirmed = confirm('There are unsaved changes, are you sure you\'d like to leave this view?');

    if ( confirmed ) {
      console.log('I will redirect you to', href);

      // If it's an anchor link we go to the url, otherwise it's just the 'cancel' button
      if ( href ) {
        gps.router.navigate( href, true );
      } else {
        window.history.back();
      }

      gps.formChanged = false;
    }
  }
}

$(function() {
  gps.currentUser = new BackendlessBB.User();

  $.expr.cacheLength = 1; //avoid memory leeks because jquery is caching objects.

  // Start Backbone app
  function startApp() {
    console.log("The GPS-Platform's Version is: Build Nº" + gps.constants.VERSION_BUILD);

    gps.showLoadingMessage = true;
    document.addEventListener("resume", gps.resumeApp, false);

    gps.eventManager = _.extend({}, Backbone.Events);
    gps.router = new gps.AppRouter($("#content"));

    if (gps.currentUser.isAuthorized()) {
      gps.initData(function() {
        gps.router.navigate("", {trigger: true});
      });

      Backbone.history.start();
      console.log(gps.currentUser.get('username') + " is logged in.");

      //gps.schemaLoader();

    } else {
      Backbone.history.start();
      gps.router.navigate("", true);
      console.log("Error login detected!");
    }

    gps.router.on("route", function(route, params) {
      gps.router.updateHistory(Backbone.history.fragment);
    });

    /*
     If we have a popup in the screen, then I notify them to tell there was a tap outside.
     Maybe the popup wants to clouse itself.
     */
    document.addEventListener('tap', function ( event ) {
      if (gps.popUp){
        gps.popUp.notifyTapOutside(event);
      }

      Backbone.trigger('notifyToUnfocus', event);
    }, true);

    // Handling unsaved changes
    var pageChangers = '#sidebar a, #cancel-btn, .breadcrumbs a';
    $(document).on('tap', pageChangers, gps.changesMade);
  }

  function animateSplashScreen() {
    var $splash = $("body .splash"),
      $logo = $("body .logo");

    $({deg: 0}).animate({deg: 720}, {
      duration: 3500,
      step: function(now) {
        $logo.css({
          transform: "rotate(" + now + "deg)"
        });
      },
      complete: function() {
        statusBarFix();
        $splash.fadeOut( "slow", function() {
          $splash.hide();
        });
      }
    });
  }

  function statusBarFix() {
    if (window.device && parseFloat(window.device.version) === 7.0) {
      document.body.style.marginTop = "20px";
    }
  }

  // Hide splash screen after 4 seconds
  if ( isDevice ) {
    var $splash = $("body .splash");
    $splash.show();
    setTimeout(function() {
      navigator.splashscreen.hide();
      setTimeout(function() {
        animateSplashScreen();
      }, 500);
    }, 500);
  } else {
    // The browser starts the app
    startApp();
  }

  // Phonegap starts the app
  document.addEventListener("deviceready", function() {
    if (gps.currentUser.isAuthorized()) {
      setTimeout(function() {
        startApp();
      }, 5000);
    }
    else {
      startApp();
    }
  }, false);
});

/*
 * Sync settings:
 * The collections we'll keep in sync are
 * 'backlogs', 'clients'.
 */
gps.sync = {
  collections: [ 'backlogs', 'clients' ],

  init: function() {
    var initSync = _.bind(function() {
      _.each(this.collections, function( collection ) {
        gps[ collection ].fetch({
          success: function() {
            gps[ collection ].trigger('change');
          }
        });
      });
    }, this);

    this.intervalID = setInterval( initSync, 10000 );
  }
};

gps.resumeApp = function(){

  if (gps.currentUser.isAuthorized()) {
    gps.initData();
  } else {
    gps.router.navigate("", true);
  }
}

gps.initData = function(callback) {
  var retry = 7;
  //gps.util.database.migration_16_12_2013();

  // we force to get answers, comments and impediments again
  if(gps.session.fetchedAssessments) gps.session.fetchedAssessments.length = 0;
  if(gps.session.fetchedImpediments) delete gps.session.fetchedImpediments;

  //Load clients into gps.clients
  gps.assessments = {};
  gps.controllers.clientController.loadClients(retry,callback);
  if (!gps.util.database.enable){
    gps.controllers.syncInfoController.loadSyncInfo(function() {
      gps.controllers.disciplineController.loadDisciplines(gps.controllers.maturityController.loadMaturity);
      gps.controllers.practiceController.loadPractices();
      gps.controllers.questionController.loadQuestions();
    });
  }
  return true;
};
gps.util = gps.util || {};
gps.util.database = gps.util.database || {};
gps.util.database.enable = false;


gps.util.database.saveAllLocalData = function(callback){

	/**
	* This function is going to store all the local information in the database.
	* Will save:

	* app/models/data/diciplines.js
	* app/models/data/possibleAnswers.js
	* app/models/data/practices.js
	* app/models/data/questions.js

	* by default It should not add this info.
	* this function should be runned manually and 
	* gps.util.database.enable should be true to do changes.
	*/ 

	if (gps.util.database.enable){

		/**
		 * IMPORTANT!
		 * before calling this function I need to ensure that I have a table
		 * named: discipline with a relation to possible answers called: questions

		 * before calling this function I need to ensure that I have a table
		 * named: practice with a relation to questions called: questions

		 * before calling this function I need to ensure that I have a table
	 	 * named: question with a relation to possible answers called: possibleAnsw
		 */

		gps.util.database.saveLocalPossibleAnswers(function(){
			gps.util.database.saveLocalQuestions(function(){
				gps.util.database.saveLocalPractices(function(){
					gps.util.database.saveLocalDiciplines(callback);
				});
			});
		});
	}
}

gps.util.database.saveLocalDiciplines = function(callback){

	/**
	 * before calling this function I need to ensure that I have a table
	 * named: disciplines
	 * with a relation to practice called: practices
	 */
	if (gps.util.database.enable){	//change this if you want to run this function.

		gps.util.database.practices = gps.util.database.practices || new gps.collections.Practices();

		for(var dkey in gps.data.disciplines){
			var disipline = gps.data.disciplines[dkey];
			var practices = gps.util.database.practices.filter(function(prac) {

				return _.contains(disipline.practices,prac.get("loc_id"));
			});
			disipline.practices = practices;
		}

		gps.util.database.disciplines = new gps.collections.Disciplines();
		gps.util.database.disciplines.add(gps.data.disciplines);
		gps.util.database.disciplines.createAll({
		  success: function(model) {
		  	gps.controllers.syncInfoController.
		  		setRemoteUpdatedDate("DISCIPLINE",new Date().getTime(),callback);
		    console.log(model);
		  },
		  error: function(model, response) {
		    console.log(response);
		  }
		});
	}
};

gps.util.database.saveLocalPractices = function(callback){

	/**
	 * before calling this function I need to ensure that I have a table
	 * named: practice
	 * with a relation to possible answers called: questions
	 */
	if (gps.util.database.enable){

		for(var pkey in gps.data.practices){
			var practice = gps.data.practices[pkey];
			var questions = gps.util.database.questions.filter(function(ques) {

				return _.contains(practice.questions,ques.get("loc_id"));
			});
			practice.questions = _.map(questions, function(ques){return ques;});
		}

		gps.util.database.practices = new gps.collections.Practices();
		gps.util.database.practices.add(gps.data.practices);

		gps.util.database.practices.createAll({
		  success: function(model) {
		  	gps.controllers.syncInfoController.
		  		setRemoteUpdatedDate("PRACTICE",new Date().getTime(),callback);
		    console.log(model);
		  },
		  error: function(model, response) {
		    console.log(response);
		  }
		});
	}
}

gps.util.database.saveLocalQuestions = function(callback){
	/**
	 * before calling this function I need to ensure that I have a table
	 * named: question
	 * with a relation to possible answers called: possibleAnsw
	 */

	if (gps.util.database.enable){

		for(var qkey in gps.data.questions){
			var question = gps.data.questions[qkey];
			var possAnsw = gps.util.database.possibleAnswers.where({"loc_id":question.pssbAnwId})[0];
			if (possAnsw){
				question.possibleAnsw = possAnsw;
				delete question.pssbAnwId;	
			}
		}

		gps.util.database.questions = new gps.collections.Questions();
		gps.util.database.questions.add(gps.data.questions);

		gps.util.database.questions.createAll({
		  success: function(model) {
		  	gps.controllers.syncInfoController.
		  		setRemoteUpdatedDate("QUESTION",new Date().getTime(),callback);
		    console.log(model);
		  },
		  error: function(model, response) {
		    console.log(response);
		  }
		});
	}
}

gps.util.database.saveLocalPossibleAnswers = function(callback){

	if (gps.util.database.enable){

		gps.util.database.possibleAnswers = new gps.collections.PossibleAnswers();

		gps.util.database.possibleAnswers.add(gps.data.possibleAnswers);
		gps.util.database.possibleAnswers.createAll({
		  success: function(model) {

		  	gps.controllers.syncInfoController.
		  		setRemoteUpdatedDate("POSSIBLE_ANSWER",new Date().getTime(),callback);
		    console.log(model);
		  },
		  error: function(model, response) {
		    console.log(response);
		  }
		});
	}
}

/**
  * Will move all answers that have question_id to question_id_st
  * This is needed because now we are using a string to identify the question.
  */
gps.util.database.changeQuestionIdToQuestionIdStr = function(){

	if (gps.util.database.enable){

		gps.util.database.Answers = new gps.collections.Answers();
		gps.util.database.Questions = new gps.collections.Questions();
		gps.util.fetchCollection(gps.util.database.Answers);
		gps.util.fetchCollection(gps.util.database.Questions);

		var toSave = [], counter = 0;
		gps.util.database.Answers.each(function(answer){

			if (answer.get("question_id") && answer.get("question_id") != -1){
				var question = gps.util.database.Questions.where({loc_id:answer.get("question_id")})[0];
				answer.set("question_id_st",question.id);
				toSave.push(answer);
			}
		});

		var goSave = function(){
			var answer = toSave.pop();
			if (answer){
				answer.save({
					success: function(){
						console.log("question saved! pending: " + toSave.length);
						goSave();
						goSave();
					},
					error: function( model, error ){
						if( error.responseJSON && error.responseJSON.message ) {
          		alert(error.responseJSON.message);
        		}
						console.log("error saving answer");
					}
				});
			}
		}

		console.log("starting with: " + toSave.length);
		goSave();
	}
}

//migration from previous builds to build26 on 16/12/2013
gps.util.database.migration_16_12_2013 = function(){
	/**
	 * all datase structure changes need to be done before.
	 */
	gps.util.database.saveAllLocalData(
		//gps.util.database.changeQuestionIdToQuestionIdStr
	);
}
;
gps.data.disciplines = (function(){

    if (gps.util.database.enable){
      return [
        {
          "loc_id": 1,
          "name": "Collaborating",
          "color": "yellow",
          "practices": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        },

        {
          "loc_id": 2,
          "name": "Planning",
          "color": "green",
          "practices": [11, 12, 13, 14, 15, 16]
        },

        {
          "loc_id": 3,
          "name": "Defining",
          "color": "cyan",
          "practices": [17, 18, 19, 20, 21, 22, 23, 24, 25]
        },

        {
          "loc_id": 4,
          "name": "Developing",
          "color": "blue",
          "practices": [26, 27, 28, 29, 30, 31, 32, 33]
        },

        {
          "loc_id": 5,
          "name": "Tracking",
          "color": "purple",
          "practices": [34, 35, 36, 37, 38, 39, 40, 41]
        },

        {
          "loc_id": 6,
          "name":  "Testing",
          "color": "pink",
          "practices": [42, 43, 44, 45, 46, 47, 48]
        },

        {
          "loc_id": 7,
          "name":  "Releasing",
          "color": "orange",
          "practices": [49, 50, 51, 52, 53, 54, 55, 56]
        }
      ];
    }
})();
gps.data.possibleAnswers = (function(){

    if (gps.util.database.enable){
      return [
		{
			"loc_id":0,
			"type":"binary",
			"description":"list of possible answeres for X type of questions.",
			"values":[{
				"value": 0,
				"helpText":"No"
			},{
				"value": 1,
				"helpText":"Yes"
			}]
		},{
			"loc_id":1,
			"type":"scalar",
			"description":"list of possible answeres for X type of questions.",
			"values":[{
				"id": 1,
				"value": 1,
				"helpText":"Completely Disagree"
			},{
				"id": 2,
				"value": 2,
				"helpText":"Mostly Disagree"
			},{
				"id": 3,
				"value": 3,
				"helpText":"Slightly Disagree"
			},{
				"id": 4,
				"value": 4,
				"helpText":"Slightly Agree"
			},{
				"id": 5,
				"value": 5,
				"helpText":"Mostly Agree"
			},{
				"id": 6,
				"value": 6,
				"helpText":"Completely Agree"
			}]
		},{
			"loc_id":2,
			"type":"scalar",
			"description":"list of possible answeres for X type of questions.",
			"values":[{
				"id": 1,
				"value": 1,
				"helpText":"Never"
			},{
				"id": 2,
				"value": 2,
				"helpText":"Very Rarely"
			},{
				"id": 3,
				"value": 3,
				"helpText":"Rarely"
			},{
				"id": 4,
				"value": 4,
				"helpText":"Occasionally"
			},{
				"id": 5,
				"value": 5,
				"helpText":"Very Frequently"
			},{
				"id": 6,
				"value": 6,
				"helpText":"Always"
			}]
		},{
			"loc_id":3,
			"type":"scalar",
			"description":"list of possible answeres for X type of questions.",
			"values":[{
				"id": 1,
				"value": 1,
				"helpText":"Muliti- site/multi- timezone"
			},{
				"id": 2,
				"value": 2,
				"helpText":"Multi- site/time zone 1-3 hours difference"
			},{
				"id": 3,
				"value": 3,
				"helpText":"Multi- site/same time zone"
			},{
				"id": 4,
				"value": 4,
				"helpText":"Same location/different buildings"
			},{
				"id": 5,
				"value": 5,
				"helpText":"Same Building/same floor"
			},{
				"id": 6,
				"value": 6,
				"helpText":"Sits 50-100' of each other"
			}]
		}];
	}
})();


/*
1- No, Yes
2- Completely Disagree, Mostly Disagree, Slightly Disagree, Slightly Agree, Mostly Agree, Completely Agree
3- Never, Very Rarely, Rarely, Occasionally, Very Frequently, Always
4- Muliti- site/multi- timezone, Multi- site/time zone 1-3 hours difference, Multi- site/same time zone, Same location/diff erent buildings, Same Building/same floor, Sits 50-100' of each oth
*/
;
gps.data.practices = (function(){

    if (gps.util.database.enable){
      return [
        {
          "loc_id": 1,
          "name": "Community of Trust",
          "questions": [1, 2, 3, 4]
        },

        {
          "loc_id": 2,
          "name": "Conflict Resolution",
          "questions": [5, 6, 7]
        },

        {
          "loc_id": 3,
          "name": "Continuous Collaboration",
          "questions": [8, 9, 10, 11]
        },

        {
          "loc_id": 4,
          "name": "Continuous Learning",
          "questions": [13, 14, 15, 16]
        },

        {
          "loc_id": 5,
          "name": "Cross-Functional Team",
          "questions": [17, 18, 19, 20]
        },

        {
          "loc_id": 6,
          "name": "Self-Managing Team",
          "questions": [21, 22, 23, 24, 25, 26, 27]
        },

        {
          "loc_id": 7,
          "name": "Sit Together",
          "questions": [29, 30, 31, 32]
        },

        {
          "loc_id": 8,
          "name": "Small Team Size",
          "questions": [33, 34]
        },

        {
          "loc_id": 9,
          "name": "Sustainable Pace",
          "questions": [35, 36, 37, 38, 39]
        },

        {
          "loc_id": 10,
          "name": "Team Roles",
          "questions": [40, 41, 42, 43]
        },

        {
          "loc_id": 11,
          "name": "Customer Involvement",
          "questions": [44, 45, 46]
        },

        {
          "loc_id": 12,
          "name": "Iteration Planning",
          "questions": [47, 48, 49, 50, 51, 52, 53, 54, 55, 28]
        },

        {
          "loc_id": 13,
          "name": "Planning Buffers",
          "questions": [57, 58, 59]
        },

        {
          "loc_id": 14,
          "name": "Product Vision",
          "questions": [60, 61, 62, 63]
        },

        {
          "loc_id": 15,
          "name": "Release Planning",
          "questions": [64, 65, 66, 67, 68, 69, 70, 71]
        },

        {
          "loc_id": 16,
          "name": "Risk Management",
          "questions": [72, 73, 74, 75, 76]
        },

        {
          "loc_id": 17,
          "name":"Backlog Negotiation",
          "questions": [77, 78, 79, 80, 81]
        },

        {
          "loc_id": 18,
          "name":"Change Control",
          "questions": [82, 83, 84]
        },

        {
          "loc_id": 19,
          "name": "Executable Requirements",
          "questions": [85, 86, 87]
        },

        {
          "loc_id": 20,
          "name": "Incremental Requirements",
          "questions": [88, 241,90]
        },

        {
          "loc_id": 21,
          "name":"Invest In Stories",
          "questions": [91, 92, 93, 94, 95, 96, 97, 98]
        },

        {
          "loc_id": 22,
          "name":"Spike Solutions",
          "questions": [99, 100, 101]
        },

        {
          "loc_id": 23,
          "name":"Team Estimating",
          "questions": [ 103, 104]
        },

        {
          "loc_id": 24,
          "name":"Ubiquitous Language",
          "questions": [105, 106, 107]
        },

        {
          "loc_id": 25,
          "name":"User Stories",
          "questions": [108, 109, 110]
        },

        {
          "loc_id": 26,
          "name":"Coding Standards",
          "questions": [111, 112, 113, 240]
        },

        {
          "loc_id": 27,
          "name":"Collective Ownership",
          "questions": [114, 115, 116, 117, 118]
        },

        {
          "loc_id": 28,
          "name":"Commit Frequently",
          "questions": [119, 120, 121, 122]
        },

        {
          "loc_id": 29,
          "name":"Distributed Knowledge",
          "questions": [123, 124, 125]
        },

        {
          "loc_id": 30,
          "name":"Pair Programming",
          "questions": [126, 127, 128, 129, 130, 131, 132]
        },

        {
          "loc_id": 31,
          "name":"Refactor Software",
          "questions": [133, 134, 135]
        },

        {
          "loc_id": 32,
          "name":"Simple Design",
          "questions": [136, 137, 138, 139, 140, 141]
        },

        {
          "loc_id": 33,
          "name":"Test-Driven Design",
          "questions": [142, 143, 144, 145]
        },

        {
          "loc_id": 34,
          "name":"Agile Reporting",
          "questions": [147, 148, 149, 150, 151]
        },

        {
          "loc_id": 35,
          "name":"Daily Standup",
          "questions": [152, 153, 154, 155, 156, 157, 158, 160, 161, 162,159]
        },

        {
          "loc_id": 36,
          "name":"Information Radiators",
          "questions": [163, 164, 165]
        },

        {
          "loc_id": 37,
          "name":"Insulated Team",
          "questions": [166, 167, 168, 169, 170]
        },

        {
          "loc_id": 38,
          "name":"Iteration Reviews",
          "questions": [171, 172, 173, 174]
        },

        {
          "loc_id": 39,
          "name":"Root Cause Analysis",
          "questions": [175, 176, 177]
        },

        {
          "loc_id": 40,
          "name":"Team Retrospectives",
          "questions": [178, 179, 180, 181, 182]
        },

        {
          "loc_id": 41,
          "name":"Transparent Reporting",
          "questions": [183, 184, 185, 186, 187, 188]
        },

        {
          "loc_id": 42,
          "name": "Acceptance Testing",
          "questions": [189, 190, 191]
        },

        {
          "loc_id": 43,
          "name": "Customer Validates",
          "questions": [192, 193, 194]
        },

        {
          "loc_id": 44,
          "name": "Exploratory Testing",
          "questions": [195, 196, 197]
        },

        {
          "loc_id": 45,
          "name": "Performance Testing",
          "questions": [198, 199, 200]
        },

        {
          "loc_id": 46,
          "name": "Self-Testing Build",
          "questions": [201, 202, 203, 204]
        },

        {
          "loc_id": 47,
          "name": "Test Infected",
          "questions": [205, 206, 207]
        },

        {
          "loc_id": 48,
          "name": "Unit Testing",
          "questions": [208, 209, 210]
        },

        {
          "loc_id": 49,
          "name": "Automated Build",
          "questions": [211, 212, 213, 214, 215]
        },

        {
          "loc_id": 50,
          "name": "Continuous Integration",
          "questions": [216, 217, 218]
        },

        {
          "loc_id": 51,
          "name": "Definition of Done",
          "questions": [219, 220, 221]
        },

        {
          "loc_id": 52,
          "name": "Deployment Package",
          "questions": [222, 223, 224]
        },

        {
          "loc_id": 53,
          "name": "Lightweight Documents",
          "questions": [225, 226, 227]
        },

        {
          "loc_id": 54,
          "name": "Ten-Minute Build",
          "questions": [228, 229, 230]
        },

        {
          "loc_id": 55,
          "name": "Version Control",
          "questions": [231, 232, 233, 234, 235, 236]
        },

        {
          "loc_id": 56,
          "name": "Zero Defect Mentality",
          "questions": [237, 238, 239]
        }
      ];
  }
})();
gps.data.questions = (function(){

    if (gps.util.database.enable){
      return [
    {
        "loc_id":1,
        "title":"The team engages in activities that foster trust (at work, and outside of work).",
        "htext": "Agile teams need to build the kind of trust that allows each member of the team to routinely communicate openly, honestly, with integrity, and with respect for others. This kind of trust builds over time when team members constructively engage in work and play requiring cooperation, communication, and the exchange of ideas that lead to better insights and understanding.",
        "pssbAnwId": 1
    },
    {
        "loc_id":2,
        "title":"The work environment is uplifting with laughter being heard as the team works on the product.",
        "htext":"\"Whistle while you work\" and \"Laughter is the best medicine\" are two adages to be adopted by Agile teams. Enjoying one\'s work is a key component to not only job satisfaction but increased productivity and work\/life balance.",
        "pssbAnwId":2
    },
    {
        "loc_id":3,
        "title":"Team members trust one another.",
        "htext":"Trust is the cornerstone to any team foundation. Increase it and the daily grind becomes more productive. Decrease it, or not have it at all, and the team finds itself hurtling towards (avoidable) pitfalls and pain points. Trust should be visible and demonstrable.\n\nExamples of what happens when there is little or no trust: \n1. Two developer work on the same task. \n2. QA re-tests something the developer tests.",
        "pssbAnwId":1
    },
    {
        "loc_id":4,
        "title":"The Team engages in collaboration that results in working toward a common goal.",
        "htext":"A big part of being a team is the ability to communicate and collaborate freely and productively, able to bring up controversial ideas or different opinions. Healthy teams ensure they reach out to one another out of a sense of camaraderie rather than obligation. Doing so fosters a community of practice where individual contributions become a part of the collective whole.",
        "pssbAnwId":1
    },
    {
        "loc_id":5,
        "title":"Conflicts are resolved quickly.",
        "htext":"A healthy team will resolve most conflicts on the spot using a practiced feedback process, and almost all conflicts are resolved before a day has gone by. This does not mean that the technical issues are all resolved, but the emotional conflict part has been resolved. Adaptive challenges, those that involve change, interpersonal disagreement, or the change in team structure, are most apt to create conflict within a team.",
        "pssbAnwId":2
    },
    {
        "loc_id":6,
        "title":"Escalation paths exits for the team members.",
        "htext":"Are there policies and practical paths in place for team members to follow in case they have either an internal or external problem? If there are practical paths for escalation, then the team will be using them and escalating items at an early stage before they become major issues.",
        "binary": true
    },
    {
        "loc_id":7,
        "title":"Team members have been trained in and use supportive communication.",
        "htext":"Do your teams use supportive language in their dealings with others? Supportive Language principles are: \n1. Problem oriented, not person oriented \n2. Congruent, not incongruent \n3. Descriptive, not evaluative \n4. Validating, not invalidating \n5. Specific, not global \n6. Conjunctive, not disjunctive \n7. Owned, not disowned \n8. Listening, not one-way",
        "pssbAnwId":2
    },
    {
        "loc_id":8,
        "title":"Team members show concern for each other's well being inside and outside of work (office hours)",
        "htext":"Collaboration is truly enhanced when another team member is absent and the Team rallies in their place. Dedicated team members will show a willingness to assist when they are invested in each other\'s well-being.",
        "binary": true
    },
    {
        "loc_id":9,
        "title":"Team members are pleased with their assignment on the team and are not looking to leave.",
        "htext":"A properly utilized and motivated team member will want to work on that team and help it succeed to the best of their ability.",
        "pssbAnwId":1
    },
    {
        "loc_id":10,
        "title":"Team members negotiate decisions interactively.",
        "htext":"Team members take the initiative and proactively negotiate resolutions to problems and questions in an open forum.",
        "pssbAnwId":2
    },
    {
        "loc_id":11,
        "title":"Team members are talking about work and problem solving at lunch.",
        "htext":"Teamwork 2.0 ­­-- Working outside the normal parameters. When synchronicity sets in, the team can't help but to talk in the halls and during lunch about how they can best resolve issues.",
        "binary": true
    },
    {
        "loc_id":13,
        "title":"Team receives additional agile training during the project.",
        "htext":"Since the beginning of the current project, has the team participated in any additional Agile specific training or are there plans to do so?",
        "binary": true
    },
    {
        "loc_id":14,
        "title":"Team holds meetings to share and discuss best practices in their area of expertise.",
        "htext":"The best body of knowledge that the Team has about their domain is themselves. Teams focused on continuous learning meet regularly, both formally and informally, to discuss best practices, goals, and learning. These regular meetings will be happening every few weeks. Examples: Technical book review, Scrum Master, PO, Developer, QA, etc. forums where best practices are shared and discussed.",
        "binary": true
    },
    {
        "loc_id":15,
        "title":"Team uses informal 'lunch and learn' presentations for learning sessions.",
        "htext":"Lunch and Learn session can be presented by outside coaches, other team members, or from internal resources",
        "binary": true
    },
    {
        "loc_id":16,
        "title":"Team members show signs of improvement in their process and techniques.",
        "htext":"First step is to have Retrospectives. Second is taking actions based on them. Third is identifying how to measure the impact. Finally there is seeing a discernible impact \/ result that comes from the actions initiated by the retrospective. This question is asking about the resulting impact.",
        "pssbAnwId":2
    },
    {
        "loc_id":17,
        "title":"The team is empowered to own a component or product from design to production/customer hands",
        "htext":"Symptoms of an empowered cross-functional Team would be: \na) The Team interacts with the Customers who use the product they built. \nb) Team members are involved during the inception phase of the product. \nc) Members reach out to teams in other parts of the organization to ensure their work is complete and of the highest quality.",
        "binary": true
    },
    {
        "loc_id":18,
        "title":"Team eliminates waiting on another team, or expert, to complete a task.",
        "htext":"Because the team is composed of cross-functional Team members they have reduced their reliance on external sources. The capability to produce an end-to-end product lies within the Team.",
        "pssbAnwId":2
    },
    {
        "loc_id":19,
        "title":"Team aspires to be cross-functional as appropriate for their technical area/domain.",
        "htext":"During the hiring process the Team along with the organization selects candidates that can fill a certain role as well as expand the team\'s body of knowledge. Team members choose to adopt new talents that are complementary to the team\'s domain.",
        "pssbAnwId":2
    },
    {
        "loc_id":20,
        "title":"Team is composed of cross-functional roles.",
        "htext":"Each Team is composed of generalizing experts in their respective disciplines (i.e. BA, DEV, UI\/UX, QA…) ensuring that a whole product end to end can be built and ready for deployment minimizing handoffs and waiting for availability. In addition team members learn each others skills so they can fill in when needed to keep things flowing.",
        "pssbAnwId":1
    },
    {
        "loc_id":21,
        "title":"The team is empowered to work collaboratively.",
        "htext":"The team takes the initiative to pool their own resources, swarm and organize around the work as they choose. If teams are not swarming and collaborating, we need to determine is it a lack of empowerment or lack of interest.",
        "pssbAnwId":2
    },
    {
        "loc_id":22,
        "title":"Team members dedicated to the project.",
        "htext":"Agile projects require intense focus, dedication, and responsiveness. This requires fully available team members.",
        "binary": true
    },
    {
        "loc_id":23,
        "title":"Team empowered to make tactical implementation decisions.",
        "htext":"The team is entrusted by management to make recommendations, facilitate, and implement change as required for the progress of the project plan. The team is empowered to make and implement design decisions, empowered to address technical debt issues.",
        "pssbAnwId":2
    },
    {
        "loc_id":24,
        "title":"Team members working on the project exclusively.",
        "htext":"While team members may be dedicated to the project, are they asked to work on other things on the side. This may appear as \"a favor\" to someone or another manager directing the tasks and can dilute self-management and commitments.",
        "binary": true
    },
    {
        "loc_id":25,
        "title":"Team organized as generalizing specialists (i.e., not by functional area or specialty).",
        "htext":"A team of generalizing specialists both values and embraces the specialization and expertise that each team member brings to the team. AND they value and are actively pursuing the goal of each person also generalizing their knowledge and expertise. They do this by learning from each other, by pairing to learn other skills and by ensuring that the team has adequate backup and spare capacity of all skills needed by the team.",
        "binary": true
    },
    {
        "loc_id":26,
        "title":"Team self-assigns tasks (each team member chooses their work).",
        "htext":"Team members pull their own items off the backlog instead of being assigned tasks. It is also appropriate for the team to discuss and split up the work among themselves. This may be necessary if there are junior members new to the team. The important aspect is the decision is made inside the team and not by someone outside the team.",
        "pssbAnwId":2
    },
    {
        "loc_id":27,
        "title":"Team is self-organizing.",
        "htext":"a. The team organize themselves around the work, using subgroups as needed. \nb. When members are absent others arrange to pick up the slack. \nc. The team chooses what they will commit to during sprint planning.",
        "binary": true
    },
    {
        "loc_id":29,
        "title":"Team holds daily stand-ups in common location.",
        "htext":"Indicators: \na. They stand up. \nb. They get together daily at a consistent time and place \nc. They can keep their visual information hanging without concern of it being moved or messed with.",
        "binary": true
    },
    {
        "loc_id":30,
        "title":"Team works in a common war room.",
        "htext":"They have a space that is not walled off from each other (i.e. cubes) where they can talk and work. This usually includes benches or tables they can connect laptops, white boards, and enough privacy they are not interfering with other teams.",
        "binary": true
    },
    {
        "loc_id":31,
        "title":"The team is co-located to allow them to communicate as effectively as possible.",
        "htext":"The closer teams come to being truly co-located, the better their communication will be. Differences as small as being on separate floors of the same building are known to have an impact on the communication that the team has and how effectively the team collaborates.",
        "pssbAnwId":3
    },
    {
        "loc_id":32,
        "title":"Team uses face-to-face or video chat to communicate with each other.",
        "htext":"Direct communication is paramount to resolving conflicts and helping foster better working relationships between team members. \n\nWhen you are face-to-face, there are many other forms of communication beside verbal interchange. The two most important are facial expressions and body language. So for example, while a video conference is better than talking on the phone because you can see the facial expressions, it is more difficult to read body language. When observing the team, please take these into consideration.",
        "pssbAnwId":2
    },
    {
        "loc_id":33,
        "title":"The team size is small with the optimum number based on the technology/domain.",
        "htext":"The optimum team size is 7 +- 2 persons. This size provides a critical mass of people to provide a sense of community and positive momentum. Yet this size is small enough to keep the number of communication paths between team members from growing too large. It is also small enough to keep all of the team members actively engaged in the team direction. The optimum team size may be adjusted based on the needs of the program or the technology \/ domain in which they are working.",
        "binary": true
    },
    {
        "loc_id":34,
        "title":"Team members are stable to increase the effectiveness of the team as a whole.",
        "htext":"Teams that are largely stable (in membership, context, environment, etc.) are known to be more effective and productive than unstable teams. \n\nSymptoms of Instability include: constant on-boarding, emotional regression of the team (reforming pattern), unwillingness to collaborate, lack of communication on difficult issues, lack of healthy conflict, etc.\n\nSymptoms of Stability include: Thinking as a team rather than individuals, anticipating the concerns of other team members, healthy conflict, robust discussion around technical issues, etc.",
        "pssbAnwId":1
    },
    {
        "loc_id":35,
        "title":"Team works a consistent amount of time each week to avoid burn-out by any members.",
        "htext":"Healthy teams establish a sustainable cadence, avoiding fire drills by steadily working within their capacity and limiting work in progress. In practice this looks like the team choosing and agreeing together on how much work to accept into a sprint or to put in progress based on historically measured capacity.",
        "binary": true
    },
    {
        "loc_id":36,
        "title":"Team members allocated to 100% of availability.",
        "htext":"Is each Team member working to necessary capacity as determined by them with the Scrum Master's help. Some slack is a good thing, allowing the team flexibility for unexpected intrusion and avoiding waiting for scarce skill to become available. This capacity is calculated in hours and done on day 1 of each sprint.",
        "pssbAnwId":2
    },
    {
        "loc_id":37,
        "title":"Team works at a sustainable pace.",
        "htext":"A Team\'s sustainable pace is dictated by their cadence. Are your Team members following a prescribed cadence that is maintainable during the Sprint?\n\nExamples are that the daily standup, Planning, Demo, & Retrospective are held at the same time during each sprint. They should also be consistent in other meetings like grooming meetings. \n\nAn anti-pattern here would be if the team has to work long days at the end of each and every sprint to meet their commitments.",
        "binary": true
    },
    {
        "loc_id":38,
        "title":"Team members have 10% of their time to devote to personal learning and self improvement.",
        "htext":"Each Team member has the opportunity to advance and broaden their skills during the work week...",
        "pssbAnwId":1
    },
    {
        "loc_id":39,
        "title":"Work and life balance a value on Team.",
        "htext":"The anti-pattern here is the \'hero\' figure who works 60+ hours/week while taunting the other members for their lack of commitment, laziness, uselessness.\n\nThe context is that the team should value this balance and it should be demonstrated in team actions. \n\nAnother good example is that no one goes home until all the commitments for the day and/or the sprint are done.",
        "binary": true
    },
    {
        "loc_id":40,
        "title":"Team members are experts in their domain.",
        "htext":"Each team member should be an expert within the domain they are working in. All aspects of the domain should be shared with all members in the team. Look for the senior members helping and teaching the more junior members.",
        "binary": true
    },
    {
        "loc_id":41,
        "title":"The Team roles are well defined, understood by all, and implemented.",
        "htext":"At this stage each Team member understands what is required of them, their Product Owner, and their Scrum Master. You would not see a product owner as ScrumMaster. The product owner would have the last say in product design and priority of the backlog. The Scrum Master would have the last say in process and ceremony.",
        "pssbAnwId":1
    },
    {
        "loc_id":42,
        "title":"Everyone knows their role and the roles others are playing.",
        "htext":"Does everyone in this group understand the requirements and participation of the Product Owner role, Scrum Master role, and Team member role?",
        "binary": true
    },
    {
        "loc_id":43,
        "title":"Team members treated as peers on Team and not rank ordered.",
        "htext":"Team membership is NOT a hierarchy, but rather a group of individuals with varying levels of experience and skills brought together for a specific purpose. Typically pay levels would be similar. No individual reward system would be in place that is not awarded by the team itself.",
        "pssbAnwId":1
    },
    {
        "loc_id":44,
        "title":"Team members obtain clarification on the business value of a user story at any time.",
        "htext":"Are the Team members willing and eager to engage the Product Owner or BA\'s at anytime to gain clarity on the user stories?",
        "pssbAnwId":2
    },
    {
        "loc_id":45,
        "title":"Product owner is available for story clarification during the iteration.",
        "htext":"Other than during Backlog Grooming sessions, is the PO available and approachable by the team?",
        "pssbAnwId":2
    },
    {
        "loc_id":46,
        "title":"Product owner sits with the team.",
        "htext":"How often does the Product Owner sit with and engage with the Team? The value is that with the PO sitting with and available to the team, the stories are much more likely to deliver on the needed business value. Additionally, concerns and questions get addressed immediately which prevents task switching.",
        "binary": true
    },
    {
        "loc_id":47,
        "title":"Team commits to User Stories that will be done according to the definition of done by the end of the iteration.",
        "htext":"The team knows what it takes to get the stories to done. It considers whether it has the capacity to complete those stories before committing to them. Additionally, when the team truly commitments to the work, it means something and they are committed to meet the sprint goals.",
        "pssbAnwId":2
    },
    {
        "loc_id":48,
        "title":"Team adheres to fixed iteration lengths.",
        "htext":"Once agreed to, iteration length is fixed and ALL committed work is to be completed within these boundaries. This allows for consistent predictive metrics around the flow of completed features.",
        "pssbAnwId":2
    },
    {
        "loc_id":49,
        "title":"The goals of the iteration are determined and fixed on the first day.",
        "htext":"The work to be completed is agreed upon in the planning meeting on day 1 of the iteration. This would avoid disruptive context switching. We want to see that no one comes along adding more to the sprint after it starts. \n Emphasize the team in control of their success and the quality of work.",
        "pssbAnwId":2
    },
    {
        "loc_id":28,
        "title": "Team conducts iteration planning meetings.",
        "htext":"Iteration planning meetings involve exposition of user stories by the product owner and estimation of effort by the team as well as selection of a subset of these stories for completion during the sprint. \nIt should also involve breaking the Stories into subtasks that outline what needs to be done to complete the User Story. Those sub-tasks should be estimated in hours to compare against the team's capacity.",
        "binary": true
    },
    {
        "loc_id":50,
        "title":"Iteration planning meetings conducted at the beginning of every iteration.",
        "htext":"Every iteration should begin with an iteration planning meeting. That meeting should identify and plan the work that the team will commit to deliver in the iteration. The purpose of the iteration planning meeting is to have a clear understanding of the work items that are most important to the customer and to plan the tasks needed to deliver those work items. \n\nSome anti-patterns include: \n1) Not completing the planning of the work until 2 or 3 days into the iteration. \n2) Planning multiple iterations early and then assuming that the previous work plan is sufficient for the next iteration. \n3) Committing stories but doing no additional planning.",
        "binary": true
    },
    {
        "loc_id":51,
        "title":"Content of the daily standup constrained to team members only.",
        "htext":"The Daily Stand-Up is operated by the team and for the team, with no interruptions by the Product Owner or Scrum Master. All about safety. This may look like a wiki where notes are stored whose members only include the team or a rule about who gets to attend the scrum.",
        "pssbAnwId":2
    },
    {
        "loc_id":52,
        "title":"Domain, or product experts, available to Team on a consistent basis.",
        "htext":"When teams have a skills or knowledge gap, then they need access to domain experts. The organization should provide access to these experts in a prompt manner to avoid delays and blocking the team.",
        "pssbAnwId":1
    },
    {
        "loc_id":53,
        "title":"Product owner comes to the iteration planning meeting with a prioritized list of user stories.",
        "htext":"The value is that the PO should come with a clear idea of the business priorities and how that is reflected in the product backlog. This should also take into account the Roadmap plans and possibly what was learned in the last sprint.",
        "pssbAnwId":2
    },
    {
        "loc_id":54,
        "title":"Team works on user stories whose value and risk understood.",
        "htext":"Have the Team and Product Owner worked together to understand all aspects of business value and the risks involved with each User Story BEFORE committing to it?",
        "pssbAnwId":2
    },
    {
        "loc_id":55,
        "title":"Team commits to achieving the iteration goals before the iteration planning meeting completed.",
        "htext":"Do the Team, on a regular basis, understand the scope and breadth of the work to be done upon completion of the iteration planning meeting? If they understand the goals, they can work with the PO to meet those goals, even if the Story scope changes or Stories themselves get removed from the Sprint.",
        "binary": true
    },
    {
        "loc_id":56,
        "title":"Team conducts iteration planning meetings.",
        "htext":""
    },
    {
        "loc_id":57,
        "title":"Feature buffer planned in the release.",
        "htext":"In planning the release, the team(s) and Product Owner should account for the fact that some Features may take longer. Some examples of why this may happen are: technical challenges or modifications to the Feature as it is developed and viewed for the first time. Does the release plan include some buffer to account for changes to the feature during the Feature development? ",
        "pssbAnwId":2
    },
    {
        "loc_id":58,
        "title":"Schedule buffer planned in the release.",
        "htext":"In planning the release, the team(s) and Product Owner should account for a Schedule buffer to address \"un-done work\" and to account for unplanned issues arising.",
        "pssbAnwId":2
    },
    {
        "loc_id":59,
        "title":"Stretch stories are planned in each iteration.",
        "htext":"As the team is planning each iteration, it should commit to a set of stories based conservatively on its established velocity. In addition, the team should identify stretch stories which the team might be able to finish in the sprint without compromising the committed stories. The stretch stories are not part of the commitment, but are planned out into sub-tasks with hourly estimates so, if the team finishes the sprint goals early, they can immediately start this work without having to stop and plan in the middle of the sprint.",
        "pssbAnwId":2
    },
    {
        "loc_id":60,
        "title":"Vision statement established.",
        "htext":"Have the core roles, Team, Product Owner, Scrum Master, and the Business Units, established a Vision Statement for the product lifecycle?",
        "binary": true
    },
    {
        "loc_id":61,
        "title":"Vision statement posted in a visible location.",
        "htext":"Is the Vision statement posted in a high traffic, high visibility area, like a War room wall or other Information Radiator?",
        "binary": true
    },
    {
        "loc_id":62,
        "title":"Team participates in the vision planning process.",
        "htext":"When Product Development begins there will be a Vision planning process that creates a Product Vision Statement. This Product Vision statement may be updated as often as every release plan. For each of these Vision Planning events, the team that will be implementing the Product vision should be invited to the Vision planning meeting and actively participate in the discussion.",
        "pssbAnwId":2
    },
    {
        "loc_id":63,
        "title":"Vision statement communicated and understood by Team.",
        "htext":"The team that is implementing the Product Vision should thoroughly understand that vision. This understanding will be evidenced if the team is regularly referencing the Vision statement as they develop and refine the product backlog. It will also be evidenced if discussions during the iteration demos compare the demonstrated functionality with the product vision.",
        "binary": true
    },
    {
        "loc_id":64,
        "title":"Release plan has been established.",
        "htext":"If there are delivery dates for Features, Release, Trade Shows, etc. then the sprints are planned forecasts out to take these dates into consideration.",
        "binary": true
    },
    {
        "loc_id":65,
        "title":"Funding model aligned with an agile methodology.",
        "htext":"Examples of Misalignment: \n1. If your vendor contracts are on a 6 month SOW that needs to be in place 3 months in advance for approval \n2. If the funding model is based on hours worked rather than based on deliverables \n3. If funding is only arranged for IT (coders\/testers) and not Product group (product owners\/business analysts) or vice versa \n4. If funding depends on a matrixed resources model \n5. If funding requires big up front documentation months in advance",
        "pssbAnwId":1
    },
    {
        "loc_id":66,
        "title":"Funding model is incremental.",
        "htext":"The funding should be incremental and just - in - time - but sensitive to the purchasing cycle needed for the goods and services purchased. The funding model should focus on funding needed in the current release and planning for funding needed in the next release.",
        "binary": true
    },
    {
        "loc_id":67,
        "title":"Release plan is posted in a visible location.",
        "htext":"Is the Release plan posted in a high traffic, high visibility area, like a War room wall or other Information Radiator such as a well known web-site or Wiki?",
        "binary": true
    },
    {
        "loc_id":68,
        "title":"Team conducts release planning meetings.",
        "htext":"When the organization or program is planning the next release, the team(s) that will do the work should be active participants in the planning process. They should be discussing the features that will be in the release, helping to architecturally divide those features and estimate them for the release plan.",
        "pssbAnwId":2
    },
    {
        "loc_id":69,
        "title":"Team participates in roadmap planning.",
        "htext":"The team(s) who are doing the work should be active participants in the sessions where the product roadmap is discussed and planned. The team(s) should have a current view of the product roadmap and they should be active players in deciding the product roadmap and what features should be part of each release.",
        "pssbAnwId":2
    },
    {
        "loc_id":70,
        "title":"Team participates in release planning.",
        "htext":"Are each of the Team members engaged in and contributing to the release planning process?",
        "binary": true
    },
    {
        "loc_id":71,
        "title":"Release plan been communicated and it understood by the team.",
        "htext":"A release plan can be created but not used. Does the Team routinely consult and incorporate the Release plan into their planning and development efforts?",
        "binary": true
    },
    {
        "loc_id":72,
        "title":"Estimates include contingency planning.",
        "htext":"Does your Team\'s estimates provide for contingency planning? In order for the estimates of the stories on the backlog to be reasonably accurate, they must account for the risks that implementing the story may not go down the sunny day path. The estimates should account for a normal number of things to not go well and the contingencies needed to accommodate those variances.",
        "pssbAnwId":2
    },
    {
        "loc_id":73,
        "title":"Team produces an iteration artifact that identifies useful metrics, such as velocity.",
        "htext":"Mature teams regularly produce metrics and artifacts for other stakeholders to \"Go and See\" and monitor risks and progress. This question encompasses both how often does the team produce these metrics or artifacts, and how useful they are. The usefulness can be observed from how often do other stakeholders use these artifacts or metrics? Does the team review metrics as part of retrospective and take action from them? Do they use Velocity to gauge how much to consider for the next sprint? Do they use average velocity for planning future sprints?",
        "pssbAnwId":2
    },
    {
        "loc_id":74,
        "title":"Schedules expressed with a confidence level.",
        "htext":"Schedule estimates should be given with a confidence level associated with successfully completing the team goal(s). These confidence levels may be expressed as a percentage likelihood for achieving the goal, or on a scale defined by the team or the organization.",
        "binary": true
    },
    {
        "loc_id":75,
        "title":"Schedules expressed as a range.",
        "htext":"A mature agile team knows that estimates are not commitments and that there are a variety of things that can go right or wrong which will affect the estimate. For this reason, estimates, particularly schedule estimates are best expressed as a range, together with a confidence level of successfully delivering inside of that range. If the team has sufficient throughput data, then these ranges and confidence levels will be derived statistically.",
        "pssbAnwId":2
    },
    {
        "loc_id":76,
        "title":"Iteration lengths short enough to support effective inspect and adapt cycles.",
        "htext":"Being able to demonstrate working product is key to the success of Agile. Too long of a cycle results in complicated demonstrations and inspection. Too little - not enough productivity. It is recommend that iterations be between 2-4 weeks in length. Does this hold true for your Teams?",
        "binary": true
    },
    {
        "loc_id":77,
        "title":"The Product Owner accepts stories as 'Done' even when the scope was reduced.",
        "htext":"DONE describes what must be completed by the Team to consider a story as acceptable and finished. SCOPE determines HOW MUCH functionality a story must cover. \n\nWhen scope is reduced, does the PO move that scope to user stories on the backlog and accept the User Story as completed with the reduced scope.",
        "binary": true
    },
    {
        "loc_id":78,
        "title":"The Iteration Manager mediates/facilitates scope negotiations.",
        "htext":"Does the iteration manager act as facilitator between Product Owner and Team when it comes to negotiating the scope of a story or a feature?",
        "pssbAnwId":2
    },
    {
        "loc_id":79,
        "title":"The Product Owner is willing to negotiate the scope of a story.",
        "htext":"The Product Owner holds the customer\'s concerns and desires. However, when it is clear that the team cannot deliver all of a feature or story, Is the PO willing to work with the other Team members in a effort to achieve a manageable scope? The Product Owner will probably add additional stories to the backlog or features in future releases to account for the scope that was reduced.",
        "pssbAnwId":2
    },
    {
        "loc_id":80,
        "title":"Out of scope work is placed back on the Product Backlog.",
        "htext":"If more scope is discovered during a sprint, that scope is placed on the backlog instead of pushing the team to do it in the current sprint. Occasionally, when the scope is small, the team can and will agree to do it in the current sprint if they believe it will not impact committed work. \n\nThere are occasions when the team runs into challenges and they need to negotiate with the Product Owner regarding the scope of a story in order to complete it. However, this question is focused on the occasions where additional scope is discovered during a sprint, but not accounted for.",
        "binary": true
    },
    {
        "loc_id":81,
        "title":"The Team is able to effectively reduce scope and deliver stories.",
        "htext":"When issues arise which jeopardize the delivery of stories or features, is the team working with the Product Owner able to reduce the scope of the work and still deliver something valuable to the customer? Smaller, tightly defined stories can have limited Scope but be highly effective.",
        "pssbAnwId":2
    },
    {
        "loc_id":82,
        "title":"Changes to the source code authorized by user stories that have been accounted for in an iteration.",
        "htext":"Were code changes agreed upon and tracked as a User Story (or Task) that authorizes code changes? Are code changes ever made that are not associated with a story in the current iteration? A lot of teams include the User Story number in the commit notes.",
        "pssbAnwId":2
    },
    {
        "loc_id":83,
        "title":"Changes to the source code can be 'backed out' as needed.",
        "htext":"Sometimes code changes associated with a backlog item cause test failures and need to be backed out. Does the team understand that this happens and do they have the ability to do this when needed. Does the team have the capability of \"backing out\" or reversing code changes so that the other stories and backlog items can still be successfully delivered?",
        "binary": true
    },
    {
        "loc_id":84,
        "title":"Changes to the source code subject to review by other team members.",
        "htext":"Do your Team members have a chance to review code prior to it being placed into production? Review practices vary and can include pair programming, peer \"desktop\" reviews and formal code inspection meetings. The review work should be part of the team's definition of done, or it show up explicitly as a task on the task board.",
        "pssbAnwId":2
    },
    {
        "loc_id":85,
        "title":"Business analysts help to define acceptance tests using executable requirements.",
        "htext":"The Product Owner may be a business analyst or may enlist other Business analysts to define and write acceptance tests that incorporate executable requirements. Some examples of executable requirements include: Table driven tools such as FitNess and Robot Framework or behavior specification tools such as StoryQ and SpecFor.",
        "pssbAnwId":2
    },
    {
        "loc_id":86,
        "title":"User stories elaborated as executable requirements.",
        "htext":"As the Team elaborates each User Story in backlog refinement and iteration planning they should add or refine executable requirement as the acceptance criteria. Some examples of executable requirements include: Table driven tools such as FitNess and Robot Framework or behavior specification tools such as StoryQ and SpecFor.",
        "pssbAnwId":2
    },
    {
        "loc_id":87,
        "title":"Team determines the acceptance criteria for each user story.",
        "htext":"The Team members including the Product Owner determine the acceptance criteria. The Acceptance Criteria should not be dictated by other stakeholder external to the team. In the course of discussing the story and the acceptance criteria it is common that they will be modified and the team may add to or clarify the acceptance criteria.",
        "pssbAnwId":2
    },
    {
        "loc_id":88,
        "title":"Requirements are reviewed as part of backlog 'grooming' process.",
        "htext":"Other than during the iteration planning phase, do the Team and Product Owner meet to define and cleanup the backlog?",
        "pssbAnwId":2
    },
    {
        "loc_id":241,
        "title":"Requirements are refined through multiple discovery sessions.",
        "htext":"Requirements (i.e. Epics, Themes, and Stories) are examined and decomposed into smaller stories often and at regular intervals...",
        "pssbAnwId":2
    },
    {
        "loc_id":90,
        "title":"Requirements elaborated as part of iteration planning.",
        "htext":"During iteration planning, high level requirements are broken into smaller more manageable parts for discussion and planning. This is also the last opportunity to change scope or requirements by anyone but the team. After the meeting, any desired changes to committed stories must be added to the backlog.",
        "pssbAnwId":2
    },
    {
        "loc_id":91,
        "title":"Each user story is estimatable by the Team.",
        "htext":"E -- Estimable, refers to the Team being able to properly apply the Planning Poker method to determining size and complexity of the Story.",
        "pssbAnwId":2
    },
    {
        "loc_id":92,
        "title":"Each user story is independent of all other stories.",
        "htext":"I -- Independent, means that each story has no parent or child relationship and can be completed as a \"stand alone\" story.",
        "pssbAnwId":2
    },
    {
        "loc_id":93,
        "title":"Each user story is negotiated with the Product Owner.",
        "htext":"N -- Negotiable, means that a productive meeting of Team and Product Owner created the story in accord.",
        "pssbAnwId":2
    },
    {
        "loc_id":94,
        "title":"Each user story results in a customer/developer conversation.",
        "htext":"Every story is a promise to a conversation between the Team and the customer. In other words, lines of communication are always open from Customer to Product Owner to BA to QA to Developer, conception to demo.",
        "pssbAnwId":2
    },
    {
        "loc_id":95,
        "title":"Each user story is sized appropriately.",
        "htext":"S -- is for Small or Sized-Right. Stories can be completed within an iteration. Each story must be considered by the Team during Planning Poker and given a relative size of complexity so that it can be ordered properly in the Backlog.",
        "pssbAnwId":2
    },
    {
        "loc_id":96,
        "title":"Team estimates all user stories.",
        "htext":"The team, working together, does all of the size and estimates on the backlog items that they will be working on. This keeps cohesiveness and retains team clarity. It is NOT for the Product Owner to do.",
        "pssbAnwId":2
    },
    {
        "loc_id":97,
        "title":"Each user story is testable.",
        "htext":"T -- is for Testable. In practical terms, ALL stories will have acceptance criteria written to them and Unit Testing provisioned for.",
        "pssbAnwId":2
    },
    {
        "loc_id":98,
        "title":"Each user story is valuable to the Product Owner.",
        "htext":"V -- Valuable In the end, the Team is to take the work and grooming from the Product Owner, transform that work into Viable and workable solutions, and commit that work back to the business and Product Owner through meaningful User Stories and Backlog Items.",
        "pssbAnwId":2
    },
    {
        "loc_id":99,
        "title":"Team uses spikes to better define 'epic' stories for later iterations.",
        "htext":"A SPIKE is called into play when more time or resources are needed to research a topic before being able to estimate it with any level of confidence. It also is used when several divergent implementations look promising or to investigate new technologies. Lastly, to investigate the feasibility of a new technology.",
        "pssbAnwId":2
    },
    {
        "loc_id":100,
        "title":"Estimates of effort for spikes are taken into consideration during planning.",
        "htext":"While a SPIKE may have no Business Value, it does require time and effort estimates. Are these estimates taken into consideration when developing the Team capacity For the sprint they will be working on the Spike story in?",
        "binary": true
    },
    {
        "loc_id":101,
        "title":"Team schedules spikes for controlled experimentation or to gain new knowledge.",
        "htext":"Examples of scheduled SPIKES are determining when a certain hardware solution will be available to support the new web services, or how another business unit can contribute to the current solution... and by when.",
        "pssbAnwId":2
    },
    {
        "loc_id":102,
        "title":"Team estimates using 50% and 90% estimates.",
        "htext":""
    },
    {
        "loc_id":103,
        "title":"Team estimates using planning poker.",
        "htext":"Planning Poker, sometimes following the modified Fibonacci sequence or powers of two can help facilitate the estimation process. The emphasis here is they use a method that is used to determine the size. It should allow for equal input by all team members and not a few. Avoids the \"Anchor Effect\" when one person blurts out a number and everyone else agrees.",
        "binary": true
    },
    {
        "loc_id":104,
        "title":"Team estimates stories using relative points rather than time.",
        "htext":"Healthy estimation involves always comparing one story to another, looking at relative aspects. The anti-pattern here is when a team or a scrum master is counting hours remaining during the story estimation process or equating Story Points to person hours.",
        "binary": true
    },
    {
        "loc_id":105,
        "title":"Team uses domain driven concepts or lightweight modeling for design.",
        "htext":"This is not about big upfront design, but the ongoing effort of developing a mental model of the target domains such as financial advising or patient scheduling and implementing software based on that growing mental model.",
        "pssbAnwId":2
    },
    {
        "loc_id":106,
        "title":"Team keeps a domain model at the center of discourse.",
        "htext":"Talking about the target domain in shared terms with shared meaning allows a team to develop the domain model as they implement some user stories and learn about new ones. A visible story map or customer journey map that is kept up to date would accurately reflect this domain.",
        "pssbAnwId":2
    },
    {
        "loc_id":107,
        "title":"Team employs a ubiquitous vocabulary (or domain specific language).",
        "htext":"Kahuna, Carving, Hang Ten, Spin Cycle, these terms strongly evoke the surfer scene. A team\'s language can be that evocative, allowing them to communicate in shorthand quickly and accurately.",
        "pssbAnwId":2
    },
    {
        "loc_id":108,
        "title":"Requirements discussed during estimation by the team.",
        "htext":"While sizing the story, does the team review and discuss the requirements and the acceptance criteria or do they base it simply on their verbal understanding.",
        "pssbAnwId":2
    },
    {
        "loc_id":109,
        "title":"Requirements managed as user stories.",
        "htext":"Fundamental to Scrum is the use of user stories format which consists of 3 things minimally: \n1. The who, what, and why of a feature sometimes shown like this: As a <user persona>, I want <desired functionality> so that <purpose of functionality> \n2. The acceptance criteria, usually a numbered list showing the context, trigger and end state shown like this: Given <context> When <trigger> Then <consequence> \n3. The size, usually in Story Points. The story should not be worked on until it is sized. \n\nAnother essential aspect is the release backlog which simply consists of a prioritized list of desired items, only some of which are in the full user story format. Now, the sprint backlog needs to be made up of proper user stories for features and whatever bugs and tasks are agreed upon.",
        "pssbAnwId":2
    },
    {
        "loc_id":110,
        "title":"Team conducts user story workshops.",
        "htext":"User story workshops can be used to convert existing requirements to user stories, to collaborate with customers in discovering their needs, to identify personas in the target domain and especially to familiarize the team with the domain.",
        "pssbAnwId":2
    },
    {
        "loc_id":111,
        "title":"Team uses tools to monitor their coding standards.",
        "htext":"Sonar is the most visible one. Many IDE's including Eclipse also help ensure standards are met at the typing level.",
        "pssbAnwId":2
    },
    {
        "loc_id":112,
        "title":"Team uses well understood coding practices.",
        "htext":"If they don't understand the standard then they won\'t keep to it. Also, strange practices make it hard to expand the team or replace players.",
        "pssbAnwId":2
    },
    {
        "loc_id":240,
        "title":"Team refers to the Definition of Done during all phases of development.",
        "htext":"Ideally there are few phases. The advantage of exit criteria between phases is to ensure quality in\/quality out. For example , if a user story doesn\'t have clear and complete acceptance criteria and development work has begun, this may need to be reworked or tossed out. If code doesn\'t have passing unit tests and someone tries to manually test it , it will fail on them for simplistic reasons and you have just made one of your teammates into a very unhappy human compiler. If the team approves a feature for review by a product owner and it\'s functionality fails when they try it, what message does that send about the quality of the work of the team? Is that respectful of the product owners time whose role is more about whether it\'s the right software, not whether it works right. Doneness levels are important to keep to at all phases, even if the cycle time is one week, one day or one hour.",
        "pssbAnwId":2
    },
    {
        "loc_id":113,
        "title":"Team has an agreed to set of coding standards that are enforced.",
        "htext":"Standardization is the key to a cohesive and smooth operation. Does your Team have a \"coding handbook\" or other such organizing device that keeps them in a common coding practice? Even better, do they share a common configuration file for their code checker that enforces these standards?",
        "binary": true
    },
    {
        "loc_id":114,
        "title":"Anyone on the team can check out and change code.",
        "htext":"Coding is a group effort, not a solitary endeavor. All code is therefore community property and should be accessible by all. An anti-pattern is that some teams restrict permission to change portions of the code to certain individuals.",
        "binary": true
    },
    {
        "loc_id":115,
        "title":"Individual developers do not 'own' parts of the application.",
        "htext":"While there are certainly experts in different areas of the code base, there is no one person that has the sole responsibility for any section of code. The anti-pattern here is where teams or organizations assign \"owners\" to files, modules or parts of the application. The owner's role may vary from \"they are the only one allowed to make changes\" to \"they are responsible for the final review for all changes in that area\".",
        "binary": true
    },
    {
        "loc_id":116,
        "title":"Team members feel free to refactor code as needed.",
        "htext":"The team is constantly focused on improving the code. Another way to put this is that when you commit the code, it is in better shape than when you checked it out. This requires a very strong set of Unit and Regression tests to support constant refactoring.",
        "pssbAnwId":1
    },
    {
        "loc_id":117,
        "title":"Team 'swarms' to fix defects no matter where the responsibility may lie.",
        "htext":"This is about \"All Hands on Deck\" -- EVERY Member being willing and able to allocate time to fix defects. This also about a focusing first on truly fixing the problem and not finding who is to blame and also the \"not our problem\" mentality. The team does not have the view that \"the defect is in the XXX area, so it is ____\'s responsibility\" or \"This is defect is assigned to ____ so they are the only one working on it.\"",
        "pssbAnwId":2
    },
    {
        "loc_id":118,
        "title":"Team insures that a common 'system metaphor' is applied to keep the code consistent.",
        "htext":"\"The system metaphor is a story that everyone – customers, programmers, and managers - can tell about how the system works.\" Kent Beck For example: naive, assembly line, chalkboard, subcontracting, and workflow. Each Team Member should be familiar with the systems metaphor.",
        "pssbAnwId":2
    },
    {
        "loc_id":119,
        "title":"Developers commit all new code by the end of each pairing session.",
        "htext":"This supports: integrate early, integrate often and shared code ownership patterns",
        "pssbAnwId":2
    },
    {
        "loc_id":120,
        "title":"Developers commit new code after each test cycle refactoring.",
        "htext":"This supports: integrate early, integrate often and shared code ownership patterns",
        "pssbAnwId":2
    },
    {
        "loc_id":121,
        "title":"Developers commit all new code by the end of the day.",
        "htext":"This supports: integrate early, integrate often and shared code ownership patterns",
        "binary": true
    },
    {
        "loc_id":122,
        "title":"Developers commit multiple times during each pairing session.",
        "htext":"This supports: integrate early, integrate often and shared code ownership patterns",
        "pssbAnwId":2
    },
    {
        "loc_id":123,
        "title":"Team members change pair partners frequently.",
        "htext":"One example would be to participate in each pair at least once a day. i.e. 8 Team members making 4 pairs and allowing for 2 X 45 minute sessions each pair. Infrequently would mean team members stick with the same 1 or 2 partners all day, every day.",
        "pssbAnwId":1
    },
    {
        "loc_id":124,
        "title":"Product Owner works with team members to share domain knowledge.",
        "htext":"The Product Owner is the gateway to the business logic. They must be accessible to the Team on high frequency to give knowledge transfer and clarify answers to the Teams questions. Team members speak the domain language easily.",
        "pssbAnwId":2
    },
    {
        "loc_id":125,
        "title":"Any member of the team may work on any part of the application.",
        "htext":"In a spirit of cross-functionalism, every Team member is permitted to work on any piece of code or defect.",
        "pssbAnwId":1
    },
    {
        "loc_id":126,
        "title":"Team performs dynamic code review by sharing coding tasks as pairs.",
        "htext":"During the pairing process, one half the pair is always looking at code quality and strategy.",
        "pssbAnwId":2
    },
    {
        "loc_id":127,
        "title":"The pair frequently inspects and adapts to the results of their work.",
        "htext":"Instead of plowing ahead fast and blind, the pair will adjust based on the success or failure of their efforts. This includes coding as well as ergonomics and hygiene.",
        "pssbAnwId":1
    },
    {
        "loc_id":128,
        "title":"Team members negotiate Pair Partners at the Daily Standup.",
        "htext":"Each programmer has a speciality subset to share with their peers and knowledge exchange can take place in a myriad of mashups. Does your team harness this principle and rotate or otherwise exchange partners during the standup. Sounds like: \" Joe, I\'ll work with you this morning on the Backbone task since I\'m familiar with that and you can show me how it fits into the progress display work you've done then I can work with you, Sam, on the cart. \"",
        "binary": true
    },
    {
        "loc_id":129,
        "title":"Team uses pair programming.",
        "htext":"This looks like 2 team members working side-by-side on the same task, usually sharing a keyboard, pc or mac looking at dual monitors.",
        "binary": true
    },
    {
        "loc_id":130,
        "title":"Team offers support to other team members when 'blocks' occur.",
        "htext":"Individual progress becomes a non-sequitur on truly collaborative teams. This means folks will defer their own tasks to help others who are stuck. It is understood that the important things is to keep the flow of progress going throughout the team.",
        "pssbAnwId":2
    },
    {
        "loc_id":131,
        "title":"Team members value the pairing time and do not check email during pairing sessions.",
        "htext":"Pairing requires both party\'s intense focus. Even the person doing the reviewing should not be distracted.",
        "pssbAnwId":1
    },
    {
        "loc_id":132,
        "title":"Team members are visibly sitting together pairing during the day.",
        "htext":"The most obvious tell is physical proximity, yet virtual \'sitting together\' counts if they are desktop conferencing with a shared screen or app.",
        "pssbAnwId":2
    },
    {
        "loc_id":133,
        "title":"Team refactors code as needed to maintain agility.",
        "htext":"This can mean refactoring after every unit test or more involved refactorings when duplication of code grows or cyclomatic complexity reaches a certain point. They would need some code analysis tool like Sonar to give them feedback on this at the macro level",
        "pssbAnwId":2
    },
    {
        "loc_id":134,
        "title":"Team refactors code during iterations.",
        "htext":"What we are looking for here is a constant focus on incrementally improving the code. Unless it is a big and\/or risky effort, refactoring code happens in just about every iteration and with every User Story for that matter.",
        "pssbAnwId":2
    },
    {
        "loc_id":135,
        "title":"Team uses unit tests to verify working state of software when refactoring.",
        "htext":"Refactoring without unit tests is like handling high voltage lines without gloves",
        "pssbAnwId":2
    },
    {
        "loc_id":136,
        "title":"Team understands and employs OOAD best practices.",
        "htext":"Stands for Object Oriented Analysis and Design, they understand what class, state and behavior are about as related to the system\/domain model. They know how to read a UML diagram.",
        "binary": true
    },
    {
        "loc_id":137,
        "title":"Code is cohesive and loosely coupled.",
        "htext":"A highly cohesive class does one job well. Loosely coupled classes can be used independently of each other in a powerful and flexible manner. Spaghetti code where changing one thing requires changes everywhere else is the antithesis.",
        "binary": true
    },
    {
        "loc_id":138,
        "title":"Team studies design patterns.",
        "htext":"Teams that are studying design patterns will be talking about them and discussing what design patterns they are implementing in the product. Some examples of design patterns that you may hear discussed include: Factory, Lazy Instantiation, Singleton, Wrapper, Facade, Iterator, Mediator, Locking Object, Thread pool, etc.",
        "binary": true
    },
    {
        "loc_id":139,
        "title":"Team keeps the domain model at the center of discourse.",
        "htext":"Talk is not just about the algorithms or syntax sugar, but about how to build onto the shared mental model of the domain",
        "pssbAnwId":2
    },
    {
        "loc_id":140,
        "title":"Team conducts model storming sessions.",
        "htext":"When the domain is too small to fit the new stories then these sessions will spawn in a healthy team. Some may refer to the output of these session as an architectural roadmap.",
        "pssbAnwId":2
    },
    {
        "loc_id":141,
        "title":"Team uses appropriate modeling tools.",
        "htext":"Sometimes that is a UML tool, other times a Visio or Omnigraffle or Gliffy diagram or perhaps even whiteboards with snapshots for keeping. Beware of an individual or few members worrying over these diagrams for days at a time and sometimes getting upset at other team members from deviating from the model. On the flip side, look out for seat-of-the-pants flyers who just keep coding without a shared model. When it comes time to refactor they may not have the shared understanding a model would provide.",
        "pssbAnwId":2
    },
    {
        "loc_id":142,
        "title":"Design happens as a continuous activity concurrently with analysis.",
        "htext":"Analysis paralysis is an easy trap to fall into. Constant experimentation in pursuit of understanding with executing code is what to look for. Days of delay while someone puzzles over a technical challenge is what to look out for.",
        "binary": true
    },
    {
        "loc_id":143,
        "title":"Legacy code has unit tests that are actively maintained.",
        "htext":"To be fair, a consistent effort or even a rule to refactor and cover relevant parts or edges of legacy code with unit tests would be a \'yes\' to this question. Legacy code left unprotected will corrupt any new code. How do you know what it really does until you cover it with unit tests?",
        "binary": true
    },
    {
        "loc_id":144,
        "title":"Team tests primarily to prevent defects.",
        "htext":"Prevention beats fixing any day since you don\'t have to play needle in a haystack and the effort of fixing is saved. In practice this looks like Test Driven Development and Business Driven Development",
        "binary": true
    },
    {
        "loc_id":145,
        "title":"Team supports a stop the line mentality when automated tests fail.",
        "htext":"A team with this mentality places a top priority on quickly resolving and fixing issues when the suite of automated tests fail. If your tests aren\'t running and code changes are being made then defects will appear. You can spend the time now or later. Everyone is affected.",
        "binary": true
    },
    {
        "loc_id":147,
        "title":"Team uses an agile process management tool.",
        "htext":"Does your Team use a software management tool, like Rally, Version One, or Greenhopper?",
        "binary": true
    },
    {
        "loc_id":148,
        "title":"Team maintains a burndown chart during each iteration.",
        "htext":"On paper or in software, does your Team create and maintain a daily burndown chart? If this chart is updated less often than 3 times a week, then answer \"No\".",
        "binary": true
    },
    {
        "loc_id":149,
        "title":"Team shows scope changes in the project.",
        "htext":"Does your Team track and maintain scope changes throughout the life of the project? Are these scope changes visible on a tracking chart such as a Release Burn-up chart? Are scope changes updated and reflected in the Roadmap?",
        "binary": true
    },
    {
        "loc_id":150,
        "title":"Team makes metrics available to all project stakeholders.",
        "htext":"Does the Team have an \"information radiator\" that allows stakeholders to view/track progress? These can be a combination of physical charts or virtual in the tools or web pages.",
        "binary": true
    },
    {
        "loc_id":151,
        "title":"Team maintains a physical task board.",
        "htext":"Regardless of software, does your Team maintain a centrally located and dedicated physical task board?",
        "binary": true
    },
    {
        "loc_id":152,
        "title":"Team members feel free to raise roadblocks and ask for help.",
        "htext":"The Daily Stand-Up, while facilitated by the Scrum Master, is by and for the Team. Is the environment and everyone who attends understand that transparency is key. If team members are afraid of reporting the challenges for whatever reason, then roadblocks may not get raised soon enough.",
        "binary": true
    },
    {
        "loc_id":153,
        "title":"The Daily Standup is early in the day.",
        "htext":"First and foremost, the Daily Stand-up is for planning out the days activities. For this reason it should be held early enough to set expectations for the day\'s work. Is your Team holding their DSU before lunch?",
        "binary": true
    },
    {
        "loc_id":154,
        "title":"Daily standup meeting mandatory for all team members.",
        "htext":"Is EVERY Team member present and held accountable at the Daily Stand-Up? That being said, no one is immune to the unexpected things life throws at us (late trains, kids sick, etc.) If a team member cannot be there in person, they can dial in or send their update to another team member or the Scrum Master.",
        "pssbAnwId":2
    },
    {
        "loc_id":155,
        "title":"The Team meets daily for a stand-up meeting.",
        "htext":"As the name implies, a DAILY Stand­-Up is to be held during each workday so that the Team can effectively position themselves in a place to react in a timely manner. Are your Team\'s DSU held Daily? ",
        "binary": true
    },
    {
        "loc_id":156,
        "title":"Off topic conversations are deferred.",
        "htext":"Do you \"parking lot\" or save for later those discussion items that are off-topic? The Scrum Master should be the main facilitator to identify these items, and document the parking lot items and then facilitate the discussion, preferably right after the conclusion of the DSU.",
        "pssbAnwId":2
    },
    {
        "loc_id":157,
        "title":"Each team member addresses 'Yesterday, Today, Roadblocks'.",
        "htext":"The 3 Pillars of the Daily Scrum: \"What did you accomplish yesterday related to the sprint goal? What are you to accomplish today related to the sprint goal? What roadblocks are you encountering?\" would be addressed by each Team member.",
        "pssbAnwId":2
    },
    {
        "loc_id":158,
        "title":"Only team members talk at the meeting.",
        "htext":"Daily Stand-Ups are held by the Team and for the Team. The Scrum Master should protect the daily stand-up from intrusions and discourses by engineering managers, project managers and other observers.",
        "pssbAnwId":2
    },
    {
        "loc_id":159,
        "title":"The meeting lasts 15 minutes or less.",
        "htext":"Hard Fact: Daily Stand-Ups are to take no more than 15 minutes. Do you meet or beat this time limit?",
        "pssbAnwId":2
    },
    {
        "loc_id":160,
        "title":"Team members report the remaining effort for their story.",
        "htext":"In addition to the 3 pillars, each Team member, for EACH task, should report how much effort is remaining in that task. Is this happening in your Team? \n\nIt is important to observe that they are giving accurate and updated estimates based on what they have done so far. This should not be calculated based on how much time was estimated and how much time they have spent on it.",
        "pssbAnwId":2
    },
    {
        "loc_id":161,
        "title":"Team members report their daily status to other team members.",
        "htext":"The Daily Stand-Up is for the Team members to update their peers as to how work is progressing or is impeded. How often do they address each other rather than the Scrum Master? One sign of this is how much is the Scrum Master talking and acknowledging things during the DSU?",
        "pssbAnwId":2
    },
    {
        "loc_id":162,
        "title":"Daily standup meeting is brief and on track.",
        "htext":"Regardless of how long the DSU takes, are the updates succinct and informative to the rest of the team. If they are they are usually less than 15 minutes, but occasionally will take a few minutes more.",
        "pssbAnwId":2
    },
    {
        "loc_id":163,
        "title":"Team uses information radiators or 'Big Visible Charts'.",
        "htext":"Information such as the Vision Statement, Release Plan, and Burn Down Chart should be accessible in a prominent and well positioned place so that the Teams goals and work product can be demonstrated. Does your Team prominently display these attributes?",
        "binary": true
    },
    {
        "loc_id":164,
        "title":"Team tracks iteration progress each day on a story board.",
        "htext":"Keeping track of your iteration\'s progress is a key to transparency. Does your Team maintain a story board each day? This can be conveyed on the same board as Task board or a different board.",
        "binary": true
    },
    {
        "loc_id":165,
        "title":"Team tracks daily progress on a task board.",
        "htext":"To-Do, In-Progress, and Done are common entries on a task board, whose use facilitates the daily progress of the Team. Be it on a physical wall or in a computer software program, is your Team tracking their progress, and updating it, on a daily basis?",
        "binary": true
    },
    {
        "loc_id":166,
        "title":"Only Committed Iteration Backlog Items are worked on by the team.",
        "htext":"The Team should ONLY be working on those tasks that are assigned to them and were committed to by them in their \"contract\" with the Product Owner. \n\nThe only exception is critical bug fixes that the team agrees to work on.",
        "pssbAnwId":2
    },
    {
        "loc_id":167,
        "title":"The Iteration Manager ensures the integrity of the containment field around the team.",
        "htext":"It is the duty of the iteration manager to ensure that the Team is kept on point and with no distractions from outside sources while the Team is in a committed iteration. \n\nTeam members should report to the iteration manager (either in Daily Stand-up or personally) if they are being interrupted from their commitment.",
        "pssbAnwId":2
    },
    {
        "loc_id":168,
        "title":"The Team feels they have complete control over their ability to meet the Iteration Commitment.",
        "htext":"Working with each other, the iteration manager, and the Product Owner, each Team member has the power and authority to ask relentlessly and act critically on behalf of the Team in obtaining their set goals.",
        "pssbAnwId":2
    },
    {
        "loc_id":169,
        "title":"The Team sees achieving the Iteration Commitment as the highest priority each and every day.",
        "htext":"As part and parcel to every Team function, the highest goal is to meet or beat the iteration\'s goals on a daily basis. Active participation in the Daily Stand Up and close adhesion to the Daily Burn Down chart will help them adhere to this goal.",
        "pssbAnwId":2
    },
    {
        "loc_id":170,
        "title":"There is no interference of the team as they work to achieve the Iteration Commitment.",
        "htext":"EVERY Team member should be 100% committed to completing their designated work in a timely and committed manner. Outside interferences are kept to a minimum or thwarted entirely by close supervision of the iteration manager.",
        "pssbAnwId":1
    },
    {
        "loc_id":171,
        "title":"Team celebrates their accomplishments on a regular basis.",
        "htext":"All work and no play makes work a dull bore. Teams should have moments at work, such as lunches, or time away from work, such as after work dinner parties, to alleviate the stress of work, to bond as a team, and to celebrate their accomplishments. It can be as simple as bring in some goodies to Planning, Demo, or Retrospective meetings as well.",
        "pssbAnwId":2
    },
    {
        "loc_id":172,
        "title":"Software demonstrated to satisfy the customer's expectations.",
        "htext":"A core tenant of Agile is to Adapt and Inspect. Demonstrating the working components of a teams\'s efforts (Inspect) is a satisfying portion of the journey. The inspection of the software \/ system should involve the customer stakeholders and trigger a healthy discussion of of the system.",
        "pssbAnwId":2
    },
    {
        "loc_id":173,
        "title":"Iteration review facilitated by the cross functional team.",
        "htext":"During the review process, it is important that the team member that worked on the product display it to the customer which enables more concise answers to the customers questions.",
        "pssbAnwId":2
    },
    {
        "loc_id":174,
        "title":"Functioning software shown at the demo.",
        "htext":"The demo should not be power point slides or mocked up screens. It should be the actual product running in as close a production like environment as possible. If it is based on functioning software, there should not be a lot of time going into preparing for the demo, except to install\/update the environment.",
        "binary": true
    },
    {
        "loc_id":175,
        "title":"Team uses 'five whys' approach to understand root causes.",
        "htext":"This is about asking why five times in succession to delve deeper into the systemic forces contributing to an undesired outcome. Not at all about who\'s at fault but rather an attempt at prevention. For instance, in a workplace accident a worker fell from a trellis into a lemon tree and got severely cut up by the spikes in the tree. \n 1. Why did he fall? - He was working high off the ground and stepped on a board that was not nailed down \n 2. Why was he working off the ground? - The customer was afraid he would not solder the pipe correctly from the ground \n 3. Why was the board not nailed down? - His partner thought it would be too much trouble to nail down the boards since they would have to be moved around often as the solar panel was being installed \n 4. Why did the worker step on a board that was not nailed down? - He wasn\'t paying attention since the customer was talking to him, he had a bad stomach ache that was distracting him, - The game was blasting on the radio also distracting him \n 5. Why were there so many distracting elements and none of this corrected? - The foreman was not on site since he had a personal beef with the customer, and was trying to make money at another customer site.",
        "binary": true
    },
    {
        "loc_id":176,
        "title":"Team seeks root cause understanding for schedule anomalies.",
        "htext":"An often overlooked technique, some just take it for granted as the slow turning wheels of bureaucracy or adopt a poverty mentality of \"we just aren\'t as high a priority\" Better signs are one of negotiation, wheeling and dealing for what's needed. Even delaying the beginning of another (or even your own) project until the key players are available when needed. Part of this has to do with understanding the natural cycle times of various activities. How long does it take to onboard someone on the team? When are scarce resources and talent available during the project? At what point are they needed? What happens if you only have a UI designer for 2 weeks in an 10 week schedule? Why is that? Can you get another one or extend his\/her commitment? \What is the critical chain of events to ensure delivery of features? Seeking out the root cause allows prevention and adjustment for optimizing ongoing work. It's also an opportunity to improve the policies and processes of the organization.",
        "pssbAnwId":2
    },
    {
        "loc_id":177,
        "title":"Team uses retrospective techniques to identify root causes for issues.",
        "htext":"Periodic inspection phases searching for ways to do things better inexorably improves effectiveness and morale. Who doesn\'t want to be effective?",
        "pssbAnwId":2
    },
    {
        "loc_id":178,
        "title":"Team speaks freely at the retrospectives.",
        "htext":"The Retrospective is Team time to air grievances and discuss what work, or didn\'t work, for the team as a unit. Every member is encourage to speak up and share. Is the retrospective meeting private to the team and\/or free from any influences that inhibit people speaking freely. If the team is speaking freely at the retrospective, you will see healthy conflict. The absence of healthy conflict indicates a lack of freedom.",
        "pssbAnwId":2
    },
    {
        "loc_id":179,
        "title":"Retrospective used to improve the process.",
        "htext":"The results of the Retrospective should be specific plan to change the process, the tools, the work environment, etc. of the team. These changes are experiments designed to improve the team\'s effectiveness. The results of these experiments will be evaluated in future retrospectives. Retrospectives that do not improve the process are a waste.",
        "pssbAnwId":2
    },
    {
        "loc_id":180,
        "title":"Team conducts retrospectives for every iteration.",
        "htext":"AFTER the iteration is completed, usually right after the Demo, the Team and iteration manager meet and discuss how things went. A common form of meeting is \"Stop, Start, Continue\". \n\nThe fact that it is held after each iteration is important as this allows the team to make small incremental adjustments to the process while still delivering value. If they held these say once a quarter, then naturally the changes to the process could be very disruptive and actually slow down progress.",
        "pssbAnwId":2
    },
    {
        "loc_id":181,
        "title":"Team learns to listen to others at the retrospective.",
        "htext":"This is Team Time to create lessons learned and share pain points as well as success. Sharing openly can only increase Team productivity. The team should be learning techniques in active and effective listening to be improving this skill in their retrospectives.",
        "pssbAnwId":2
    },
    {
        "loc_id":182,
        "title":"Retrospective focused on team rather than individual issues.",
        "htext":"Retrospectives are held by the Team (private) and for the Teams benefit. The Retrospective is focused on issues of team effectiveness. In that focus, sometimes the team will address issues involving only 1 or a couple of individuals, but in addressing those issues, the driver is making the team more effective. The important thing in these cases is to tackle the problem and not attach the person.",
        "pssbAnwId":2
    },
    {
        "loc_id":183,
        "title":"The Iteration Burndown graph is prominently displayed.",
        "htext":"The burndown chart will display how things are progressing in the current sprint. In some cases it is an up the minute status that conveys if the team is ahead or behind in meeting their sprint goals. With it prominently displayed, everyone is aware of the status without interrupting the team.",
        "binary": true
    },
    {
        "loc_id":184,
        "title":"The Impediments List is prominently displayed.",
        "htext":"The impediments list is cultivated from the Daily Stand-Ups, Retrospectives and conversations betwixt the Scrum Master and the Team. It contains any roadblocks that are (or were) encountered and their resolution. Is this list included in your information radiator or software portal?",
        "binary": true
    },
    {
        "loc_id":185,
        "title":"The output of the Iteration Retrospective is displayed.",
        "htext":"Retrospectives hold much information about team performance and ways to improve them. Displaying the notes as a reminder to what has transpired can help others navigate their way through the Agile waters. Is this document included in your information radiator or software portal?\n\nThis kind of transparency instills trust that the team is doing all they can to improve themselves, which will result in higher velocity and improved quality.",
        "binary": true
    },
    {
        "loc_id":186,
        "title":"The Product Increment is demoed at the end of the Iteration.",
        "htext":"An important milestone in the inspect and adapt cycle, they are the embodiment of the principal \"the primary measure of progress is working software\". They should clearly show the functionality that is working and trigger discussion around the next pieces needed in the product.",
        "pssbAnwId":2
    },
    {
        "loc_id":187,
        "title":"Stakeholders attending the Daily Standup do not influence the information given by the team.",
        "htext":"We want the DSU to be open to all, but visitors need to respect that this is a team meeting. When guests attend the meeting do they try to influence the information provided either verbally or with their body language.",
        "pssbAnwId":2
    },
    {
        "loc_id":188,
        "title":"Transparency is a value that is understood by management.",
        "htext":"When bad things happen in or outside the team or sprint goals missed, the organization accepts it, inspects it and allows others to learn from it. The knowledge is celebrated rather than punished.",
        "pssbAnwId":2
    },
    {
        "loc_id":189,
        "title":"Team determines acceptance criteria for each user story.",
        "htext":"The team here includes the Product Owner. Together they determine the acceptance criteria in the backlog refinement session and the iteration planning session. The key factors here are that the team is actively involved in setting the acceptance criteria and that the acceptance criteria are clear and specific.",
        "pssbAnwId":2
    },
    {
        "loc_id":190,
        "title":"Acceptance tests for all user stories defined.",
        "htext":"Team should not be implementing anything that doesn\'t have an acceptance criteria. As the team omits to each user story, they will define acceptance tests to confirm the acceptance criteria. Extra points if these are all automated as in BDD.",
        "pssbAnwId":2
    },
    {
        "loc_id":191,
        "title":"System is fully regression certified in less than an iteration cycle.",
        "htext":"The accumulation of regression tests needs to be run every iteration to ensure continual functionality of prior features. This requires a suite of automated tests and a repeatable, well observed process for manual testing when they are necessary.",
        "pssbAnwId":2
    },
    {
        "loc_id":192,
        "title":"The customer accepts a story based on the acceptance test state at the end of the iteration.",
        "htext":"When the Acceptance test follow the Acceptance Criteria it makes it easy for the customer or customer representative to accept the Story as functionally complete. One thing to look out for here is if the customer does not accept a story even though all the acceptance tests pass. This indicates that the acceptance criteria was not captured correctly. Another sign is if the customer does not review the acceptance criteria\/test before accepting the story.",
        "pssbAnwId":2
    },
    {
        "loc_id":193,
        "title":"Tests are developed with the customer's interaction.",
        "htext":"The customer or the customer representative should be involved in defining the acceptance tests.",
        "pssbAnwId":2
    },
    {
        "loc_id":194,
        "title":"Tests are written in a language that the customer understands.",
        "htext":"The telling sign here is if they are written from the perspective of the user\'s interactions with the system. The result will be what is expected after performing that interaction. If they are written in the technical domain language, there is no assurance that it will functionally do the right thing for the user.",
        "binary": true
    },
    {
        "loc_id":195,
        "title":"Common programming errors and typical 'corner cases' are used to identify tests.",
        "htext":"1\'s 0\'s, high numbers, negative numbers, text in numerical and vice versa are classic marks of these kinds of tests.",
        "pssbAnwId":2
    },
    {
        "loc_id":196,
        "title":"Destructive testing is performed to remove defects.",
        "htext":"This could take the form of opening 100 tabs in a browser until it runs out of memory or doing simultaneous full table searches to overload the database or hitting a server with load. If you don\'t do it in testing it will happen in the wild where your customers will be disturbed and tell nasty stories about your product.",
        "pssbAnwId":2
    },
    {
        "loc_id":197,
        "title":"Team uses ad-hoc or exploratory testing.",
        "htext":"Session based testing is one form this can take, or pizza party sessions focused on various areas of the product. Always fruitful since they delve into the unplanned interstices between the product features. The team will take the time to test in this way frequently to ensure a solid product.",
        "pssbAnwId":2
    },
    {
        "loc_id":198,
        "title":"Cyclometric complexity used with unit test coverage to increase test coverage.",
        "htext":"Automated tools are available to calculate the cyclomatic complexity of the code. Teams should be examining this data regularly and have a healthy interest in refactoring of those areas with high cyclomatic complexity, adding unit tests to the refactored elements.",
        "binary": true
    },
    {
        "loc_id":199,
        "title":"Optimization done off of hard data as the result of profiling.",
        "htext":"This solves the dilemma of premature optimization by using real data instead of relying on flawed intuition. Run the performance test after a discrete change. If it improves keep it, if not change it, repeat until it achieves the performance level that your acceptance criteria demands, then stop and do something else that\’s high priority.",
        "binary": true
    },
    {
        "loc_id":200,
        "title":"Empirical performance measurements are used to identify areas for optimization.",
        "htext":"In the best cases, applications are wired to produce metrics that are highly visible or easily analyzed. Team members and stakeholders pay attention to these metrics, tie them to business goals , prioritize them, then go after them.",
        "binary": true
    },
    {
        "loc_id":201,
        "title":"Acceptance tests execute as part of the build process.",
        "htext":"Smoke tests are a common example. Some will be slow running and some will be fast running. Your build server would be configured to automatically run selected suites of tests to ensure existing and new functionality works at every build.",
        "binary": true
    },
    {
        "loc_id":202,
        "title":"Unit tests execute as part of the build process.",
        "htext":"All unit tests need to be run at every build to ensure software integrity. The build server should automatically run these.",
        "binary": true
    },
    {
        "loc_id":203,
        "title":"Details of test results are readily available.",
        "htext":"If not already provided for in an automated test environment and available via a software package, all detailed test results should be readily available for inspection either on screen or in a printout. Does your Team have this capability?",
        "binary": true
    },
    {
        "loc_id":204,
        "title":"Status of test results are highly visible.",
        "htext":"Testing does not work well in a vacuum. Does your Team share the results in your information radiator or software portal? Ignored tests do not get fixed. Broken functionality hides other problems. Reference the \’Broken Windows Theory'",
        "binary": true
    },
    {
        "loc_id":205,
        "title":"Tests written before the code that implements the tests.",
        "htext":"This is also called intentional coding or coding by example. Each test is a hypothesis of what you want to happen. The code proves that this intent or hypothesis is possible and completed",
        "pssbAnwId":2
    },
    {
        "loc_id":206,
        "title":"Test-driven development is applied by members of the team.",
        "htext":"TDD Coding behavior looks something like this: In support of building a feature, based on a user story, Write a Test,Run the test which will fail since the functionality does not exists, Implement Code to Pass the test which may require Integration and Refactoring, Repeat. Some just say Red, Green, Refactor after Xunit tools which indicate failed or passed tests by color. Look for use of these tools.",
        "pssbAnwId":2
    },
    {
        "loc_id":207,
        "title":"Tests are written to prevent the defects from re-appearing.",
        "htext":"A defect fix is coding like any other and needs to have unit test coverage. A functionality test to ensure the defect stays fixed may also be needed if the defect is not at the unit level.",
        "pssbAnwId":2
    },
    {
        "loc_id":208,
        "title":"Unit tests are executed before the code is checked into the code repository.",
        "htext":"Without running unit tests before checking into the repository, when the build is run, which hopefully is either continuous or frequent, then the code will fail, breaking the build and stopping everyone's progress. This enforces the understanding that the sooner a defect is found the easier and less expensive it is to fix. Good practice is to have all necessary unit tests on the local developer's machine available to run at either every change in code or required to pass locally before check-in.",
        "binary": true
    },
    {
        "loc_id":209,
        "title":"Unit tests are defined for modules and components.",
        "htext":"These module and component tests may also be called integration or layer tests. The core idea of this testing is ensuring the integrity of the part to the whole of the system. In some contexts, a module may be equal to a package. Components may also be a technology layer or utility. A key aspect of these tests is to test the interfaces and ensure that the modules and components are stabilized.",
        "pssbAnwId":2
    },
    {
        "loc_id":210,
        "title":"Unit tests are written for all public methods of all public classes.",
        "htext":"If there are no passing unit tests, how do you know the code does what you intended? Total coverage ensures intent. If the methods are public, who knows what other coders will do with them? Insure against unintended consequences.",
        "pssbAnwId":2
    },
    {
        "loc_id":211,
        "title":"Acceptance tests are executed automatically after compilation.",
        "htext":"Tools in use might be Cucumber, JBehave, RSpec, Cuke4Duke, Fit\/Fitnesse. This will ensure behavior of the features after the latest changes. They will need to have a separate instance\/environment\/VM to run undisturbed. Is this happening?",
        "binary": true
    },
    {
        "loc_id":212,
        "title":"Application binaries are compiled using a build script such as Ant or Maven.",
        "htext":"Fundamental to configuration\/dependency management. These are the muscles of the process. Is a build script in use?",
        "binary": true
    },
    {
        "loc_id":213,
        "title":"Production deployment packaging occurs during the build process.",
        "htext":"If they have to build the software again to deploy it into production, then previous testing is null and void. The same package should be used to deploy to all environments, no exceptions.",
        "binary": true
    },
    {
        "loc_id":214,
        "title":"Quality metrics are generated during the build process including code coverage and coding standards.",
        "htext":"Tools like Sonar can make this big and visible. These metrics provide great talking points for code review and insight into where and how to pay off technical debt. Do you have metrics automatically generated?",
        "binary": true
    },
    {
        "loc_id":215,
        "title":"Unit tests are executed automatically after compilation.",
        "htext":"For something so frequently and consistently needed automation is perfect. This is valuable, atomic feedback that just needs to be there constantly without effort. Do unit tests run after compiling?",
        "binary": true
    },
    {
        "loc_id":216,
        "title":"Code checked in and integrated at least daily.",
        "htext":"The lean principle of reducing batch size applies here. Also, how much collaboration can happen until the new code is shared. When code is shared constantly then peer training happens fastest. This is not continuous integration if code isn\’t checked in frequently. Is you code checked in and integrated at least daily?",
        "binary": true
    },
    {
        "loc_id":217,
        "title":"Team uses a continuous integration server.",
        "htext":"Use of continuous integration and tools like Jenkins, Hudson, or Thoughtwork\’s Go. Is new code run and tested immediately upon checkin with a CI server?",
        "binary": true
    },
    {
        "loc_id":218,
        "title":"Continuous integration used to validate the build.",
        "htext":"Compiling with unit tests running at every checkin?",
        "binary": true
    },
    {
        "loc_id":219,
        "title":"Team has the concept of completed in development and accepted by Product Owner.",
        "htext":"This needs to be one of the first things the team agrees on with the product owner and will typically be revisited at each retrospective for the first several sprints. The idea is one of transparency and integrity as the foundation of predictability. Stakeholders and team members alike need to know when they can ship and when they can move on to the next feature or set of problems. Does the team understand the all agreed to levels of done?",
        "binary": true
    },
    {
        "loc_id":220,
        "title":"Automated acceptance tests used to maintain Done-Done.",
        "htext":"Tools in use might be Cucumber, JBehave, RSpec, Cuke4Duke, Fit\/Fitnesse, Documentation in the form of examples become your tests. Are they run frequently if not at every change on code and do they have a separate instance\/environment\/VM to run undisturbed?",
        "binary": true
    },
    {
        "loc_id":221,
        "title":"Executable requirements used to define Done-Done.",
        "htext":"There are various tools for capturing and running executable requirements. These include FitNess, Cucumber, StoryTeller, JBehave, etc. Does the team implement and use executable requirements as part of their definition of Done. If it is part of the definition, does the team consistently meet their definition of done?",
        "binary": true
    },
    {
        "loc_id":222,
        "title":"There is an automated process for creating deployment packages.",
        "htext":"Having to do this manually is not only a source for error, it distracts brilliant human talent that could be coding new features or resolving bugs on a mundane task. This is a great place to reduce the end to end cycle time for greater learning and adaptability. How fast can the team deploy to multiple environments? Is deployment automated?",
        "binary": true
    },
    {
        "loc_id":223,
        "title":"The Deployment Package is used in the Integration Environment.",
        "htext":"The sooner you go through the dry run of going live the sooner you discover and fix related problems. Is the deployment package delivered to the integration environment and used to setup \/ upgrade that environment?",
        "binary": true
    },
    {
        "loc_id":224,
        "title":"The Deployment Package is used in the Staging Environment.",
        "htext":"The sooner you go through the dry run of going live the sooner you discover and fix related problems. This is also the last chance to discover potential production mishaps. Is the deployment package delivered to the staging environment and used to setup \/ upgrade that environment?",
        "binary": true
    },
    {
        "loc_id":225,
        "title":"Documentation demonstrated at demo day.",
        "htext":"User stories that are completed should include updates to documentation - this may be customer documentation, it may be design notes. Any customer or end-user documentation associated with the functionality being demonstrated should also be visible and demonstrated during the iteration review. \n\nWhen this is done, the team demonstrates that they are doing EVERYTHING needed to deliver the value to the customer as fast as possible.",
        "pssbAnwId":2
    },
    {
        "loc_id":226,
        "title":"Documentation members part of the cross functional team.",
        "htext":"Included in your Team make-up should be documentation expertise. This can be by way of one of your dedicated Team members or a cross-functionality skill that developers have. Does your Team have this capability?",
        "binary": true
    },
    {
        "loc_id":227,
        "title":"Documentation done incrementally.",
        "htext":"Do the design documents match the code that is being written? How often is your documentation updated? \n\nThe team should avoid letting the documentation changes pile up to the point that it is not useful. Teams should be able to demonstrate the accuracy of all documentation at the end of each and every sprint.",
        "pssbAnwId":2
    },
    {
        "loc_id":228,
        "title":"Automated builds are used to validate code changes.",
        "htext":"This implies continuous integration and tools like Jenkins, Hudson, or Thoughtwork\’s Go. It also implies at least unit testing if not TDD. How will the system validate the code beyond mere syntax\/compile checks without tests in place and ready to run at Check-in? Does the build system automatically validate code?",
        "binary": true
    },
    {
        "loc_id":229,
        "title":"Team builds and unit tests in less than 10 minutes.",
        "htext":"Ten minutes is on the outside of that short-memory buffer duration and the longest practical learning curve cycle time for rapid experimentation. Plan: write the test and code Do: run it. Act: IF it passes go the next thing. If it fails, fix it. How long does your team have to wait for the most elemental feedback? How willing are they to try something that fails? Finally, does your build run in less than 10 minutes? \n\nWith large enterprise systems, this does not mean that this entire system needs to be build and tested in 10 minutes. Any large system should be broken down into smaller, well defined components that work in the system. Each component should follow this guideline. If well defined test cases validate all boundaries of the component, there should be a high degree of confidence that component will work in the system.",
        "binary": true
    },
    {
        "loc_id":230,
        "title":"Unit tests are run and pass before code is committed into the repository.",
        "htext":"To not break the build on every checkin, developers need to test locally enough that the impact of the changes they are making can be known. How often do developers run unit tests locally before committing code to the repository?",
        "pssbAnwId":2
    },
    {
        "loc_id":231,
        "title":"Configuration Management process exists for branching and merging code.",
        "htext":"This could include using tools like Perforce, SVN, Github. For this to be a yes, the team also needs to have a consistent documented and followed procedure for branching and merging.",
        "binary": true
    },
    {
        "loc_id":232,
        "title":"All code is stored in a common versioning repository.",
        "htext":"Tests, Code and Users need to all be on the same page. One symptom of versioning issues is a sudden failing of formerly, long term running tests, then when those tests are updated, they fail on the existing production release. Another good sign: version numbers in bug reports. Does the team use a common versioning repo?",
        "binary": true
    },
    {
        "loc_id":233,
        "title":"Team uses a Configuration Management system.",
        "htext":"Tools in use could include Puppet, Chef, Perforce, Accurev, StarTeam, Clearcase, Team Foundation Server. Look for a run-book or operating manual everyone follows.",
        "binary": true
    },
    {
        "loc_id":234,
        "title":"Check-out uses opportunistic locking, rather than exclusive locking.",
        "htext":"Exclusive locking on checkout will prevent other coders from modifying that file until it is checked back in. This thwarts shared code ownership. Better to use opportunistic locking which lets the same file be updated concurrently by many. The team must also have strong coordination skill to accomplish this.",
        "binary": true
    },
    {
        "loc_id":235,
        "title":"Team members have access to the source code repository.",
        "htext":"Ideally access is granted on or before the first day of work.",
        "binary": true
    },
    {
        "loc_id":236,
        "title":"Developers work out of the trunk rather than independent branches.",
        "htext":"There is no value-added in a time consuming, risk prone merge process. Branches defer integration into the whole system where valuable features will live. They are a source of confusion and defer problem discovery.",
        "pssbAnwId":2
    },
    {
        "loc_id":237,
        "title":"Defects and User Stories are listed, prioritized, and tracked in one consolidated list.",
        "htext":"There are no defects, just unfinished features. If there are two lists or sources of prioritized work, telling which one is ranked first or second can be a source of confusion and dispute.",
        "binary": true
    },
    {
        "loc_id":238,
        "title":"Team 'stops the line' when a regression test breaks.",
        "htext":"With a proper CI system, the build will break when a regression test fails. What happens next is telling. Sometimes a team will arbitrarily comment out that test with excuses.",
        "binary": true
    },
    {
        "loc_id":239,
        "title":"Team insures that all tests are working all the time.",
        "htext":"Tests ought to be first class objects since they give immediate feedback on health of the system, just like a nurse or doctor.",
        "binary": true
    }
];

}
})();










































